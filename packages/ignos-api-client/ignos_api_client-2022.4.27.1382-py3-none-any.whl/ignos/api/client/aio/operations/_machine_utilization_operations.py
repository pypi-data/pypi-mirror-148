# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, Callable, Dict, List, Optional, TypeVar

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._machine_utilization_operations import build_get_machine_utilizations_request, build_get_utilization_data_point_for_machine_request, build_get_utilization_details_for_machine_request
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class MachineUtilizationOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~ignos.api.client.aio.IgnosPortal`'s
        :attr:`machine_utilization` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @distributed_trace_async
    async def get_machine_utilizations(
        self,
        asset_id: Optional[int] = None,
        favorites: Optional[bool] = False,
        **kwargs: Any
    ) -> _models.UtilizationDto:
        """get_machine_utilizations.

        :param asset_id:  Default value is None.
        :type asset_id: long
        :param favorites:  Default value is False.
        :type favorites: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: UtilizationDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.UtilizationDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.UtilizationDto]

        
        request = build_get_machine_utilizations_request(
            asset_id=asset_id,
            favorites=favorites,
            template_url=self.get_machine_utilizations.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('UtilizationDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_machine_utilizations.metadata = {'url': "/machineutilization"}  # type: ignore


    @distributed_trace_async
    async def get_utilization_data_point_for_machine(
        self,
        id: int,
        start_time: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> List[_models.NumericDataPointDto]:
        """get_utilization_data_point_for_machine.

        :param id:
        :type id: long
        :param start_time:  Default value is None.
        :type start_time: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of NumericDataPointDto, or the result of cls(response)
        :rtype: list[~ignos.api.client.models.NumericDataPointDto]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[List[_models.NumericDataPointDto]]

        
        request = build_get_utilization_data_point_for_machine_request(
            id=id,
            start_time=start_time,
            template_url=self.get_utilization_data_point_for_machine.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[NumericDataPointDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_utilization_data_point_for_machine.metadata = {'url': "/machineutilization/{id}/utilizationdatapoints"}  # type: ignore


    @distributed_trace_async
    async def get_utilization_details_for_machine(
        self,
        id: int,
        start_time: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> _models.UtilizationDetailsDto:
        """get_utilization_details_for_machine.

        :param id:
        :type id: long
        :param start_time:  Default value is None.
        :type start_time: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: UtilizationDetailsDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.UtilizationDetailsDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.UtilizationDetailsDto]

        
        request = build_get_utilization_details_for_machine_request(
            id=id,
            start_time=start_time,
            template_url=self.get_utilization_details_for_machine.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('UtilizationDetailsDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_utilization_details_for_machine.metadata = {'url': "/machineutilization/{id}/utilization"}  # type: ignore

