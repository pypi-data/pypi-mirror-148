# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Optional, TypeVar

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._measurement_form_schemas_operations import build_create_measurement_form_request, build_create_measurement_form_schema_link_request, build_create_schema_element_request, build_delete_imported_measurment_schemas_request, build_delete_measurement_form_schema_link_request, build_get_measurement_form_mapping_request, build_get_measurement_form_schema_request, build_get_measurement_form_settings_request, build_get_measurment_form_mapping_suggestion_request, build_import_measurement_form_schema_request, build_list_measurment_form_schemas_request, build_release_schema_request, build_revoke_schema_request, build_update_measurement_form_mapping_request, build_update_measurement_form_schema_request, build_update_measurement_form_settings_request, build_upload_schema_attachment_request
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class MeasurementFormSchemasOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~ignos.api.client.aio.IgnosPortal`'s
        :attr:`measurement_form_schemas` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @distributed_trace_async
    async def list_measurment_form_schemas(
        self,
        page_size: Optional[int] = 50,
        customer_id: Optional[str] = None,
        part_number: Optional[str] = None,
        part_revision: Optional[str] = None,
        drawing: Optional[str] = None,
        drawing_revision: Optional[str] = None,
        continuation_token_parameter: Optional[str] = None,
        **kwargs: Any
    ) -> _models.MeasurementFormDtoPagedResult:
        """list_measurment_form_schemas.

        :param page_size:  Default value is 50.
        :type page_size: int
        :param customer_id:  Default value is None.
        :type customer_id: str
        :param part_number:  Default value is None.
        :type part_number: str
        :param part_revision:  Default value is None.
        :type part_revision: str
        :param drawing:  Default value is None.
        :type drawing: str
        :param drawing_revision:  Default value is None.
        :type drawing_revision: str
        :param continuation_token_parameter:  Default value is None.
        :type continuation_token_parameter: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormDtoPagedResult, or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormDtoPagedResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormDtoPagedResult]

        
        request = build_list_measurment_form_schemas_request(
            page_size=page_size,
            customer_id=customer_id,
            part_number=part_number,
            part_revision=part_revision,
            drawing=drawing,
            drawing_revision=drawing_revision,
            continuation_token_parameter=continuation_token_parameter,
            template_url=self.list_measurment_form_schemas.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormDtoPagedResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_measurment_form_schemas.metadata = {'url': "/measurementforms/schemas"}  # type: ignore


    @distributed_trace_async
    async def create_measurement_form(
        self,
        body: Optional[_models.CreateMeasurementFormSchema] = None,
        *,
        content_type: Optional[str] = "application/json",
        **kwargs: Any
    ) -> _models.MeasurementFormDto:
        """create_measurement_form.

        :param body:  Default value is None.
        :type body: ~ignos.api.client.models.CreateMeasurementFormSchema
        :keyword content_type: Media type of the body sent to the API. Known values are:
         "application/json", "text/json", and "application/*+json". Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormDto]

        if body is not None:
            _json = self._serialize.body(body, 'CreateMeasurementFormSchema')
        else:
            _json = None

        request = build_create_measurement_form_request(
            content_type=content_type,
            json=_json,
            template_url=self.create_measurement_form.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_measurement_form.metadata = {'url': "/measurementforms/schemas"}  # type: ignore


    @distributed_trace_async
    async def get_measurement_form_schema(
        self,
        id: str,
        **kwargs: Any
    ) -> _models.MeasurementFormSchemaDto:
        """get_measurement_form_schema.

        :param id:
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSchemaDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSchemaDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormSchemaDto]

        
        request = build_get_measurement_form_schema_request(
            id=id,
            template_url=self.get_measurement_form_schema.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormSchemaDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_measurement_form_schema.metadata = {'url': "/measurementforms/schemas/{id}"}  # type: ignore


    @distributed_trace_async
    async def update_measurement_form_schema(
        self,
        id: str,
        body: Optional[_models.UpdateMeasurementFormSchemaRequest] = None,
        *,
        content_type: Optional[str] = "application/json",
        **kwargs: Any
    ) -> _models.MeasurementFormSchemaDto:
        """update_measurement_form_schema.

        :param id:
        :type id: str
        :param body:  Default value is None.
        :type body: ~ignos.api.client.models.UpdateMeasurementFormSchemaRequest
        :keyword content_type: Media type of the body sent to the API. Known values are:
         "application/json", "text/json", and "application/*+json". Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSchemaDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSchemaDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormSchemaDto]

        if body is not None:
            _json = self._serialize.body(body, 'UpdateMeasurementFormSchemaRequest')
        else:
            _json = None

        request = build_update_measurement_form_schema_request(
            id=id,
            content_type=content_type,
            json=_json,
            template_url=self.update_measurement_form_schema.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormSchemaDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update_measurement_form_schema.metadata = {'url': "/measurementforms/schemas/{id}"}  # type: ignore


    @distributed_trace_async
    async def upload_schema_attachment(
        self,
        id: str,
        body: Optional[_models.UploadRequest] = None,
        *,
        content_type: Optional[str] = "application/json",
        **kwargs: Any
    ) -> _models.MeasurementFormSchemaDto:
        """upload_schema_attachment.

        :param id:
        :type id: str
        :param body:  Default value is None.
        :type body: ~ignos.api.client.models.UploadRequest
        :keyword content_type: Media type of the body sent to the API. Known values are:
         "application/json", "text/json", and "application/*+json". Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSchemaDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSchemaDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormSchemaDto]

        if body is not None:
            _json = self._serialize.body(body, 'UploadRequest')
        else:
            _json = None

        request = build_upload_schema_attachment_request(
            id=id,
            content_type=content_type,
            json=_json,
            template_url=self.upload_schema_attachment.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormSchemaDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    upload_schema_attachment.metadata = {'url': "/measurementforms/schemas/{id}/uploadattachment"}  # type: ignore


    @distributed_trace_async
    async def create_schema_element(
        self,
        schema_id: str,
        body: Optional[_models.CreateSchemaElement] = None,
        *,
        content_type: Optional[str] = "application/json",
        **kwargs: Any
    ) -> _models.MeasurementFormElementDto:
        """create_schema_element.

        :param schema_id:
        :type schema_id: str
        :param body:  Default value is None.
        :type body: ~ignos.api.client.models.CreateSchemaElement
        :keyword content_type: Media type of the body sent to the API. Known values are:
         "application/json", "text/json", and "application/*+json". Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormElementDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormElementDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormElementDto]

        if body is not None:
            _json = self._serialize.body(body, 'CreateSchemaElement')
        else:
            _json = None

        request = build_create_schema_element_request(
            schema_id=schema_id,
            content_type=content_type,
            json=_json,
            template_url=self.create_schema_element.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormElementDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_schema_element.metadata = {'url': "/measurementforms/schemas/{schemaId}/elements"}  # type: ignore


    @distributed_trace_async
    async def create_measurement_form_schema_link(
        self,
        schema_id: str,
        body: Optional[_models.CreateMeasurementFormSchemaLinkRequest] = None,
        *,
        content_type: Optional[str] = "application/json",
        **kwargs: Any
    ) -> _models.MeasurementFormDto:
        """create_measurement_form_schema_link.

        :param schema_id:
        :type schema_id: str
        :param body:  Default value is None.
        :type body: ~ignos.api.client.models.CreateMeasurementFormSchemaLinkRequest
        :keyword content_type: Media type of the body sent to the API. Known values are:
         "application/json", "text/json", and "application/*+json". Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormDto]

        if body is not None:
            _json = self._serialize.body(body, 'CreateMeasurementFormSchemaLinkRequest')
        else:
            _json = None

        request = build_create_measurement_form_schema_link_request(
            schema_id=schema_id,
            content_type=content_type,
            json=_json,
            template_url=self.create_measurement_form_schema_link.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_measurement_form_schema_link.metadata = {'url': "/measurementforms/schemas/{schemaId}/link"}  # type: ignore


    @distributed_trace_async
    async def delete_measurement_form_schema_link(  # pylint: disable=inconsistent-return-statements
        self,
        schema_id: str,
        linked_schema_id: str,
        **kwargs: Any
    ) -> None:
        """delete_measurement_form_schema_link.

        :param schema_id:
        :type schema_id: str
        :param linked_schema_id:
        :type linked_schema_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_delete_measurement_form_schema_link_request(
            schema_id=schema_id,
            linked_schema_id=linked_schema_id,
            template_url=self.delete_measurement_form_schema_link.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_measurement_form_schema_link.metadata = {'url': "/measurementforms/schemas/{schemaId}/link/{linkedSchemaId}"}  # type: ignore


    @distributed_trace_async
    async def release_schema(
        self,
        schema_id: str,
        **kwargs: Any
    ) -> _models.MeasurementFormDto:
        """release_schema.

        :param schema_id:
        :type schema_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormDto]

        
        request = build_release_schema_request(
            schema_id=schema_id,
            template_url=self.release_schema.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    release_schema.metadata = {'url': "/measurementforms/schemas/{schemaId}/release"}  # type: ignore


    @distributed_trace_async
    async def revoke_schema(
        self,
        schema_id: str,
        **kwargs: Any
    ) -> _models.MeasurementFormDto:
        """revoke_schema.

        :param schema_id:
        :type schema_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormDto]

        
        request = build_revoke_schema_request(
            schema_id=schema_id,
            template_url=self.revoke_schema.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    revoke_schema.metadata = {'url': "/measurementforms/schemas/{schemaId}/revoke"}  # type: ignore


    @distributed_trace_async
    async def get_measurement_form_settings(
        self,
        **kwargs: Any
    ) -> _models.MeasurementFormSettingsDto:
        """get_measurement_form_settings.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSettingsDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSettingsDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormSettingsDto]

        
        request = build_get_measurement_form_settings_request(
            template_url=self.get_measurement_form_settings.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormSettingsDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_measurement_form_settings.metadata = {'url': "/measurementforms/schemas/settings"}  # type: ignore


    @distributed_trace_async
    async def update_measurement_form_settings(
        self,
        body: Optional[_models.UpdateMeasurementFormSettings] = None,
        *,
        content_type: Optional[str] = "application/json",
        **kwargs: Any
    ) -> _models.MeasurementFormSettingsDto:
        """update_measurement_form_settings.

        :param body:  Default value is None.
        :type body: ~ignos.api.client.models.UpdateMeasurementFormSettings
        :keyword content_type: Media type of the body sent to the API. Known values are:
         "application/json", "text/json", and "application/*+json". Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormSettingsDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormSettingsDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormSettingsDto]

        if body is not None:
            _json = self._serialize.body(body, 'UpdateMeasurementFormSettings')
        else:
            _json = None

        request = build_update_measurement_form_settings_request(
            content_type=content_type,
            json=_json,
            template_url=self.update_measurement_form_settings.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormSettingsDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update_measurement_form_settings.metadata = {'url': "/measurementforms/schemas/settings"}  # type: ignore


    @distributed_trace_async
    async def get_measurement_form_mapping(
        self,
        **kwargs: Any
    ) -> Any:
        """get_measurement_form_mapping.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: any, or the result of cls(response)
        :rtype: any
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Any]

        
        request = build_get_measurement_form_mapping_request(
            template_url=self.get_measurement_form_mapping.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('object', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_measurement_form_mapping.metadata = {'url': "/measurementforms/schemas/mapping"}  # type: ignore


    @distributed_trace_async
    async def update_measurement_form_mapping(
        self,
        **kwargs: Any
    ) -> Any:
        """update_measurement_form_mapping.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: any, or the result of cls(response)
        :rtype: any
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Any]

        
        request = build_update_measurement_form_mapping_request(
            template_url=self.update_measurement_form_mapping.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('object', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update_measurement_form_mapping.metadata = {'url': "/measurementforms/schemas/mapping"}  # type: ignore


    @distributed_trace_async
    async def get_measurment_form_mapping_suggestion(  # pylint: disable=inconsistent-return-statements
        self,
        source_schema_id: Optional[str] = None,
        source_version: Optional[int] = None,
        target_version: Optional[int] = None,
        target_schema_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """get_measurment_form_mapping_suggestion.

        :param source_schema_id:  Default value is None.
        :type source_schema_id: str
        :param source_version:  Default value is None.
        :type source_version: int
        :param target_version:  Default value is None.
        :type target_version: int
        :param target_schema_id:  Default value is None.
        :type target_schema_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_get_measurment_form_mapping_suggestion_request(
            source_schema_id=source_schema_id,
            source_version=source_version,
            target_version=target_version,
            target_schema_id=target_schema_id,
            template_url=self.get_measurment_form_mapping_suggestion.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    get_measurment_form_mapping_suggestion.metadata = {'url': "/measurementforms/schemas/mappingsuggestion"}  # type: ignore


    @distributed_trace_async
    async def import_measurement_form_schema(
        self,
        body: Optional[_models.ImportMeasurementFormSchema] = None,
        *,
        content_type: Optional[str] = "application/json",
        **kwargs: Any
    ) -> _models.MeasurementFormDto:
        """Custom api for initial import. Not to be used more than once per customer.

        Custom api for initial import. Not to be used more than once per customer.

        :param body:  Default value is None.
        :type body: ~ignos.api.client.models.ImportMeasurementFormSchema
        :keyword content_type: Media type of the body sent to the API. Known values are:
         "application/json", "text/json", and "application/*+json". Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementFormDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasurementFormDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[_models.MeasurementFormDto]

        if body is not None:
            _json = self._serialize.body(body, 'ImportMeasurementFormSchema')
        else:
            _json = None

        request = build_import_measurement_form_schema_request(
            content_type=content_type,
            json=_json,
            template_url=self.import_measurement_form_schema.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasurementFormDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    import_measurement_form_schema.metadata = {'url': "/measurementforms/schemas/import"}  # type: ignore


    @distributed_trace_async
    async def delete_imported_measurment_schemas(  # pylint: disable=inconsistent-return-statements
        self,
        **kwargs: Any
    ) -> None:
        """delete_imported_measurment_schemas.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_delete_imported_measurment_schemas_request(
            template_url=self.delete_imported_measurment_schemas.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_imported_measurment_schemas.metadata = {'url': "/measurementforms/schemas/imported"}  # type: ignore

