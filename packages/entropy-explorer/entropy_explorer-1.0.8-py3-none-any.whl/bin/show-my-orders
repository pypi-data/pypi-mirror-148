#!/usr/bin/env python3

import argparse
import os
import os.path
import sys

from solana.publickey import PublicKey

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
import entropy  # nopep8

parser = argparse.ArgumentParser(
    description="Shows all orders on the given market owned by the current wallet."
)
entropy.ContextBuilder.add_command_line_parameters(parser)
entropy.Wallet.add_command_line_parameters(parser)
parser.add_argument(
    "--market", type=str, required=True, help="market symbol to buy (e.g. ETH/USDC)"
)
parser.add_argument(
    "--account-address",
    type=PublicKey,
    help="address of the specific account to use, if more than one available",
)
parser.add_argument(
    "--dry-run",
    action="store_true",
    default=False,
    help="runs as read-only and does not perform any transactions",
)
parser.add_argument(
    "--include-expired",
    action="store_true",
    default=False,
    help="show all owned transactions, even those that have expired",
)
args: argparse.Namespace = entropy.parse_args(parser)

with entropy.ContextBuilder.from_command_line_parameters(args) as context:
    wallet = entropy.Wallet.from_command_line_parameters_or_raise(args)
    group = entropy.Group.load(context, context.group_address)
    account = entropy.Account.load_for_owner_by_address(
        context, wallet.address, group, args.account_address
    )

    market_operations = entropy.operations(
        context, wallet, account, args.market, args.dry_run
    )
    orders = market_operations.load_my_orders(
        cutoff=None if args.include_expired else entropy.utc_now()
    )
    entropy.output(f"{len(orders)} order(s) to show.")
    for order in orders:
        entropy.output(order)
