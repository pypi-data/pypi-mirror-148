#!/usr/bin/env python3

import argparse
import os
import sys
import typing

from decimal import Decimal
from solana.publickey import PublicKey

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
import entropy  # nopep8

parser = argparse.ArgumentParser(
    description="Shows all Wrapped SOL accounts for the wallet."
)
entropy.ContextBuilder.add_command_line_parameters(parser)
entropy.Wallet.add_command_line_parameters(parser)
parser.add_argument(
    "--symbol",
    type=str,
    required=True,
    help="symbol of the token to look up, e.g. 'ETH'",
)
parser.add_argument(
    "--owner", type=PublicKey, help="wallet address of the wallet owner"
)
parser.add_argument("--mint", type=PublicKey, help="mint address of the token")
parser.add_argument(
    "--decimals",
    type=Decimal,
    default=Decimal(6),
    help="number of decimal places for token values",
)
args: argparse.Namespace = entropy.parse_args(parser)

with entropy.ContextBuilder.from_command_line_parameters(args) as context:
    wallet: entropy.Wallet = entropy.Wallet.from_command_line_parameters_or_raise(args)
    owner_address: PublicKey = args.owner or wallet.address

    token: entropy.Token
    if args.mint is not None:
        token = entropy.Token(args.symbol, args.symbol, args.decimals, args.mint)
    else:
        token = entropy.token(context, args.symbol)
    token_accounts: typing.Sequence[
        entropy.TokenAccount
    ] = entropy.TokenAccount.fetch_all_for_owner_and_token(
        context, owner_address, token
    )

    if len(token_accounts) == 0:
        entropy.output(f"No token accounts for {token}.")
    else:
        entropy.output(f"{token.name}:")
        for account in token_accounts:
            entropy.output(f"    {account.address}: {account.value}")
