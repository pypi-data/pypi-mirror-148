#!/usr/bin/env python3

import argparse
import os
import os.path
import sys

from solana.publickey import PublicKey

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
import entropy  # nopep8
import entropy.marketmaking  # nopep8

parser = argparse.ArgumentParser(description="Shows all properties of a given market.")
entropy.ContextBuilder.add_command_line_parameters(parser)
entropy.Wallet.add_command_line_parameters(parser)
parser.add_argument(
    "--market",
    type=str,
    required=True,
    help="market symbol load model state for (e.g. ETH/USDC)",
)
parser.add_argument(
    "--oracle-provider",
    type=str,
    required=True,
    help="name of the price provider to use (e.g. pyth-mainnet)",
)
parser.add_argument(
    "--account-address",
    type=PublicKey,
    help="address of the specific account to use, if more than one available",
)
args: argparse.Namespace = entropy.parse_args(parser)

with entropy.ContextBuilder.from_command_line_parameters(
    args
) as context, entropy.Disposable() as disposer:
    wallet = entropy.Wallet.from_command_line_parameters_or_raise(args)
    group = entropy.Group.load(context, context.group_address)
    account = entropy.Account.load_for_owner_by_address(
        context, wallet.address, group, args.account_address
    )

    market = entropy.market(context, args.market)

    oracle_provider: entropy.OracleProvider = entropy.create_oracle_provider(
        context, args.oracle_provider
    )
    oracle = oracle_provider.oracle_for_market(context, market)
    if oracle is None:
        raise Exception(
            f"Could not find oracle for market {market.fully_qualified_symbol} from provider {args.oracle_provider}."
        )

    health_check = entropy.HealthCheck()
    disposer.add_disposable(health_check)
    manager = entropy.IndividualWebSocketSubscriptionManager(
        context
    )  # Should never be used
    model_state_builder: entropy.marketmaking.ModelStateBuilder = (
        entropy.marketmaking.model_state_builder_factory(
            entropy.marketmaking.ModelUpdateMode.POLL,
            context,
            disposer,
            manager,
            health_check,
            wallet,
            group,
            account,
            market,
            oracle,
        )
    )

    model_state = model_state_builder.build(context)
    entropy.output(model_state)
