#!/usr/bin/env python3

import argparse
import os
import sys

from decimal import Decimal

from solana.publickey import PublicKey

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
import entropy  # nopep8

parser = argparse.ArgumentParser(
    description="Wraps Pure SOL to Wrapped SOL and adds it to the first Wrapped SOL account, creating that account if it doesn't exist."
)
entropy.ContextBuilder.add_command_line_parameters(parser)
entropy.Wallet.add_command_line_parameters(parser)
parser.add_argument(
    "--quantity", type=Decimal, required=True, help="quantity of SOL to wrap"
)
parser.add_argument(
    "--wait",
    action="store_true",
    default=False,
    help="wait until the transactions are confirmed",
)
args: argparse.Namespace = entropy.parse_args(parser)

with entropy.ContextBuilder.from_command_line_parameters(args) as context:
    wallet = entropy.Wallet.from_command_line_parameters_or_raise(args)
    wrapped_sol: entropy.Token = entropy.token(context, "SOL")
    amount_to_transfer = int(args.quantity * entropy.SOL_DECIMAL_DIVISOR)

    signers: entropy.CombinableInstructions = (
        entropy.CombinableInstructions.from_signers([wallet.keypair])
    )
    all_instructions = signers

    token_accounts = entropy.TokenAccount.fetch_all_for_owner_and_token(
        context, wallet.address, wrapped_sol
    )
    entropy.output("Wrapping SOL:")
    if len(token_accounts) == 0:
        create_instructions = entropy.build_spl_create_associated_account_instructions(
            context, wallet, wallet.address, wrapped_sol
        )
        destination_wrapped_sol_address: PublicKey = (
            create_instructions.instructions[0].keys[1].pubkey
        )
        all_instructions += create_instructions
    else:
        destination_wrapped_sol_address = token_accounts[0].address

    create_temporary_account_instructions = (
        entropy.build_spl_create_account_instructions(
            context, wallet, wrapped_sol, amount_to_transfer
        )
    )
    temporary_wrapped_sol_address = create_temporary_account_instructions.signers[
        0
    ].public_key
    all_instructions += create_temporary_account_instructions

    entropy.output(f"    Temporary account: {temporary_wrapped_sol_address}")
    entropy.output(f"    Source: {wallet.address}")
    entropy.output(f"    Destination: {destination_wrapped_sol_address}")
    wrap_instruction = entropy.build_spl_transfer_tokens_instructions(
        context,
        wallet,
        wrapped_sol,
        temporary_wrapped_sol_address,
        destination_wrapped_sol_address,
        args.quantity,
    )
    close_instruction = entropy.build_spl_close_account_instructions(
        context, wallet, temporary_wrapped_sol_address
    )
    all_instructions = all_instructions + wrap_instruction + close_instruction

    signatures = all_instructions.execute(context)

    if args.wait:
        entropy.output("Waiting on transaction signatures:")
        entropy.output(entropy.indent_collection_as_str(signatures, 1))
        results = entropy.WebSocketTransactionMonitor.wait_for_all(
            context.client.cluster_ws_url, signatures
        )
        entropy.output("Transaction results:")
        entropy.output(entropy.indent_collection_as_str(results, 1))
    else:
        entropy.output("Transaction signatures:")
        entropy.output(entropy.indent_collection_as_str(signatures, 1))
