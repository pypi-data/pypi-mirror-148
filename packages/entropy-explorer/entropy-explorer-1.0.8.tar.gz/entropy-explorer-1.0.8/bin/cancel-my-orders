#!/usr/bin/env python3

import argparse
import os
import os.path
import sys
import typing

from solana.publickey import PublicKey

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
import entropy  # nopep8

parser = argparse.ArgumentParser(
    description="Cancels all orders on a market from the current wallet."
)
entropy.ContextBuilder.add_command_line_parameters(parser)
entropy.Wallet.add_command_line_parameters(parser)
parser.add_argument(
    "--market",
    type=str,
    required=True,
    help="market symbol where orders are placed (e.g. ETH/USDC)",
)
parser.add_argument(
    "--account-address",
    type=PublicKey,
    help="address of the specific account to use, if more than one available",
)
parser.add_argument(
    "--wait",
    action="store_true",
    default=False,
    help="wait until the transactions are confirmed",
)
parser.add_argument(
    "--dry-run",
    action="store_true",
    default=False,
    help="runs as read-only and does not perform any transactions",
)
args: argparse.Namespace = entropy.parse_args(parser)

with entropy.ContextBuilder.from_command_line_parameters(args) as context:
    wallet = entropy.Wallet.from_command_line_parameters_or_raise(args)
    group = entropy.Group.load(context, context.group_address)
    account = entropy.Account.load_for_owner_by_address(
        context, wallet.address, group, args.account_address
    )

    market_operations = entropy.operations(
        context, wallet, account, args.market, args.dry_run
    )
    orders = market_operations.load_my_orders(cutoff=None)
    if len(orders) == 0:
        entropy.output(
            f"No open orders on {market_operations.market.fully_qualified_symbol}"
        )
    else:
        signatures: typing.Sequence[str]
        if entropy.PerpMarket.isa(market_operations.market):
            cancel_all = entropy.PerpMarketOperations.ensure(
                market_operations
            ).market_instruction_builder.build_cancel_all_orders_instructions()

            signers: entropy.CombinableInstructions = (
                entropy.CombinableInstructions.from_wallet(wallet)
            )
            signatures = (signers + cancel_all).execute(context)
            entropy.output(f"Cancelling all perp orders: {signatures}")
        else:
            individual_signatures: typing.List[str] = []
            for order in orders:
                entropy.output("Cancelling:", order)
                individual_signatures += market_operations.cancel_order(order)
            signatures = individual_signatures

        if args.wait:
            entropy.output("Waiting on transaction signatures:")
            entropy.output(entropy.indent_collection_as_str(signatures, 1))
            results = entropy.WebSocketTransactionMonitor.wait_for_all(
                context.client.cluster_ws_url, signatures
            )
            entropy.output("Transaction results:")
            entropy.output(entropy.indent_collection_as_str(results, 1))
        else:
            entropy.output("Transaction signatures:")
            entropy.output(entropy.indent_collection_as_str(signatures, 1))
