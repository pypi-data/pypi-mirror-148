#!/usr/bin/env python3

import argparse
import os
import sys
import typing

from solana.publickey import PublicKey

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
import entropy  # nopep8

parser = argparse.ArgumentParser(description="Closes a Wrapped SOL account.")
entropy.ContextBuilder.add_command_line_parameters(parser)
entropy.Wallet.add_command_line_parameters(parser)
parser.add_argument(
    "--address", type=PublicKey, help="Public key of the SPL token account to close"
)
parser.add_argument(
    "--wait",
    action="store_true",
    default=False,
    help="wait until the transactions are confirmed",
)

args: argparse.Namespace = entropy.parse_args(parser)

with entropy.ContextBuilder.from_command_line_parameters(args) as context:
    wallet = entropy.Wallet.from_command_line_parameters_or_raise(args)

    token_account: typing.Optional[entropy.TokenAccount] = entropy.TokenAccount.load(
        context, args.address
    )
    if token_account is None:
        raise Exception(
            f"Account {args.address} does not exist or is not an SPL token account."
        )

    if token_account.value.value != 0:
        raise Exception(
            f"Account {args.address} is not empty - it has a token balance of {token_account.value.value}"
        )

    entropy.output(token_account)
    payer: PublicKey = wallet.address
    signers: entropy.CombinableInstructions = (
        entropy.CombinableInstructions.from_wallet(wallet)
    )

    close_instruction = entropy.build_spl_close_account_instructions(
        context, wallet, args.address
    )

    entropy.output(f"Closing account: {args.address}")

    all_instructions = signers + close_instruction
    signatures = all_instructions.execute(context)

    if args.wait:
        entropy.output("Waiting on transaction signatures:")
        entropy.output(entropy.indent_collection_as_str(signatures, 1))
        results = entropy.WebSocketTransactionMonitor.wait_for_all(
            context.client.cluster_ws_url, signatures
        )
        entropy.output("Transaction results:")
        entropy.output(entropy.indent_collection_as_str(results, 1))
    else:
        entropy.output("Transaction signatures:")
        entropy.output(entropy.indent_collection_as_str(signatures, 1))
