{"version":3,"file":"7efc9a48.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAoEA;;AApEA;;ACuBA;;AAGA;AACA;AACA;;AAEA;AAGA;;AAEA;;;AAGA;;AAGA;AACA;;;;AAIA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA7CA;;;AC+BA;AACA;AACA;;;;;AAKA;;;;AAIA;;;;AAIA;;;;;;AAQA;;AAGA;AACA;AACA;;;AAGA;AAEA;;;;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAxDA","sources":["webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/layouts/hass-subpage.ts","webpack://home-assistant-frontend/./src/panels/config/core/ha-config-section-updates.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public outlined = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, eventOptions, property } from \"lit/decorators\";\nimport { restoreScroll } from \"../common/decorators/restore-scroll\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"hass-subpage\")\nclass HassSubpage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public header?: string;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  // @ts-ignore\n  @restoreScroll(\".content\") private _savedScrollPos?: number;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"toolbar\">\n        ${this.mainPage || history.state?.root\n          ? html`\n              <ha-menu-button\n                .hassio=${this.supervisor}\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n              ></ha-menu-button>\n            `\n          : this.backPath\n          ? html`\n              <a href=${this.backPath}>\n                <ha-icon-button-arrow-prev\n                  .hass=${this.hass}\n                ></ha-icon-button-arrow-prev>\n              </a>\n            `\n          : html`\n              <ha-icon-button-arrow-prev\n                .hass=${this.hass}\n                @click=${this._backTapped}\n              ></ha-icon-button-arrow-prev>\n            `}\n\n        <div class=\"main-title\">${this.header}</div>\n        <slot name=\"toolbar-icon\"></slot>\n      </div>\n      <div class=\"content\" @scroll=${this._saveScrollPos}><slot></slot></div>\n    `;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _backTapped(): void {\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n        background-color: var(--primary-background-color);\n      }\n\n      :host([narrow]) {\n        width: 100%;\n        position: fixed;\n      }\n\n      .toolbar {\n        display: flex;\n        align-items: center;\n        font-size: 20px;\n        height: var(--header-height);\n        padding: 0 16px;\n        pointer-events: none;\n        background-color: var(--app-header-background-color);\n        font-weight: 400;\n        color: var(--app-header-text-color, white);\n        border-bottom: var(--app-header-border-bottom, none);\n        box-sizing: border-box;\n      }\n      .toolbar a {\n        color: var(--sidebar-text-color);\n        text-decoration: none;\n      }\n\n      ha-menu-button,\n      ha-icon-button-arrow-prev,\n      ::slotted([slot=\"toolbar-icon\"]) {\n        pointer-events: auto;\n      }\n\n      .main-title {\n        margin: 0 0 0 24px;\n        line-height: 20px;\n        flex-grow: 1;\n      }\n\n      .content {\n        position: relative;\n        width: 100%;\n        height: calc(100% - 1px - var(--header-height));\n        overflow-y: auto;\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-subpage\": HassSubpage;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport { mdiDotsVertical } from \"@mdi/js\";\nimport { HassEntities } from \"home-assistant-js-websocket\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { computeStateDomain } from \"../../../common/entity/compute_state_domain\";\nimport { caseInsensitiveStringCompare } from \"../../../common/string/compare\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-bar\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-metric\";\nimport { updateCanInstall, UpdateEntity } from \"../../../data/update\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-subpage\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { showToast } from \"../../../util/toast\";\nimport \"../dashboard/ha-config-updates\";\nimport \"./ha-config-analytics\";\n\n@customElement(\"ha-config-section-updates\")\nclass HaConfigSectionUpdates extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @state() private _showSkipped = false;\n\n  private _notifyUpdates = false;\n\n  protected render(): TemplateResult {\n    const canInstallUpdates = this._filterUpdateEntitiesWithInstall(\n      this.hass.states,\n      this._showSkipped\n    );\n\n    return html`\n      <hass-subpage\n        back-path=\"/config/system\"\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .header=${this.hass.localize(\"ui.panel.config.updates.caption\")}\n      >\n        <ha-button-menu\n          corner=\"BOTTOM_START\"\n          slot=\"toolbar-icon\"\n          @action=${this._toggleSkipped}\n        >\n          <ha-icon-button\n            slot=\"trigger\"\n            .label=${this.hass.localize(\"ui.panel.config.info.copy_menu\")}\n            .path=${mdiDotsVertical}\n          ></ha-icon-button>\n          <mwc-list-item>\n            ${this._showSkipped\n              ? this.hass.localize(\"ui.panel.config.updates.hide_skipped\")\n              : this.hass.localize(\"ui.panel.config.updates.show_skipped\")}\n          </mwc-list-item>\n        </ha-button-menu>\n        <div class=\"content\">\n          <ha-card outlined>\n            <div class=\"card-content\">\n              ${canInstallUpdates.length\n                ? html`\n                    <ha-config-updates\n                      .hass=${this.hass}\n                      .narrow=${this.narrow}\n                      .updateEntities=${canInstallUpdates}\n                      showAll\n                    ></ha-config-updates>\n                  `\n                : html`\n                    ${this.hass.localize(\"ui.panel.config.updates.no_updates\")}\n                  `}\n            </div>\n            <div class=\"card-actions\">\n              <mwc-button @click=${this._checkUpdates}>\n                ${this.hass.localize(\"ui.panel.config.updates.check_updates\")}\n              </mwc-button>\n            </div>\n          </ha-card>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  protected override updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    if (\n      !changedProps.has(\"hass\") ||\n      !this._notifyUpdates ||\n      !changedProps.has(\"_showSkipped\")\n    ) {\n      return;\n    }\n    this._notifyUpdates = false;\n    if (\n      this._filterUpdateEntitiesWithInstall(this.hass.states, this._showSkipped)\n        .length\n    ) {\n      showToast(this, {\n        message: this.hass.localize(\n          \"ui.panel.config.updates.updates_refreshed\"\n        ),\n      });\n    } else {\n      showToast(this, {\n        message: this.hass.localize(\"ui.panel.config.updates.no_new_updates\"),\n      });\n    }\n  }\n\n  private _toggleSkipped(): void {\n    this._showSkipped = !this._showSkipped;\n  }\n\n  private async _checkUpdates(): Promise<void> {\n    const _entities = this._filterUpdateEntities(this.hass.states).map(\n      (entity) => entity.entity_id\n    );\n\n    if (_entities.length) {\n      this._notifyUpdates = true;\n      await this.hass.callService(\"homeassistant\", \"update_entity\", {\n        entity_id: _entities,\n      });\n      return;\n    }\n    showAlertDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.updates.no_update_entities.title\"\n      ),\n      text: this.hass.localize(\n        \"ui.panel.config.updates.no_update_entities.description\"\n      ),\n      warning: true,\n    });\n  }\n\n  private _filterUpdateEntities = memoizeOne((entities: HassEntities) =>\n    (\n      Object.values(entities).filter(\n        (entity) => computeStateDomain(entity) === \"update\"\n      ) as UpdateEntity[]\n    ).sort((a, b) => {\n      if (a.attributes.title === \"Home Assistant Core\") {\n        return -3;\n      }\n      if (b.attributes.title === \"Home Assistant Core\") {\n        return 3;\n      }\n      if (a.attributes.title === \"Home Assistant Operating System\") {\n        return -2;\n      }\n      if (b.attributes.title === \"Home Assistant Operating System\") {\n        return 2;\n      }\n      if (a.attributes.title === \"Home Assistant Supervisor\") {\n        return -1;\n      }\n      if (b.attributes.title === \"Home Assistant Supervisor\") {\n        return 1;\n      }\n      return caseInsensitiveStringCompare(\n        a.attributes.title || a.attributes.friendly_name || \"\",\n        b.attributes.title || b.attributes.friendly_name || \"\"\n      );\n    })\n  );\n\n  private _filterUpdateEntitiesWithInstall = memoizeOne(\n    (entities: HassEntities, showSkipped: boolean) =>\n      this._filterUpdateEntities(entities).filter((entity) =>\n        updateCanInstall(entity, showSkipped)\n      )\n  );\n\n  static styles = css`\n    .content {\n      padding: 28px 20px 0;\n      max-width: 1040px;\n      margin: 0 auto;\n    }\n    ha-card {\n      max-width: 500px;\n      margin: 0 auto;\n      height: 100%;\n      justify-content: space-between;\n      flex-direction: column;\n      display: flex;\n      margin-bottom: max(24px, env(safe-area-inset-bottom));\n    }\n    .card-actions {\n      height: 48px;\n      border-top: none;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n\n    .card-content {\n      display: flex;\n      justify-content: space-between;\n      flex-direction: column;\n      padding: 16px 16px 0 16px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-section-updates\": HaConfigSectionUpdates;\n  }\n}\n"],"names":[],"sourceRoot":""}