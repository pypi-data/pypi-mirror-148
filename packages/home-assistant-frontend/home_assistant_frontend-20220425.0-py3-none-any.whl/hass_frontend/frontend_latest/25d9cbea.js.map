{"version":3,"file":"25d9cbea.js","mappings":";;AA4CA;;;AAMA;;AAEA;;;;;AAKA;;;;;AAKA;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAvCA;;;;ACCA;;;AApBA;;;;;;;;;;;;;;;;;AAAA;;ACUA;AACA;AACA;;AAEA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAnBA","sources":["webpack://home-assistant-frontend/./src/components/ha-alert.ts","webpack://home-assistant-frontend/./src/components/ha-bar.ts","webpack://home-assistant-frontend/./src/components/ha-metric.ts"],"sourcesContent":["import {\n  mdiAlertCircleOutline,\n  mdiAlertOutline,\n  mdiCheckboxMarkedCircleOutline,\n  mdiClose,\n  mdiInformationOutline,\n} from \"@mdi/js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-icon-button\";\nimport \"./ha-svg-icon\";\n\nconst ALERT_ICONS = {\n  info: mdiInformationOutline,\n  warning: mdiAlertOutline,\n  error: mdiAlertCircleOutline,\n  success: mdiCheckboxMarkedCircleOutline,\n};\n\ndeclare global {\n  interface HASSDomEvents {\n    \"alert-dismissed-clicked\": undefined;\n  }\n}\n\n@customElement(\"ha-alert\")\nclass HaAlert extends LitElement {\n  @property() public title = \"\";\n\n  @property({ attribute: \"alert-type\" }) public alertType:\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n    | \"success\" = \"info\";\n\n  @property({ type: Boolean }) public dismissable = false;\n\n  @property({ type: Boolean }) public rtl = false;\n\n  public render() {\n    return html`\n      <div\n        class=\"issue-type ${classMap({\n          rtl: this.rtl,\n          [this.alertType]: true,\n        })}\"\n        role=\"alert\"\n      >\n        <div class=\"icon ${this.title ? \"\" : \"no-title\"}\">\n          <slot name=\"icon\">\n            <ha-svg-icon .path=${ALERT_ICONS[this.alertType]}></ha-svg-icon>\n          </slot>\n        </div>\n        <div class=\"content\">\n          <div class=\"main-content\">\n            ${this.title ? html`<div class=\"title\">${this.title}</div>` : \"\"}\n            <slot></slot>\n          </div>\n          <div class=\"action\">\n            <slot name=\"action\">\n              ${this.dismissable\n                ? html`<ha-icon-button\n                    @click=${this._dismiss_clicked}\n                    label=\"Dismiss alert\"\n                    .path=${mdiClose}\n                  ></ha-icon-button>`\n                : \"\"}\n            </slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private _dismiss_clicked() {\n    fireEvent(this, \"alert-dismissed-clicked\");\n  }\n\n  static styles = css`\n    .issue-type {\n      position: relative;\n      padding: 8px;\n      display: flex;\n      margin: 4px 0;\n    }\n    .issue-type.rtl {\n      flex-direction: row-reverse;\n    }\n    .issue-type::after {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      opacity: 0.12;\n      pointer-events: none;\n      content: \"\";\n      border-radius: 4px;\n    }\n    .icon {\n      z-index: 1;\n    }\n    .icon.no-title {\n      align-self: center;\n    }\n    .issue-type.rtl > .content {\n      flex-direction: row-reverse;\n      text-align: right;\n    }\n    .content {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    }\n    .action {\n      z-index: 1;\n      width: min-content;\n      --mdc-theme-primary: var(--primary-text-color);\n    }\n    .main-content {\n      overflow-wrap: anywhere;\n      word-break: break-word;\n      margin-left: 8px;\n      margin-right: 0;\n    }\n    .issue-type.rtl > .content > .main-content {\n      margin-left: 0;\n      margin-right: 8px;\n    }\n    .title {\n      margin-top: 2px;\n      font-weight: bold;\n    }\n    .action mwc-button,\n    .action ha-icon-button {\n      --mdc-theme-primary: var(--primary-text-color);\n      --mdc-icon-button-size: 36px;\n    }\n    .issue-type.info > .icon {\n      color: var(--info-color);\n    }\n    .issue-type.info::after {\n      background-color: var(--info-color);\n    }\n\n    .issue-type.warning > .icon {\n      color: var(--warning-color);\n    }\n    .issue-type.warning::after {\n      background-color: var(--warning-color);\n    }\n\n    .issue-type.error > .icon {\n      color: var(--error-color);\n    }\n    .issue-type.error::after {\n      background-color: var(--error-color);\n    }\n\n    .issue-type.success > .icon {\n      color: var(--success-color);\n    }\n    .issue-type.success::after {\n      background-color: var(--success-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-alert\": HaAlert;\n  }\n}\n","import { css, CSSResultGroup, LitElement, svg, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport {\n  getValueInPercentage,\n  normalize,\n  roundWithOneDecimal,\n} from \"../util/calculate\";\n\n@customElement(\"ha-bar\")\nexport class HaBar extends LitElement {\n  @property({ type: Number }) public min = 0;\n\n  @property({ type: Number }) public max = 100;\n\n  @property({ type: Number }) public value!: number;\n\n  protected render(): TemplateResult {\n    const valuePrecentage = roundWithOneDecimal(\n      getValueInPercentage(\n        normalize(this.value, this.min, this.max),\n        this.min,\n        this.max\n      )\n    );\n\n    return svg`\n      <svg>\n        <g>\n          <rect/>\n          <rect width=\"${valuePrecentage}%\"/>\n        </g>\n      </svg>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      rect {\n        height: 100%;\n      }\n      rect:first-child {\n        width: 100%;\n        fill: var(--ha-bar-background-color, var(--secondary-background-color));\n      }\n      rect:last-child {\n        fill: var(--ha-bar-primary-color, var(--primary-color));\n        rx: var(--ha-bar-border-radius, 4px);\n      }\n      svg {\n        border-radius: var(--ha-bar-border-radius, 4px);\n        height: 12px;\n        width: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-bar\": HaBar;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { roundWithOneDecimal } from \"../util/calculate\";\nimport \"./ha-bar\";\nimport \"./ha-settings-row\";\n\n@customElement(\"ha-metric\")\nclass HaMetric extends LitElement {\n  @property({ type: Number }) public value!: number;\n\n  @property({ type: String }) public heading!: string;\n\n  @property({ type: String }) public tooltip?: string;\n\n  protected render(): TemplateResult {\n    const roundedValue = roundWithOneDecimal(this.value);\n    return html`\n      <ha-settings-row>\n        <span slot=\"heading\"> ${this.heading} </span>\n        <div slot=\"description\" .title=${this.tooltip ?? \"\"}>\n          <span class=\"value\"> ${roundedValue} % </span>\n          <ha-bar\n            class=${classMap({\n              \"target-warning\": roundedValue > 50,\n              \"target-critical\": roundedValue > 85,\n            })}\n            .value=${this.value}\n          ></ha-bar>\n        </div>\n      </ha-settings-row>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-settings-row {\n        padding: 0;\n        height: 54px;\n        width: 100%;\n      }\n      ha-settings-row > div[slot=\"description\"] {\n        white-space: normal;\n        color: var(--secondary-text-color);\n        display: flex;\n        justify-content: space-between;\n      }\n      ha-bar {\n        --ha-bar-primary-color: var(\n          --metric-bar-ok-color,\n          var(--success-color)\n        );\n      }\n      .target-warning {\n        --ha-bar-primary-color: var(\n          --metric-bar-warning-color,\n          var(--warning-color)\n        );\n      }\n      .target-critical {\n        --ha-bar-primary-color: var(\n          --metric-bar-critical-color,\n          var(--error-color)\n        );\n      }\n      .value {\n        width: 48px;\n        padding-right: 4px;\n        flex-shrink: 0;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-metric\": HaMetric;\n  }\n}\n"],"names":[],"sourceRoot":""}