{"version":3,"file":"83244f9c.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAoEA;;AApEA;;ACuBA;;AAGA;AACA;AACA;;AAEA;AAGA;;AAEA;;;AAGA;;AAGA;AACA;;;;AAIA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA7CA;;ACQA;;;;AAOA;;;;;;AAlBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AC+CA;AACA;;AAEA;AACA;;;AAGA;;;AAIA;;;AAKA;AAGA;;;AAoCA;;AAIA;AACA;;;;AAMA;;AA/CA;;;;AAKA;;;;AAAA;AAEA;;;;AAKA;AAGA;;;AAIA;;AAEA;;;;;;;AA+BA;;;;AAKA;;;AAKA;;;;;AAOA;;;AAGA;AAGA;;;;;AAOA;;;AAIA;;;AAKA;;;;AAMA;;;AAGA;;;AAKA;;;AAKA;AACA;;AAEA;;;;;AAaA;;;AApLA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/layouts/hass-subpage.ts","webpack://home-assistant-frontend/./src/panels/config/ha-config-section.ts","webpack://home-assistant-frontend/./src/panels/config/server_control/ha-config-server-control.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public outlined = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, eventOptions, property } from \"lit/decorators\";\nimport { restoreScroll } from \"../common/decorators/restore-scroll\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"hass-subpage\")\nclass HassSubpage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public header?: string;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  // @ts-ignore\n  @restoreScroll(\".content\") private _savedScrollPos?: number;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"toolbar\">\n        ${this.mainPage || history.state?.root\n          ? html`\n              <ha-menu-button\n                .hassio=${this.supervisor}\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n              ></ha-menu-button>\n            `\n          : this.backPath\n          ? html`\n              <a href=${this.backPath}>\n                <ha-icon-button-arrow-prev\n                  .hass=${this.hass}\n                ></ha-icon-button-arrow-prev>\n              </a>\n            `\n          : html`\n              <ha-icon-button-arrow-prev\n                .hass=${this.hass}\n                @click=${this._backTapped}\n              ></ha-icon-button-arrow-prev>\n            `}\n\n        <div class=\"main-title\">${this.header}</div>\n        <slot name=\"toolbar-icon\"></slot>\n      </div>\n      <div class=\"content\" @scroll=${this._saveScrollPos}><slot></slot></div>\n    `;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _backTapped(): void {\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n        background-color: var(--primary-background-color);\n      }\n\n      :host([narrow]) {\n        width: 100%;\n        position: fixed;\n      }\n\n      .toolbar {\n        display: flex;\n        align-items: center;\n        font-size: 20px;\n        height: var(--header-height);\n        padding: 0 16px;\n        pointer-events: none;\n        background-color: var(--app-header-background-color);\n        font-weight: 400;\n        color: var(--app-header-text-color, white);\n        border-bottom: var(--app-header-border-bottom, none);\n        box-sizing: border-box;\n      }\n      .toolbar a {\n        color: var(--sidebar-text-color);\n        text-decoration: none;\n      }\n\n      ha-menu-button,\n      ha-icon-button-arrow-prev,\n      ::slotted([slot=\"toolbar-icon\"]) {\n        pointer-events: auto;\n      }\n\n      .main-title {\n        margin: 0 0 0 24px;\n        line-height: 20px;\n        flex-grow: 1;\n      }\n\n      .content {\n        position: relative;\n        width: 100%;\n        height: calc(100% - 1px - var(--header-height));\n        overflow-y: auto;\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-subpage\": HassSubpage;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\n\n@customElement(\"ha-config-section\")\nexport class HaConfigSection extends LitElement {\n  @property() public isWide = false;\n\n  @property({ type: Boolean }) public vertical = false;\n\n  @property({ type: Boolean, attribute: \"full-width\" })\n  public fullWidth = false;\n\n  protected render() {\n    return html`\n      <div\n        class=\"content ${classMap({\n          narrow: !this.isWide,\n          \"full-width\": this.fullWidth,\n        })}\"\n      >\n        <div class=\"header\"><slot name=\"header\"></slot></div>\n        <div\n          class=\"together layout ${classMap({\n            narrow: !this.isWide,\n            vertical: this.vertical || !this.isWide,\n            horizontal: !this.vertical && this.isWide,\n          })}\"\n        >\n          <div class=\"intro\"><slot name=\"introduction\"></slot></div>\n          <div class=\"panel flex-auto\"><slot></slot></div>\n        </div>\n      </div>\n    `;\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n      }\n      .content {\n        padding: 28px 20px 0;\n        max-width: 1040px;\n        margin: 0 auto;\n      }\n\n      .layout {\n        display: flex;\n      }\n\n      .horizontal {\n        flex-direction: row;\n      }\n\n      .vertical {\n        flex-direction: column;\n      }\n\n      .flex-auto {\n        flex: 1 1 auto;\n      }\n\n      .header {\n        font-family: var(--paper-font-headline_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-headline_-_-webkit-font-smoothing\n        );\n        font-size: var(--paper-font-headline_-_font-size);\n        font-weight: var(--paper-font-headline_-_font-weight);\n        letter-spacing: var(--paper-font-headline_-_letter-spacing);\n        line-height: var(--paper-font-headline_-_line-height);\n        opacity: var(--dark-primary-opacity);\n      }\n\n      .together {\n        margin-top: 32px;\n      }\n\n      .intro {\n        font-family: var(--paper-font-subhead_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-subhead_-_-webkit-font-smoothing\n        );\n        font-weight: var(--paper-font-subhead_-_font-weight);\n        line-height: var(--paper-font-subhead_-_line-height);\n        width: 100%;\n        opacity: var(--dark-primary-opacity);\n        font-size: 14px;\n        padding-bottom: 20px;\n      }\n\n      .horizontal .intro {\n        max-width: 400px;\n        margin-right: 40px;\n      }\n\n      .panel {\n        margin-top: -24px;\n      }\n\n      .panel ::slotted(*) {\n        margin-top: 24px;\n        display: block;\n      }\n\n      .narrow.content {\n        max-width: 640px;\n      }\n      .narrow .together {\n        margin-top: 20px;\n      }\n      .narrow .intro {\n        padding-bottom: 20px;\n        margin-right: 0;\n        max-width: 500px;\n      }\n\n      .full-width {\n        padding: 0;\n      }\n\n      .full-width .layout {\n        flex-direction: column;\n      }\n    `;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { componentsWithService } from \"../../../common/config/components_with_service\";\nimport \"../../../components/buttons/ha-call-service-button\";\nimport \"../../../components/ha-card\";\nimport { checkCoreConfig } from \"../../../data/core\";\nimport { domainToName } from \"../../../data/integration\";\nimport \"../../../layouts/hass-subpage\";\nimport \"../../../layouts/hass-tabs-subpage\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport \"../ha-config-section\";\n\n@customElement(\"ha-config-server-control\")\nexport class HaConfigServerControl extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ type: Boolean }) public showAdvanced!: boolean;\n\n  @state() private _validating = false;\n\n  @state() private _reloadableDomains: string[] = [];\n\n  private _validateLog = \"\";\n\n  private _isValid: boolean | null = null;\n\n  protected updated(changedProperties) {\n    const oldHass = changedProperties.get(\"hass\");\n    if (\n      changedProperties.has(\"hass\") &&\n      (!oldHass || oldHass.config.components !== this.hass.config.components)\n    ) {\n      this._reloadableDomains = componentsWithService(\n        this.hass,\n        \"reload\"\n      ).sort();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/config/system\"\n        .showAdvanced=${this.showAdvanced}\n        .header=${this.hass.localize(\"ui.panel.config.server_control.caption\")}\n      >\n        <div class=\"content\">\n          ${this.showAdvanced\n            ? html`\n                <ha-card\n                  outlined\n                  header=${this.hass.localize(\n                    \"ui.panel.config.server_control.section.validation.heading\"\n                  )}\n                >\n                  <div class=\"card-content\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.server_control.section.validation.introduction\"\n                    )}\n                    ${!this._validateLog\n                      ? html`\n                          <div\n                            class=\"validate-container layout vertical center-center\"\n                          >\n                            ${!this._validating\n                              ? html`\n                                  ${this._isValid\n                                    ? html` <div\n                                        class=\"validate-result\"\n                                        id=\"result\"\n                                      >\n                                        ${this.hass.localize(\n                                          \"ui.panel.config.server_control.section.validation.valid\"\n                                        )}\n                                      </div>`\n                                    : \"\"}\n                                  <mwc-button\n                                    raised\n                                    @click=${this._validateConfig}\n                                  >\n                                    ${this.hass.localize(\n                                      \"ui.panel.config.server_control.section.validation.check_config\"\n                                    )}\n                                  </mwc-button>\n                                `\n                              : html`\n                                  <ha-circular-progress\n                                    active\n                                  ></ha-circular-progress>\n                                `}\n                          </div>\n                        `\n                      : html`\n                          <div class=\"config-invalid\">\n                            <span class=\"text\">\n                              ${this.hass.localize(\n                                \"ui.panel.config.server_control.section.validation.invalid\"\n                              )}\n                            </span>\n                            <mwc-button raised @click=${this._validateConfig}>\n                              ${this.hass.localize(\n                                \"ui.panel.config.server_control.section.validation.check_config\"\n                              )}\n                            </mwc-button>\n                          </div>\n                          <div id=\"configLog\" class=\"validate-log\">\n                            ${this._validateLog}\n                          </div>\n                        `}\n                  </div>\n                </ha-card>\n              `\n            : \"\"}\n\n          <ha-card\n            outlined\n            header=${this.hass.localize(\n              \"ui.panel.config.server_control.section.server_management.heading\"\n            )}\n          >\n            <div class=\"card-content\">\n              ${this.hass.localize(\n                \"ui.panel.config.server_control.section.server_management.introduction\"\n              )}\n            </div>\n            <div class=\"card-actions warning\">\n              <ha-call-service-button\n                class=\"warning\"\n                .hass=${this.hass}\n                domain=\"homeassistant\"\n                service=\"restart\"\n                .confirmation=${this.hass.localize(\n                  \"ui.panel.config.server_control.section.server_management.confirm_restart\"\n                )}\n                >${this.hass.localize(\n                  \"ui.panel.config.server_control.section.server_management.restart\"\n                )}\n              </ha-call-service-button>\n            </div>\n          </ha-card>\n\n          ${this.showAdvanced\n            ? html`\n                <ha-card\n                  outlined\n                  header=${this.hass.localize(\n                    \"ui.panel.config.server_control.section.reloading.heading\"\n                  )}\n                >\n                  <div class=\"card-content\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.server_control.section.reloading.introduction\"\n                    )}\n                  </div>\n                  <div class=\"card-actions\">\n                    <ha-call-service-button\n                      .hass=${this.hass}\n                      domain=\"homeassistant\"\n                      service=\"reload_core_config\"\n                      >${this.hass.localize(\n                        \"ui.panel.config.server_control.section.reloading.core\"\n                      )}\n                    </ha-call-service-button>\n                  </div>\n                  ${this._reloadableDomains.map(\n                    (domain) =>\n                      html`\n                        <div class=\"card-actions\">\n                          <ha-call-service-button\n                            .hass=${this.hass}\n                            .domain=${domain}\n                            service=\"reload\"\n                            >${this.hass.localize(\n                              `ui.panel.config.server_control.section.reloading.${domain}`\n                            ) ||\n                            this.hass.localize(\n                              \"ui.panel.config.server_control.section.reloading.reload\",\n                              \"domain\",\n                              domainToName(this.hass.localize, domain)\n                            )}\n                          </ha-call-service-button>\n                        </div>\n                      `\n                  )}\n                </ha-card>\n              `\n            : \"\"}\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  private async _validateConfig() {\n    this._validating = true;\n    this._validateLog = \"\";\n    this._isValid = null;\n\n    const configCheck = await checkCoreConfig(this.hass);\n    this._validating = false;\n    this._isValid = configCheck.result === \"valid\";\n\n    if (configCheck.errors) {\n      this._validateLog = configCheck.errors;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .validate-container {\n          height: 140px;\n        }\n\n        .validate-result {\n          color: var(--success-color);\n          font-weight: 500;\n          margin-bottom: 1em;\n        }\n\n        .config-invalid {\n          margin: 1em 0;\n        }\n\n        .config-invalid .text {\n          color: var(--error-color);\n          font-weight: 500;\n        }\n\n        .config-invalid mwc-button {\n          float: right;\n        }\n\n        .validate-log {\n          white-space: pre-line;\n          direction: ltr;\n        }\n\n        .content {\n          padding: 28px 20px 0;\n          max-width: 1040px;\n          margin: 0 auto;\n        }\n\n        ha-card {\n          margin-top: 24px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-server-control\": HaConfigServerControl;\n  }\n}\n"],"names":[],"sourceRoot":""}