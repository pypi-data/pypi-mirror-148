{"version":3,"file":"36d0510e.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtEA;;ACpCA;;;AAMA;;AAEA;;;;;AAKA;;;;;AAKA;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAvCA;;;;;;;;;;;;;;;;;;ACrBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC6FA;;;ACvCA;AACA;AACA;AACA;;;;;;AAnDA;;;;;ACgIA;AACA;;AAEA;;AAEA;;AAEA;;;;AAIA;;;;;AAKA;;;;;AAKA;;;;;;;AAOA;AACA;;;AAGA;;AAGA;AACA;AACA;AACA;;AAEA;AAEA;AAMA;AAEA;;AAGA;AAEA;AACA;;AAGA;AACA;AACA;AACA;;;AAMA;;;;;;;;AA5JA;AAGA;;;;AAIA;AAGA;;;;AAIA;AAGA;;;;AAIA;;AAIA;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/app-layout/app-header-layout/app-header-layout.js","webpack://home-assistant-frontend/./node_modules/@polymer/paper-item/paper-item-body.js","webpack://home-assistant-frontend/./src/components/ha-alert.ts","webpack://home-assistant-frontend/./src/components/ha-tip.ts","webpack://home-assistant-frontend/./src/layouts/ha-app-layout.js","webpack://home-assistant-frontend/./src/panels/config/dashboard/ha-config-navigation.ts","webpack://home-assistant-frontend/./src/panels/config/dashboard/ha-config-dashboard.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {AppLayoutBehavior} from '../app-layout-behavior/app-layout-behavior.js';\n\n/**\napp-header-layout is a wrapper element that positions an app-header and other\ncontent. This element uses the document scroll by default, but it can also\ndefine its own scrolling region.\n\nUsing the document scroll:\n\n```html\n<app-header-layout>\n  <app-header slot=\"header\" fixed condenses effects=\"waterfall\">\n    <app-toolbar>\n      <div main-title>App name</div>\n    </app-toolbar>\n  </app-header>\n  <div>\n    main content\n  </div>\n</app-header-layout>\n```\n\nUsing an own scrolling region:\n\n```html\n<app-header-layout has-scrolling-region style=\"width: 300px; height: 400px;\">\n  <app-header slot=\"header\" fixed condenses effects=\"waterfall\">\n    <app-toolbar>\n      <div main-title>App name</div>\n    </app-toolbar>\n  </app-header>\n  <div>\n    main content\n  </div>\n</app-header-layout>\n```\n\nAdd the `fullbleed` attribute to app-header-layout to make it fit the size of\nits container:\n\n```html\n<app-header-layout fullbleed>\n ...\n</app-header-layout>\n```\n\n@element app-header-layout\n@demo app-header-layout/demo/simple.html Simple Demo\n@demo app-header-layout/demo/scrolling-region.html Scrolling Region\n@demo app-header-layout/demo/music.html Music Demo\n@demo app-header-layout/demo/footer.html Footer Demo\n*/\nPolymer({\n  /** @override */\n  _template: html`\n    <style>\n      :host {\n        display: block;\n        /**\n         * Force app-header-layout to have its own stacking context so that its parent can\n         * control the stacking of it relative to other elements (e.g. app-drawer-layout).\n         * This could be done using \\`isolation: isolate\\`, but that's not well supported\n         * across browsers.\n         */\n        position: relative;\n        z-index: 0;\n      }\n\n      #wrapper ::slotted([slot=header]) {\n        @apply --layout-fixed-top;\n        z-index: 1;\n      }\n\n      #wrapper.initializing ::slotted([slot=header]) {\n        position: relative;\n      }\n\n      :host([has-scrolling-region]) {\n        height: 100%;\n      }\n\n      :host([has-scrolling-region]) #wrapper ::slotted([slot=header]) {\n        position: absolute;\n      }\n\n      :host([has-scrolling-region]) #wrapper.initializing ::slotted([slot=header]) {\n        position: relative;\n      }\n\n      :host([has-scrolling-region]) #wrapper #contentContainer {\n        @apply --layout-fit;\n        overflow-y: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n\n      :host([has-scrolling-region]) #wrapper.initializing #contentContainer {\n        position: relative;\n      }\n\n      :host([fullbleed]) {\n        @apply --layout-vertical;\n        @apply --layout-fit;\n      }\n\n      :host([fullbleed]) #wrapper,\n      :host([fullbleed]) #wrapper #contentContainer {\n        @apply --layout-vertical;\n        @apply --layout-flex;\n      }\n\n      #contentContainer {\n        /* Create a stacking context here so that all children appear below the header. */\n        position: relative;\n        z-index: 0;\n      }\n\n      @media print {\n        :host([has-scrolling-region]) #wrapper #contentContainer {\n          overflow-y: visible;\n        }\n      }\n\n    </style>\n\n    <div id=\"wrapper\" class=\"initializing\">\n      <slot id=\"headerSlot\" name=\"header\"></slot>\n\n      <div id=\"contentContainer\">\n        <slot></slot>\n      </div>\n    </div>\n`,\n\n  is: 'app-header-layout',\n  behaviors: [AppLayoutBehavior],\n\n  properties: {\n    /**\n     * If true, the current element will have its own scrolling region.\n     * Otherwise, it will use the document scroll to control the header.\n     */\n    hasScrollingRegion: {type: Boolean, value: false, reflectToAttribute: true}\n  },\n\n  observers: ['resetLayout(isAttached, hasScrollingRegion)'],\n\n  /**\n   * A reference to the app-header element.\n   *\n   * @property header\n   */\n  get header() {\n    return dom(this.$.headerSlot).getDistributedNodes()[0];\n  },\n\n  _updateLayoutStates: function() {\n    var header = this.header;\n    if (!this.isAttached || !header) {\n      return;\n    }\n    // Remove the initializing class, which staticly positions the header and\n    // the content until the height of the header can be read.\n    this.$.wrapper.classList.remove('initializing');\n    // Update scroll target.\n    header.scrollTarget = this.hasScrollingRegion ?\n        this.$.contentContainer :\n        this.ownerDocument.documentElement;\n    // Get header height here so that style reads are batched together before\n    // style writes (i.e. getBoundingClientRect() below).\n    var headerHeight = header.offsetHeight;\n    // Update the header position.\n    if (!this.hasScrollingRegion) {\n      requestAnimationFrame(function() {\n        var rect = this.getBoundingClientRect();\n        var rightOffset = document.documentElement.clientWidth - rect.right;\n        header.style.left = rect.left + 'px';\n        header.style.right = rightOffset + 'px';\n      }.bind(this));\n    } else {\n      header.style.left = '';\n      header.style.right = '';\n    }\n    // Update the content container position.\n    var containerStyle = this.$.contentContainer.style;\n    if (header.fixed && !header.condenses && this.hasScrollingRegion) {\n      // If the header size does not change and we're using a scrolling region,\n      // exclude the header area from the scrolling region so that the header\n      // doesn't overlap the scrollbar.\n      containerStyle.marginTop = headerHeight + 'px';\n      containerStyle.paddingTop = '';\n    } else {\n      containerStyle.paddingTop = headerHeight + 'px';\n      containerStyle.marginTop = '';\n    }\n  }\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/default-theme.js';\nimport '@polymer/paper-styles/typography.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/*\nUse `<paper-item-body>` in a `<paper-item>` or `<paper-icon-item>` to make two-\nor three- line items. It is a flex item that is a vertical flexbox.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n    </paper-item>\n\nThe child elements with the `secondary` attribute is given secondary text\nstyling.\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-body-two-line-min-height` | Minimum height of a two-line item | `72px`\n`--paper-item-body-three-line-min-height` | Minimum height of a three-line item | `88px`\n`--paper-item-body-secondary-color` | Foreground color for the `secondary` area | `--secondary-text-color`\n`--paper-item-body-secondary` | Mixin applied to the `secondary` area | `{}`\n\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        overflow: hidden; /* needed for text-overflow: ellipsis to work on ff */\n        @apply --layout-vertical;\n        @apply --layout-center-justified;\n        @apply --layout-flex;\n      }\n\n      :host([two-line]) {\n        min-height: var(--paper-item-body-two-line-min-height, 72px);\n      }\n\n      :host([three-line]) {\n        min-height: var(--paper-item-body-three-line-min-height, 88px);\n      }\n\n      :host > ::slotted(*) {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n\n      :host > ::slotted([secondary]) {\n        @apply --paper-font-body1;\n\n        color: var(--paper-item-body-secondary-color, var(--secondary-text-color));\n\n        @apply --paper-item-body-secondary;\n      }\n    </style>\n\n    <slot></slot>\n`,\n\n  is: 'paper-item-body'\n});\n","import {\n  mdiAlertCircleOutline,\n  mdiAlertOutline,\n  mdiCheckboxMarkedCircleOutline,\n  mdiClose,\n  mdiInformationOutline,\n} from \"@mdi/js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-icon-button\";\nimport \"./ha-svg-icon\";\n\nconst ALERT_ICONS = {\n  info: mdiInformationOutline,\n  warning: mdiAlertOutline,\n  error: mdiAlertCircleOutline,\n  success: mdiCheckboxMarkedCircleOutline,\n};\n\ndeclare global {\n  interface HASSDomEvents {\n    \"alert-dismissed-clicked\": undefined;\n  }\n}\n\n@customElement(\"ha-alert\")\nclass HaAlert extends LitElement {\n  @property() public title = \"\";\n\n  @property({ attribute: \"alert-type\" }) public alertType:\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n    | \"success\" = \"info\";\n\n  @property({ type: Boolean }) public dismissable = false;\n\n  @property({ type: Boolean }) public rtl = false;\n\n  public render() {\n    return html`\n      <div\n        class=\"issue-type ${classMap({\n          rtl: this.rtl,\n          [this.alertType]: true,\n        })}\"\n        role=\"alert\"\n      >\n        <div class=\"icon ${this.title ? \"\" : \"no-title\"}\">\n          <slot name=\"icon\">\n            <ha-svg-icon .path=${ALERT_ICONS[this.alertType]}></ha-svg-icon>\n          </slot>\n        </div>\n        <div class=\"content\">\n          <div class=\"main-content\">\n            ${this.title ? html`<div class=\"title\">${this.title}</div>` : \"\"}\n            <slot></slot>\n          </div>\n          <div class=\"action\">\n            <slot name=\"action\">\n              ${this.dismissable\n                ? html`<ha-icon-button\n                    @click=${this._dismiss_clicked}\n                    label=\"Dismiss alert\"\n                    .path=${mdiClose}\n                  ></ha-icon-button>`\n                : \"\"}\n            </slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private _dismiss_clicked() {\n    fireEvent(this, \"alert-dismissed-clicked\");\n  }\n\n  static styles = css`\n    .issue-type {\n      position: relative;\n      padding: 8px;\n      display: flex;\n      margin: 4px 0;\n    }\n    .issue-type.rtl {\n      flex-direction: row-reverse;\n    }\n    .issue-type::after {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      opacity: 0.12;\n      pointer-events: none;\n      content: \"\";\n      border-radius: 4px;\n    }\n    .icon {\n      z-index: 1;\n    }\n    .icon.no-title {\n      align-self: center;\n    }\n    .issue-type.rtl > .content {\n      flex-direction: row-reverse;\n      text-align: right;\n    }\n    .content {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    }\n    .action {\n      z-index: 1;\n      width: min-content;\n      --mdc-theme-primary: var(--primary-text-color);\n    }\n    .main-content {\n      overflow-wrap: anywhere;\n      word-break: break-word;\n      margin-left: 8px;\n      margin-right: 0;\n    }\n    .issue-type.rtl > .content > .main-content {\n      margin-left: 0;\n      margin-right: 8px;\n    }\n    .title {\n      margin-top: 2px;\n      font-weight: bold;\n    }\n    .action mwc-button,\n    .action ha-icon-button {\n      --mdc-theme-primary: var(--primary-text-color);\n      --mdc-icon-button-size: 36px;\n    }\n    .issue-type.info > .icon {\n      color: var(--info-color);\n    }\n    .issue-type.info::after {\n      background-color: var(--info-color);\n    }\n\n    .issue-type.warning > .icon {\n      color: var(--warning-color);\n    }\n    .issue-type.warning::after {\n      background-color: var(--warning-color);\n    }\n\n    .issue-type.error > .icon {\n      color: var(--error-color);\n    }\n    .issue-type.error::after {\n      background-color: var(--error-color);\n    }\n\n    .issue-type.success > .icon {\n      color: var(--success-color);\n    }\n    .issue-type.success::after {\n      background-color: var(--success-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-alert\": HaAlert;\n  }\n}\n","import { mdiLightbulbOutline } from \"@mdi/js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-tip\")\nclass HaTip extends LitElement {\n  public render() {\n    return html`\n      <ha-svg-icon .path=${mdiLightbulbOutline}></ha-svg-icon>\n      <span class=\"prefix\">Tip!</span>\n      <span class=\"text\"><slot></slot></span>\n    `;\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n      text-align: center;\n    }\n\n    .text {\n      margin-left: 2px;\n      color: var(--secondary-text-color);\n    }\n\n    .prefix {\n      font-weight: 500;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-tip\": HaTip;\n  }\n}\n","/* eslint-plugin-disable lit */\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\nThis code is copied from app-header-layout.\n'fullbleed' support is removed as Home Assisstant doesn't use it.\ntransform: translate(0) is added.\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport \"@polymer/polymer/polymer-element\";\n\nclass HaAppLayout extends customElements.get(\"app-header-layout\") {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          /**\n         * Force app-header-layout to have its own stacking context so that its parent can\n         * control the stacking of it relative to other elements (e.g. app-drawer-layout).\n         * This could be done using \\`isolation: isolate\\`, but that's not well supported\n         * across browsers.\n         */\n          position: relative;\n          z-index: 0;\n        }\n\n        #wrapper ::slotted([slot=\"header\"]) {\n          @apply --layout-fixed-top;\n          z-index: 1;\n        }\n\n        #wrapper.initializing ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) {\n          height: 100%;\n        }\n\n        :host([has-scrolling-region]) #wrapper ::slotted([slot=\"header\"]) {\n          position: absolute;\n        }\n\n        :host([has-scrolling-region])\n          #wrapper.initializing\n          ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) #wrapper #contentContainer {\n          @apply --layout-fit;\n          overflow-y: auto;\n          -webkit-overflow-scrolling: touch;\n        }\n\n        :host([has-scrolling-region]) #wrapper.initializing #contentContainer {\n          position: relative;\n        }\n\n        #contentContainer {\n          /* Create a stacking context here so that all children appear below the header. */\n          position: relative;\n          z-index: 0;\n          /* Using 'transform' will cause 'position: fixed' elements to behave like\n           'position: absolute' relative to this element. */\n          transform: translate(0);\n          margin-left: env(safe-area-inset-left);\n          margin-right: env(safe-area-inset-right);\n        }\n\n        @media print {\n          :host([has-scrolling-region]) #wrapper #contentContainer {\n            overflow-y: visible;\n          }\n        }\n      </style>\n\n      <div id=\"wrapper\" class=\"initializing\">\n        <slot id=\"headerSlot\" name=\"header\"></slot>\n\n        <div id=\"contentContainer\"><slot></slot></div>\n        <slot id=\"fab\" name=\"fab\"></slot>\n      </div>\n    `;\n  }\n}\ncustomElements.define(\"ha-app-layout\", HaAppLayout);\n","import \"@material/mwc-list/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { canShowPage } from \"../../../common/config/can_show_page\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon-next\";\nimport \"../../../components/ha-navigation-list\";\nimport type { CloudStatus, CloudStatusLoggedIn } from \"../../../data/cloud\";\nimport type { PageNavigation } from \"../../../layouts/hass-tabs-subpage\";\nimport type { HomeAssistant } from \"../../../types\";\n\n@customElement(\"ha-config-navigation\")\nclass HaConfigNavigation extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ attribute: false }) public pages!: PageNavigation[];\n\n  protected render(): TemplateResult {\n    const pages = this.pages\n      .filter((page) =>\n        page.path === \"#external-app-configuration\"\n          ? this.hass.auth.external?.config.hasSettingsScreen\n          : canShowPage(this.hass, page)\n      )\n      .map((page) => ({\n        ...page,\n        name:\n          page.name ||\n          this.hass.localize(\n            `ui.panel.config.dashboard.${page.translationKey}.main`\n          ),\n        description:\n          page.component === \"cloud\" && (page.info as CloudStatus)\n            ? page.info.logged_in\n              ? `\n                  ${this.hass.localize(\n                    \"ui.panel.config.cloud.description_login\",\n                    \"email\",\n                    (page.info as CloudStatusLoggedIn).email\n                  )}\n                `\n              : `\n                  ${this.hass.localize(\n                    \"ui.panel.config.cloud.description_features\"\n                  )}\n                `\n            : `\n                ${\n                  page.description ||\n                  this.hass.localize(\n                    `ui.panel.config.dashboard.${page.translationKey}.secondary`\n                  )\n                }\n              `,\n      }));\n    return html`\n      <ha-navigation-list\n        hasSecondary\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .pages=${pages}\n        @click=${this._entryClicked}\n      ></ha-navigation-list>\n    `;\n  }\n\n  private _entryClicked(ev) {\n    const anchor = ev\n      .composedPath()\n      .find((n) => (n as HTMLElement).tagName === \"A\") as\n      | HTMLAnchorElement\n      | undefined;\n\n    if (anchor?.href?.endsWith(\"#external-app-configuration\")) {\n      ev.preventDefault();\n      this.hass.auth.external!.fireMessage({\n        type: \"config_screen/show\",\n      });\n    }\n  }\n\n  static styles: CSSResultGroup = css`\n    ha-navigation-list {\n      --navigation-list-item-title-font-size: 16px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-navigation\": HaConfigNavigation;\n  }\n}\n","import type { ActionDetail } from \"@material/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiCloudLock, mdiDotsVertical, mdiMagnify, mdiNewBox } from \"@mdi/js\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport type { HassEntities } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { computeStateDomain } from \"../../../common/entity/compute_state_domain\";\nimport { caseInsensitiveStringCompare } from \"../../../common/string/compare\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-icon-next\";\nimport \"../../../components/ha-menu-button\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/ha-tip\";\nimport { CloudStatus } from \"../../../data/cloud\";\nimport { updateCanInstall, UpdateEntity } from \"../../../data/update\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport { showQuickBar } from \"../../../dialogs/quick-bar/show-dialog-quick-bar\";\nimport \"../../../layouts/ha-app-layout\";\nimport { PageNavigation } from \"../../../layouts/hass-tabs-subpage\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { showToast } from \"../../../util/toast\";\nimport \"../ha-config-section\";\nimport { configSections } from \"../ha-panel-config\";\nimport \"./ha-config-navigation\";\nimport \"./ha-config-updates\";\n\nconst randomTip = (hass: HomeAssistant) => {\n  const weighted: string[] = [];\n  const tips = [\n    {\n      content: hass.localize(\n        \"ui.panel.config.tips.join\",\n        \"forums\",\n        html`<a\n          href=\"https://community.home-assistant.io\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          >Forums</a\n        >`,\n        \"twitter\",\n        html`<a\n          href=${documentationUrl(hass, `/twitter`)}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          >Twitter</a\n        >`,\n        \"discord\",\n        html`<a\n          href=${documentationUrl(hass, `/join-chat`)}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          >Chat</a\n        >`,\n        \"blog\",\n        html`<a\n          href=${documentationUrl(hass, `/blog`)}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          >Blog</a\n        >`,\n        \"newsletter\",\n        html`<span class=\"keep-together\"\n          ><a\n            href=${documentationUrl(hass, `/newsletter`)}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            >Newsletter</a\n          >\n          <ha-svg-icon class=\"new\" .path=${mdiNewBox}></ha-svg-icon\n        ></span>`\n      ),\n      weight: 2,\n    },\n    { content: hass.localize(\"ui.tips.key_c_hint\"), weight: 1 },\n  ];\n\n  tips.forEach((tip) => {\n    for (let i = 0; i < tip.weight; i++) {\n      weighted.push(tip.content);\n    }\n  });\n\n  return weighted[Math.floor(Math.random() * weighted.length)];\n};\n\n@customElement(\"ha-config-dashboard\")\nclass HaConfigDashboard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true })\n  public narrow!: boolean;\n\n  @property() public isWide!: boolean;\n\n  @property() public cloudStatus?: CloudStatus;\n\n  @property() public showAdvanced!: boolean;\n\n  @state() private _tip?: string;\n\n  private _notifyUpdates = false;\n\n  private _pages = memoizeOne((clouStatus, isLoaded) => {\n    const pages: PageNavigation[] = [];\n    if (clouStatus && isLoaded) {\n      pages.push({\n        component: \"cloud\",\n        path: \"/config/cloud\",\n        name: \"Home Assistant Cloud\",\n        info: this.cloudStatus,\n        iconPath: mdiCloudLock,\n        iconColor: \"#3B808E\",\n      });\n    }\n    return [...pages, ...configSections.dashboard];\n  });\n\n  protected render(): TemplateResult {\n    const [canInstallUpdates, totalUpdates] =\n      this._filterUpdateEntitiesWithInstall(this.hass.states);\n\n    return html`\n      <ha-app-layout>\n        <app-header fixed slot=\"header\">\n          <app-toolbar>\n            <ha-menu-button\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n            ></ha-menu-button>\n            <div main-title>${this.hass.localize(\"panel.config\")}</div>\n            <ha-icon-button\n              .label=${this.hass.localize(\"ui.dialogs.quick-bar.title\")}\n              .path=${mdiMagnify}\n              @click=${this._showQuickBar}\n            ></ha-icon-button>\n            <ha-button-menu\n              corner=\"BOTTOM_START\"\n              @action=${this._handleMenuAction}\n              activatable\n            >\n              <ha-icon-button\n                slot=\"trigger\"\n                .label=${this.hass.localize(\"ui.common.menu\")}\n                .path=${mdiDotsVertical}\n              ></ha-icon-button>\n\n              <mwc-list-item>\n                ${this.hass.localize(\"ui.panel.config.updates.check_updates\")}\n              </mwc-list-item>\n            </ha-button-menu>\n          </app-toolbar>\n        </app-header>\n\n        <ha-config-section\n          .narrow=${this.narrow}\n          .isWide=${this.isWide}\n          full-width\n        >\n          ${canInstallUpdates.length\n            ? html`<ha-card outlined>\n                <ha-config-updates\n                  .hass=${this.hass}\n                  .narrow=${this.narrow}\n                  .total=${totalUpdates}\n                  .updateEntities=${canInstallUpdates}\n                ></ha-config-updates>\n                ${totalUpdates > canInstallUpdates.length\n                  ? html`<a class=\"button\" href=\"/config/updates\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.updates.more_updates\",\n                        {\n                          count: totalUpdates - canInstallUpdates.length,\n                        }\n                      )}\n                    </a>`\n                  : \"\"}\n              </ha-card>`\n            : \"\"}\n          <ha-card outlined>\n            ${this.narrow && canInstallUpdates.length\n              ? html`<div class=\"title\">\n                  ${this.hass.localize(\"panel.config\")}\n                </div>`\n              : \"\"}\n            <ha-config-navigation\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n              .showAdvanced=${this.showAdvanced}\n              .pages=${this._pages(\n                this.cloudStatus,\n                isComponentLoaded(this.hass, \"cloud\")\n              )}\n            ></ha-config-navigation>\n          </ha-card>\n          <ha-tip>${this._tip}</ha-tip>\n        </ha-config-section>\n      </ha-app-layout>\n    `;\n  }\n\n  protected override updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    if (!this._tip && changedProps.has(\"hass\")) {\n      this._tip = randomTip(this.hass);\n    }\n\n    if (!changedProps.has(\"hass\") || !this._notifyUpdates) {\n      return;\n    }\n    this._notifyUpdates = false;\n    if (this._filterUpdateEntitiesWithInstall(this.hass.states).length) {\n      showToast(this, {\n        message: this.hass.localize(\n          \"ui.panel.config.updates.updates_refreshed\"\n        ),\n      });\n    } else {\n      showToast(this, {\n        message: this.hass.localize(\"ui.panel.config.updates.no_new_updates\"),\n      });\n    }\n  }\n\n  private _filterUpdateEntities = memoizeOne((entities: HassEntities) =>\n    (\n      Object.values(entities).filter(\n        (entity) => computeStateDomain(entity) === \"update\"\n      ) as UpdateEntity[]\n    ).sort((a, b) => {\n      if (a.attributes.title === \"Home Assistant Core\") {\n        return -3;\n      }\n      if (b.attributes.title === \"Home Assistant Core\") {\n        return 3;\n      }\n      if (a.attributes.title === \"Home Assistant Operating System\") {\n        return -2;\n      }\n      if (b.attributes.title === \"Home Assistant Operating System\") {\n        return 2;\n      }\n      if (a.attributes.title === \"Home Assistant Supervisor\") {\n        return -1;\n      }\n      if (b.attributes.title === \"Home Assistant Supervisor\") {\n        return 1;\n      }\n      return caseInsensitiveStringCompare(\n        a.attributes.title || a.attributes.friendly_name || \"\",\n        b.attributes.title || b.attributes.friendly_name || \"\"\n      );\n    })\n  );\n\n  private _filterUpdateEntitiesWithInstall = memoizeOne(\n    (entities: HassEntities): [UpdateEntity[], number] => {\n      const updates = this._filterUpdateEntities(entities).filter((entity) =>\n        updateCanInstall(entity)\n      );\n      return [\n        updates.slice(0, updates.length === 3 ? updates.length : 2),\n        updates.length,\n      ];\n    }\n  );\n\n  private _showQuickBar(): void {\n    showQuickBar(this, {\n      commandMode: true,\n      hint: this.hass.localize(\"ui.dialogs.quick-bar.key_c_hint\"),\n    });\n  }\n\n  private async _handleMenuAction(ev: CustomEvent<ActionDetail>) {\n    const _entities = this._filterUpdateEntities(this.hass.states).map(\n      (entity) => entity.entity_id\n    );\n    switch (ev.detail.index) {\n      case 0:\n        if (_entities.length) {\n          this._notifyUpdates = true;\n          await this.hass.callService(\"homeassistant\", \"update_entity\", {\n            entity_id: _entities,\n          });\n          return;\n        }\n        showAlertDialog(this, {\n          title: this.hass.localize(\n            \"ui.panel.config.updates.no_update_entities.title\"\n          ),\n          text: this.hass.localize(\n            \"ui.panel.config.updates.no_update_entities.description\"\n          ),\n          warning: true,\n        });\n        break;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-card:last-child {\n          margin-bottom: env(safe-area-inset-bottom);\n        }\n        :host(:not([narrow])) ha-card:last-child {\n          margin-bottom: max(24px, env(safe-area-inset-bottom));\n        }\n        ha-config-section {\n          margin: auto;\n          margin-top: -32px;\n          max-width: 600px;\n        }\n        ha-card {\n          overflow: hidden;\n        }\n        ha-card a {\n          text-decoration: none;\n          color: var(--primary-text-color);\n        }\n        a.button {\n          display: block;\n          color: var(--primary-color);\n          padding: 16px;\n        }\n        .title {\n          font-size: 16px;\n          padding: 16px;\n          padding-bottom: 0;\n        }\n        :host([narrow]) ha-card {\n          border-radius: 0;\n          box-shadow: unset;\n        }\n\n        :host([narrow]) ha-config-section {\n          margin-top: -42px;\n        }\n\n        ha-tip {\n          margin-bottom: max(env(safe-area-inset-bottom), 8px);\n        }\n\n        .new {\n          color: var(--primary-color);\n        }\n\n        .keep-together {\n          display: inline-block;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-dashboard\": HaConfigDashboard;\n  }\n}\n"],"names":[],"sourceRoot":""}