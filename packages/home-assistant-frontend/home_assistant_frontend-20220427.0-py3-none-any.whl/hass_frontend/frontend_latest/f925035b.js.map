{"version":3,"file":"f925035b.js","mappings":";;;;;;;;AAOA;;;;ACDA;;;;ACUA;AACA;;;;;;;AAZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACsBA;;AAGA;AACA;AACA;;AAEA;AAGA;;AAEA;;;AAGA;;AAGA;AACA;;;;AAIA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA7CA;;;ACoCA;AACA;AACA;;;;;AAKA;;AAGA;;;;;AAQA;AAGA;AACA;AACA;;;AAGA;;;;AAMA;AACA;AACA;AACA;;AAEA;AAGA;;;;AAKA;;;AAKA;AACA;AACA;;;AAGA;;;;;AAOA;;;AAKA;;AAEA;;;AAKA;;;;;;;AASA;AACA;AACA;;;;AAIA;;AAEA;;;AAKA;;;;;;;AASA;AACA;AACA;;;;;;AAMA;;;;AAMA;AACA;AACA;AACA;;AAEA;AAGA;;;;;;;AAQA;;;;;;AAQA;;;AAKA;;AAIA;AACA;;;;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAvLA","sources":["webpack://home-assistant-frontend/./src/components/ha-formfield.ts","webpack://home-assistant-frontend/./src/components/ha-radio.ts","webpack://home-assistant-frontend/./src/components/ha-settings-row.ts","webpack://home-assistant-frontend/./src/layouts/hass-subpage.ts","webpack://home-assistant-frontend/./src/panels/config/core/ha-config-section-general.ts"],"sourcesContent":["import { FormfieldBase } from \"@material/mwc-formfield/mwc-formfield-base\";\nimport { styles } from \"@material/mwc-formfield/mwc-formfield.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-formfield\")\nexport class HaFormfield extends FormfieldBase {\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      switch (input.tagName) {\n        case \"HA-CHECKBOX\":\n        case \"HA-RADIO\":\n          (input as any).checked = !(input as any).checked;\n          fireEvent(input, \"change\");\n          break;\n        default:\n          input.click();\n          break;\n      }\n    }\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host(:not([alignEnd])) ::slotted(ha-switch) {\n        margin-right: 10px;\n      }\n      :host([dir=\"rtl\"]:not([alignEnd])) ::slotted(ha-switch) {\n        margin-left: 10px;\n        margin-right: auto;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { RadioBase } from \"@material/mwc-radio/mwc-radio-base\";\nimport { styles } from \"@material/mwc-radio/mwc-radio.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-radio\")\nexport class HaRadio extends RadioBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-radio\": HaRadio;\n  }\n}\n","import \"@polymer/paper-item/paper-item-body\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-settings-row\")\nexport class HaSettingsRow extends LitElement {\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property({ type: Boolean, attribute: \"three-line\" })\n  public threeLine = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"prefix-wrap\">\n        <slot name=\"prefix\"></slot>\n        <paper-item-body\n          ?two-line=${!this.threeLine}\n          ?three-line=${this.threeLine}\n        >\n          <slot name=\"heading\"></slot>\n          <div secondary><slot name=\"description\"></slot></div>\n        </paper-item-body>\n      </div>\n      <div class=\"content\"><slot></slot></div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        padding: 0 16px;\n        align-content: normal;\n        align-self: auto;\n        align-items: center;\n      }\n      paper-item-body {\n        padding: 8px 16px 8px 0;\n      }\n      paper-item-body[two-line] {\n        min-height: calc(\n          var(--paper-item-body-two-line-min-height, 72px) - 16px\n        );\n        flex: 1;\n      }\n      .content {\n        display: contents;\n      }\n      :host(:not([narrow])) .content {\n        display: var(--settings-row-content-display, flex);\n        justify-content: flex-end;\n        flex: 1;\n        padding: 16px 0;\n      }\n      .content ::slotted(*) {\n        width: var(--settings-row-content-width);\n      }\n      :host([narrow]) {\n        align-items: normal;\n        flex-direction: column;\n        border-top: 1px solid var(--divider-color);\n        padding-bottom: 8px;\n      }\n      ::slotted(ha-switch) {\n        padding: 16px 0;\n      }\n      div[secondary] {\n        white-space: normal;\n      }\n      .prefix-wrap {\n        display: var(--settings-row-prefix-display);\n      }\n      :host([narrow]) .prefix-wrap {\n        display: flex;\n        align-items: center;\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-settings-row\": HaSettingsRow;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, eventOptions, property } from \"lit/decorators\";\nimport { restoreScroll } from \"../common/decorators/restore-scroll\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"hass-subpage\")\nclass HassSubpage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public header?: string;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  // @ts-ignore\n  @restoreScroll(\".content\") private _savedScrollPos?: number;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"toolbar\">\n        ${this.mainPage || history.state?.root\n          ? html`\n              <ha-menu-button\n                .hassio=${this.supervisor}\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n              ></ha-menu-button>\n            `\n          : this.backPath\n          ? html`\n              <a href=${this.backPath}>\n                <ha-icon-button-arrow-prev\n                  .hass=${this.hass}\n                ></ha-icon-button-arrow-prev>\n              </a>\n            `\n          : html`\n              <ha-icon-button-arrow-prev\n                .hass=${this.hass}\n                @click=${this._backTapped}\n              ></ha-icon-button-arrow-prev>\n            `}\n\n        <div class=\"main-title\">${this.header}</div>\n        <slot name=\"toolbar-icon\"></slot>\n      </div>\n      <div class=\"content\" @scroll=${this._saveScrollPos}><slot></slot></div>\n    `;\n  }\n\n  @eventOptions({ passive: true })\n  private _saveScrollPos(e: Event) {\n    this._savedScrollPos = (e.target as HTMLDivElement).scrollTop;\n  }\n\n  private _backTapped(): void {\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n        background-color: var(--primary-background-color);\n      }\n\n      :host([narrow]) {\n        width: 100%;\n        position: fixed;\n      }\n\n      .toolbar {\n        display: flex;\n        align-items: center;\n        font-size: 20px;\n        height: var(--header-height);\n        padding: 0 16px;\n        pointer-events: none;\n        background-color: var(--app-header-background-color);\n        font-weight: 400;\n        color: var(--app-header-text-color, white);\n        border-bottom: var(--app-header-border-bottom, none);\n        box-sizing: border-box;\n      }\n      .toolbar a {\n        color: var(--sidebar-text-color);\n        text-decoration: none;\n      }\n\n      ha-menu-button,\n      ha-icon-button-arrow-prev,\n      ::slotted([slot=\"toolbar-icon\"]) {\n        pointer-events: auto;\n      }\n\n      .main-title {\n        margin: 0 0 0 24px;\n        line-height: 20px;\n        flex-grow: 1;\n      }\n\n      .content {\n        position: relative;\n        width: 100%;\n        height: calc(100% - 1px - var(--header-height));\n        overflow-y: auto;\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-subpage\": HassSubpage;\n  }\n}\n","import timezones from \"google-timezones-json\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { UNIT_C } from \"../../../common/const\";\nimport { stopPropagation } from \"../../../common/dom/stop_propagation\";\nimport { navigate } from \"../../../common/navigate\";\nimport { HaProgressButton } from \"../../../components/buttons/ha-progress-button\";\nimport { currencies } from \"../../../components/currency-datalist\";\nimport \"../../../components/ha-formfield\";\nimport \"../../../components/ha-radio\";\nimport type { HaRadio } from \"../../../components/ha-radio\";\nimport \"../../../components/ha-settings-row\";\nimport { ConfigUpdateValues, saveCoreConfig } from \"../../../data/core\";\nimport { SYMBOL_TO_ISO } from \"../../../data/currency\";\nimport \"../../../layouts/hass-subpage\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\n\n@customElement(\"ha-config-section-general\")\nclass HaConfigSectionGeneral extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @state() private _submitting = false;\n\n  @state() private _unitSystem?: ConfigUpdateValues[\"unit_system\"];\n\n  @state() private _currency?: string;\n\n  @state() private _name?: string;\n\n  @state() private _elevation?: number;\n\n  @state() private _timeZone?: string;\n\n  protected render(): TemplateResult {\n    const canEdit = [\"storage\", \"default\"].includes(\n      this.hass.config.config_source\n    );\n    const disabled = this._submitting || !canEdit;\n    return html`\n      <hass-subpage\n        back-path=\"/config/system\"\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .header=${this.hass.localize(\"ui.panel.config.core.caption\")}\n      >\n        <div class=\"content\">\n          <ha-card>\n            <div class=\"card-content\">\n              ${!canEdit\n                ? html`\n                    <p>\n                      ${this.hass.localize(\n                        \"ui.panel.config.core.section.core.core_config.edit_requires_storage\"\n                      )}\n                    </p>\n                  `\n                : \"\"}\n              <ha-textfield\n                name=\"name\"\n                .label=${this.hass.localize(\n                  \"ui.panel.config.core.section.core.core_config.location_name\"\n                )}\n                .disabled=${disabled}\n                .value=${this._name}\n                @change=${this._handleChange}\n              ></ha-textfield>\n              <ha-select\n                .label=${this.hass.localize(\n                  \"ui.panel.config.core.section.core.core_config.time_zone\"\n                )}\n                name=\"timeZone\"\n                fixedMenuPosition\n                naturalMenuWidth\n                .disabled=${disabled}\n                .value=${this._timeZone}\n                @closed=${stopPropagation}\n                @change=${this._handleChange}\n              >\n                ${Object.keys(timezones).map(\n                  (tz) =>\n                    html`<mwc-list-item value=${tz}\n                      >${timezones[tz]}</mwc-list-item\n                    >`\n                )}\n              </ha-select>\n              <ha-textfield\n                .label=${this.hass.localize(\n                  \"ui.panel.config.core.section.core.core_config.elevation\"\n                )}\n                name=\"elevation\"\n                type=\"number\"\n                .disabled=${disabled}\n                .value=${this._elevation}\n                @change=${this._handleChange}\n              >\n                <span slot=\"suffix\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.core.section.core.core_config.elevation_meters\"\n                  )}\n                </span>\n              </ha-textfield>\n              <div>\n                <div>\n                  ${this.hass.localize(\n                    \"ui.panel.config.core.section.core.core_config.unit_system\"\n                  )}\n                </div>\n                <ha-formfield\n                  .label=${html`\n                    <span style=\"font-size: 14px\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.core.section.core.core_config.metric_example\"\n                      )}\n                    </span>\n                    <div style=\"color: var(--secondary-text-color)\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.core.section.core.core_config.unit_system_metric\"\n                      )}\n                    </div>\n                  `}\n                >\n                  <ha-radio\n                    name=\"unit_system\"\n                    value=\"metric\"\n                    .checked=${this._unitSystem === \"metric\"}\n                    @change=${this._unitSystemChanged}\n                    .disabled=${this._submitting}\n                  ></ha-radio>\n                </ha-formfield>\n                <ha-formfield\n                  .label=${html`\n                    <span style=\"font-size: 14px\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.core.section.core.core_config.imperial_example\"\n                      )}\n                    </span>\n                    <div style=\"color: var(--secondary-text-color)\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.core.section.core.core_config.unit_system_imperial\"\n                      )}\n                    </div>\n                  `}\n                >\n                  <ha-radio\n                    name=\"unit_system\"\n                    value=\"imperial\"\n                    .checked=${this._unitSystem === \"imperial\"}\n                    @change=${this._unitSystemChanged}\n                    .disabled=${this._submitting}\n                  ></ha-radio>\n                </ha-formfield>\n              </div>\n              <div>\n                <ha-select\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.core.section.core.core_config.currency\"\n                  )}\n                  name=\"currency\"\n                  fixedMenuPosition\n                  naturalMenuWidth\n                  .disabled=${disabled}\n                  .value=${this._currency}\n                  @closed=${stopPropagation}\n                  @change=${this._handleChange}\n                >\n                  ${currencies.map(\n                    (currency) =>\n                      html`<mwc-list-item .value=${currency}\n                        >${currency}</mwc-list-item\n                      >`\n                  )}</ha-select\n                >\n                <a\n                  href=\"https://en.wikipedia.org/wiki/ISO_4217#Active_codes\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  >${this.hass.localize(\n                    \"ui.panel.config.core.section.core.core_config.find_currency_value\"\n                  )}</a\n                >\n              </div>\n            </div>\n            <ha-settings-row>\n              <div slot=\"heading\">\n                ${this.hass.localize(\n                  \"ui.panel.config.core.section.core.core_config.edit_location\"\n                )}\n              </div>\n              <div slot=\"description\" class=\"secondary\">\n                ${this.hass.localize(\n                  \"ui.panel.config.core.section.core.core_config.edit_location_description\"\n                )}\n              </div>\n              <mwc-button @click=${this._editLocation}\n                >${this.hass.localize(\"ui.common.edit\")}</mwc-button\n              >\n            </ha-settings-row>\n            <div class=\"card-actions\">\n              <ha-progress-button @click=${this._updateEntry}>\n                ${this.hass!.localize(\"ui.panel.config.zone.detail.update\")}\n              </ha-progress-button>\n            </div>\n          </ha-card>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  protected firstUpdated(): void {\n    this._unitSystem =\n      this.hass.config.unit_system.temperature === UNIT_C\n        ? \"metric\"\n        : \"imperial\";\n    this._currency = this.hass.config.currency;\n    this._elevation = this.hass.config.elevation;\n    this._timeZone = this.hass.config.time_zone;\n    this._name = this.hass.config.location_name;\n  }\n\n  private _handleChange(ev) {\n    const target = ev.currentTarget;\n    let value = target.value;\n\n    if (target.name === \"currency\" && value) {\n      if (value in SYMBOL_TO_ISO) {\n        value = SYMBOL_TO_ISO[value];\n      }\n    }\n\n    this[`_${target.name}`] = value;\n  }\n\n  private _unitSystemChanged(ev: CustomEvent) {\n    this._unitSystem = (ev.target as HaRadio).value as \"metric\" | \"imperial\";\n  }\n\n  private async _updateEntry(ev) {\n    const button = ev.target as HaProgressButton;\n    if (button.progress) {\n      return;\n    }\n    button.progress = true;\n\n    try {\n      await saveCoreConfig(this.hass, {\n        currency: this._currency,\n        elevation: Number(this._elevation),\n        unit_system: this._unitSystem,\n        time_zone: this._timeZone,\n        location_name: this._name,\n      });\n      button.actionSuccess();\n    } catch (err: any) {\n      button.actionError();\n      alert(`Error saving config: ${err.message}`);\n    } finally {\n      button.progress = false;\n    }\n  }\n\n  private _editLocation() {\n    navigate(\"/config/zone\");\n  }\n\n  static styles = [\n    haStyle,\n    css`\n      .content {\n        padding: 28px 20px 0;\n        max-width: 1040px;\n        margin: 0 auto;\n      }\n      ha-card {\n        max-width: 500px;\n        margin: 0 auto;\n        height: 100%;\n        justify-content: space-between;\n        flex-direction: column;\n        display: flex;\n      }\n      .card-content {\n        display: flex;\n        justify-content: space-between;\n        flex-direction: column;\n        padding: 16px 16px 0 16px;\n      }\n      .card-actions {\n        text-align: right;\n        height: 48px;\n        display: flex;\n        justify-content: flex-end;\n        align-items: center;\n        margin-top: 16px;\n      }\n      .card-content > * {\n        display: block;\n        margin-top: 16px;\n      }\n      ha-select {\n        display: block;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-section-general\": HaConfigSectionGeneral;\n  }\n}\n"],"names":[],"sourceRoot":""}