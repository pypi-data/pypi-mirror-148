{"version":3,"file":"4a46eae4.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAMA;;;AC2CA;;;AAKA;;;;;AAiBA;AACA;;;;AAIA;;;;;AAUA;;AAEA;;AAEA;;;;;;AA/CA;;;;;;;;;;AAnBA","sources":["webpack://home-assistant-frontend/./src/components/ha-clickable-list-item.ts","webpack://home-assistant-frontend/./src/panels/config/info/integrations-card.ts"],"sourcesContent":["import { ListItemBase } from \"@material/mwc-list/mwc-list-item-base\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { css, CSSResult, html } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\n\n@customElement(\"ha-clickable-list-item\")\nexport class HaClickableListItem extends ListItemBase {\n  @property() public href?: string;\n\n  @property({ type: Boolean }) public disableHref = false;\n\n  // property used only in css\n  @property({ type: Boolean, reflect: true }) public rtl = false;\n\n  @query(\"a\") private _anchor!: HTMLAnchorElement;\n\n  public render() {\n    const r = super.render();\n    const href = this.href || \"\";\n\n    return html`${this.disableHref\n      ? html`<a aria-role=\"option\">${r}</a>`\n      : html`<a aria-role=\"option\" href=${href}>${r}</a>`}`;\n  }\n\n  firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"keydown\", (ev) => {\n      if (ev.key === \"Enter\" || ev.key === \" \") {\n        this._anchor.click();\n      }\n    });\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      styles,\n      css`\n        :host {\n          padding-left: 0px;\n          padding-right: 0px;\n        }\n        :host([rtl]) span {\n          margin-left: var(--mdc-list-item-graphic-margin, 20px) !important;\n          margin-right: 0px !important;\n        }\n        :host([graphic=\"avatar\"]:not([twoLine])),\n        :host([graphic=\"icon\"]:not([twoLine])) {\n          height: 48px;\n        }\n        a {\n          width: 100%;\n          height: 100%;\n          display: flex;\n          align-items: center;\n          padding-left: var(--mdc-list-side-padding, 20px);\n          padding-right: var(--mdc-list-side-padding, 20px);\n          overflow: hidden;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-clickable-list-item\": HaClickableListItem;\n  }\n}\n","import \"@material/mwc-list/mwc-list\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-clickable-list-item\";\nimport {\n  domainToName,\n  fetchIntegrationManifests,\n  fetchIntegrationSetups,\n  IntegrationManifest,\n  IntegrationSetup,\n} from \"../../../data/integration\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { brandsUrl } from \"../../../util/brands-url\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\n\n@customElement(\"integrations-card\")\nclass IntegrationsCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @state() private _manifests?: {\n    [domain: string]: IntegrationManifest;\n  };\n\n  @state() private _setups?: IntegrationSetup[];\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this._fetchManifests();\n    this._fetchSetups();\n  }\n\n  protected render(): TemplateResult {\n    if (!this._setups) {\n      return html``;\n    }\n\n    return html`\n      <ha-card\n        outlined\n        .header=${this.hass.localize(\n          \"ui.panel.config.system_health.long_loading_integrations\"\n        )}\n      >\n        <mwc-list>\n          ${this._setups?.map((setup) => {\n            const manifest = this._manifests && this._manifests[setup.domain];\n            const docLink = manifest\n              ? manifest.is_built_in\n                ? documentationUrl(\n                    this.hass,\n                    `/integrations/${manifest.domain}`\n                  )\n                : manifest.documentation\n              : \"\";\n\n            const setupSeconds = setup.seconds?.toFixed(2);\n            return html`\n              <ha-clickable-list-item\n                graphic=\"avatar\"\n                twoline\n                hasMeta\n                @click=${this._entryClicked}\n                href=${docLink}\n              >\n                <img\n                  loading=\"lazy\"\n                  src=${brandsUrl({\n                    domain: setup.domain,\n                    type: \"icon\",\n                    useFallback: true,\n                    darkOptimized: this.hass.themes?.darkMode,\n                  })}\n                  referrerpolicy=\"no-referrer\"\n                  slot=\"graphic\"\n                />\n                <span>\n                  ${domainToName(this.hass.localize, setup.domain, manifest)}\n                </span>\n                <span slot=\"secondary\">${setup.domain}</span>\n                <div slot=\"meta\">\n                  ${setupSeconds ? html`${setupSeconds} s` : \"\"}\n                </div>\n              </ha-clickable-list-item>\n            `;\n          })}\n        </mwc-list>\n      </ha-card>\n    `;\n  }\n\n  private async _fetchManifests() {\n    const manifests = {};\n    for (const manifest of await fetchIntegrationManifests(this.hass)) {\n      manifests[manifest.domain] = manifest;\n    }\n    this._manifests = manifests;\n  }\n\n  private async _fetchSetups() {\n    const setups = await fetchIntegrationSetups(this.hass);\n    this._setups = setups.sort((a, b) => {\n      if (a.seconds === b.seconds) {\n        return 0;\n      }\n      if (a.seconds === undefined) {\n        return 1;\n      }\n      if (b.seconds === undefined) {\n        return 1;\n      }\n      return b.seconds - a.seconds;\n    });\n  }\n\n  private _entryClicked(ev) {\n    ev.currentTarget.blur();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-clickable-list-item {\n        --mdc-list-item-meta-size: 48px;\n        --mdc-typography-caption-font-size: 12px;\n      }\n      img {\n        display: block;\n        max-height: 40px;\n        max-width: 40px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"integrations-card\": IntegrationsCard;\n  }\n}\n"],"names":[],"sourceRoot":""}