{"version":3,"file":"e80627cc.js","mappings":";;AA6GA;AACA;AACA;AACA;AACA;;AAEA;AAnEA;;;;;AAAA;;ACSA;;;;AAQA;;AAIA;AACA;AACA;;;;;AAKA;;;;;AAOA;;AAIA;AACA;;;;;;;;AAUA;AACA;;AAEA;AACA;;;;;;;AAOA;;;AAKA;AACA;AACA;;;;;AAKA;;;AAKA;AACA;AACA;;;AAGA;;;;;;;AASA;;;;AAMA;;AAIA;;;;;;AAQA;AACA;AACA;;;;AAIA;;AAIA;;;;;;AAQA;AACA;AACA;;;;;;;;AAQA;;;;;AAOA;;;;;;AAQA;;;AAKA;AACA;AACA;;;;;;AAMA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAtLA","sources":["webpack://home-assistant-frontend/./src/components/map/ha-locations-editor.ts","webpack://home-assistant-frontend/./src/onboarding/onboarding-core-config.ts"],"sourcesContent":["import {\n  Circle,\n  DivIcon,\n  DragEndEvent,\n  LatLng,\n  Marker,\n  MarkerOptions,\n} from \"leaflet\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { LeafletModuleType } from \"../../common/dom/setup-leaflet-map\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-input-helper-text\";\nimport \"./ha-map\";\nimport type { HaMap } from \"./ha-map\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"location-updated\": { id: string; location: [number, number] };\n    \"markers-updated\": undefined;\n    \"radius-updated\": { id: string; radius: number };\n    \"marker-clicked\": { id: string };\n  }\n}\n\nexport interface MarkerLocation {\n  latitude: number;\n  longitude: number;\n  radius?: number;\n  name?: string;\n  id: string;\n  icon?: string;\n  radius_color?: string;\n  location_editable?: boolean;\n  radius_editable?: boolean;\n}\n\n@customElement(\"ha-locations-editor\")\nexport class HaLocationsEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public locations?: MarkerLocation[];\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public autoFit = false;\n\n  @property({ type: Number }) public zoom = 16;\n\n  @property({ type: Boolean }) public darkMode?: boolean;\n\n  @state() private _locationMarkers?: Record<string, Marker | Circle>;\n\n  @state() private _circles: Record<string, Circle> = {};\n\n  @query(\"ha-map\", true) private map!: HaMap;\n\n  private Leaflet?: LeafletModuleType;\n\n  constructor() {\n    super();\n\n    import(\"leaflet\").then((module) => {\n      import(\"leaflet-draw\").then(() => {\n        this.Leaflet = module.default as LeafletModuleType;\n        this._updateMarkers();\n        this.updateComplete.then(() => this.fitMap());\n      });\n    });\n  }\n\n  public fitMap(): void {\n    this.map.fitMap();\n  }\n\n  public fitMarker(id: string): void {\n    if (!this.map.leafletMap || !this._locationMarkers) {\n      return;\n    }\n    const marker = this._locationMarkers[id];\n    if (!marker) {\n      return;\n    }\n    if (\"getBounds\" in marker) {\n      this.map.leafletMap.fitBounds(marker.getBounds());\n      (marker as Circle).bringToFront();\n    } else {\n      const circle = this._circles[id];\n      if (circle) {\n        this.map.leafletMap.fitBounds(circle.getBounds());\n      } else {\n        this.map.leafletMap.setView(marker.getLatLng(), this.zoom);\n      }\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-map\n        .hass=${this.hass}\n        .layers=${this._getLayers(this._circles, this._locationMarkers)}\n        .zoom=${this.zoom}\n        .autoFit=${this.autoFit}\n        .darkMode=${this.darkMode}\n      ></ha-map>\n      ${this.helper\n        ? html`<ha-input-helper-text>${this.helper}</ha-input-helper-text>`\n        : \"\"}\n    `;\n  }\n\n  private _getLayers = memoizeOne(\n    (\n      circles: Record<string, Circle>,\n      markers?: Record<string, Marker | Circle>\n    ): Array<Marker | Circle> => {\n      const layers: Array<Marker | Circle> = [];\n      Array.prototype.push.apply(layers, Object.values(circles));\n      if (markers) {\n        Array.prototype.push.apply(layers, Object.values(markers));\n      }\n      return layers;\n    }\n  );\n\n  public willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n\n    // Still loading.\n    if (!this.Leaflet) {\n      return;\n    }\n\n    if (changedProps.has(\"locations\")) {\n      this._updateMarkers();\n    }\n  }\n\n  private _updateLocation(ev: DragEndEvent) {\n    const marker = ev.target;\n    const latlng: LatLng = marker.getLatLng();\n    let longitude: number = latlng.lng;\n    if (Math.abs(longitude) > 180.0) {\n      // Normalize longitude if map provides values beyond -180 to +180 degrees.\n      longitude = (((longitude % 360.0) + 540.0) % 360.0) - 180.0;\n    }\n    const location: [number, number] = [latlng.lat, longitude];\n    fireEvent(\n      this,\n      \"location-updated\",\n      { id: marker.id, location },\n      { bubbles: false }\n    );\n  }\n\n  private _updateRadius(ev: DragEndEvent) {\n    const marker = ev.target;\n    const circle = this._locationMarkers![marker.id] as Circle;\n    fireEvent(\n      this,\n      \"radius-updated\",\n      { id: marker.id, radius: circle.getRadius() },\n      { bubbles: false }\n    );\n  }\n\n  private _markerClicked(ev: DragEndEvent) {\n    const marker = ev.target;\n    fireEvent(this, \"marker-clicked\", { id: marker.id }, { bubbles: false });\n  }\n\n  private _updateMarkers(): void {\n    if (!this.locations || !this.locations.length) {\n      this._circles = {};\n      this._locationMarkers = undefined;\n      return;\n    }\n\n    const locationMarkers = {};\n    const circles = {};\n\n    const defaultZoneRadiusColor =\n      getComputedStyle(this).getPropertyValue(\"--accent-color\");\n\n    this.locations.forEach((location: MarkerLocation) => {\n      let icon: DivIcon | undefined;\n      if (location.icon) {\n        // create icon\n        const el = document.createElement(\"div\");\n        el.className = \"named-icon\";\n        if (location.name) {\n          el.innerText = location.name;\n        }\n        const iconEl = document.createElement(\"ha-icon\");\n        iconEl.setAttribute(\"icon\", location.icon);\n        el.prepend(iconEl);\n\n        icon = this.Leaflet!.divIcon({\n          html: el.outerHTML,\n          iconSize: [24, 24],\n          className: \"light\",\n        });\n      }\n      if (location.radius) {\n        const circle = this.Leaflet!.circle(\n          [location.latitude, location.longitude],\n          {\n            color: location.radius_color || defaultZoneRadiusColor,\n            radius: location.radius,\n          }\n        );\n        if (location.radius_editable || location.location_editable) {\n          // @ts-ignore\n          circle.editing.enable();\n          circle.addEventListener(\"add\", () => {\n            // @ts-ignore\n            const moveMarker = circle.editing._moveMarker;\n            // @ts-ignore\n            const resizeMarker = circle.editing._resizeMarkers[0];\n            if (icon) {\n              moveMarker.setIcon(icon);\n            }\n            resizeMarker.id = moveMarker.id = location.id;\n            moveMarker\n              .addEventListener(\n                \"dragend\",\n                // @ts-ignore\n                (ev: DragEndEvent) => this._updateLocation(ev)\n              )\n              .addEventListener(\n                \"click\",\n                // @ts-ignore\n                (ev: MouseEvent) => this._markerClicked(ev)\n              );\n            if (location.radius_editable) {\n              resizeMarker.addEventListener(\n                \"dragend\",\n                // @ts-ignore\n                (ev: DragEndEvent) => this._updateRadius(ev)\n              );\n            } else {\n              resizeMarker.remove();\n            }\n          });\n          locationMarkers[location.id] = circle;\n        } else {\n          circles[location.id] = circle;\n        }\n      }\n      if (\n        !location.radius ||\n        (!location.radius_editable && !location.location_editable)\n      ) {\n        const options: MarkerOptions = {\n          title: location.name,\n          draggable: location.location_editable,\n        };\n\n        if (icon) {\n          options.icon = icon;\n        }\n\n        const marker = this.Leaflet!.marker(\n          [location.latitude, location.longitude],\n          options\n        )\n          .addEventListener(\"dragend\", (ev: DragEndEvent) =>\n            this._updateLocation(ev)\n          )\n          .addEventListener(\n            // @ts-ignore\n            \"click\",\n            // @ts-ignore\n            (ev: MouseEvent) => this._markerClicked(ev)\n          );\n        (marker as any).id = location.id;\n\n        locationMarkers[location.id] = marker;\n      }\n    });\n    this._circles = circles;\n    this._locationMarkers = locationMarkers;\n    fireEvent(this, \"markers-updated\");\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-map {\n        display: block;\n        height: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-locations-editor\": HaLocationsEditor;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport type { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport type { LocalizeFunc } from \"../common/translations/localize\";\nimport { createCurrencyListEl } from \"../components/currency-datalist\";\nimport \"../components/map/ha-locations-editor\";\nimport type {\n  HaLocationsEditor,\n  MarkerLocation,\n} from \"../components/map/ha-locations-editor\";\nimport { createTimezoneListEl } from \"../components/timezone-datalist\";\nimport {\n  ConfigUpdateValues,\n  detectCoreConfig,\n  saveCoreConfig,\n} from \"../data/core\";\nimport { SYMBOL_TO_ISO } from \"../data/currency\";\nimport { onboardCoreConfigStep } from \"../data/onboarding\";\nimport type { PolymerChangedEvent } from \"../polymer-types\";\nimport type { HomeAssistant } from \"../types\";\nimport \"../components/ha-radio\";\nimport \"../components/ha-formfield\";\nimport type { HaRadio } from \"../components/ha-radio\";\n\nconst amsterdam: [number, number] = [52.3731339, 4.8903147];\nconst mql = matchMedia(\"(prefers-color-scheme: dark)\");\nconst locationMarkerId = \"location\";\n\n@customElement(\"onboarding-core-config\")\nclass OnboardingCoreConfig extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public onboardingLocalize!: LocalizeFunc;\n\n  @state() private _working = false;\n\n  @state() private _name?: ConfigUpdateValues[\"location_name\"];\n\n  @state() private _location?: [number, number];\n\n  @state() private _elevation?: string;\n\n  @state() private _unitSystem?: ConfigUpdateValues[\"unit_system\"];\n\n  @state() private _currency?: ConfigUpdateValues[\"currency\"];\n\n  @state() private _timeZone?: string;\n\n  @query(\"ha-locations-editor\", true) private map!: HaLocationsEditor;\n\n  protected render(): TemplateResult {\n    return html`\n      <p>\n        ${this.onboardingLocalize(\n          \"ui.panel.page-onboarding.core-config.intro\",\n          \"name\",\n          this.hass.user!.name\n        )}\n      </p>\n\n      <paper-input\n        .label=${this.onboardingLocalize(\n          \"ui.panel.page-onboarding.core-config.location_name\"\n        )}\n        name=\"name\"\n        .disabled=${this._working}\n        .value=${this._nameValue}\n        @value-changed=${this._handleChange}\n      ></paper-input>\n\n      <div class=\"middle-text\">\n        <p>\n          ${this.onboardingLocalize(\n            \"ui.panel.page-onboarding.core-config.intro_location\"\n          )}\n        </p>\n\n        <div class=\"row\">\n          <div>\n            ${this.onboardingLocalize(\n              \"ui.panel.page-onboarding.core-config.intro_location_detect\"\n            )}\n          </div>\n          <mwc-button @click=${this._detect}>\n            ${this.onboardingLocalize(\n              \"ui.panel.page-onboarding.core-config.button_detect\"\n            )}\n          </mwc-button>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <ha-locations-editor\n          class=\"flex\"\n          .hass=${this.hass}\n          .locations=${this._markerLocation(this._locationValue)}\n          zoom=\"14\"\n          .darkMode=${mql.matches}\n          @location-updated=${this._locationChanged}\n        ></ha-locations-editor>\n      </div>\n\n      <div class=\"row\">\n        <paper-input\n          class=\"flex\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.core.section.core.core_config.time_zone\"\n          )}\n          name=\"timeZone\"\n          list=\"timezones\"\n          .disabled=${this._working}\n          .value=${this._timeZoneValue}\n          @value-changed=${this._handleChange}\n        ></paper-input>\n\n        <paper-input\n          class=\"flex\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.core.section.core.core_config.elevation\"\n          )}\n          name=\"elevation\"\n          type=\"number\"\n          .disabled=${this._working}\n          .value=${this._elevationValue}\n          @value-changed=${this._handleChange}\n        >\n          <span slot=\"suffix\">\n            ${this.hass.localize(\n              \"ui.panel.config.core.section.core.core_config.elevation_meters\"\n            )}\n          </span>\n        </paper-input>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"flex\">\n          ${this.hass.localize(\n            \"ui.panel.config.core.section.core.core_config.unit_system\"\n          )}\n        </div>\n        <div class=\"radio-group\">\n          <ha-formfield\n            .label=${html`${this.hass.localize(\n                \"ui.panel.config.core.section.core.core_config.unit_system_metric\"\n              )}\n              <div class=\"secondary\">\n                ${this.hass.localize(\n                  \"ui.panel.config.core.section.core.core_config.metric_example\"\n                )}\n              </div>`}\n          >\n            <ha-radio\n              name=\"unit_system\"\n              value=\"metric\"\n              .checked=${this._unitSystemValue === \"metric\"}\n              @change=${this._unitSystemChanged}\n              .disabled=${this._working}\n            ></ha-radio>\n          </ha-formfield>\n          <ha-formfield\n            .label=${html`${this.hass.localize(\n                \"ui.panel.config.core.section.core.core_config.unit_system_imperial\"\n              )}\n              <div class=\"secondary\">\n                ${this.hass.localize(\n                  \"ui.panel.config.core.section.core.core_config.imperial_example\"\n                )}\n              </div>`}\n          >\n            <ha-radio\n              name=\"unit_system\"\n              value=\"imperial\"\n              .checked=${this._unitSystemValue === \"imperial\"}\n              @change=${this._unitSystemChanged}\n              .disabled=${this._working}\n            ></ha-radio>\n          </ha-formfield>\n        </div>\n      </div>\n\n      <div class=\"row\">\n            <div class=\"flex\">\n              ${this.hass.localize(\n                \"ui.panel.config.core.section.core.core_config.currency\"\n              )}<br />\n              <a\n                href=\"https://en.wikipedia.org/wiki/ISO_4217#Active_codes\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                >${this.hass.localize(\n                  \"ui.panel.config.core.section.core.core_config.find_currency_value\"\n                )}</a\n              >\n            </div>\n\n            <paper-input\n              class=\"flex\"\n              .label=${this.hass.localize(\n                \"ui.panel.config.core.section.core.core_config.currency\"\n              )}\n              name=\"currency\"\n              list=\"currencies\"\n              .disabled=${this._working}\n              .value=${this._currencyValue}\n              @value-changed=${this._handleChange}\n            ></paper-input>\n          </div>\n        </div>\n\n      <div class=\"footer\">\n        <mwc-button @click=${this._save} .disabled=${this._working}>\n          ${this.onboardingLocalize(\n            \"ui.panel.page-onboarding.core-config.finish\"\n          )}\n        </mwc-button>\n      </div>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    setTimeout(\n      () => this.shadowRoot!.querySelector(\"paper-input\")!.focus(),\n      100\n    );\n    this.addEventListener(\"keypress\", (ev) => {\n      if (ev.keyCode === 13) {\n        this._save(ev);\n      }\n    });\n    const tzInput = this.shadowRoot!.querySelector(\n      \"[name=timeZone]\"\n    ) as PaperInputElement;\n    tzInput.inputElement.appendChild(createTimezoneListEl());\n\n    const cInput = this.shadowRoot!.querySelector(\n      \"[name=currency]\"\n    ) as PaperInputElement;\n    cInput.inputElement.appendChild(createCurrencyListEl());\n  }\n\n  private get _nameValue() {\n    return this._name !== undefined\n      ? this._name\n      : this.onboardingLocalize(\n          \"ui.panel.page-onboarding.core-config.location_name_default\"\n        );\n  }\n\n  private get _locationValue() {\n    return this._location || amsterdam;\n  }\n\n  private get _elevationValue() {\n    return this._elevation !== undefined ? this._elevation : 0;\n  }\n\n  private get _timeZoneValue() {\n    return this._timeZone;\n  }\n\n  private get _unitSystemValue() {\n    return this._unitSystem !== undefined ? this._unitSystem : \"metric\";\n  }\n\n  private get _currencyValue() {\n    return this._currency !== undefined ? this._currency : \"\";\n  }\n\n  private _markerLocation = memoizeOne(\n    (location: [number, number]): MarkerLocation[] => [\n      {\n        id: locationMarkerId,\n        latitude: location[0],\n        longitude: location[1],\n        location_editable: true,\n      },\n    ]\n  );\n\n  private _handleChange(ev: PolymerChangedEvent<string>) {\n    const target = ev.currentTarget as PaperInputElement;\n\n    let value = target.value;\n\n    if (target.name === \"currency\" && value) {\n      if (value in SYMBOL_TO_ISO) {\n        value = SYMBOL_TO_ISO[value];\n      }\n    }\n\n    this[`_${target.name}`] = value;\n  }\n\n  private _locationChanged(ev) {\n    this._location = ev.detail.location;\n  }\n\n  private _unitSystemChanged(ev: CustomEvent) {\n    this._unitSystem = (ev.target as HaRadio).value as \"metric\" | \"imperial\";\n  }\n\n  private async _detect() {\n    this._working = true;\n    try {\n      const values = await detectCoreConfig(this.hass);\n\n      if (values.latitude && values.longitude) {\n        this.map.addEventListener(\n          \"markers-updated\",\n          () => {\n            this.map.fitMarker(locationMarkerId);\n          },\n          {\n            once: true,\n          }\n        );\n        this._location = [Number(values.latitude), Number(values.longitude)];\n      }\n      if (values.elevation) {\n        this._elevation = String(values.elevation);\n      }\n      if (values.unit_system) {\n        this._unitSystem = values.unit_system;\n      }\n      if (values.time_zone) {\n        this._timeZone = values.time_zone;\n      }\n      if (values.currency) {\n        this._currency = values.currency;\n      }\n    } catch (err: any) {\n      alert(`Failed to detect location information: ${err.message}`);\n    } finally {\n      this._working = false;\n    }\n  }\n\n  private async _save(ev) {\n    ev.preventDefault();\n    this._working = true;\n    try {\n      const location = this._locationValue;\n      await saveCoreConfig(this.hass, {\n        location_name: this._nameValue,\n        latitude: location[0],\n        longitude: location[1],\n        elevation: Number(this._elevationValue),\n        unit_system: this._unitSystemValue,\n        time_zone: this._timeZoneValue || \"UTC\",\n        currency: this._currencyValue || \"EUR\",\n      });\n      const result = await onboardCoreConfigStep(this.hass);\n      fireEvent(this, \"onboarding-step\", {\n        type: \"core_config\",\n        result,\n      });\n    } catch (err: any) {\n      this._working = false;\n      alert(`Failed to save: ${err.message}`);\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .row {\n        display: flex;\n        flex-direction: row;\n        margin: 0 -8px;\n        align-items: center;\n      }\n\n      .secondary {\n        color: var(--secondary-text-color);\n      }\n\n      .flex {\n        flex: 1;\n      }\n\n      .middle-text {\n        margin: 24px 0;\n      }\n\n      .row > * {\n        margin: 0 8px;\n      }\n\n      .radio-group {\n        display: flex;\n        flex-direction: column;\n        flex: 1;\n      }\n\n      .footer {\n        margin-top: 16px;\n        text-align: right;\n      }\n      a {\n        color: var(--primary-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"onboarding-core-config\": OnboardingCoreConfig;\n  }\n}\n"],"names":[],"sourceRoot":""}