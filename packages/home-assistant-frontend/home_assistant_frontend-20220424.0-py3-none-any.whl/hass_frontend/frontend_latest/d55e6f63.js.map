{"version":3,"file":"d55e6f63.js","mappings":";;AA4CA;;;AAMA;;AAEA;;;;;AAKA;;;;;AAKA;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAvCA;;;ACWA;AACA;;;AAGA;;AAGA;;AAEA;AAEA;;;AAIA;AAGA;AAIA;;AAEA;;AAIA;AAGA;AACA;;;AAMA;;AAGA;;;;;;;;;;;;;;;;;;;;;AA/DA","sources":["webpack://home-assistant-frontend/./src/components/ha-alert.ts","webpack://home-assistant-frontend/./src/panels/config/core/ha-config-section-storage.ts"],"sourcesContent":["import {\n  mdiAlertCircleOutline,\n  mdiAlertOutline,\n  mdiCheckboxMarkedCircleOutline,\n  mdiClose,\n  mdiInformationOutline,\n} from \"@mdi/js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-icon-button\";\nimport \"./ha-svg-icon\";\n\nconst ALERT_ICONS = {\n  info: mdiInformationOutline,\n  warning: mdiAlertOutline,\n  error: mdiAlertCircleOutline,\n  success: mdiCheckboxMarkedCircleOutline,\n};\n\ndeclare global {\n  interface HASSDomEvents {\n    \"alert-dismissed-clicked\": undefined;\n  }\n}\n\n@customElement(\"ha-alert\")\nclass HaAlert extends LitElement {\n  @property() public title = \"\";\n\n  @property({ attribute: \"alert-type\" }) public alertType:\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n    | \"success\" = \"info\";\n\n  @property({ type: Boolean }) public dismissable = false;\n\n  @property({ type: Boolean }) public rtl = false;\n\n  public render() {\n    return html`\n      <div\n        class=\"issue-type ${classMap({\n          rtl: this.rtl,\n          [this.alertType]: true,\n        })}\"\n        role=\"alert\"\n      >\n        <div class=\"icon ${this.title ? \"\" : \"no-title\"}\">\n          <slot name=\"icon\">\n            <ha-svg-icon .path=${ALERT_ICONS[this.alertType]}></ha-svg-icon>\n          </slot>\n        </div>\n        <div class=\"content\">\n          <div class=\"main-content\">\n            ${this.title ? html`<div class=\"title\">${this.title}</div>` : \"\"}\n            <slot></slot>\n          </div>\n          <div class=\"action\">\n            <slot name=\"action\">\n              ${this.dismissable\n                ? html`<ha-icon-button\n                    @click=${this._dismiss_clicked}\n                    label=\"Dismiss alert\"\n                    .path=${mdiClose}\n                  ></ha-icon-button>`\n                : \"\"}\n            </slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private _dismiss_clicked() {\n    fireEvent(this, \"alert-dismissed-clicked\");\n  }\n\n  static styles = css`\n    .issue-type {\n      position: relative;\n      padding: 8px;\n      display: flex;\n      margin: 4px 0;\n    }\n    .issue-type.rtl {\n      flex-direction: row-reverse;\n    }\n    .issue-type::after {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      opacity: 0.12;\n      pointer-events: none;\n      content: \"\";\n      border-radius: 4px;\n    }\n    .icon {\n      z-index: 1;\n    }\n    .icon.no-title {\n      align-self: center;\n    }\n    .issue-type.rtl > .content {\n      flex-direction: row-reverse;\n      text-align: right;\n    }\n    .content {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    }\n    .action {\n      z-index: 1;\n      width: min-content;\n      --mdc-theme-primary: var(--primary-text-color);\n    }\n    .main-content {\n      overflow-wrap: anywhere;\n      word-break: break-word;\n      margin-left: 8px;\n      margin-right: 0;\n    }\n    .issue-type.rtl > .content > .main-content {\n      margin-left: 0;\n      margin-right: 8px;\n    }\n    .title {\n      margin-top: 2px;\n      font-weight: bold;\n    }\n    .action mwc-button,\n    .action ha-icon-button {\n      --mdc-theme-primary: var(--primary-text-color);\n      --mdc-icon-button-size: 36px;\n    }\n    .issue-type.info > .icon {\n      color: var(--info-color);\n    }\n    .issue-type.info::after {\n      background-color: var(--info-color);\n    }\n\n    .issue-type.warning > .icon {\n      color: var(--warning-color);\n    }\n    .issue-type.warning::after {\n      background-color: var(--warning-color);\n    }\n\n    .issue-type.error > .icon {\n      color: var(--error-color);\n    }\n    .issue-type.error::after {\n      background-color: var(--error-color);\n    }\n\n    .issue-type.success > .icon {\n      color: var(--success-color);\n    }\n    .issue-type.success::after {\n      background-color: var(--success-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-alert\": HaAlert;\n  }\n}\n","import { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-bar\";\nimport \"../../../components/ha-metric\";\nimport { fetchHassioHostInfo, HassioHostInfo } from \"../../../data/hassio/host\";\nimport \"../../../layouts/hass-subpage\";\nimport type { HomeAssistant, Route } from \"../../../types\";\nimport {\n  getValueInPercentage,\n  roundWithOneDecimal,\n} from \"../../../util/calculate\";\nimport \"./ha-config-analytics\";\n\n@customElement(\"ha-config-section-storage\")\nclass HaConfigSectionStorage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @state() private _error?: { code: string; message: string };\n\n  @state() private _storageData?: HassioHostInfo;\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    if (isComponentLoaded(this.hass, \"hassio\")) {\n      this._load();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-subpage\n        back-path=\"/config/system\"\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n      >\n        <div class=\"content\">\n          ${this._error\n            ? html`\n                <ha-alert alert-type=\"error\"\n                  >${this._error.message || this._error.code}</ha-alert\n                >\n              `\n            : \"\"}\n          ${this._storageData\n            ? html`\n                <ha-card outlined>\n                  <ha-metric\n                    .description=${this.hass.localize(\n                      \"ui.panel.config.storage.used_space\"\n                    )}\n                    .value=${this._getUsedSpace(\n                      this._storageData?.disk_used,\n                      this._storageData?.disk_total\n                    )}\n                    .tooltip=${`${this._storageData.disk_used} GB/${this._storageData.disk_total} GB`}\n                  ></ha-metric>\n                  ${this._storageData.disk_life_time !== \"\" &&\n                  this._storageData.disk_life_time >= 10\n                    ? html`\n                        <ha-metric\n                          .description=${this.hass.localize(\n                            \"ui.panel.config.storage.emmc_lifetime_used\"\n                          )}\n                          .value=${this._storageData.disk_life_time}\n                          .tooltip=${`${\n                            this._storageData.disk_life_time - 10\n                          } % -\n                          ${this._storageData.disk_life_time} %`}\n                          class=\"emmc\"\n                        ></ha-metric>\n                      `\n                    : \"\"}\n                </ha-card>\n              `\n            : \"\"}\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  private async _load() {\n    this._error = undefined;\n    try {\n      if (isComponentLoaded(this.hass, \"hassio\")) {\n        this._storageData = await fetchHassioHostInfo(this.hass);\n      }\n    } catch (err: any) {\n      this._error = err.message || err;\n    }\n  }\n\n  private _getUsedSpace = memoizeOne((used: number, total: number) =>\n    roundWithOneDecimal(getValueInPercentage(used, 0, total))\n  );\n\n  static styles = css`\n    .content {\n      padding: 28px 20px 0;\n      max-width: 1040px;\n      margin: 0 auto;\n    }\n    ha-card {\n      padding: 16px;\n      max-width: 500px;\n      margin: 0 auto;\n      height: 100%;\n      justify-content: space-between;\n      flex-direction: column;\n      display: flex;\n    }\n    .emmc {\n      --metric-bar-ok-color: #000;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-section-storage\": HaConfigSectionStorage;\n  }\n}\n"],"names":[],"sourceRoot":""}