{"version":3,"file":"fbe40940.js","mappings":";AAaA;;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;ACVA;;;;;;;;;;;AANA;;;ACiEA;;;AAGA;;AAEA;;AAGA;;;;;AAQA;AAGA;AACA;AACA;;;AAGA;;;;AAMA;AACA;AACA;AACA;;AAEA;;;AAMA;;;AAKA;AACA;AACA;;;AAGA;;;;;AAOA;;;AAKA;;AAIA;;;;;;AAQA;AACA;AACA;;;;AAIA;;AAIA;;;;;;AAQA;AACA;AACA;;;;;;AAMA;;;;AAMA;AACA;AACA;AACA;;AAEA;AAGA;;;;;;;AAQA;;;AAKA;AACA;;;AAvIA;;;;;;;;;;;;;;;;;;;;;AAhDA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-select.ts","webpack://home-assistant-frontend/./src/panels/config/zone/dialog-core-zone-detail.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { computeRTLDirection } from \"../common/util/compute_rtl\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <span class=\"header_title\">${title}</span>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n    dir=${computeRTLDirection(hass)}\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 8px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 20px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 20px 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 20px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(\n          --ha-dialog-border-radius,\n          var(--ha-card-border-radius, 4px)\n        );\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 40px;\n      }\n      [dir=\"rtl\"].header_button {\n        right: auto;\n        left: 16px;\n      }\n      [dir=\"rtl\"].header_title {\n        margin-left: 40px;\n        margin-right: 0px;\n      }\n      :host-context([style*=\"direction: rtl;\"]) .dialog-actions {\n        left: 0px !important;\n        right: auto !important;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-select:not(.mdc-select--disabled) .mdc-select__icon {\n        color: var(--secondary-text-color);\n      }\n      .mdc-select__anchor {\n        width: var(--ha-select-min-width, 200px);\n      }\n      :host-context([style*=\"direction: rtl;\"]) .mdc-floating-label {\n        right: 16px !important;\n        left: initial !important;\n      }\n    `,\n  ];\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@material/mwc-list/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport timezones from \"google-timezones-json\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { UNIT_C } from \"../../../common/const\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../common/dom/stop_propagation\";\nimport { currencies } from \"../../../components/currency-datalist\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport { HaRadio } from \"../../../components/ha-radio\";\nimport \"../../../components/ha-select\";\nimport { ConfigUpdateValues, saveCoreConfig } from \"../../../data/core\";\nimport { SYMBOL_TO_ISO } from \"../../../data/currency\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\n\n@customElement(\"dialog-core-zone-detail\")\nclass DialogZoneDetail extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _submitting = false;\n\n  @state() private _open = false;\n\n  @state() private _unitSystem?: ConfigUpdateValues[\"unit_system\"];\n\n  @state() private _currency?: string;\n\n  @state() private _name?: string;\n\n  @state() private _elevation?: number;\n\n  @state() private _timeZone?: string;\n\n  public showDialog(): void {\n    this._submitting = false;\n    this._unitSystem =\n      this.hass.config.unit_system.temperature === UNIT_C\n        ? \"metric\"\n        : \"imperial\";\n    this._currency = this.hass.config.currency;\n    this._elevation = this.hass.config.elevation;\n    this._timeZone = this.hass.config.time_zone;\n    this._name = this.hass.config.location_name;\n    this._open = true;\n  }\n\n  public closeDialog(): void {\n    this._open = false;\n    this._currency = undefined;\n    this._elevation = undefined;\n    this._timeZone = undefined;\n    this._unitSystem = undefined;\n    this._name = undefined;\n\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    const canEdit = [\"storage\", \"default\"].includes(\n      this.hass.config.config_source\n    );\n    const disabled = this._submitting || !canEdit;\n\n    if (!this._open) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${createCloseHeading(this.hass, \"Core Zone Configuration\")}\n      >\n        ${!canEdit\n          ? html`\n              <p>\n                ${this.hass.localize(\n                  \"ui.panel.config.core.section.core.core_config.edit_requires_storage\"\n                )}\n              </p>\n            `\n          : \"\"}\n        <ha-textfield\n          name=\"name\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.core.section.core.core_config.location_name\"\n          )}\n          .disabled=${disabled}\n          .value=${this._name}\n          @change=${this._handleChange}\n        ></ha-textfield>\n        <ha-select\n          .label=${this.hass.localize(\n            \"ui.panel.config.core.section.core.core_config.time_zone\"\n          )}\n          name=\"timeZone\"\n          fixedMenuPosition\n          naturalMenuWidth\n          .disabled=${disabled}\n          .value=${this._timeZone}\n          @closed=${stopPropagation}\n          @change=${this._handleChange}\n        >\n          ${Object.keys(timezones).map(\n            (tz) =>\n              html`<mwc-list-item value=${tz}>${timezones[tz]}</mwc-list-item>`\n          )}\n        </ha-select>\n        <ha-textfield\n          .label=${this.hass.localize(\n            \"ui.panel.config.core.section.core.core_config.elevation\"\n          )}\n          name=\"elevation\"\n          type=\"number\"\n          .disabled=${disabled}\n          .value=${this._elevation}\n          @change=${this._handleChange}\n        >\n          <span slot=\"suffix\">\n            ${this.hass.localize(\n              \"ui.panel.config.core.section.core.core_config.elevation_meters\"\n            )}\n          </span>\n        </ha-textfield>\n        <div>\n          <div>\n            ${this.hass.localize(\n              \"ui.panel.config.core.section.core.core_config.unit_system\"\n            )}\n          </div>\n          <ha-formfield\n            .label=${html`${this.hass.localize(\n                \"ui.panel.config.core.section.core.core_config.unit_system_metric\"\n              )}\n              <div class=\"secondary\">\n                ${this.hass.localize(\n                  \"ui.panel.config.core.section.core.core_config.metric_example\"\n                )}\n              </div>`}\n          >\n            <ha-radio\n              name=\"unit_system\"\n              value=\"metric\"\n              .checked=${this._unitSystem === \"metric\"}\n              @change=${this._unitSystemChanged}\n              .disabled=${this._submitting}\n            ></ha-radio>\n          </ha-formfield>\n          <ha-formfield\n            .label=${html`${this.hass.localize(\n                \"ui.panel.config.core.section.core.core_config.unit_system_imperial\"\n              )}\n              <div class=\"secondary\">\n                ${this.hass.localize(\n                  \"ui.panel.config.core.section.core.core_config.imperial_example\"\n                )}\n              </div>`}\n          >\n            <ha-radio\n              name=\"unit_system\"\n              value=\"imperial\"\n              .checked=${this._unitSystem === \"imperial\"}\n              @change=${this._unitSystemChanged}\n              .disabled=${this._submitting}\n            ></ha-radio>\n          </ha-formfield>\n        </div>\n        <div>\n          <ha-select\n            .label=${this.hass.localize(\n              \"ui.panel.config.core.section.core.core_config.currency\"\n            )}\n            name=\"currency\"\n            fixedMenuPosition\n            naturalMenuWidth\n            .disabled=${disabled}\n            .value=${this._currency}\n            @closed=${stopPropagation}\n            @change=${this._handleChange}\n          >\n            ${currencies.map(\n              (currency) =>\n                html`<mwc-list-item .value=${currency}\n                  >${currency}</mwc-list-item\n                >`\n            )}</ha-select\n          >\n          <a\n            href=\"https://en.wikipedia.org/wiki/ISO_4217#Active_codes\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            >${this.hass.localize(\n              \"ui.panel.config.core.section.core.core_config.find_currency_value\"\n            )}</a\n          >\n        </div>\n        <mwc-button slot=\"primaryAction\" @click=${this._updateEntry}>\n          ${this.hass!.localize(\"ui.panel.config.zone.detail.update\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _handleChange(ev) {\n    const target = ev.currentTarget;\n    let value = target.value;\n\n    if (target.name === \"currency\" && value) {\n      if (value in SYMBOL_TO_ISO) {\n        value = SYMBOL_TO_ISO[value];\n      }\n    }\n\n    this[`_${target.name}`] = value;\n  }\n\n  private _unitSystemChanged(ev: CustomEvent) {\n    this._unitSystem = (ev.target as HaRadio).value as \"metric\" | \"imperial\";\n  }\n\n  private async _updateEntry() {\n    this._submitting = true;\n    try {\n      await saveCoreConfig(this.hass, {\n        currency: this._currency,\n        elevation: Number(this._elevation),\n        unit_system: this._unitSystem,\n        time_zone: this._timeZone,\n        location_name: this._name,\n      });\n    } catch (err: any) {\n      alert(`Error saving config: ${err.message}`);\n    } finally {\n      this._submitting = false;\n    }\n\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --mdc-dialog-min-width: 600px;\n        }\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          ha-dialog {\n            --mdc-dialog-min-width: calc(\n              100vw - env(safe-area-inset-right) - env(safe-area-inset-left)\n            );\n          }\n        }\n        .card-actions {\n          text-align: right;\n        }\n        ha-dialog > * {\n          display: block;\n          margin-top: 16px;\n        }\n        ha-select {\n          display: block;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-core-zone-detail\": DialogZoneDetail;\n  }\n}\n"],"names":[],"sourceRoot":""}