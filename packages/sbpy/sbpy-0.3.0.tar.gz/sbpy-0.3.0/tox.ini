[tox]
envlist =
    py{37,38,39,dev}-test{,-alldeps,-oldestdeps,-devdeps,-numpy117,-numpy118,-numpy119}{,-cov}
    build_docs
    linkcheck
    codestyle
requires =
    setuptools >= 30.3.0
    pip >= 19.3.1
    tox-pypi-filter >= 0.12
isolated_build = true

[testenv]

# The following option combined with the use of the tox-pypi-filter above allows
# project-wide pinning of dependencies, e.g. if new versions of pytest do not
# work correctly with pytest-astropy plugins. Most of the time the pinnings file
# should be empty.
pypi_filter = https://raw.githubusercontent.com/astropy/ci-helpers/master/pip_pinnings.txt

# Pass through the following environemnt variables which are needed for the CI
passenv = HOME WINDIR LC_ALL LC_CTYPE CC CI TEST_READ_HUGE_FILE FC_GFORTRAN

# For coverage, we need to pass extra options to the C compiler
setenv =
    cov: CFLAGS = --coverage -fno-inline-functions -O0
    image: MPLFLAGS = --mpl
    !image: MPLFLAGS =

# Run the tests in a temporary directory to make sure that we don't import
# sbpy from the source tree
changedir = .tmp/{envname}

# tox environments are constructued with so-called 'factors' (or terms)
# separated by hyphens, e.g. test-devdeps-cov. Lines below starting with factor:
# will only take effect if that factor is included in the environment name. To
# see a list of example environments that can be run, along with a description,
# run:
#
#     tox -l -v
#
description =
    run tests
    alldeps: with all optional dependencies
    devdeps: with the latest developer version of key dependencies
    oldestdeps: with the oldest supported version of key dependencies
    cov: and test coverage
    numpy117: with numpy 1.17.*
    numpy118: with numpy 1.18.*
    numpy119: with numpy 1.18.*
    image: with image tests
    mpldev: with the latest developer version of matplotlib
    double: twice in a row to check for global state changes

deps =
    # avoid pickling error with astropy 5 + astroquery 0.4.5; remove when astroquery 0.4.6 is released
    test: git+https://github.com/astropy/astroquery.git#egg=astroquery

    numpy117: numpy==1.17.*
    numpy118: numpy==1.18.*
    numpy119: numpy==1.19.*

    image: pytest-mpl

    # pytest-openfiles pinned because of https://github.com/astropy/astropy/issues/10160 (takes too long)
    alldeps: pytest-openfiles==0.4.0
    alldeps: git+https://github.com/mkelley/pyoorb-experiment.git@sbpy-testing#egg=pyoorb

    # The oldestdeps factor is intended to be used to install the oldest versions of all
    # dependencies that have a minimum version.
    oldestdeps: numpy==1.17.*
    oldestdeps: matplotlib==3.0.*
    oldestdeps: scipy==1.3.*
    oldestdeps: synphot==1.0.*
    oldestdeps: astropy==4.0.*
    oldestdeps: ads==0.12.*

    # The devdeps factor is intended to be used to install the latest developer version
    # of key dependencies.
    devdeps: git+https://github.com/numpy/numpy.git#egg=numpy
    devdeps: git+https://github.com/astropy/astropy.git#egg=astropy
    devdeps: git+https://github.com/astropy/astroquery.git#egg=astroquery
    devdeps,mpldev: git+https://github.com/matplotlib/matplotlib.git#egg=matplotlib

# The following indicates which extras_require from setup.cfg will be installed
extras =
    test
    alldeps: all

commands =
    pip freeze
    !cov: pytest --pyargs sbpy {toxinidir}/docs {env:MPLFLAGS} {posargs}
    cov: pytest --pyargs sbpy  {env:MPLFLAGS} --cov sbpy --cov-config={toxinidir}/setup.cfg {posargs}

[testenv:build_docs]
changedir = docs
description = invoke sphinx-build to build the HTML docs
extras = docs
commands =
    pip freeze
    sphinx-build -W -b html . _build/html

[testenv:linkcheck]
changedir = docs
description = check the links in the HTML docs
extras = docs
commands =
    pip freeze
    sphinx-build -W -b linkcheck . _build/html

[testenv:codestyle]
# We list the warnings/errors to check for here rather than in setup.cfg because
# we don't want these options to apply whenever anyone calls flake8 from the
# command-line or their code editor - in this case all warnings/errors should be
# checked for. The warnings/errors we check for here are:
# E101 - mix of tabs and spaces
# W191 - use of tabs
# W291 - trailing whitespace
# W292 - no newline at end of file
# W293 - trailing whitespace
# W391 - blank line at end of file
# E111 - 4 spaces per indentation level
# E112 - 4 spaces per indentation level
# E113 - 4 spaces per indentation level
# E301 - expected 1 blank line, found 0
# E302 - expected 2 blank lines, found 0
# E303 - too many blank lines (3)
# E304 - blank lines found after function decorator
# E305 - expected 2 blank lines after class or function definition
# E306 - expected 1 blank line before a nested definition
# E502 - the backslash is redundant between brackets
# E722 - do not use bare except
# E901 - SyntaxError or IndentationError
# E902 - IOError
# E999: SyntaxError -- failed to compile a file into an Abstract Syntax Tree
# F822: undefined name in __all__
# F823: local variable name referenced before assignment
changedir = ./
skip_install = true
description = check code style, e.g. with flake8
deps = flake8
# commands = flake8 sbpy --count --select=E101,W191,W291,W292,W293,W391,E111,E112,E113,E30,E502,E722,E901,E902,E999,F822,F823
commands = flake8 sbpy --count --select=E101,E111,E112,E113,E124,E201,E202,E203,E211,E221,E225,E231,E241,E251,E261,E265,E271,E272,E301,E302,E303,E305,E502,E703,E711,E712,E714,E722,E901,E902,W191,W291,W292,W293,W391


[pytest]
addopts = --doctest-rst --doctest-plus --ignore-glob='*/compile_fieldnames.py'
