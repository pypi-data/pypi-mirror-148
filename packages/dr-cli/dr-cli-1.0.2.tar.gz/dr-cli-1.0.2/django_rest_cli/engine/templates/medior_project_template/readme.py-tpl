<h1>
	{{ project_name }} REST API.
</h1>


## What is this about?
This project was generated using the MEDIOR template of the drf-cli


## Running the Project
- If internet connection is detected, at the time of creating this project, 
this tool will auto install all the depencies in your requirements file. Else, 
you'd have to install the dependencies yourself with `
pip install -r requirements.txt` and  `pip install -r requirements-dev.txt` 

- Run `pre-commit install` in your project's root directory to install git hooks in your `.git` 
directory

- To see your git hooks in action, make your first git commit. The first time your hooks run,
it will take a while to execute. It's normal. Subsequent executions won't take that long

- If you wish to use some other database other than the default sqlite, go to the .env file, uncomment and update
`DATABASE_URL = "postgres://USER:PASSWORD@HOST:PORT/NAME"` with your correct credentials. 

- Run `python manage.py makemigrations users` to create migrations for your custom user table

- Run `python manage.py migrate` to apply all migrations

- `python manage.py runserver` to start your development server

- Point your browser to `http://localhost:8000/api/v1/docs`. You should see the auto-generated 
docs page


## This project comes bundled with:
- Initialized with .git

- python-decouple: for managing environment varibales 
[See Package Docs Here](https://pypi.org/project/python-decouple/). 

- drf-spactacular: for auto-generating APi docs 
[See Package Docs Here](https://drf-spectacular.readthedocs.io/en/latest/readme.html). 

- dj-database-url: for connecting to various databases 
[See Package Docs Here](https://github.com/jazzband/dj-database-url). 

- pre-commit, black, isort, flake8: for code linting with pre-commit hooks 
[See this tutorial for more on working with pre-commit hooks in Python](https://ljvmiranda921.github.io/notebook/2018/06/21/precommits-using-black-and-flake8/)


## Quick note on pre-commit hooks
With precommit hooks setup in this project, when you try to commit a change, 
your imports are automatically sorted with `isort`, your code formatted with `black`
and `flake8` is run on your code to catch formatting issues missed by black.
If isort, black, flake8 do not return errors, your changes will be commited.
Else isort and black would automatically fix the errors they catch. You'd have to manually fix the 
issues identified by flake8 though. Stage your changes
before commiting again. Repeat the cycle again if new code formatting issues are found.