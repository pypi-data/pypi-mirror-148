from collections.abc import MutableMapping

from . import db as db

class DBEnv:
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, *args, **kwargs): ...
    def open(self, *args, **kwargs): ...
    def remove(self, *args, **kwargs): ...
    def set_shm_key(self, *args, **kwargs): ...
    def set_cachesize(self, *args, **kwargs): ...
    def set_data_dir(self, *args, **kwargs): ...
    def set_flags(self, *args, **kwargs): ...
    def set_lg_bsize(self, *args, **kwargs): ...
    def set_lg_dir(self, *args, **kwargs): ...
    def set_lg_max(self, *args, **kwargs): ...
    def set_lk_detect(self, *args, **kwargs): ...
    def set_lk_max_locks(self, *args, **kwargs): ...
    def set_lk_max_lockers(self, *args, **kwargs): ...
    def set_lk_max_objects(self, *args, **kwargs): ...
    def set_mp_mmapsize(self, *args, **kwargs): ...
    def set_timeout(self, *args, **kwargs): ...
    def set_tmp_dir(self, *args, **kwargs): ...
    def txn_begin(self, *args, **kwargs): ...
    def txn_checkpoint(self, *args, **kwargs): ...
    def txn_stat(self, *args, **kwargs): ...
    def set_tx_max(self, *args, **kwargs): ...
    def set_tx_timestamp(self, *args, **kwargs): ...
    def lock_detect(self, *args, **kwargs): ...
    def lock_get(self, *args, **kwargs): ...
    def lock_id(self, *args, **kwargs): ...
    def lock_put(self, *args, **kwargs): ...
    def lock_stat(self, *args, **kwargs): ...
    def log_archive(self, *args, **kwargs): ...
    def set_get_returns_none(self, *args, **kwargs): ...
    def log_stat(self, *args, **kwargs): ...
    def dbremove(self, *args, **kwargs): ...
    def dbrename(self, *args, **kwargs): ...
    def set_encrypt(self, *args, **kwargs): ...
    def fileid_reset(self, *args, **kwargs): ...
    def lsn_reset(self, *args, **kwargs): ...

class DB(MutableMapping):
    def __init__(self, dbenv, *args, **kwargs) -> None: ...
    def __len__(self): ...
    def __getitem__(self, arg): ...
    def __setitem__(self, key, value) -> None: ...
    def __delitem__(self, arg) -> None: ...
    def __iter__(self): ...
    def append(self, *args, **kwargs): ...
    def associate(self, *args, **kwargs): ...
    def close(self, *args, **kwargs): ...
    def consume(self, *args, **kwargs): ...
    def consume_wait(self, *args, **kwargs): ...
    def cursor(self, *args, **kwargs): ...
    def delete(self, *args, **kwargs): ...
    def fd(self, *args, **kwargs): ...
    def get(self, *args, **kwargs): ...
    def pget(self, *args, **kwargs): ...
    def get_both(self, *args, **kwargs): ...
    def get_byteswapped(self, *args, **kwargs): ...
    def get_size(self, *args, **kwargs): ...
    def get_type(self, *args, **kwargs): ...
    def join(self, *args, **kwargs): ...
    def key_range(self, *args, **kwargs): ...
    def has_key(self, *args, **kwargs): ...
    def items(self, *args, **kwargs): ...
    def keys(self, *args, **kwargs): ...
    def open(self, *args, **kwargs): ...
    def put(self, *args, **kwargs): ...
    def remove(self, *args, **kwargs): ...
    def rename(self, *args, **kwargs): ...
    def set_bt_minkey(self, *args, **kwargs): ...
    def set_bt_compare(self, *args, **kwargs): ...
    def set_cachesize(self, *args, **kwargs): ...
    def set_dup_compare(self, *args, **kwargs): ...
    def set_flags(self, *args, **kwargs): ...
    def set_h_ffactor(self, *args, **kwargs): ...
    def set_h_nelem(self, *args, **kwargs): ...
    def set_lorder(self, *args, **kwargs): ...
    def set_pagesize(self, *args, **kwargs): ...
    def set_re_delim(self, *args, **kwargs): ...
    def set_re_len(self, *args, **kwargs): ...
    def set_re_pad(self, *args, **kwargs): ...
    def set_re_source(self, *args, **kwargs): ...
    def set_q_extentsize(self, *args, **kwargs): ...
    def stat(self, *args, **kwargs): ...
    def sync(self, *args, **kwargs): ...
    def type(self, *args, **kwargs): ...
    def upgrade(self, *args, **kwargs): ...
    def values(self, *args, **kwargs): ...
    def verify(self, *args, **kwargs): ...
    def set_get_returns_none(self, *args, **kwargs): ...
    def set_encrypt(self, *args, **kwargs): ...

class DBSequence:
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self, *args, **kwargs): ...
    def get(self, *args, **kwargs): ...
    def get_dbp(self, *args, **kwargs): ...
    def get_key(self, *args, **kwargs): ...
    def init_value(self, *args, **kwargs): ...
    def open(self, *args, **kwargs): ...
    def remove(self, *args, **kwargs): ...
    def stat(self, *args, **kwargs): ...
    def set_cachesize(self, *args, **kwargs): ...
    def set_flags(self, *args, **kwargs): ...
    def set_range(self, *args, **kwargs): ...
    def get_cachesize(self, *args, **kwargs): ...
    def get_flags(self, *args, **kwargs): ...
    def get_range(self, *args, **kwargs): ...
