from typing import Any, ClassVar

import berkeleydb.db

DB_AFTER: int
DB_AGGRESSIVE: int
DB_APPEND: int
DB_ARCH_ABS: int
DB_ARCH_DATA: int
DB_ARCH_LOG: int
DB_ARCH_REMOVE: int
DB_AUTO_COMMIT: int
DB_BACKUP_CLEAN: int
DB_BACKUP_DEEP_COPY: int
DB_BACKUP_FILES: int
DB_BACKUP_NO_LOGS: int
DB_BACKUP_READ_COUNT: int
DB_BACKUP_READ_SLEEP: int
DB_BACKUP_SINGLE_DIR: int
DB_BACKUP_SIZE: int
DB_BACKUP_UPDATE: int
DB_BACKUP_WRITE_DIRECT: int
DB_BEFORE: int
DB_BOOTSTRAP_HELPER: int
DB_BTREE: int
DB_BUFFER_SMALL: int
DB_CDB_ALLDB: int
DB_CHKSUM: int
DB_CONSUME: int
DB_CONSUME_WAIT: int
DB_CREATE: int
DB_CURRENT: int
DB_CURSOR_BULK: int
DB_DBT_BLOB: int
DB_DIRECT_DB: int
DB_DIRTY_READ: int
DB_DONOTINDEX: int
DB_DSYNC_DB: int
DB_DUP: int
DB_DUPSORT: int
DB_EID_BROADCAST: int
DB_EID_INVALID: int
DB_ENCRYPT: int
DB_ENCRYPT_AES: int
DB_EVENT_PANIC: int
DB_EVENT_REG_ALIVE: int
DB_EVENT_REG_PANIC: int
DB_EVENT_REP_AUTOTAKEOVER_FAILED: int
DB_EVENT_REP_CLIENT: int
DB_EVENT_REP_CONNECT_BROKEN: int
DB_EVENT_REP_CONNECT_ESTD: int
DB_EVENT_REP_CONNECT_TRY_FAILED: int
DB_EVENT_REP_DUPMASTER: int
DB_EVENT_REP_ELECTED: int
DB_EVENT_REP_ELECTION_FAILED: int
DB_EVENT_REP_INIT_DONE: int
DB_EVENT_REP_LOCAL_SITE_REMOVED: int
DB_EVENT_REP_MASTER: int
DB_EVENT_REP_MASTER_FAILURE: int
DB_EVENT_REP_NEWMASTER: int
DB_EVENT_REP_PERM_FAILED: int
DB_EVENT_REP_SITE_ADDED: int
DB_EVENT_REP_SITE_REMOVED: int
DB_EVENT_REP_STARTUPDONE: int
DB_EVENT_WRITE_FAILED: int
DB_EXCL: int
DB_EXTENT: int
DB_FAILCHK: int
DB_FAST_STAT: int
DB_FCNTL_LOCKING: int
DB_FIRST: int
DB_FLUSH: int
DB_FORCE: int
DB_FORCESYNC: int
DB_FORCESYNCENV: int
DB_FOREIGN_ABORT: int
DB_FOREIGN_CASCADE: int
DB_FOREIGN_NULLIFY: int
DB_FREELIST_ONLY: int
DB_FREE_SPACE: int
DB_GET_BOTH: int
DB_GET_BOTH_RANGE: int
DB_GET_RECNO: int
DB_GID_SIZE: int
DB_GROUP_CREATOR: int
DB_HASH: int
DB_HEAP: int
DB_HEAP_FULL: int
DB_HOTBACKUP_IN_PROGRESS: int
DB_IGNORE_LEASE: int
DB_IMMUTABLE_KEY: int
DB_INIT_CDB: int
DB_INIT_LOCK: int
DB_INIT_LOG: int
DB_INIT_MPOOL: int
DB_INIT_REP: int
DB_INIT_TXN: int
DB_INORDER: int
DB_JOINENV: int
DB_JOIN_ITEM: int
DB_JOIN_NOSORT: int
DB_KEYEMPTY: int
DB_KEYEXIST: int
DB_KEYFIRST: int
DB_KEYLAST: int
DB_LAST: int
DB_LEGACY: int
DB_LOCAL_SITE: int
DB_LOCKDOWN: int
DB_LOCK_CONFLICT: int
DB_LOCK_DEADLOCK: int
DB_LOCK_DEFAULT: int
DB_LOCK_DUMP: int
DB_LOCK_EXPIRE: int
DB_LOCK_GET: int
DB_LOCK_INHERIT: int
DB_LOCK_IREAD: int
DB_LOCK_IWR: int
DB_LOCK_IWRITE: int
DB_LOCK_MAXLOCKS: int
DB_LOCK_MAXWRITE: int
DB_LOCK_MINLOCKS: int
DB_LOCK_MINWRITE: int
DB_LOCK_NG: int
DB_LOCK_NORUN: int
DB_LOCK_NOTGRANTED: int
DB_LOCK_NOWAIT: int
DB_LOCK_OLDEST: int
DB_LOCK_PUT: int
DB_LOCK_PUT_ALL: int
DB_LOCK_PUT_OBJ: int
DB_LOCK_RANDOM: int
DB_LOCK_READ: int
DB_LOCK_READ_UNCOMMITTED: int
DB_LOCK_RECORD: int
DB_LOCK_SWITCH: int
DB_LOCK_UPGRADE: int
DB_LOCK_UPGRADE_WRITE: int
DB_LOCK_WAIT: int
DB_LOCK_WRITE: int
DB_LOCK_WWRITE: int
DB_LOCK_YOUNGEST: int
DB_LOG_AUTO_REMOVE: int
DB_LOG_BLOB: int
DB_LOG_DIRECT: int
DB_LOG_DSYNC: int
DB_LOG_IN_MEMORY: int
DB_LOG_NOSYNC: int
DB_LOG_ZERO: int
DB_LSTAT_ABORTED: int
DB_LSTAT_FREE: int
DB_LSTAT_HELD: int
DB_LSTAT_PENDING: int
DB_LSTAT_WAITING: int
DB_MAX_PAGES: int
DB_MAX_RECORDS: int
DB_MEM_LOCK: int
DB_MEM_LOCKER: int
DB_MEM_LOCKOBJECT: int
DB_MEM_LOGID: int
DB_MEM_THREAD: int
DB_MEM_TRANSACTION: int
DB_META_CHKSUM_FAIL: int
DB_MULTIPLE: int
DB_MULTIPLE_KEY: int
DB_MULTIVERSION: int
DB_NEXT: int
DB_NEXT_DUP: int
DB_NEXT_NODUP: int
DB_NODUPDATA: int
DB_NOLOCKING: int
DB_NOMMAP: int
DB_NOORDERCHK: int
DB_NOOVERWRITE: int
DB_NOPANIC: int
DB_NOSERVER: int
DB_NOSYNC: int
DB_NOTFOUND: int
DB_ODDFILESIZE: int
DB_OLD_VERSION: int
DB_OPFLAGS_MASK: int
DB_ORDERCHKONLY: int
DB_OVERWRITE: int
DB_OVERWRITE_DUP: int
DB_PAGE_NOTFOUND: int
DB_PANIC_ENVIRONMENT: int
DB_POSITION: int
DB_PREV: int
DB_PREV_DUP: int
DB_PREV_NODUP: int
DB_PRINTABLE: int
DB_PRIORITY_DEFAULT: int
DB_PRIORITY_HIGH: int
DB_PRIORITY_LOW: int
DB_PRIORITY_UNCHANGED: int
DB_PRIORITY_VERY_HIGH: int
DB_PRIORITY_VERY_LOW: int
DB_PRIVATE: int
DB_PR_PAGE: int
DB_PR_RECOVERYTEST: int
DB_QUEUE: int
DB_RDONLY: int
DB_RDWRMASTER: int
DB_READ_COMMITTED: int
DB_READ_UNCOMMITTED: int
DB_RECNO: int
DB_RECNUM: int
DB_RECOVER: int
DB_RECOVER_FATAL: int
DB_REGION_INIT: int
DB_REGISTER: int
DB_RENUMBER: int
DB_REPMGR_ACKS_ALL: int
DB_REPMGR_ACKS_ALL_AVAILABLE: int
DB_REPMGR_ACKS_ALL_PEERS: int
DB_REPMGR_ACKS_NONE: int
DB_REPMGR_ACKS_ONE: int
DB_REPMGR_ACKS_ONE_PEER: int
DB_REPMGR_ACKS_QUORUM: int
DB_REPMGR_CONF_2SITE_STRICT: int
DB_REPMGR_CONF_DISABLE_SSL: int
DB_REPMGR_CONF_ELECTIONS: int
DB_REPMGR_CONNECTED: int
DB_REPMGR_DISCONNECTED: int
DB_REPMGR_ISVIEW: int
DB_REPMGR_PEER: int
DB_REP_ACK_TIMEOUT: int
DB_REP_ANYWHERE: int
DB_REP_CHECKPOINT_DELAY: int
DB_REP_CLIENT: int
DB_REP_CONF_AUTOINIT: int
DB_REP_CONF_BULK: int
DB_REP_CONF_DELAYCLIENT: int
DB_REP_CONF_INMEM: int
DB_REP_CONF_LEASE: int
DB_REP_CONF_NOWAIT: int
DB_REP_CONNECTION_RETRY: int
DB_REP_DUPMASTER: int
DB_REP_ELECTION: int
DB_REP_ELECTION_RETRY: int
DB_REP_ELECTION_TIMEOUT: int
DB_REP_FULL_ELECTION_TIMEOUT: int
DB_REP_HEARTBEAT_MONITOR: int
DB_REP_HEARTBEAT_SEND: int
DB_REP_HOLDELECTION: int
DB_REP_IGNORE: int
DB_REP_ISPERM: int
DB_REP_JOIN_FAILURE: int
DB_REP_LEASE_EXPIRED: int
DB_REP_LEASE_TIMEOUT: int
DB_REP_MASTER: int
DB_REP_NEWSITE: int
DB_REP_NOBUFFER: int
DB_REP_NOTPERM: int
DB_REP_PERMANENT: int
DB_REP_REREQUEST: int
DB_REVSPLITOFF: int
DB_RMW: int
DB_RUNRECOVERY: int
DB_SALVAGE: int
DB_SECONDARY_BAD: int
DB_SEQ_DEC: int
DB_SEQ_INC: int
DB_SEQ_WRAP: int
DB_SET: int
DB_SET_LOCK_TIMEOUT: int
DB_SET_RANGE: int
DB_SET_RECNO: int
DB_SET_REG_TIMEOUT: int
DB_SET_TXN_TIMEOUT: int
DB_SNAPSHOT: int
DB_STAT_ALL: int
DB_STAT_CLEAR: int
DB_STAT_LOCK_CONF: int
DB_STAT_LOCK_LOCKERS: int
DB_STAT_LOCK_OBJECTS: int
DB_STAT_LOCK_PARAMS: int
DB_STAT_MEMP_HASH: int
DB_STAT_SUBSYSTEM: int
DB_STREAM_READ: int
DB_STREAM_SYNC_WRITE: int
DB_STREAM_WRITE: int
DB_SYSTEM_MEM: int
DB_THREAD: int
DB_TIMEOUT: int
DB_TIME_NOTGRANTED: int
DB_TRUNCATE: int
DB_TXN_BULK: int
DB_TXN_NOSYNC: int
DB_TXN_NOT_DURABLE: int
DB_TXN_NOWAIT: int
DB_TXN_SNAPSHOT: int
DB_TXN_SYNC: int
DB_TXN_WAIT: int
DB_TXN_WRITE_NOSYNC: int
DB_UNKNOWN: int
DB_UPGRADE: int
DB_USE_ENVIRON: int
DB_USE_ENVIRON_ROOT: int
DB_VERB_DEADLOCK: int
DB_VERB_FILEOPS: int
DB_VERB_FILEOPS_ALL: int
DB_VERB_RECOVERY: int
DB_VERB_REGISTER: int
DB_VERB_REPLICATION: int
DB_VERB_REPMGR_CONNFAIL: int
DB_VERB_REPMGR_MISC: int
DB_VERB_REP_ELECT: int
DB_VERB_REP_LEASE: int
DB_VERB_REP_MISC: int
DB_VERB_REP_MSGS: int
DB_VERB_REP_SYNC: int
DB_VERB_REP_SYSTEM: int
DB_VERB_WAITSFOR: int
DB_VERIFY: int
DB_VERIFY_BAD: int
DB_VERSION_MAJOR: int
DB_VERSION_MINOR: int
DB_VERSION_PATCH: int
DB_VERSION_STRING: str
DB_WRITECURSOR: int
DB_YIELDCPU: int
EACCES: int
EAGAIN: int
EBUSY: int
EEXIST: int
EINVAL: int
ENOENT: int
ENOMEM: int
ENOSPC: int
EPERM: int
api: Any
# api: PyCapsule

class DB:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def append(self, *args, **kwargs) -> Any: ...
    def associate(self, *args, **kwargs) -> Any: ...
    def close(self, *args, **kwargs) -> Any: ...
    def compact(self, *args, **kwargs) -> Any: ...
    def consume(self, *args, **kwargs) -> Any: ...
    def consume_wait(self, *args, **kwargs) -> Any: ...
    def cursor(self, *args, **kwargs) -> Any: ...
    def delete(self, *args, **kwargs) -> Any: ...
    def exists(self, *args, **kwargs) -> Any: ...
    def fd(self, *args, **kwargs) -> Any: ...
    def get(self, *args, **kwargs) -> Any: ...
    def get_both(self, *args, **kwargs) -> Any: ...
    def get_bt_minkey(self, *args, **kwargs) -> Any: ...
    def get_byteswapped(self, *args, **kwargs) -> Any: ...
    def get_cachesize(self, *args, **kwargs) -> Any: ...
    def get_dbname(self, *args, **kwargs) -> Any: ...
    def get_encrypt_flags(self, *args, **kwargs) -> Any: ...
    def get_flags(self, *args, **kwargs) -> Any: ...
    def get_h_ffactor(self, *args, **kwargs) -> Any: ...
    def get_h_nelem(self, *args, **kwargs) -> Any: ...
    def get_heap_regionsize(self, *args, **kwargs) -> Any: ...
    def get_heapsize(self, *args, **kwargs) -> Any: ...
    def get_lk_exclusive(self, *args, **kwargs) -> Any: ...
    def get_lorder(self, *args, **kwargs) -> Any: ...
    def get_open_flags(self, *args, **kwargs) -> Any: ...
    def get_pagesize(self, *args, **kwargs) -> Any: ...
    def get_priority(self, *args, **kwargs) -> Any: ...
    def get_private(self, *args, **kwargs) -> Any: ...
    def get_q_extentsize(self, *args, **kwargs) -> Any: ...
    def get_re_delim(self, *args, **kwargs) -> Any: ...
    def get_re_len(self, *args, **kwargs) -> Any: ...
    def get_re_pad(self, *args, **kwargs) -> Any: ...
    def get_re_source(self, *args, **kwargs) -> Any: ...
    def get_size(self, *args, **kwargs) -> Any: ...
    def get_transactional(self, *args, **kwargs) -> Any: ...
    def get_type(self, *args, **kwargs) -> Any: ...
    def has_key(self, *args, **kwargs) -> Any: ...
    def items(self, *args, **kwargs) -> Any: ...
    def join(self, *args, **kwargs) -> Any: ...
    def key_range(self, *args, **kwargs) -> Any: ...
    def keys(self, *args, **kwargs) -> Any: ...
    def open(self, *args, **kwargs) -> Any: ...
    def pget(self, *args, **kwargs) -> Any: ...
    def put(self, *args, **kwargs) -> Any: ...
    def remove(self, *args, **kwargs) -> Any: ...
    def rename(self, *args, **kwargs) -> Any: ...
    def set_bt_compare(self, *args, **kwargs) -> Any: ...
    def set_bt_minkey(self, *args, **kwargs) -> Any: ...
    def set_cachesize(self, *args, **kwargs) -> Any: ...
    def set_dup_compare(self, *args, **kwargs) -> Any: ...
    def set_encrypt(self, *args, **kwargs) -> Any: ...
    def set_flags(self, *args, **kwargs) -> Any: ...
    def set_get_returns_none(self, *args, **kwargs) -> Any: ...
    def set_h_ffactor(self, *args, **kwargs) -> Any: ...
    def set_h_nelem(self, *args, **kwargs) -> Any: ...
    def set_heap_regionsize(self, *args, **kwargs) -> Any: ...
    def set_heapsize(self, *args, **kwargs) -> Any: ...
    def set_lk_exclusive(self, *args, **kwargs) -> Any: ...
    def set_lorder(self, *args, **kwargs) -> Any: ...
    def set_pagesize(self, *args, **kwargs) -> Any: ...
    def set_priority(self, *args, **kwargs) -> Any: ...
    def set_private(self, *args, **kwargs) -> Any: ...
    def set_q_extentsize(self, *args, **kwargs) -> Any: ...
    def set_re_delim(self, *args, **kwargs) -> Any: ...
    def set_re_len(self, *args, **kwargs) -> Any: ...
    def set_re_pad(self, *args, **kwargs) -> Any: ...
    def set_re_source(self, *args, **kwargs) -> Any: ...
    def stat(self, *args, **kwargs) -> Any: ...
    def stat_print(self, *args, **kwargs) -> Any: ...
    def sync(self, *args, **kwargs) -> Any: ...
    def truncate(self, *args, **kwargs) -> Any: ...
    def upgrade(self, *args, **kwargs) -> Any: ...
    def values(self, *args, **kwargs) -> Any: ...
    def verify(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __len__(self) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class DBAccessError(berkeleydb.db.DBError): ...
class DBAgainError(berkeleydb.db.DBError): ...
class DBBusyError(berkeleydb.db.DBError): ...
class DBCursorClosedError(berkeleydb.db.DBError): ...

class DBEnv:
    # db_home: ClassVar[getset_descriptor] = ...
    db_home: ClassVar[Any] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def backup(self, *args, **kwargs) -> Any: ...
    def cdsgroup_begin(self, *args, **kwargs) -> Any: ...
    def close(self, *args, **kwargs) -> Any: ...
    def dbbackup(self, *args, **kwargs) -> Any: ...
    def dbremove(self, *args, **kwargs) -> Any: ...
    def dbrename(self, *args, **kwargs) -> Any: ...
    def fileid_reset(self, *args, **kwargs) -> Any: ...
    def get_backup_config(self, *args, **kwargs) -> Any: ...
    def get_cache_max(self, *args, **kwargs) -> Any: ...
    def get_cachesize(self, *args, **kwargs) -> Any: ...
    def get_data_dirs(self, *args, **kwargs) -> Any: ...
    def get_encrypt_flags(self, *args, **kwargs) -> Any: ...
    def get_flags(self, *args, **kwargs) -> Any: ...
    def get_intermediate_dir_mode(self, *args, **kwargs) -> Any: ...
    def get_lg_bsize(self, *args, **kwargs) -> Any: ...
    def get_lg_dir(self, *args, **kwargs) -> Any: ...
    def get_lg_filemode(self, *args, **kwargs) -> Any: ...
    def get_lg_max(self, *args, **kwargs) -> Any: ...
    def get_lg_regionmax(self, *args, **kwargs) -> Any: ...
    def get_lk_detect(self, *args, **kwargs) -> Any: ...
    def get_lk_max_lockers(self, *args, **kwargs) -> Any: ...
    def get_lk_max_locks(self, *args, **kwargs) -> Any: ...
    def get_lk_max_objects(self, *args, **kwargs) -> Any: ...
    def get_lk_partitions(self, *args, **kwargs) -> Any: ...
    def get_mp_max_openfd(self, *args, **kwargs) -> Any: ...
    def get_mp_max_write(self, *args, **kwargs) -> Any: ...
    def get_mp_mmapsize(self, *args, **kwargs) -> Any: ...
    def get_open_flags(self, *args, **kwargs) -> Any: ...
    def get_private(self, *args, **kwargs) -> Any: ...
    def get_shm_key(self, *args, **kwargs) -> Any: ...
    def get_thread_count(self, *args, **kwargs) -> Any: ...
    def get_timeout(self, *args, **kwargs) -> Any: ...
    def get_tmp_dir(self, *args, **kwargs) -> Any: ...
    def get_tx_max(self, *args, **kwargs) -> Any: ...
    def get_tx_timestamp(self, *args, **kwargs) -> Any: ...
    def get_verbose(self, *args, **kwargs) -> Any: ...
    def lock_detect(self, *args, **kwargs) -> Any: ...
    def lock_get(self, *args, **kwargs) -> Any: ...
    def lock_id(self, *args, **kwargs) -> Any: ...
    def lock_id_free(self, *args, **kwargs) -> Any: ...
    def lock_put(self, *args, **kwargs) -> Any: ...
    def lock_stat(self, *args, **kwargs) -> Any: ...
    def lock_stat_print(self, *args, **kwargs) -> Any: ...
    def log_archive(self, *args, **kwargs) -> Any: ...
    def log_cursor(self, *args, **kwargs) -> Any: ...
    def log_file(self, *args, **kwargs) -> Any: ...
    def log_flush(self, *args, **kwargs) -> Any: ...
    def log_get_config(self, *args, **kwargs) -> Any: ...
    def log_printf(self, *args, **kwargs) -> Any: ...
    def log_set_config(self, *args, **kwargs) -> Any: ...
    def log_stat(self, *args, **kwargs) -> Any: ...
    def log_stat_print(self, *args, **kwargs) -> Any: ...
    def lsn_reset(self, *args, **kwargs) -> Any: ...
    def memp_stat(self, *args, **kwargs) -> Any: ...
    def memp_stat_print(self, *args, **kwargs) -> Any: ...
    def memp_sync(self, *args, **kwargs) -> Any: ...
    def memp_trickle(self, *args, **kwargs) -> Any: ...
    def mutex_get_align(self, *args, **kwargs) -> Any: ...
    def mutex_get_increment(self, *args, **kwargs) -> Any: ...
    def mutex_get_max(self, *args, **kwargs) -> Any: ...
    def mutex_get_tas_spins(self, *args, **kwargs) -> Any: ...
    def mutex_set_align(self, *args, **kwargs) -> Any: ...
    def mutex_set_increment(self, *args, **kwargs) -> Any: ...
    def mutex_set_max(self, *args, **kwargs) -> Any: ...
    def mutex_set_tas_spins(self, *args, **kwargs) -> Any: ...
    def mutex_stat(self, *args, **kwargs) -> Any: ...
    def mutex_stat_print(self, *args, **kwargs) -> Any: ...
    def open(self, *args, **kwargs) -> Any: ...
    def remove(self, *args, **kwargs) -> Any: ...
    def rep_elect(self, *args, **kwargs) -> Any: ...
    def rep_get_clockskew(self, *args, **kwargs) -> Any: ...
    def rep_get_config(self, *args, **kwargs) -> Any: ...
    def rep_get_limit(self, *args, **kwargs) -> Any: ...
    def rep_get_nsites(self, *args, **kwargs) -> Any: ...
    def rep_get_priority(self, *args, **kwargs) -> Any: ...
    def rep_get_request(self, *args, **kwargs) -> Any: ...
    def rep_get_timeout(self, *args, **kwargs) -> Any: ...
    def rep_process_message(self, *args, **kwargs) -> Any: ...
    def rep_set_clockskew(self, *args, **kwargs) -> Any: ...
    def rep_set_config(self, *args, **kwargs) -> Any: ...
    def rep_set_limit(self, *args, **kwargs) -> Any: ...
    def rep_set_nsites(self, *args, **kwargs) -> Any: ...
    def rep_set_priority(self, *args, **kwargs) -> Any: ...
    def rep_set_request(self, *args, **kwargs) -> Any: ...
    def rep_set_timeout(self, *args, **kwargs) -> Any: ...
    def rep_set_transport(self, *args, **kwargs) -> Any: ...
    def rep_start(self, *args, **kwargs) -> Any: ...
    def rep_stat(self, *args, **kwargs) -> Any: ...
    def rep_stat_print(self, *args, **kwargs) -> Any: ...
    def rep_sync(self, *args, **kwargs) -> Any: ...
    def repmgr_get_ack_policy(self, *args, **kwargs) -> Any: ...
    def repmgr_set_ack_policy(self, *args, **kwargs) -> Any: ...
    def repmgr_site(self, *args, **kwargs) -> Any: ...
    def repmgr_site_by_eid(self, *args, **kwargs) -> Any: ...
    def repmgr_site_list(self, *args, **kwargs) -> Any: ...
    def repmgr_start(self, *args, **kwargs) -> Any: ...
    def repmgr_stat(self, *args, **kwargs) -> Any: ...
    def repmgr_stat_print(self, *args, **kwargs) -> Any: ...
    def set_backup_config(self, *args, **kwargs) -> Any: ...
    def set_cache_max(self, *args, **kwargs) -> Any: ...
    def set_cachesize(self, *args, **kwargs) -> Any: ...
    def set_data_dir(self, *args, **kwargs) -> Any: ...
    def set_encrypt(self, *args, **kwargs) -> Any: ...
    def set_event_notify(self, *args, **kwargs) -> Any: ...
    def set_flags(self, *args, **kwargs) -> Any: ...
    def set_get_returns_none(self, *args, **kwargs) -> Any: ...
    def set_intermediate_dir_mode(self, *args, **kwargs) -> Any: ...
    def set_lg_bsize(self, *args, **kwargs) -> Any: ...
    def set_lg_dir(self, *args, **kwargs) -> Any: ...
    def set_lg_filemode(self, *args, **kwargs) -> Any: ...
    def set_lg_max(self, *args, **kwargs) -> Any: ...
    def set_lg_regionmax(self, *args, **kwargs) -> Any: ...
    def set_lk_detect(self, *args, **kwargs) -> Any: ...
    def set_lk_max_lockers(self, *args, **kwargs) -> Any: ...
    def set_lk_max_locks(self, *args, **kwargs) -> Any: ...
    def set_lk_max_objects(self, *args, **kwargs) -> Any: ...
    def set_lk_partitions(self, *args, **kwargs) -> Any: ...
    def set_mp_max_openfd(self, *args, **kwargs) -> Any: ...
    def set_mp_max_write(self, *args, **kwargs) -> Any: ...
    def set_mp_mmapsize(self, *args, **kwargs) -> Any: ...
    def set_private(self, *args, **kwargs) -> Any: ...
    def set_shm_key(self, *args, **kwargs) -> Any: ...
    def set_thread_count(self, *args, **kwargs) -> Any: ...
    def set_timeout(self, *args, **kwargs) -> Any: ...
    def set_tmp_dir(self, *args, **kwargs) -> Any: ...
    def set_tx_max(self, *args, **kwargs) -> Any: ...
    def set_tx_timestamp(self, *args, **kwargs) -> Any: ...
    def set_verbose(self, *args, **kwargs) -> Any: ...
    def stat_print(self, *args, **kwargs) -> Any: ...
    def txn_begin(self, *args, **kwargs) -> Any: ...
    def txn_checkpoint(self, *args, **kwargs) -> Any: ...
    def txn_recover(self, *args, **kwargs) -> Any: ...
    def txn_stat(self, *args, **kwargs) -> Any: ...
    def txn_stat_print(self, *args, **kwargs) -> Any: ...

class DBError(Exception): ...
class DBFileExistsError(berkeleydb.db.DBError): ...
class DBForeignConflictError(berkeleydb.db.DBError): ...
class DBHeapFull(berkeleydb.db.DBError): ...
class DBInvalidArgError(berkeleydb.db.DBError): ...
class DBKeyEmptyError(berkeleydb.db.DBError, KeyError): ...
class DBKeyExistError(berkeleydb.db.DBError): ...
class DBLockDeadlockError(berkeleydb.db.DBError): ...
class DBLockNotGrantedError(berkeleydb.db.DBError): ...
class DBMetaChksumFail(berkeleydb.db.DBError): ...
class DBNoMemoryError(berkeleydb.db.DBError): ...
class DBNoServerError(berkeleydb.db.DBError): ...
class DBNoSpaceError(berkeleydb.db.DBError): ...
class DBNoSuchFileError(berkeleydb.db.DBError): ...
class DBNotFoundError(berkeleydb.db.DBError, KeyError): ...
class DBOldVersionError(berkeleydb.db.DBError): ...
class DBPageNotFoundError(berkeleydb.db.DBError): ...
class DBPermissionsError(berkeleydb.db.DBError): ...
class DBRepHandleDeadError(berkeleydb.db.DBError): ...
class DBRepLeaseExpiredError(berkeleydb.db.DBError): ...
class DBRepLockoutError(berkeleydb.db.DBError): ...
class DBRepUnavailError(berkeleydb.db.DBError): ...
class DBRunRecoveryError(berkeleydb.db.DBError): ...
class DBSecondaryBadError(berkeleydb.db.DBError): ...

class DBSequence:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def close(self, *args, **kwargs) -> Any: ...
    def get(self, *args, **kwargs) -> Any: ...
    def get_cachesize(self, *args, **kwargs) -> Any: ...
    def get_dbp(self, *args, **kwargs) -> Any: ...
    def get_flags(self, *args, **kwargs) -> Any: ...
    def get_key(self, *args, **kwargs) -> Any: ...
    def get_range(self, *args, **kwargs) -> Any: ...
    def initial_value(self, *args, **kwargs) -> Any: ...
    def open(self, *args, **kwargs) -> Any: ...
    def remove(self, *args, **kwargs) -> Any: ...
    def set_cachesize(self, *args, **kwargs) -> Any: ...
    def set_flags(self, *args, **kwargs) -> Any: ...
    def set_range(self, *args, **kwargs) -> Any: ...
    def stat(self, *args, **kwargs) -> Any: ...
    def stat_print(self, *args, **kwargs) -> Any: ...

class DBVerifyBadError(berkeleydb.db.DBError): ...

def full_version(*args, **kwargs) -> Any: ...
def version(*args, **kwargs) -> Any: ...
