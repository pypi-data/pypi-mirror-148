import abc
from collections.abc import Generator, MutableMapping
from typing import Any

db: Any
error: Any

class _iter_mixin(MutableMapping, metaclass=abc.ABCMeta):
    def __iter__(self): ...
    def iteritems(self) -> Generator[Any, None, None]: ...

class _DBWithCursor(_iter_mixin):
    db: Any
    dbc: Any
    saved_dbc_key: Any
    def __init__(self, db) -> None: ...
    def __del__(self) -> None: ...
    def isOpen(self): ...
    def __len__(self): ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    def __delitem__(self, key) -> None: ...
    def close(self): ...
    def keys(self): ...
    def has_key(self, key): ...
    def set_location(self, key): ...
    def next(self): ...
    def __next__(self): ...
    def previous(self): ...
    def first(self): ...
    def last(self): ...
    def sync(self): ...

def hashopen(
    file,
    flag: str = ...,
    mode: int = ...,
    pgsize: Any | None = ...,
    ffactor: Any | None = ...,
    nelem: Any | None = ...,
    cachesize: Any | None = ...,
    lorder: Any | None = ...,
    hflags: int = ...,
): ...
def btopen(
    file,
    flag: str = ...,
    mode: int = ...,
    btflags: int = ...,
    cachesize: Any | None = ...,
    maxkeypage: Any | None = ...,
    minkeypage: Any | None = ...,
    pgsize: Any | None = ...,
    lorder: Any | None = ...,
): ...
def rnopen(
    file,
    flag: str = ...,
    mode: int = ...,
    rnflags: int = ...,
    cachesize: Any | None = ...,
    pgsize: Any | None = ...,
    lorder: Any | None = ...,
    rlen: Any | None = ...,
    delim: Any | None = ...,
    source: Any | None = ...,
    pad: Any | None = ...,
): ...
