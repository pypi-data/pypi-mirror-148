from collections.abc import MutableMapping
from typing import Any

from . import db as db

HIGHEST_PROTOCOL: Any

def open(
    filename,
    flags=...,
    mode: int = ...,
    filetype=...,
    dbenv: Any | None = ...,
    dbname: Any | None = ...,
): ...

class DBShelveError(db.DBError): ...

class DBShelf(MutableMapping):
    db: Any
    protocol: Any
    def __init__(self, dbenv: Any | None = ...) -> None: ...
    def __del__(self) -> None: ...
    def __getattr__(self, name): ...
    def __len__(self): ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    def __delitem__(self, key) -> None: ...
    def keys(self, txn: Any | None = ...): ...
    def __iter__(self): ...
    def open(self, *args, **kwargs) -> None: ...
    def close(self, *args, **kwargs) -> None: ...
    def items(self, txn: Any | None = ...): ...
    def values(self, txn: Any | None = ...): ...
    def append(self, value, txn: Any | None = ...): ...
    def associate(self, secondaryDB, callback, flags: int = ...): ...
    def get(self, *args, **kw): ...
    def get_both(self, key, value, txn: Any | None = ..., flags: int = ...): ...
    def cursor(self, txn: Any | None = ..., flags: int = ...): ...
    def put(self, key, value, txn: Any | None = ..., flags: int = ...): ...
    def join(self, cursorList, flags: int = ...) -> None: ...

class DBShelfCursor:
    dbc: Any
    def __init__(self, cursor) -> None: ...
    def __del__(self) -> None: ...
    def __getattr__(self, name): ...
    def dup(self, flags: int = ...): ...
    def put(self, key, value, flags: int = ...): ...
    def get(self, *args) -> None: ...
    def get_1(self, flags): ...
    def get_2(self, key, flags): ...
    def get_3(self, key, value, flags): ...
    def current(self, flags: int = ...): ...
    def first(self, flags: int = ...): ...
    def last(self, flags: int = ...): ...
    def next(self, flags: int = ...): ...
    def prev(self, flags: int = ...): ...
    def consume(self, flags: int = ...): ...
    def next_dup(self, flags: int = ...): ...
    def next_nodup(self, flags: int = ...): ...
    def prev_nodup(self, flags: int = ...): ...
    def get_both(self, key, value, flags: int = ...): ...
    def set(self, key, flags: int = ...): ...
    def set_range(self, key, flags: int = ...): ...
    def set_recno(self, recno, flags: int = ...): ...
    set_both: Any
