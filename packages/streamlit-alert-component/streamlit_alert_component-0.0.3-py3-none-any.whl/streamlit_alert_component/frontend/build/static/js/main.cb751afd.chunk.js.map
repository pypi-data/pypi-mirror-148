{"version":3,"sources":["AlertComponent.tsx","index.tsx"],"names":["Alert","React","forwardRef","props","ref","elevation","variant","AlertComponent","render","handleClose","event","reason","setState","open","title","args","message","severity","snackbar","title_part","AlertTitle","component","style","height","console","log","state","Snackbar","autoHideDuration","onClose","sx","width","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"iRAUMA,EAAQC,IAAMC,YAAuC,SACzDC,EACAC,GAEA,OAAO,kBAAC,IAAD,eAAUC,UAAW,EAAGD,IAAKA,EAAKE,QAAQ,UAAaH,OAG1DI,E,kDACJ,WAAYJ,GAAa,IAAD,8BACtB,cAAMA,IAGDK,OAAS,WAGd,IAAMC,EAAc,SAACC,EAAsCC,GAC1C,cAAXA,GAGJ,EAAKC,SAAS,CAAEC,MAAM,KAIlBC,EAAQ,EAAKX,MAAMY,KAAX,MACRC,EAAU,EAAKb,MAAMY,KAAX,QACVE,EAAW,EAAKd,MAAMY,KAAX,SACXT,EAAU,EAAKH,MAAMY,KAAX,QACVG,EAAW,EAAKf,MAAMY,KAAX,SAEbI,EAAa,KACJ,MAATL,IACFK,EAAa,kBAACC,EAAA,EAAD,KAAaN,IAE5B,IAAIO,EAAY,KACZC,EAAQ,GA0BZ,OAxBiB,IAAbJ,EACFG,EACE,kBAAC,EAAD,CAAOf,QAASA,EAASW,SAAUA,GAChCE,EACAH,IAKLM,EAAQ,CACNC,OAAQ,KAEVC,QAAQC,IAAI,YACZD,QAAQC,IAAI,EAAKC,MAAMb,MAEvBQ,EACE,kBAACM,EAAA,EAAD,CAAUd,KAAM,EAAKa,MAAMb,KAAMe,iBAAkB,IAAMC,QAASpB,GAChE,kBAAC,EAAD,CAAOoB,QAASpB,EAAaH,QAASA,EAASW,SAAUA,EAAUa,GAAI,CAAEC,MAAO,SAC7EZ,EACAH,KAMP,yBAAKM,MAAOA,GACTD,IApDL,EAAKK,MAAQ,CAAEb,MAAM,GAFC,E,uBADGmB,KA6DdC,cAAwB1B,GC1EvC2B,IAAS1B,OACP,kBAAC,IAAM2B,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.cb751afd.chunk.js","sourcesContent":["import {\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\n\nimport React, { ReactNode } from \"react\";\nimport AlertTitle from '@mui/material/AlertTitle';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n// the `render()` function is called when component is re-rendered\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n  props,\n  ref,\n) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nclass AlertComponent extends StreamlitComponentBase<any> {\n  constructor(props: any) {\n    super(props)\n    this.state = { open: true };\n  }\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n      if (reason === 'clickaway') {\n        return;\n      }\n      this.setState({ open: false })\n    };\n\n\n    const title = this.props.args[\"title\"]\n    const message = this.props.args[\"message\"]\n    const severity = this.props.args[\"severity\"]\n    const variant = this.props.args[\"variant\"]\n    const snackbar = this.props.args[\"snackbar\"]\n\n    let title_part = null;\n    if (title != null) {\n      title_part = <AlertTitle>{title}</AlertTitle>\n    }\n    let component = null;\n    let style = {};\n\n    if (snackbar === false) {\n      component = (\n        <Alert variant={variant} severity={severity}>\n          {title_part}\n          {message}\n        </Alert>\n      )\n    }\n    else {\n      style = {\n        height: 100,\n      }\n      console.log(\"snackbar\")\n      console.log(this.state.open)\n\n      component = (\n        <Snackbar open={this.state.open} autoHideDuration={6000} onClose={handleClose}  >\n          <Alert onClose={handleClose} variant={variant} severity={severity} sx={{ width: '100%' }}>\n            {title_part}\n            {message}\n          </Alert>\n        </Snackbar>\n      )\n    }\n    return (\n      <div style={style}>\n        {component}\n      </div>\n    )\n  }\n}\n\nexport default withStreamlitConnection(AlertComponent)","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport AlertComponent from \"./AlertComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <AlertComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}