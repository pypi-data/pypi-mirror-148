#!python
# This file is placed in the Public Domain.


"Prosecutor. Reconsider. OTP-CR-117/19."


import os
import readline
import sys
import termios
import time
import threading
import traceback


from genocide.evt import Command
from genocide.hdl import Bus, Callbacks, Commands, Handler, dispatch
from genocide.irc import IRC
from genocide.mdl import init
from genocide.obj import Object, get, keys, update
from genocide.obj import Class, Config, Db, find, fntime, last, save
from genocide.obj import edit, format, register
from genocide.rss import Fetcher
from genocide.thr import getname


import genocide.cmds


Config.name = "genocide"
Config.workdir = os.path.expanduser("~/.genocide")


starttime = time.time()


class CLI(Handler):

    def cmd(self, txt):
        Bus.add(self)
        e = Command()
        e.orig = repr(self)
        e.txt = txt
        self.handle(e)
        e.wait()

    def raw(self, txt):
        cprint(txt)


class Console(CLI):

    def announce(self, txt):
        pass

    def handle(self, e):
        CLI.handle(self, e)
        e.wait()

    def poll(self):
        e = Command()
        e.txt = input("> ")
        e.orig = repr(self)
        return e


def cprint(*args):
    print(*args)
    sys.stdout.flush()


def daemon():
    pid = os.fork()
    if pid != 0:
        os._exit(0)
    os.setsid()
    os.umask(0)
    si = open("/dev/null", 'r')
    so = open("/dev/null", 'a+')
    se = open("/dev/null", 'a+')
    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())


def from_exception(ex, txt="", sep=" "):
    result = []
    for fr in traceback.extract_tb(ex.__traceback__):
        fnc = str(fr).split()[-1][:-1]
        nme = os.sep.join(fr.filename.split(os.sep)[-2:])
        result.append("%s %s.%s" % (nme, fnc, fr.lineno))
    return "%s -> %s -> %s" % (getname(ex), " -> ".join(result), ex)


def wait():
    while 1:
        time.sleep(1.0)


def wrap(func):
    fd = sys.stdin.fileno()
    old = termios.tcgetattr(fd)
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        cprint("")
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old)
        for err in Callbacks.errors:
            traceback.print_exception(type(err), err, err.__traceback__)



def main():
    Callbacks.add("command", dispatch)
    if len(sys.argv) > 1:
        c = CLI()
        return c.cmd(" ".join(sys.argv[1:]))
    if "-d" in sys.argv:
        daemon()
    elif "-c" not in sys.argv:
        i = IRC()
        i.start()
        f = Fetcher()
        f.start()
    c = Console()
    Bus.add(c)
    c.start()
    init()
    wait()


wrap(main)
