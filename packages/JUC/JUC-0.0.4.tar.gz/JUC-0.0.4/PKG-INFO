Metadata-Version: 2.1
Name: JUC
Version: 0.0.4
Summary: A simple Unicode based text crypter
Home-page: UNKNOWN
Author: JProgrammer-it
Author-email: <jprogrammer.mail@pm.me>
License: UNKNOWN
Keywords: python,cryptography,encryption,decryption,text,file,unicode,python3
Platform: UNKNOWN
Classifier: Development Status :: 1 - Planning
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: Unix
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: Microsoft :: Windows
Description-Content-Type: text/markdown


# JUC
JUC is a simple Unicode based text crypter


note: *You can find all the examples in the folder `examples`*


# Installation
For now this project is not on [pypi](https://pypi.org) ( pip ), so you have to install it manually by downloading the repo


# Preview
> ### File Encrypter
> ![Gif Video](https://github.com/JProgrammer-it/JUC/raw/main/assets/ImageCrypter.gif)
> ### Original and decrypted file differences
> ![Differences](https://github.com/JProgrammer-it/JUC/raw/main/assets/fileSize.PNG)
> The quality of the original file and the decrypted file is equal :)
> 
> ### Text Crypter
> ![TextCrypter](https://github.com/JProgrammer-it/JUC/raw/main/assets/TextCrypter.png)

# Examples

> ### Encrypting a text
> ```py
> from JUC import *
> worker = Juc('YourSecretKey')
> print(worker.crypt(b'ehy, hello there'))
> ```
> ### Decrypting a text
> ```py
> from JUC import *
> worker = Juc('YourSecretKey')
> print(worker.decrypt(text).decode())
> ```


> ### Encrypting a file
> ```py
> from JUC import *
> 
> worker = Juc('YourSecretKey')
> 
> filePath = 'image.png'
> 
> with open(f'result.png', 'wb') as f:
>     with open(filePath, 'rb') as file:
>         content = file.read()
>         crypted = worker.crypt(content)
>         f.write(crypted.encode())
> ```
> ### Decrypting a file
> ```py
> from JUC import *
> 
> worker = Juc('YourSecretKey')
> 
> filePath = 'result.png'
> fileType = filePath.split('.')[-1]
> 
> with open(filePath, 'r') as file:
>     content = file.read()
>     with open(f'result-decrypted.{fileType}', 'wb') as f:
>         decrypted = worker.decrypt(content, False)
>         f.write(decrypted)
> ```


