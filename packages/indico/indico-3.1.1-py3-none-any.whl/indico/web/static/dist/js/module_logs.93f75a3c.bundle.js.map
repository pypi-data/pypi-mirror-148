{"version":3,"file":"js/module_logs.93f75a3c.bundle.js","mappings":"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","sources":["webpack:///indico/modules/logs/client/js/actions.js","webpack:///indico/modules/logs/client/js/components/LogEntryModal.jsx","webpack:///indico/modules/logs/client/js/containers/LogEntryModal.js","webpack:///indico/modules/logs/client/js/components/LogEntryList.jsx","webpack:///indico/modules/logs/client/js/containers/LogEntryList.js","webpack:///indico/modules/logs/client/js/components/Filter.jsx","webpack:///indico/modules/logs/client/js/containers/Filter.js","webpack:///indico/modules/logs/client/js/components/SearchBox.jsx","webpack:///indico/modules/logs/client/js/containers/SearchBox.js","webpack:///indico/modules/logs/client/js/components/Toolbar.jsx","webpack:///indico/modules/logs/client/js/components/EventLog.jsx","webpack:///indico/modules/logs/client/js/reducers.js","webpack:///indico/modules/logs/client/js/index.jsx"],"sourcesContent":["// This file is part of Indico.\n// Copyright (C) 2002 - 2022 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\nimport qs from 'qs';\n\nimport {indicoAxios, handleAxiosError} from 'indico/utils/axios';\n\nexport const SET_KEYWORD = 'SET_KEYWORD';\nexport const SET_FILTER = 'SET_FILTER';\nexport const SET_PAGE = 'SET_PAGE';\nexport const UPDATE_ENTRIES = 'UPDATE_ENTRIES';\nexport const FETCH_STARTED = 'FETCH_STARTED';\nexport const FETCH_FAILED = 'FETCH_FAILED';\nexport const SET_DETAILED_VIEW = 'SET_DETAILED_VIEW';\nexport const VIEW_PREV_ENTRY = 'VIEW_PREV_ENTRY';\nexport const VIEW_NEXT_ENTRY = 'VIEW_NEXT_ENTRY';\nexport const SET_METADATA_QUERY = 'SET_METADATA_QUERY';\nexport const SET_INITIAL_REALMS = 'SET_INITIAL_REALMS';\n\nexport function setKeyword(keyword) {\n  return {type: SET_KEYWORD, keyword};\n}\n\nexport function setFilter(filter) {\n  return {type: SET_FILTER, filter};\n}\n\nexport function setPage(currentPage) {\n  return {type: SET_PAGE, currentPage};\n}\n\nexport function setDetailedView(entryIndex) {\n  return {type: SET_DETAILED_VIEW, currentViewIndex: entryIndex};\n}\n\nexport function setMetadataQuery(metadataQuery) {\n  return {type: SET_METADATA_QUERY, metadataQuery};\n}\n\nexport function setInitialRealms(initialRealms) {\n  return {type: SET_INITIAL_REALMS, initialRealms};\n}\n\nexport function clearMetadataQuery() {\n  return dispatch => {\n    dispatch(setMetadataQuery({}));\n    dispatch(setPage(1));\n    dispatch(setDetailedView(null));\n    dispatch(fetchLogEntries());\n    history.replaceState({}, null, location.pathname);\n  };\n}\n\nexport function showRelatedEntries() {\n  return (dispatch, getStore) => {\n    const {\n      logs: {entries, currentViewIndex},\n    } = getStore();\n\n    const entry = entries[currentViewIndex];\n    const queryString = qs.stringify({meta: entry.meta}, {allowDots: true});\n    dispatch(setMetadataQuery(entry.meta));\n    dispatch(setPage(1));\n    dispatch(setDetailedView(null));\n    dispatch(fetchLogEntries());\n    history.replaceState({}, null, `${location.pathname}?${queryString}`);\n  };\n}\n\nexport function viewPrevEntry() {\n  return async (dispatch, getStore) => {\n    const {\n      staticData: {pageSize},\n      logs: {currentViewIndex, currentPage},\n    } = getStore();\n\n    if (currentViewIndex === 0) {\n      if (currentPage === 0) {\n        // ERROR!\n      } else {\n        await dispatch(setPage(currentPage - 1));\n        await dispatch(fetchLogEntries());\n        await dispatch(setDetailedView(pageSize - 1));\n      }\n    } else {\n      dispatch({type: SET_DETAILED_VIEW, currentViewIndex: currentViewIndex - 1});\n    }\n  };\n}\n\nexport function viewNextEntry() {\n  return async (dispatch, getStore) => {\n    const {\n      staticData: {pageSize},\n      logs: {currentViewIndex, currentPage, pages},\n    } = getStore();\n\n    if (currentViewIndex === pageSize - 1) {\n      if (currentPage === pages[pages.length - 1]) {\n        // ERROR!\n      } else {\n        await dispatch(setPage(currentPage + 1));\n        await dispatch(setDetailedView(0));\n        await dispatch(fetchLogEntries());\n      }\n    } else {\n      dispatch({type: SET_DETAILED_VIEW, currentViewIndex: currentViewIndex + 1});\n    }\n  };\n}\n\nexport function updateEntries(entries, pages, totalPageCount) {\n  return {type: UPDATE_ENTRIES, entries, pages, totalPageCount};\n}\n\nexport function fetchStarted() {\n  return {type: FETCH_STARTED};\n}\n\nexport function fetchFailed() {\n  return {type: FETCH_FAILED};\n}\n\nexport function fetchLogEntries() {\n  return async (dispatch, getStore) => {\n    dispatch(fetchStarted());\n    const {\n      logs: {filters, keyword, currentPage, metadataQuery},\n      staticData: {fetchLogsUrl},\n    } = getStore();\n\n    const params = {\n      page: currentPage,\n      filters: [],\n      meta: metadataQuery,\n    };\n    if (keyword) {\n      params.q = keyword;\n    }\n\n    Object.entries(filters).forEach(([item, active]) => {\n      if (active) {\n        params.filters.push(item);\n      }\n    });\n\n    let response;\n    try {\n      response = await indicoAxios.get(fetchLogsUrl, {\n        params,\n        paramsSerializer: p => qs.stringify(p, {arrayFormat: 'repeat', allowDots: true}),\n      });\n    } catch (error) {\n      handleAxiosError(error);\n      dispatch(fetchFailed());\n      return;\n    }\n    const {entries, pages, total_page_count: totalPageCount} = response.data;\n    dispatch(updateEntries(entries, pages, totalPageCount));\n  };\n}\n","// This file is part of Indico.\n// Copyright (C) 2002 - 2022 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {IButton, Modal} from 'indico/react/components';\nimport {Translate} from 'indico/react/i18n';\nimport {Slot} from 'indico/react/util';\n\nexport default class LogEntryModal extends React.Component {\n  static propTypes = {\n    entries: PropTypes.array.isRequired,\n    currentViewIndex: PropTypes.number,\n    setDetailedView: PropTypes.func.isRequired,\n    prevEntry: PropTypes.func.isRequired,\n    nextEntry: PropTypes.func.isRequired,\n    relatedEntries: PropTypes.func.isRequired,\n    currentPage: PropTypes.number.isRequired,\n    totalPageCount: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    currentViewIndex: null,\n  };\n\n  constructor(props) {\n    super(props);\n    this.modal = undefined;\n    this.onClose = this.onClose.bind(this);\n    this.prevEntry = this.prevEntry.bind(this);\n    this.nextEntry = this.nextEntry.bind(this);\n    this.relatedEntries = this.relatedEntries.bind(this);\n  }\n\n  componentDidUpdate() {\n    const {currentViewIndex} = this.props;\n    if (currentViewIndex !== null) {\n      this.open();\n    }\n  }\n\n  open() {\n    this.modal.open();\n  }\n\n  onClose() {\n    const {setDetailedView} = this.props;\n    setDetailedView(null);\n  }\n\n  prevEntry() {\n    const {prevEntry} = this.props;\n    prevEntry();\n  }\n\n  nextEntry() {\n    const {nextEntry} = this.props;\n    nextEntry();\n  }\n\n  relatedEntries() {\n    const {relatedEntries} = this.props;\n    relatedEntries();\n  }\n\n  _isFirstEntry() {\n    const {currentPage, currentViewIndex} = this.props;\n    return currentPage === 1 && currentViewIndex === 0;\n  }\n\n  _isLastEntry() {\n    const {currentPage, totalPageCount, currentViewIndex, entries} = this.props;\n    return currentPage === totalPageCount && currentViewIndex === entries.length - 1;\n  }\n\n  _hasRelatedEntries() {\n    const {currentViewIndex, entries} = this.props;\n    const entry = entries[currentViewIndex];\n    return Object.keys(entry.meta).length !== 0;\n  }\n\n  render() {\n    const {currentViewIndex, entries} = this.props;\n\n    if (currentViewIndex === null) {\n      return '';\n    }\n\n    const {\n      description,\n      html,\n      user: {fullName},\n      time,\n    } = entries[currentViewIndex];\n\n    return (\n      <Modal\n        title={description}\n        ref={ref => {\n          this.modal = ref;\n        }}\n        onClose={this.onClose}\n        contentLabel=\"Details about log entry\"\n        fixedFooter\n      >\n        <Slot>\n          <table className=\"i-table log-modal-details\" dangerouslySetInnerHTML={{__html: html}} />\n          <div className=\"text-superfluous log-modal-author-info flexrow f-j-end\">\n            <span>\n              {fullName && <span className=\"log-modal-user\">{fullName} </span>}\n              on\n              <span className=\"log-modal-time\"> {moment(time).format('ddd, D/M/YYYY HH:mm')}</span>\n            </span>\n          </div>\n        </Slot>\n        <Slot name=\"footer\">\n          <div className=\"group flexrow f-j-space-between\">\n            <IButton\n              title=\"Previous\"\n              icon=\"prev\"\n              onClick={this.prevEntry}\n              disabled={this._isFirstEntry()}\n            >\n              <Translate>Previous</Translate>\n            </IButton>\n\n            <IButton onClick={this.relatedEntries} disabled={!this._hasRelatedEntries()}>\n              <Translate>Related entries</Translate>\n            </IButton>\n            <IButton\n              title=\"Next\"\n              classes={{next: true}}\n              highlight\n              onClick={this.nextEntry}\n              disabled={this._isLastEntry()}\n            >\n              <Translate>Next</Translate>\n            </IButton>\n          </div>\n        </Slot>\n      </Modal>\n    );\n  }\n}\n","// This file is part of Indico.\n// Copyright (C) 2002 - 2022 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\nimport {connect} from 'react-redux';\n\nimport {setDetailedView, showRelatedEntries, viewNextEntry, viewPrevEntry} from '../actions';\nimport LogEntryModal from '../components/LogEntryModal';\n\nconst mapStateToProps = ({logs}) => ({\n  currentViewIndex: logs.currentViewIndex,\n  currentPage: logs.currentPage,\n  totalPageCount: logs.totalPageCount,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setDetailedView: entryIndex => {\n    dispatch(setDetailedView(entryIndex));\n  },\n  prevEntry: () => {\n    dispatch(viewPrevEntry());\n  },\n  nextEntry: () => {\n    dispatch(viewNextEntry());\n  },\n  relatedEntries: () => {\n    dispatch(showRelatedEntries());\n  },\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LogEntryModal);\n","// This file is part of Indico.\n// Copyright (C) 2002 - 2022 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Image} from 'semantic-ui-react';\n\nimport {Paginator, TooltipIfTruncated, MessageBox} from 'indico/react/components';\nimport {Translate} from 'indico/react/i18n';\n\nimport LogEntryModal from '../containers/LogEntryModal';\n\nclass LogEntry extends React.PureComponent {\n  static propTypes = {\n    entry: PropTypes.object.isRequired,\n    setDetailedView: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.openDetails = this.openDetails.bind(this);\n  }\n\n  openDetails(index) {\n    const {setDetailedView} = this.props;\n    setDetailedView(index);\n  }\n\n  iconProps(entry) {\n    if (entry.type === 'email') {\n      switch (entry.payload.state) {\n        case 'pending':\n          return {\n            'className': 'log-icon semantic-text warning',\n            'title': Translate.string('This email is pending and will be sent soon.'),\n            'data-qtip-style': 'warning',\n          };\n        case 'sent':\n          return {\n            'className': 'log-icon semantic-text success',\n            'title': Translate.string('This email has been sent.'),\n            'data-qtip-style': 'success',\n          };\n        case 'failed':\n          return {\n            'className': 'log-icon semantic-text error',\n            'title': Translate.string('Sending this email failed.'),\n            'data-qtip-style': 'danger',\n          };\n      }\n    }\n\n    return {className: 'log-icon'};\n  }\n\n  entryKind(entry) {\n    if (entry.type !== 'email') {\n      return entry.kind;\n    }\n\n    const mapping = {pending: 'change', sent: 'positive', failed: 'negative'};\n    return mapping[entry.payload.state] || 'other';\n  }\n\n  render() {\n    const {entry} = this.props;\n    return (\n      <li className={`log-realm-${entry.realm} log-kind-${this.entryKind(entry)}`}>\n        <span className=\"log-module\">\n          <span {...this.iconProps(entry)}>\n            <i className=\"log-realm\" />\n            <i className=\"log-kind icon-circle-small\" />\n          </span>\n          <span className=\"bold\">{entry.module}</span>\n        </span>\n        <TooltipIfTruncated>\n          <span className=\"log-entry-description\" onClick={() => this.openDetails(entry.index)}>\n            {entry.description}\n          </span>\n        </TooltipIfTruncated>\n        <span className=\"log-entry-details\">\n          <span className=\"logged-time\" title={moment(entry.time).format('DD/MM/YYYY HH:mm')}>\n            <time dateTime={entry.time}>{moment(entry.time).fromNow()}</time>\n          </span>\n          {entry.user.avatarURL ? (\n            <Image\n              avatar\n              title={entry.user.fullName}\n              src={entry.user.avatarURL}\n              className=\"user-picture ui-qtip\"\n            />\n          ) : (\n            ''\n          )}\n        </span>\n      </li>\n    );\n  }\n}\n\nexport default class LogEntryList extends React.PureComponent {\n  static propTypes = {\n    entries: PropTypes.array.isRequired,\n    currentPage: PropTypes.number.isRequired,\n    pages: PropTypes.array.isRequired,\n    changePage: PropTypes.func.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    setDetailedView: PropTypes.func.isRequired,\n  };\n\n  renderEmpty() {\n    return <MessageBox type=\"info\">No logs to show</MessageBox>;\n  }\n\n  renderSpinner() {\n    return (\n      <div className=\"event-log-list-spinner\">\n        <div className=\"i-spinner\" />\n      </div>\n    );\n  }\n\n  renderList() {\n    const {entries, pages, currentPage, changePage, isFetching, setDetailedView} = this.props;\n    return (\n      <>\n        {isFetching && this.renderSpinner()}\n        <ul className={`event-log-list ${isFetching ? 'loading' : ''}`}>\n          {entries.map(entry => (\n            <LogEntry key={entry.id} entry={entry} setDetailedView={setDetailedView} />\n          ))}\n        </ul>\n        {!isFetching && (\n          <Paginator currentPage={currentPage} pages={pages} changePage={changePage} />\n        )}\n        <LogEntryModal entries={entries} />\n      </>\n    );\n  }\n\n  render() {\n    const {entries, isFetching} = this.props;\n    if (entries.length === 0) {\n      if (isFetching) {\n        return this.renderSpinner();\n      }\n\n      return this.renderEmpty();\n    } else {\n      return this.renderList();\n    }\n  }\n}\n","// This file is part of Indico.\n// Copyright (C) 2002 - 2022 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\nimport {connect} from 'react-redux';\n\nimport {setPage, fetchLogEntries, setDetailedView} from '../actions';\nimport LogEntryList from '../components/LogEntryList';\n\nconst mapStateToProps = ({logs}) => ({\n  entries: logs.entries,\n  currentPage: logs.currentPage,\n  pages: logs.pages,\n  isFetching: logs.isFetching,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  changePage: page => {\n    dispatch(setPage(page));\n    dispatch(fetchLogEntries());\n  },\n  setDetailedView: entryIndex => {\n    dispatch(setDetailedView(entryIndex));\n  },\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LogEntryList);\n","// This file is part of Indico.\n// Copyright (C) 2002 - 2022 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {Translate} from 'indico/react/i18n';\n\nexport default class Filter extends React.Component {\n  static propTypes = {\n    realms: PropTypes.object.isRequired,\n    filters: PropTypes.object.isRequired,\n    setFilter: PropTypes.func.isRequired,\n  };\n\n  render() {\n    const {realms, filters, setFilter} = this.props;\n    return (\n      <div className=\"toolbar\">\n        <div className={`group i-selection ${realms.length <= 1 ? 'hidden' : ''}`}>\n          <span className=\"i-button label\">\n            <Translate>Show</Translate>\n          </span>\n          {Object.keys(realms)\n            .sort()\n            .map(name => (\n              <React.Fragment key={name}>\n                <input\n                  type=\"checkbox\"\n                  id={`realm-${name}`}\n                  data-realm={name}\n                  defaultChecked={filters[name]}\n                  onChange={e => setFilter({[name]: e.target.checked})}\n                />\n                <label htmlFor={`realm-${name}`} className=\"i-button\">\n                  {realms[name]}\n                </label>\n              </React.Fragment>\n            ))}\n        </div>\n      </div>\n    );\n  }\n}\n","// This file is part of Indico.\n// Copyright (C) 2002 - 2022 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\nimport {connect} from 'react-redux';\n\nimport {setFilter, fetchLogEntries, setPage} from '../actions';\nimport Filter from '../components/Filter';\n\nconst mapStateToProps = ({logs}) => ({\n  filters: logs.filters,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setFilter: filter => {\n    dispatch(setFilter(filter));\n    dispatch(setPage(1));\n    dispatch(fetchLogEntries());\n  },\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Filter);\n","// This file is part of Indico.\n// Copyright (C) 2002 - 2022 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class SearchBox extends React.Component {\n  static propTypes = {\n    setKeyword: PropTypes.func.isRequired,\n  };\n\n  render() {\n    const {setKeyword} = this.props;\n    return (\n      <div className=\"toolbar\">\n        <div className=\"group\">\n          <span className=\"i-button label\">\n            <span className=\"icon-search\" />\n          </span>\n          <input type=\"text\" onChange={e => setKeyword(e.target.value.trim())} />\n        </div>\n      </div>\n    );\n  }\n}\n","// This file is part of Indico.\n// Copyright (C) 2002 - 2022 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\nimport debounce from 'lodash/debounce';\nimport {connect} from 'react-redux';\n\nimport {setKeyword, fetchLogEntries, setPage} from '../actions';\nimport SearchBox from '../components/SearchBox';\n\nconst mapDispatchToProps = dispatch => ({\n  setKeyword: debounce(keyword => {\n    dispatch(setKeyword(keyword));\n    dispatch(setPage(1));\n    dispatch(fetchLogEntries());\n  }, 250),\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(SearchBox);\n","// This file is part of Indico.\n// Copyright (C) 2002 - 2022 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {connect} from 'react-redux';\n\nimport Filter from '../containers/Filter';\nimport SearchBox from '../containers/SearchBox';\n\nclass Toolbar extends React.Component {\n  static propTypes = {\n    realms: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const {realms} = this.props;\n    return (\n      <div className=\"toolbars\">\n        <Filter realms={realms} />\n        <SearchBox />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({staticData}) => ({\n  realms: staticData.realms,\n});\n\nexport default connect(mapStateToProps)(Toolbar);\n","// This file is part of Indico.\n// Copyright (C) 2002 - 2022 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\nimport React from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {Param, Translate} from 'indico/react/i18n';\n\nimport {clearMetadataQuery} from '../actions';\nimport LogEntryList from '../containers/LogEntryList';\n\nimport Toolbar from './Toolbar';\n\nfunction MetadataQueryMessage() {\n  const dispatch = useDispatch();\n  const resetURLFiltering = () => {\n    dispatch(clearMetadataQuery());\n  };\n\n  return (\n    <div className=\"highlight-message-box\">\n      <span className=\"icon\" />\n      <div className=\"message-text\">\n        <Translate>\n          Log entries are currently filtered by URL.{' '}\n          <Param name=\"link\" wrapper={<a onClick={resetURLFiltering} />}>\n            Click here\n          </Param>{' '}\n          to disable the filter.\n        </Translate>\n      </div>\n    </div>\n  );\n}\n\nMetadataQueryMessage.propTypes = {};\n\nexport default function EventLog() {\n  const metadataQuery = useSelector(state => state.logs.metadataQuery);\n  return (\n    <>\n      {Object.keys(metadataQuery).length !== 0 && <MetadataQueryMessage />}\n      <Toolbar />\n      <LogEntryList />\n    </>\n  );\n}\n","// This file is part of Indico.\n// Copyright (C) 2002 - 2022 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\nimport * as actions from './actions';\n\nconst initialState = {\n  entries: [],\n  keyword: null,\n  currentPage: 1,\n  isFetching: false,\n  metadataQuery: {},\n  filters: {},\n  pages: [],\n  totalPageCount: 0,\n  currentViewIndex: null,\n};\n\nexport default function logReducer(state = initialState, action) {\n  switch (action.type) {\n    case actions.SET_INITIAL_REALMS:\n      return {...state, filters: Object.fromEntries(action.initialRealms.map(r => [r, true]))};\n    case actions.SET_KEYWORD:\n      return {...state, keyword: action.keyword};\n    case actions.SET_FILTER:\n      return {...state, filters: {...state.filters, ...action.filter}};\n    case actions.SET_PAGE:\n      return {...state, currentPage: action.currentPage};\n    case actions.UPDATE_ENTRIES:\n      return {\n        ...state,\n        entries: action.entries,\n        pages: action.pages,\n        totalPageCount: action.totalPageCount,\n        isFetching: false,\n      };\n    case actions.FETCH_STARTED:\n      return {...state, isFetching: true};\n    case actions.FETCH_FAILED:\n      return {...state, isFetching: false};\n    case actions.SET_DETAILED_VIEW:\n      return {...state, currentViewIndex: action.currentViewIndex};\n    case actions.SET_METADATA_QUERY:\n      return {...state, metadataQuery: action.metadataQuery};\n    default:\n      return state;\n  }\n}\n","// This file is part of Indico.\n// Copyright (C) 2002 - 2022 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\n\nimport createReduxStore from 'indico/utils/redux';\n\nimport {fetchLogEntries, setMetadataQuery, setInitialRealms} from './actions';\nimport EventLog from './components/EventLog';\nimport reducer from './reducers';\n\nimport '../style/logs.scss';\n\nwindow.addEventListener('load', () => {\n  const rootElement = document.querySelector('.event-log');\n  const initialData = {\n    staticData: {\n      fetchLogsUrl: rootElement.dataset.fetchLogsUrl,\n      realms: JSON.parse(rootElement.dataset.realms),\n      pageSize: 15,\n    },\n  };\n  const store = createReduxStore(\n    'event-logs',\n    {\n      logs: reducer,\n    },\n    initialData\n  );\n  store.dispatch(setInitialRealms(Object.keys(initialData.staticData.realms)));\n  store.dispatch(setMetadataQuery(JSON.parse(rootElement.dataset.metadataQuery)));\n\n  ReactDOM.render(\n    <Provider store={store}>\n      <EventLog />\n    </Provider>,\n    rootElement\n  );\n\n  store.dispatch(fetchLogEntries());\n});\n"],"names":["SET_KEYWORD","SET_FILTER","SET_PAGE","UPDATE_ENTRIES","FETCH_STARTED","FETCH_FAILED","SET_DETAILED_VIEW","SET_METADATA_QUERY","SET_INITIAL_REALMS","setPage","currentPage","type","setDetailedView","entryIndex","currentViewIndex","setMetadataQuery","metadataQuery","fetchLogEntries","async","dispatch","getStore","logs","filters","keyword","staticData","fetchLogsUrl","params","page","meta","response","q","Object","entries","forEach","item","active","push","indicoAxios","paramsSerializer","p","qs","arrayFormat","allowDots","error","handleAxiosError","pages","total_page_count","totalPageCount","data","updateEntries","LogEntryModal","React","constructor","props","super","this","modal","undefined","onClose","bind","prevEntry","nextEntry","relatedEntries","componentDidUpdate","open","_isFirstEntry","_isLastEntry","length","_hasRelatedEntries","entry","keys","render","description","html","user","fullName","time","title","ref","contentLabel","fixedFooter","className","dangerouslySetInnerHTML","__html","moment","format","name","icon","onClick","disabled","classes","next","highlight","PropTypes","connect","pageSize","queryString","history","replaceState","location","pathname","LogEntry","openDetails","index","iconProps","payload","state","Translate","entryKind","kind","pending","sent","failed","realm","module","dateTime","fromNow","avatarURL","Image","avatar","src","LogEntryList","renderEmpty","renderSpinner","renderList","changePage","isFetching","map","key","id","Filter","realms","setFilter","sort","defaultChecked","onChange","e","target","checked","htmlFor","filter","SearchBox","setKeyword","value","trim","debounce","Toolbar","MetadataQueryMessage","useDispatch","wrapper","EventLog","useSelector","propTypes","initialState","logReducer","action","actions","fromEntries","initialRealms","r","window","addEventListener","rootElement","document","querySelector","initialData","dataset","JSON","parse","store","createReduxStore","reducer","ReactDOM","Provider"],"sourceRoot":""}