/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_JUPYTERLAB_CORE_OUTPUT"] = self["webpackChunk_JUPYTERLAB_CORE_OUTPUT"] || []).push([["vendors-node_modules_jupyterlab_codemirror_lib_index_js-node_modules_jupyterlab_codemirror_li-6ce28e"],{

/***/ "../node_modules/@jupyterlab/codemirror/lib/codemirror-ipython.js":
/*!************************************************************************!*\
  !*** ../node_modules/@jupyterlab/codemirror/lib/codemirror-ipython.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var codemirror__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! codemirror */ \"webpack/sharing/consume/default/codemirror/codemirror\");\n/* harmony import */ var codemirror__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(codemirror__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var codemirror_mode_meta__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! codemirror/mode/meta */ \"../node_modules/codemirror/mode/meta.js\");\n/* harmony import */ var codemirror_mode_meta__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(codemirror_mode_meta__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var codemirror_mode_python_python__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! codemirror/mode/python/python */ \"../node_modules/codemirror/mode/python/python.js\");\n/* harmony import */ var codemirror_mode_python_python__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(codemirror_mode_python_python__WEBPACK_IMPORTED_MODULE_2__);\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n\n\n/**\n * Define an IPython codemirror mode.\n *\n * It is a slightly altered Python Mode with a `?` operator.\n */\ncodemirror__WEBPACK_IMPORTED_MODULE_0___default().defineMode('ipython', (config, modeOptions) => {\n    const pythonConf = {};\n    for (const prop in modeOptions) {\n        if (modeOptions.hasOwnProperty(prop)) {\n            pythonConf[prop] = modeOptions[prop];\n        }\n    }\n    pythonConf.name = 'python';\n    pythonConf.singleOperators = new RegExp('^[\\\\+\\\\-\\\\*/%&|@\\\\^~<>!\\\\?]');\n    pythonConf.identifiers = new RegExp('^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*');\n    return codemirror__WEBPACK_IMPORTED_MODULE_0___default().getMode(config, pythonConf);\n}, 'python');\ncodemirror__WEBPACK_IMPORTED_MODULE_0___default().defineMIME('text/x-ipython', 'ipython');\ncodemirror__WEBPACK_IMPORTED_MODULE_0___default().modeInfo.push({\n    ext: [],\n    mime: 'text/x-ipython',\n    mode: 'ipython',\n    name: 'ipython'\n});\n//# sourceMappingURL=codemirror-ipython.js.map\n\n//# sourceURL=webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codemirror/lib/codemirror-ipython.js?");

/***/ }),

/***/ "../node_modules/@jupyterlab/codemirror/lib/codemirror-ipythongfm.js":
/*!***************************************************************************!*\
  !*** ../node_modules/@jupyterlab/codemirror/lib/codemirror-ipythongfm.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var codemirror__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! codemirror */ \"webpack/sharing/consume/default/codemirror/codemirror\");\n/* harmony import */ var codemirror__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(codemirror__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var codemirror_mode_stex_stex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! codemirror/mode/stex/stex */ \"../node_modules/codemirror/mode/stex/stex.js\");\n/* harmony import */ var codemirror_mode_stex_stex__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(codemirror_mode_stex_stex__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var codemirror_mode_gfm_gfm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! codemirror/mode/gfm/gfm */ \"../node_modules/codemirror/mode/gfm/gfm.js\");\n/* harmony import */ var codemirror_mode_gfm_gfm__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(codemirror_mode_gfm_gfm__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var codemirror_addon_mode_multiplex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! codemirror/addon/mode/multiplex */ \"../node_modules/codemirror/addon/mode/multiplex.js\");\n/* harmony import */ var codemirror_addon_mode_multiplex__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_mode_multiplex__WEBPACK_IMPORTED_MODULE_3__);\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n\n\n\n/**\n * Define an IPython GFM (GitHub Flavored Markdown) mode.\n *\n * Is just a slightly altered GFM Mode with support for LaTeX.\n * LaTeX support was supported by Codemirror GFM as of\n *   https://github.com/codemirror/CodeMirror/pull/567\n *  But was later removed in\n *   https://github.com/codemirror/CodeMirror/commit/d9c9f1b1ffe984aee41307f3e927f80d1f23590c\n */\ncodemirror__WEBPACK_IMPORTED_MODULE_0___default().defineMode('ipythongfm', (config, modeOptions) => {\n    const gfmMode = codemirror__WEBPACK_IMPORTED_MODULE_0___default().getMode(config, {\n        name: 'gfm',\n        // Override list3 with an under-used token, rather than `keyword`\n        tokenTypeOverrides: { list3: 'string-2' }\n    });\n    const texMode = codemirror__WEBPACK_IMPORTED_MODULE_0___default().getMode(config, {\n        name: 'stex',\n        inMathMode: true\n    });\n    return codemirror__WEBPACK_IMPORTED_MODULE_0___default().multiplexingMode(gfmMode, {\n        open: '$$',\n        close: '$$',\n        mode: texMode,\n        delimStyle: 'delimit'\n    }, {\n        open: '$',\n        close: '$',\n        mode: texMode,\n        delimStyle: 'delimit'\n    }, {\n        open: '\\\\(',\n        close: '\\\\)',\n        mode: texMode,\n        delimStyle: 'delimit'\n    }, {\n        open: '\\\\[',\n        close: '\\\\]',\n        mode: texMode,\n        delimStyle: 'delimit'\n    }\n    // .. more multiplexed styles can follow here\n    );\n}, 'gfm');\ncodemirror__WEBPACK_IMPORTED_MODULE_0___default().defineMIME('text/x-ipythongfm', 'ipythongfm');\ncodemirror__WEBPACK_IMPORTED_MODULE_0___default().modeInfo.push({\n    ext: [],\n    mime: 'text/x-ipythongfm',\n    mode: 'ipythongfm',\n    name: 'ipythongfm'\n});\n//# sourceMappingURL=codemirror-ipythongfm.js.map\n\n//# sourceURL=webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codemirror/lib/codemirror-ipythongfm.js?");

/***/ }),

/***/ "../node_modules/@jupyterlab/codemirror/lib/editor.js":
/*!************************************************************!*\
  !*** ../node_modules/@jupyterlab/codemirror/lib/editor.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CodeMirrorEditor\": () => (/* binding */ CodeMirrorEditor)\n/* harmony export */ });\n/* harmony import */ var codemirror__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! codemirror */ \"webpack/sharing/consume/default/codemirror/codemirror\");\n/* harmony import */ var codemirror__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(codemirror__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jupyterlab/apputils */ \"webpack/sharing/consume/default/@jupyterlab/apputils/@jupyterlab/apputils?c634\");\n/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _jupyterlab_codeeditor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jupyterlab/codeeditor */ \"webpack/sharing/consume/default/@jupyterlab/codeeditor/@jupyterlab/codeeditor?7077\");\n/* harmony import */ var _jupyterlab_codeeditor__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_codeeditor__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jupyterlab/translation */ \"webpack/sharing/consume/default/@jupyterlab/translation/@jupyterlab/translation?0ebc\");\n/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _lumino_algorithm__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @lumino/algorithm */ \"webpack/sharing/consume/default/@lumino/algorithm/@lumino/algorithm\");\n/* harmony import */ var _lumino_algorithm__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_lumino_algorithm__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _lumino_coreutils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @lumino/coreutils */ \"webpack/sharing/consume/default/@lumino/coreutils/@lumino/coreutils\");\n/* harmony import */ var _lumino_coreutils__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_lumino_coreutils__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _lumino_polling__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @lumino/polling */ \"webpack/sharing/consume/default/@lumino/polling/@lumino/polling\");\n/* harmony import */ var _lumino_polling__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_lumino_polling__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _lumino_disposable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @lumino/disposable */ \"webpack/sharing/consume/default/@lumino/disposable/@lumino/disposable\");\n/* harmony import */ var _lumino_disposable__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_lumino_disposable__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _lumino_signaling__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @lumino/signaling */ \"webpack/sharing/consume/default/@lumino/signaling/@lumino/signaling\");\n/* harmony import */ var _lumino_signaling__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_lumino_signaling__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _mode__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./mode */ \"../node_modules/@jupyterlab/codemirror/lib/mode.js\");\n/* harmony import */ var codemirror_addon_comment_comment_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! codemirror/addon/comment/comment.js */ \"../node_modules/codemirror/addon/comment/comment.js\");\n/* harmony import */ var codemirror_addon_comment_comment_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_comment_comment_js__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var codemirror_addon_display_rulers_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! codemirror/addon/display/rulers.js */ \"../node_modules/codemirror/addon/display/rulers.js\");\n/* harmony import */ var codemirror_addon_display_rulers_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_display_rulers_js__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var codemirror_addon_edit_matchbrackets_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! codemirror/addon/edit/matchbrackets.js */ \"../node_modules/codemirror/addon/edit/matchbrackets.js\");\n/* harmony import */ var codemirror_addon_edit_matchbrackets_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_edit_matchbrackets_js__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var codemirror_addon_edit_closebrackets_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! codemirror/addon/edit/closebrackets.js */ \"../node_modules/codemirror/addon/edit/closebrackets.js\");\n/* harmony import */ var codemirror_addon_edit_closebrackets_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_edit_closebrackets_js__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var codemirror_addon_fold_foldcode_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! codemirror/addon/fold/foldcode.js */ \"../node_modules/codemirror/addon/fold/foldcode.js\");\n/* harmony import */ var codemirror_addon_fold_foldcode_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_fold_foldcode_js__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var codemirror_addon_fold_foldgutter_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! codemirror/addon/fold/foldgutter.js */ \"../node_modules/codemirror/addon/fold/foldgutter.js\");\n/* harmony import */ var codemirror_addon_fold_foldgutter_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_fold_foldgutter_js__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var codemirror_addon_fold_brace_fold_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! codemirror/addon/fold/brace-fold.js */ \"../node_modules/codemirror/addon/fold/brace-fold.js\");\n/* harmony import */ var codemirror_addon_fold_brace_fold_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_fold_brace_fold_js__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var codemirror_addon_fold_indent_fold_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! codemirror/addon/fold/indent-fold.js */ \"../node_modules/codemirror/addon/fold/indent-fold.js\");\n/* harmony import */ var codemirror_addon_fold_indent_fold_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_fold_indent_fold_js__WEBPACK_IMPORTED_MODULE_17__);\n/* harmony import */ var codemirror_addon_fold_markdown_fold_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! codemirror/addon/fold/markdown-fold.js */ \"../node_modules/codemirror/addon/fold/markdown-fold.js\");\n/* harmony import */ var codemirror_addon_fold_markdown_fold_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_fold_markdown_fold_js__WEBPACK_IMPORTED_MODULE_18__);\n/* harmony import */ var codemirror_addon_fold_xml_fold_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! codemirror/addon/fold/xml-fold.js */ \"../node_modules/codemirror/addon/fold/xml-fold.js\");\n/* harmony import */ var codemirror_addon_fold_xml_fold_js__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_fold_xml_fold_js__WEBPACK_IMPORTED_MODULE_19__);\n/* harmony import */ var codemirror_addon_fold_comment_fold_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! codemirror/addon/fold/comment-fold.js */ \"../node_modules/codemirror/addon/fold/comment-fold.js\");\n/* harmony import */ var codemirror_addon_fold_comment_fold_js__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_fold_comment_fold_js__WEBPACK_IMPORTED_MODULE_20__);\n/* harmony import */ var codemirror_addon_scroll_scrollpastend_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! codemirror/addon/scroll/scrollpastend.js */ \"../node_modules/codemirror/addon/scroll/scrollpastend.js\");\n/* harmony import */ var codemirror_addon_scroll_scrollpastend_js__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_scroll_scrollpastend_js__WEBPACK_IMPORTED_MODULE_21__);\n/* harmony import */ var codemirror_addon_search_searchcursor__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! codemirror/addon/search/searchcursor */ \"../node_modules/codemirror/addon/search/searchcursor.js\");\n/* harmony import */ var codemirror_addon_search_searchcursor__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_search_searchcursor__WEBPACK_IMPORTED_MODULE_22__);\n/* harmony import */ var codemirror_addon_search_search__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! codemirror/addon/search/search */ \"../node_modules/codemirror/addon/search/search.js\");\n/* harmony import */ var codemirror_addon_search_search__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_search_search__WEBPACK_IMPORTED_MODULE_23__);\n/* harmony import */ var codemirror_addon_search_jump_to_line__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! codemirror/addon/search/jump-to-line */ \"../node_modules/codemirror/addon/search/jump-to-line.js\");\n/* harmony import */ var codemirror_addon_search_jump_to_line__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_search_jump_to_line__WEBPACK_IMPORTED_MODULE_24__);\n/* harmony import */ var codemirror_addon_selection_active_line__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! codemirror/addon/selection/active-line */ \"../node_modules/codemirror/addon/selection/active-line.js\");\n/* harmony import */ var codemirror_addon_selection_active_line__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_selection_active_line__WEBPACK_IMPORTED_MODULE_25__);\n/* harmony import */ var codemirror_addon_selection_mark_selection__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! codemirror/addon/selection/mark-selection */ \"../node_modules/codemirror/addon/selection/mark-selection.js\");\n/* harmony import */ var codemirror_addon_selection_mark_selection__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_selection_mark_selection__WEBPACK_IMPORTED_MODULE_26__);\n/* harmony import */ var codemirror_addon_selection_selection_pointer__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! codemirror/addon/selection/selection-pointer */ \"../node_modules/codemirror/addon/selection/selection-pointer.js\");\n/* harmony import */ var codemirror_addon_selection_selection_pointer__WEBPACK_IMPORTED_MODULE_27___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_selection_selection_pointer__WEBPACK_IMPORTED_MODULE_27__);\n/* harmony import */ var codemirror_addon_mode_simple__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! codemirror/addon/mode/simple */ \"../node_modules/codemirror/addon/mode/simple.js\");\n/* harmony import */ var codemirror_addon_mode_simple__WEBPACK_IMPORTED_MODULE_28___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_mode_simple__WEBPACK_IMPORTED_MODULE_28__);\n/* harmony import */ var codemirror_keymap_emacs_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! codemirror/keymap/emacs.js */ \"../node_modules/codemirror/keymap/emacs.js\");\n/* harmony import */ var codemirror_keymap_emacs_js__WEBPACK_IMPORTED_MODULE_29___default = /*#__PURE__*/__webpack_require__.n(codemirror_keymap_emacs_js__WEBPACK_IMPORTED_MODULE_29__);\n/* harmony import */ var codemirror_keymap_sublime_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! codemirror/keymap/sublime.js */ \"../node_modules/codemirror/keymap/sublime.js\");\n/* harmony import */ var codemirror_keymap_sublime_js__WEBPACK_IMPORTED_MODULE_30___default = /*#__PURE__*/__webpack_require__.n(codemirror_keymap_sublime_js__WEBPACK_IMPORTED_MODULE_30__);\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n// / <reference types=\"codemirror\"/>\n// / <reference types=\"codemirror/searchcursor\"/>\nvar __rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import 'codemirror/keymap/vim.js';  lazy loading of vim mode is available in ../codemirror-extension/index.ts\n/**\n * The class name added to CodeMirrorWidget instances.\n */\nconst EDITOR_CLASS = 'jp-CodeMirrorEditor';\n/**\n * The class name added to read only cell editor widgets.\n */\nconst READ_ONLY_CLASS = 'jp-mod-readOnly';\n/**\n * The class name for the hover box for collaborator cursors.\n */\nconst COLLABORATOR_CURSOR_CLASS = 'jp-CollaboratorCursor';\n/**\n * The class name for the hover box for collaborator cursors.\n */\nconst COLLABORATOR_HOVER_CLASS = 'jp-CollaboratorCursor-hover';\n/**\n * The key code for the up arrow key.\n */\nconst UP_ARROW = 38;\n/**\n * The key code for the down arrow key.\n */\nconst DOWN_ARROW = 40;\n/**\n * The time that a collaborator name hover persists.\n */\nconst HOVER_TIMEOUT = 1000;\n/**\n * CodeMirror editor.\n */\nclass CodeMirrorEditor {\n    /**\n     * Construct a CodeMirror editor.\n     */\n    constructor(options) {\n        /**\n         * A signal emitted when either the top or bottom edge is requested.\n         */\n        this.edgeRequested = new _lumino_signaling__WEBPACK_IMPORTED_MODULE_8__.Signal(this);\n        this.selectionMarkers = {};\n        this._keydownHandlers = new Array();\n        this._changeGuard = false;\n        this._uuid = '';\n        this._needsRefresh = false;\n        this._isDisposed = false;\n        this._lastChange = null;\n        const host = (this.host = options.host);\n        this.translator = options.translator || _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_3__.nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        host.classList.add(EDITOR_CLASS);\n        host.classList.add('jp-Editor');\n        host.addEventListener('focus', this, true);\n        host.addEventListener('blur', this, true);\n        host.addEventListener('scroll', this, true);\n        this._uuid = options.uuid || _lumino_coreutils__WEBPACK_IMPORTED_MODULE_5__.UUID.uuid4();\n        // Handle selection style.\n        const style = options.selectionStyle || {};\n        this._selectionStyle = Object.assign(Object.assign({}, _jupyterlab_codeeditor__WEBPACK_IMPORTED_MODULE_2__.CodeEditor.defaultSelectionStyle), style);\n        const model = (this._model = options.model);\n        const config = options.config || {};\n        const fullConfig = (this._config = Object.assign(Object.assign({}, CodeMirrorEditor.defaultConfig), config));\n        const editor = (this._editor = Private.createEditor(host, fullConfig));\n        const doc = editor.getDoc();\n        // Handle initial values for text, mimetype, and selections.\n        doc.setValue(model.value.text);\n        this.clearHistory();\n        this._onMimeTypeChanged();\n        this._onCursorActivity();\n        this._poll = new _lumino_polling__WEBPACK_IMPORTED_MODULE_6__.Poll({\n            factory: async () => {\n                this._checkSync();\n            },\n            frequency: { interval: 3000, backoff: false },\n            standby: () => {\n                // If changed, only stand by when hidden, otherwise always stand by.\n                return this._lastChange ? 'when-hidden' : true;\n            }\n        });\n        // Connect to changes.\n        model.value.changed.connect(this._onValueChanged, this);\n        model.mimeTypeChanged.connect(this._onMimeTypeChanged, this);\n        model.selections.changed.connect(this._onSelectionsChanged, this);\n        codemirror__WEBPACK_IMPORTED_MODULE_0___default().on(editor, 'keydown', (editor, event) => {\n            const index = _lumino_algorithm__WEBPACK_IMPORTED_MODULE_4__.ArrayExt.findFirstIndex(this._keydownHandlers, handler => {\n                if (handler(this, event) === true) {\n                    event.preventDefault();\n                    return true;\n                }\n                return false;\n            });\n            if (index === -1) {\n                this.onKeydown(event);\n            }\n        });\n        codemirror__WEBPACK_IMPORTED_MODULE_0___default().on(editor, 'cursorActivity', () => this._onCursorActivity());\n        codemirror__WEBPACK_IMPORTED_MODULE_0___default().on(editor.getDoc(), 'beforeChange', (instance, change) => {\n            this._beforeDocChanged(instance, change);\n        });\n        codemirror__WEBPACK_IMPORTED_MODULE_0___default().on(editor.getDoc(), 'change', (instance, change) => {\n            // Manually refresh after setValue to make sure editor is properly sized.\n            if (change.origin === 'setValue' && this.hasFocus()) {\n                this.refresh();\n            }\n            this._lastChange = change;\n        });\n        // Turn off paste handling in codemirror since sometimes we want to\n        // replace it with our own.\n        editor.on('paste', (instance, event) => {\n            var _a;\n            const handlePaste = (_a = this._config['handlePaste']) !== null && _a !== void 0 ? _a : true;\n            if (!handlePaste) {\n                event.codemirrorIgnore = true;\n            }\n        });\n        // Manually refresh on paste to make sure editor is properly sized.\n        editor.getWrapperElement().addEventListener('paste', () => {\n            if (this.hasFocus()) {\n                this.refresh();\n            }\n        });\n    }\n    /**\n     * The uuid of this editor;\n     */\n    get uuid() {\n        return this._uuid;\n    }\n    set uuid(value) {\n        this._uuid = value;\n    }\n    /**\n     * The selection style of this editor.\n     */\n    get selectionStyle() {\n        return this._selectionStyle;\n    }\n    set selectionStyle(value) {\n        this._selectionStyle = value;\n    }\n    /**\n     * Get the codemirror editor wrapped by the editor.\n     */\n    get editor() {\n        return this._editor;\n    }\n    /**\n     * Get the codemirror doc wrapped by the widget.\n     */\n    get doc() {\n        return this._editor.getDoc();\n    }\n    /**\n     * Get the number of lines in the editor.\n     */\n    get lineCount() {\n        return this.doc.lineCount();\n    }\n    /**\n     * Returns a model for this editor.\n     */\n    get model() {\n        return this._model;\n    }\n    /**\n     * The height of a line in the editor in pixels.\n     */\n    get lineHeight() {\n        return this._editor.defaultTextHeight();\n    }\n    /**\n     * The widget of a character in the editor in pixels.\n     */\n    get charWidth() {\n        return this._editor.defaultCharWidth();\n    }\n    /**\n     * Tests whether the editor is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this.host.removeEventListener('focus', this, true);\n        this.host.removeEventListener('blur', this, true);\n        this.host.removeEventListener('scroll', this, true);\n        this._keydownHandlers.length = 0;\n        this._poll.dispose();\n        _lumino_signaling__WEBPACK_IMPORTED_MODULE_8__.Signal.clearData(this);\n    }\n    /**\n     * Get a config option for the editor.\n     */\n    getOption(option) {\n        return this._config[option];\n    }\n    /**\n     * Set a config option for the editor.\n     */\n    setOption(option, value) {\n        // Don't bother setting the option if it is already the same.\n        if (this._config[option] !== value) {\n            this._config[option] = value;\n            Private.setOption(this.editor, option, value, this._config);\n        }\n    }\n    /**\n     * Returns the content for the given line number.\n     */\n    getLine(line) {\n        return this.doc.getLine(line);\n    }\n    /**\n     * Find an offset for the given position.\n     */\n    getOffsetAt(position) {\n        return this.doc.indexFromPos({\n            ch: position.column,\n            line: position.line\n        });\n    }\n    /**\n     * Find a position for the given offset.\n     */\n    getPositionAt(offset) {\n        const { ch, line } = this.doc.posFromIndex(offset);\n        return { line, column: ch };\n    }\n    /**\n     * Undo one edit (if any undo events are stored).\n     */\n    undo() {\n        this.doc.undo();\n    }\n    /**\n     * Redo one undone edit.\n     */\n    redo() {\n        this.doc.redo();\n    }\n    /**\n     * Clear the undo history.\n     */\n    clearHistory() {\n        this.doc.clearHistory();\n    }\n    /**\n     * Brings browser focus to this editor text.\n     */\n    focus() {\n        this._editor.focus();\n    }\n    /**\n     * Test whether the editor has keyboard focus.\n     */\n    hasFocus() {\n        return this._editor.getWrapperElement().contains(document.activeElement);\n    }\n    /**\n     * Explicitly blur the editor.\n     */\n    blur() {\n        this._editor.getInputField().blur();\n    }\n    /**\n     * Repaint editor.\n     */\n    refresh() {\n        this._editor.refresh();\n        this._needsRefresh = false;\n    }\n    /**\n     * Refresh the editor if it is focused;\n     * otherwise postpone refreshing till focusing.\n     */\n    resizeToFit() {\n        if (this.hasFocus()) {\n            this.refresh();\n        }\n        else {\n            this._needsRefresh = true;\n        }\n        this._clearHover();\n    }\n    // todo: docs, maybe define overlay options as a type?\n    addOverlay(mode, options) {\n        this._editor.addOverlay(mode, options);\n    }\n    removeOverlay(mode) {\n        this._editor.removeOverlay(mode);\n    }\n    getSearchCursor(query, start, caseFold) {\n        return this._editor.getDoc().getSearchCursor(query, start, caseFold);\n    }\n    getCursor(start) {\n        return this._editor.getDoc().getCursor(start);\n    }\n    get state() {\n        return this._editor.state;\n    }\n    operation(fn) {\n        return this._editor.operation(fn);\n    }\n    firstLine() {\n        return this._editor.getDoc().firstLine();\n    }\n    lastLine() {\n        return this._editor.getDoc().lastLine();\n    }\n    scrollIntoView(pos, margin) {\n        this._editor.scrollIntoView(pos, margin);\n    }\n    cursorCoords(where, mode) {\n        return this._editor.cursorCoords(where, mode);\n    }\n    getRange(from, to, seperator) {\n        return this._editor.getDoc().getRange(from, to, seperator);\n    }\n    /**\n     * Add a keydown handler to the editor.\n     *\n     * @param handler - A keydown handler.\n     *\n     * @returns A disposable that can be used to remove the handler.\n     */\n    addKeydownHandler(handler) {\n        this._keydownHandlers.push(handler);\n        return new _lumino_disposable__WEBPACK_IMPORTED_MODULE_7__.DisposableDelegate(() => {\n            _lumino_algorithm__WEBPACK_IMPORTED_MODULE_4__.ArrayExt.removeAllWhere(this._keydownHandlers, val => val === handler);\n        });\n    }\n    /**\n     * Set the size of the editor in pixels.\n     */\n    setSize(dimension) {\n        if (dimension) {\n            this._editor.setSize(dimension.width, dimension.height);\n        }\n        else {\n            this._editor.setSize(null, null);\n        }\n        this._needsRefresh = false;\n    }\n    /**\n     * Reveal the given position in the editor.\n     */\n    revealPosition(position) {\n        const cmPosition = this._toCodeMirrorPosition(position);\n        this._editor.scrollIntoView(cmPosition);\n    }\n    /**\n     * Reveal the given selection in the editor.\n     */\n    revealSelection(selection) {\n        const range = {\n            from: this._toCodeMirrorPosition(selection.start),\n            to: this._toCodeMirrorPosition(selection.end)\n        };\n        this._editor.scrollIntoView(range);\n    }\n    /**\n     * Get the window coordinates given a cursor position.\n     */\n    getCoordinateForPosition(position) {\n        const pos = this._toCodeMirrorPosition(position);\n        const rect = this.editor.charCoords(pos, 'page');\n        return rect;\n    }\n    /**\n     * Get the cursor position given window coordinates.\n     *\n     * @param coordinate - The desired coordinate.\n     *\n     * @returns The position of the coordinates, or null if not\n     *   contained in the editor.\n     */\n    getPositionForCoordinate(coordinate) {\n        return this._toPosition(this.editor.coordsChar(coordinate)) || null;\n    }\n    /**\n     * Returns the primary position of the cursor, never `null`.\n     */\n    getCursorPosition() {\n        const cursor = this.doc.getCursor();\n        return this._toPosition(cursor);\n    }\n    /**\n     * Set the primary position of the cursor.\n     *\n     * #### Notes\n     * This will remove any secondary cursors.\n     */\n    setCursorPosition(position, options) {\n        const cursor = this._toCodeMirrorPosition(position);\n        this.doc.setCursor(cursor, undefined, options);\n        // If the editor does not have focus, this cursor change\n        // will get screened out in _onCursorsChanged(). Make an\n        // exception for this method.\n        if (!this.editor.hasFocus()) {\n            this.model.selections.set(this.uuid, this.getSelections());\n        }\n    }\n    /**\n     * Returns the primary selection, never `null`.\n     */\n    getSelection() {\n        return this.getSelections()[0];\n    }\n    /**\n     * Set the primary selection. This will remove any secondary cursors.\n     */\n    setSelection(selection) {\n        this.setSelections([selection]);\n    }\n    /**\n     * Gets the selections for all the cursors, never `null` or empty.\n     */\n    getSelections() {\n        const selections = this.doc.listSelections();\n        if (selections.length > 0) {\n            return selections.map(selection => this._toSelection(selection));\n        }\n        const cursor = this.doc.getCursor();\n        const selection = this._toSelection({ anchor: cursor, head: cursor });\n        return [selection];\n    }\n    /**\n     * Sets the selections for all the cursors, should not be empty.\n     * Cursors will be removed or added, as necessary.\n     * Passing an empty array resets a cursor position to the start of a document.\n     */\n    setSelections(selections) {\n        const cmSelections = this._toCodeMirrorSelections(selections);\n        this.doc.setSelections(cmSelections, 0);\n    }\n    /**\n     * Replaces the current selection with the given text.\n     *\n     * @param text The text to be inserted.\n     */\n    replaceSelection(text) {\n        this.doc.replaceSelection(text);\n    }\n    /**\n     * Get a list of tokens for the current editor text content.\n     */\n    getTokens() {\n        let tokens = [];\n        for (let i = 0; i < this.lineCount; ++i) {\n            const lineTokens = this.editor.getLineTokens(i).map(t => ({\n                offset: this.getOffsetAt({ column: t.start, line: i }),\n                value: t.string,\n                type: t.type || ''\n            }));\n            tokens = tokens.concat(lineTokens);\n        }\n        return tokens;\n    }\n    /**\n     * Get the token at a given editor position.\n     */\n    getTokenForPosition(position) {\n        var _a;\n        const cursor = this._toCodeMirrorPosition(position);\n        const token = this.editor.getTokenAt(cursor);\n        return {\n            offset: this.getOffsetAt({ column: token.start, line: cursor.line }),\n            value: token.string,\n            type: (_a = token.type) !== null && _a !== void 0 ? _a : undefined\n        };\n    }\n    /**\n     * Insert a new indented line at the current cursor position.\n     */\n    newIndentedLine() {\n        this.execCommand('newlineAndIndent');\n    }\n    /**\n     * Execute a codemirror command on the editor.\n     *\n     * @param command - The name of the command to execute.\n     */\n    execCommand(command) {\n        this._editor.execCommand(command);\n    }\n    /**\n     * Handle keydown events from the editor.\n     */\n    onKeydown(event) {\n        const position = this.getCursorPosition();\n        const { line, column } = position;\n        if (line === 0 && column === 0 && event.keyCode === UP_ARROW) {\n            if (!event.shiftKey) {\n                this.edgeRequested.emit('top');\n            }\n            return false;\n        }\n        if (line === 0 && event.keyCode === UP_ARROW) {\n            if (!event.shiftKey) {\n                this.edgeRequested.emit('topLine');\n            }\n            return false;\n        }\n        const lastLine = this.lineCount - 1;\n        const lastCh = this.getLine(lastLine).length;\n        if (line === lastLine &&\n            column === lastCh &&\n            event.keyCode === DOWN_ARROW) {\n            if (!event.shiftKey) {\n                this.edgeRequested.emit('bottom');\n            }\n            return false;\n        }\n        return false;\n    }\n    /**\n     * Converts selections to code mirror selections.\n     */\n    _toCodeMirrorSelections(selections) {\n        if (selections.length > 0) {\n            return selections.map(selection => this._toCodeMirrorSelection(selection));\n        }\n        const position = { line: 0, ch: 0 };\n        return [{ anchor: position, head: position }];\n    }\n    /**\n     * Handles a mime type change.\n     */\n    _onMimeTypeChanged() {\n        const mime = this._model.mimeType;\n        const editor = this._editor;\n        // TODO: should we provide a hook for when the\n        // mode is done being set?\n        void _mode__WEBPACK_IMPORTED_MODULE_9__.Mode.ensure(mime).then(spec => {\n            var _a;\n            editor.setOption('mode', (_a = spec === null || spec === void 0 ? void 0 : spec.mime) !== null && _a !== void 0 ? _a : 'null');\n        });\n        const extraKeys = (editor.getOption('extraKeys') ||\n            {});\n        const isCode = mime !== 'text/plain' && mime !== 'text/x-ipythongfm';\n        if (isCode) {\n            extraKeys['Backspace'] = 'delSpaceToPrevTabStop';\n        }\n        else {\n            delete extraKeys['Backspace'];\n        }\n        editor.setOption('extraKeys', extraKeys);\n    }\n    /**\n     * Handles a selections change.\n     */\n    _onSelectionsChanged(selections, args) {\n        const uuid = args.key;\n        if (uuid !== this.uuid) {\n            this._cleanSelections(uuid);\n            if (args.type !== 'remove' && args.newValue) {\n                this._markSelections(uuid, args.newValue);\n            }\n        }\n    }\n    /**\n     * Clean selections for the given uuid.\n     */\n    _cleanSelections(uuid) {\n        const markers = this.selectionMarkers[uuid];\n        if (markers) {\n            markers.forEach(marker => {\n                marker.clear();\n            });\n        }\n        delete this.selectionMarkers[uuid];\n    }\n    /**\n     * Marks selections.\n     */\n    _markSelections(uuid, selections) {\n        const markers = [];\n        // If we are marking selections corresponding to an active hover,\n        // remove it.\n        if (uuid === this._hoverId) {\n            this._clearHover();\n        }\n        // If we can id the selection to a specific collaborator,\n        // use that information.\n        let collaborator;\n        if (this._model.modelDB.collaborators) {\n            collaborator = this._model.modelDB.collaborators.get(uuid);\n        }\n        // Style each selection for the uuid.\n        selections.forEach(selection => {\n            // Only render selections if the start is not equal to the end.\n            // In that case, we don't need to render the cursor.\n            if (!_lumino_coreutils__WEBPACK_IMPORTED_MODULE_5__.JSONExt.deepEqual(selection.start, selection.end)) {\n                // Selections only appear to render correctly if the anchor\n                // is before the head in the document. That is, reverse selections\n                // do not appear as intended.\n                const forward = selection.start.line < selection.end.line ||\n                    (selection.start.line === selection.end.line &&\n                        selection.start.column <= selection.end.column);\n                const anchor = this._toCodeMirrorPosition(forward ? selection.start : selection.end);\n                const head = this._toCodeMirrorPosition(forward ? selection.end : selection.start);\n                let markerOptions;\n                if (collaborator) {\n                    markerOptions = this._toTextMarkerOptions(Object.assign(Object.assign({}, selection.style), { color: collaborator.color }));\n                }\n                else {\n                    markerOptions = this._toTextMarkerOptions(selection.style);\n                }\n                markers.push(this.doc.markText(anchor, head, markerOptions));\n            }\n            else if (collaborator) {\n                const caret = this._getCaret(collaborator);\n                markers.push(this.doc.setBookmark(this._toCodeMirrorPosition(selection.end), {\n                    widget: caret\n                }));\n            }\n        });\n        this.selectionMarkers[uuid] = markers;\n    }\n    /**\n     * Handles a cursor activity event.\n     */\n    _onCursorActivity() {\n        // Only add selections if the editor has focus. This avoids unwanted\n        // triggering of cursor activity due to collaborator actions.\n        if (this._editor.hasFocus()) {\n            const selections = this.getSelections();\n            this.model.selections.set(this.uuid, selections);\n        }\n    }\n    /**\n     * Converts a code mirror selection to an editor selection.\n     */\n    _toSelection(selection) {\n        return {\n            uuid: this.uuid,\n            start: this._toPosition(selection.anchor),\n            end: this._toPosition(selection.head),\n            style: this.selectionStyle\n        };\n    }\n    /**\n     * Converts the selection style to a text marker options.\n     */\n    _toTextMarkerOptions(style) {\n        const r = parseInt(style.color.slice(1, 3), 16);\n        const g = parseInt(style.color.slice(3, 5), 16);\n        const b = parseInt(style.color.slice(5, 7), 16);\n        const css = `background-color: rgba( ${r}, ${g}, ${b}, 0.15)`;\n        return {\n            className: style.className,\n            title: style.displayName,\n            css\n        };\n    }\n    /**\n     * Converts an editor selection to a code mirror selection.\n     */\n    _toCodeMirrorSelection(selection) {\n        return {\n            anchor: this._toCodeMirrorPosition(selection.start),\n            head: this._toCodeMirrorPosition(selection.end)\n        };\n    }\n    /**\n     * Convert a code mirror position to an editor position.\n     */\n    _toPosition(position) {\n        return {\n            line: position.line,\n            column: position.ch\n        };\n    }\n    /**\n     * Convert an editor position to a code mirror position.\n     */\n    _toCodeMirrorPosition(position) {\n        return {\n            line: position.line,\n            ch: position.column\n        };\n    }\n    /**\n     * Handle model value changes.\n     */\n    _onValueChanged(value, args) {\n        if (this._changeGuard) {\n            return;\n        }\n        this._changeGuard = true;\n        const doc = this.doc;\n        switch (args.type) {\n            case 'insert': {\n                const pos = doc.posFromIndex(args.start);\n                // Replace the range, including a '+input' orign,\n                // which indicates that CodeMirror may merge changes\n                // for undo/redo purposes.\n                doc.replaceRange(args.value, pos, pos, '+input');\n                break;\n            }\n            case 'remove': {\n                const from = doc.posFromIndex(args.start);\n                const to = doc.posFromIndex(args.end);\n                // Replace the range, including a '+input' orign,\n                // which indicates that CodeMirror may merge changes\n                // for undo/redo purposes.\n                doc.replaceRange('', from, to, '+input');\n                break;\n            }\n            case 'set':\n                doc.setValue(args.value);\n                break;\n            default:\n                break;\n        }\n        this._changeGuard = false;\n    }\n    /**\n     * Handles document changes.\n     */\n    _beforeDocChanged(doc, change) {\n        if (this._changeGuard) {\n            return;\n        }\n        this._changeGuard = true;\n        const value = this._model.value;\n        const start = doc.indexFromPos(change.from);\n        const end = doc.indexFromPos(change.to);\n        const inserted = change.text.join('\\n');\n        if (end !== start) {\n            value.remove(start, end);\n        }\n        if (inserted) {\n            value.insert(start, inserted);\n        }\n        this._changeGuard = false;\n    }\n    /**\n     * Handle the DOM events for the editor.\n     *\n     * @param event - The DOM event sent to the editor.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the editor's DOM node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'focus':\n                this._evtFocus(event);\n                break;\n            case 'blur':\n                this._evtBlur(event);\n                break;\n            case 'scroll':\n                this._evtScroll();\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `focus` events for the editor.\n     */\n    _evtFocus(event) {\n        if (this._needsRefresh) {\n            this.refresh();\n        }\n        this.host.classList.add('jp-mod-focused');\n        // Update the selections on editor gaining focus because\n        // the onCursorActivity function filters usual cursor events\n        // based on the editor's focus.\n        this._onCursorActivity();\n    }\n    /**\n     * Handle `blur` events for the editor.\n     */\n    _evtBlur(event) {\n        this.host.classList.remove('jp-mod-focused');\n    }\n    /**\n     * Handle `scroll` events for the editor.\n     */\n    _evtScroll() {\n        // Remove any active hover.\n        this._clearHover();\n    }\n    /**\n     * Clear the hover for a caret, due to things like\n     * scrolling, resizing, deactivation, etc, where\n     * the position is no longer valid.\n     */\n    _clearHover() {\n        if (this._caretHover) {\n            window.clearTimeout(this._hoverTimeout);\n            document.body.removeChild(this._caretHover);\n            this._caretHover = null;\n        }\n    }\n    /**\n     * Construct a caret element representing the position\n     * of a collaborator's cursor.\n     */\n    _getCaret(collaborator) {\n        // FIXME-TRANS: Is this localizable?\n        const name = collaborator ? collaborator.displayName : 'Anonymous';\n        const color = collaborator\n            ? collaborator.color\n            : this._selectionStyle.color;\n        const caret = document.createElement('span');\n        caret.className = COLLABORATOR_CURSOR_CLASS;\n        caret.style.borderBottomColor = color;\n        caret.onmouseenter = () => {\n            this._clearHover();\n            this._hoverId = collaborator.sessionId;\n            const rect = caret.getBoundingClientRect();\n            // Construct and place the hover box.\n            const hover = document.createElement('div');\n            hover.className = COLLABORATOR_HOVER_CLASS;\n            hover.style.left = String(rect.left) + 'px';\n            hover.style.top = String(rect.bottom) + 'px';\n            hover.textContent = name;\n            hover.style.backgroundColor = color;\n            // If the user mouses over the hover, take over the timer.\n            hover.onmouseenter = () => {\n                window.clearTimeout(this._hoverTimeout);\n            };\n            hover.onmouseleave = () => {\n                this._hoverTimeout = window.setTimeout(() => {\n                    this._clearHover();\n                }, HOVER_TIMEOUT);\n            };\n            this._caretHover = hover;\n            document.body.appendChild(hover);\n        };\n        caret.onmouseleave = () => {\n            this._hoverTimeout = window.setTimeout(() => {\n                this._clearHover();\n            }, HOVER_TIMEOUT);\n        };\n        return caret;\n    }\n    /**\n     * Check for an out of sync editor.\n     */\n    _checkSync() {\n        const change = this._lastChange;\n        if (!change) {\n            return;\n        }\n        this._lastChange = null;\n        const editor = this._editor;\n        const doc = editor.getDoc();\n        if (doc.getValue() === this._model.value.text) {\n            return;\n        }\n        void (0,_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__.showDialog)({\n            title: this._trans.__('Code Editor out of Sync'),\n            body: this._trans.__('Please open your browser JavaScript console for bug report instructions')\n        });\n        console.warn('Please paste the following to https://github.com/jupyterlab/jupyterlab/issues/2951');\n        console.warn(JSON.stringify({\n            model: this._model.value.text,\n            view: doc.getValue(),\n            selections: this.getSelections(),\n            cursor: this.getCursorPosition(),\n            lineSep: editor.getOption('lineSeparator'),\n            mode: editor.getOption('mode'),\n            change\n        }));\n    }\n}\n/**\n * The namespace for `CodeMirrorEditor` statics.\n */\n(function (CodeMirrorEditor) {\n    /**\n     * The default configuration options for an editor.\n     */\n    CodeMirrorEditor.defaultConfig = Object.assign(Object.assign({}, _jupyterlab_codeeditor__WEBPACK_IMPORTED_MODULE_2__.CodeEditor.defaultConfig), { mode: 'null', theme: 'jupyter', smartIndent: true, electricChars: true, keyMap: 'default', extraKeys: null, gutters: [], fixedGutter: true, showCursorWhenSelecting: false, coverGutterNextToScrollbar: false, dragDrop: true, lineSeparator: null, scrollbarStyle: 'native', lineWiseCopyCut: true, scrollPastEnd: false, styleActiveLine: false, styleSelectedText: true, selectionPointer: false, rulers: [], foldGutter: false, handlePaste: true });\n    /**\n     * Add a command to CodeMirror.\n     *\n     * @param name - The name of the command to add.\n     *\n     * @param command - The command function.\n     */\n    function addCommand(name, command) {\n        (codemirror__WEBPACK_IMPORTED_MODULE_0___default().commands)[name] = command;\n    }\n    CodeMirrorEditor.addCommand = addCommand;\n})(CodeMirrorEditor || (CodeMirrorEditor = {}));\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    function createEditor(host, config) {\n        const { autoClosingBrackets, fontFamily, fontSize, insertSpaces, lineHeight, lineWrap, wordWrapColumn, tabSize, readOnly } = config, otherOptions = __rest(config, [\"autoClosingBrackets\", \"fontFamily\", \"fontSize\", \"insertSpaces\", \"lineHeight\", \"lineWrap\", \"wordWrapColumn\", \"tabSize\", \"readOnly\"]);\n        const bareConfig = Object.assign({ autoCloseBrackets: autoClosingBrackets ? {} : false, indentUnit: tabSize, indentWithTabs: !insertSpaces, lineWrapping: lineWrap === 'off' ? false : true, readOnly }, otherOptions);\n        return codemirror__WEBPACK_IMPORTED_MODULE_0___default()(el => {\n            if (fontFamily) {\n                el.style.fontFamily = fontFamily;\n            }\n            if (fontSize) {\n                el.style.fontSize = fontSize + 'px';\n            }\n            if (lineHeight) {\n                el.style.lineHeight = lineHeight.toString();\n            }\n            if (readOnly) {\n                el.classList.add(READ_ONLY_CLASS);\n            }\n            if (lineWrap === 'wordWrapColumn') {\n                const lines = el.querySelector('.CodeMirror-lines');\n                lines.style.width = `${wordWrapColumn}ch`;\n            }\n            if (lineWrap === 'bounded') {\n                const lines = el.querySelector('.CodeMirror-lines');\n                lines.style.maxWidth = `${wordWrapColumn}ch`;\n            }\n            host.appendChild(el);\n        }, bareConfig);\n    }\n    Private.createEditor = createEditor;\n    /**\n     * Indent or insert a tab as appropriate.\n     */\n    function indentMoreOrinsertTab(cm) {\n        const doc = cm.getDoc();\n        const from = doc.getCursor('from');\n        const to = doc.getCursor('to');\n        const sel = !posEq(from, to);\n        if (sel) {\n            codemirror__WEBPACK_IMPORTED_MODULE_0___default().commands.indentMore(cm);\n            return;\n        }\n        // Check for start of line.\n        const line = doc.getLine(from.line);\n        const before = line.slice(0, from.ch);\n        if (/^\\s*$/.test(before)) {\n            codemirror__WEBPACK_IMPORTED_MODULE_0___default().commands.indentMore(cm);\n        }\n        else {\n            if (cm.getOption('indentWithTabs')) {\n                codemirror__WEBPACK_IMPORTED_MODULE_0___default().commands.insertTab(cm);\n            }\n            else {\n                codemirror__WEBPACK_IMPORTED_MODULE_0___default().commands.insertSoftTab(cm);\n            }\n        }\n    }\n    Private.indentMoreOrinsertTab = indentMoreOrinsertTab;\n    /**\n     * Delete spaces to the previous tab stob in a codemirror editor.\n     */\n    function delSpaceToPrevTabStop(cm) {\n        var _a;\n        const doc = cm.getDoc();\n        // default tabsize is 2, according to codemirror docs: https://codemirror.net/doc/manual.html#config\n        const tabSize = (_a = cm.getOption('indentUnit')) !== null && _a !== void 0 ? _a : 2;\n        const ranges = doc.listSelections(); // handle multicursor\n        for (let i = ranges.length - 1; i >= 0; i--) {\n            // iterate reverse so any deletions don't overlap\n            const head = ranges[i].head;\n            const anchor = ranges[i].anchor;\n            const isSelection = !posEq(head, anchor);\n            if (isSelection) {\n                doc.replaceRange('', anchor, head);\n            }\n            else {\n                const line = doc.getLine(head.line).substring(0, head.ch);\n                if (line.match(/^\\ +$/) !== null) {\n                    // delete tabs\n                    const prevTabStop = (Math.ceil(head.ch / tabSize) - 1) * tabSize;\n                    const from = codemirror__WEBPACK_IMPORTED_MODULE_0___default().Pos(head.line, prevTabStop);\n                    doc.replaceRange('', from, head);\n                }\n                else {\n                    // delete non-tabs\n                    const from = cm.findPosH(head, -1, 'char', false);\n                    doc.replaceRange('', from, head);\n                }\n            }\n        }\n    }\n    Private.delSpaceToPrevTabStop = delSpaceToPrevTabStop;\n    /**\n     * Test whether two CodeMirror positions are equal.\n     */\n    function posEq(a, b) {\n        return a.line === b.line && a.ch === b.ch;\n    }\n    Private.posEq = posEq;\n    /**\n     * Get the list of active gutters\n     *\n     * @param config Editor configuration\n     */\n    function getActiveGutters(config) {\n        // The order of the classes will be the gutters order\n        const classToSwitch = {\n            'CodeMirror-linenumbers': 'lineNumbers',\n            'CodeMirror-foldgutter': 'codeFolding'\n        };\n        return Object.keys(classToSwitch).filter(gutter => config[classToSwitch[gutter]]);\n    }\n    /**\n     * Set a config option for the editor.\n     */\n    function setOption(editor, option, value, config) {\n        const el = editor.getWrapperElement();\n        switch (option) {\n            case 'lineWrap': {\n                const lineWrapping = value === 'off' ? false : true;\n                const lines = el.querySelector('.CodeMirror-lines');\n                const maxWidth = value === 'bounded' ? `${config.wordWrapColumn}ch` : null;\n                const width = value === 'wordWrapColumn' ? `${config.wordWrapColumn}ch` : null;\n                lines.style.setProperty('max-width', maxWidth);\n                lines.style.setProperty('width', width);\n                editor.setOption('lineWrapping', lineWrapping);\n                break;\n            }\n            case 'wordWrapColumn': {\n                const { lineWrap } = config;\n                if (lineWrap === 'wordWrapColumn' || lineWrap === 'bounded') {\n                    const lines = el.querySelector('.CodeMirror-lines');\n                    const prop = lineWrap === 'wordWrapColumn' ? 'width' : 'maxWidth';\n                    lines.style[prop] = `${value}ch`;\n                }\n                break;\n            }\n            case 'tabSize':\n                editor.setOption('indentUnit', value);\n                break;\n            case 'insertSpaces':\n                editor.setOption('indentWithTabs', !value);\n                break;\n            case 'autoClosingBrackets':\n                editor.setOption('autoCloseBrackets', value);\n                break;\n            case 'rulers': {\n                const rulers = value;\n                editor.setOption('rulers', rulers.map(column => {\n                    return {\n                        column,\n                        className: 'jp-CodeMirror-ruler'\n                    };\n                }));\n                break;\n            }\n            case 'readOnly':\n                el.classList.toggle(READ_ONLY_CLASS, value);\n                editor.setOption(option, value);\n                break;\n            case 'fontFamily':\n                el.style.fontFamily = value;\n                break;\n            case 'fontSize':\n                el.style.setProperty('font-size', value ? value + 'px' : null);\n                break;\n            case 'lineHeight':\n                el.style.lineHeight = (value ? value.toString() : null);\n                break;\n            case 'gutters':\n                editor.setOption(option, getActiveGutters(config));\n                break;\n            case 'lineNumbers':\n                editor.setOption(option, value);\n                editor.setOption('gutters', getActiveGutters(config));\n                break;\n            case 'codeFolding':\n                editor.setOption('foldGutter', value);\n                editor.setOption('gutters', getActiveGutters(config));\n                break;\n            default:\n                editor.setOption(option, value);\n                break;\n        }\n    }\n    Private.setOption = setOption;\n})(Private || (Private = {}));\n/**\n * Add a CodeMirror command to delete until previous non blanking space\n * character or first multiple of tabsize tabstop.\n */\nCodeMirrorEditor.addCommand('delSpaceToPrevTabStop', Private.delSpaceToPrevTabStop);\n/**\n * Add a CodeMirror command to indent or insert a tab as appropriate.\n */\nCodeMirrorEditor.addCommand('indentMoreOrinsertTab', Private.indentMoreOrinsertTab);\n//# sourceMappingURL=editor.js.map\n\n//# sourceURL=webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codemirror/lib/editor.js?");

/***/ }),

/***/ "../node_modules/@jupyterlab/codemirror/lib/factory.js":
/*!*************************************************************!*\
  !*** ../node_modules/@jupyterlab/codemirror/lib/factory.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CodeMirrorEditorFactory\": () => (/* binding */ CodeMirrorEditorFactory)\n/* harmony export */ });\n/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/translation */ \"webpack/sharing/consume/default/@jupyterlab/translation/@jupyterlab/translation?0ebc\");\n/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _editor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./editor */ \"../node_modules/@jupyterlab/codemirror/lib/editor.js\");\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n\n/**\n * CodeMirror editor factory.\n */\nclass CodeMirrorEditorFactory {\n    /**\n     * Construct an IEditorFactoryService for CodeMirrorEditors.\n     */\n    constructor(defaults = {}, translator) {\n        /**\n         * Create a new editor for inline code.\n         */\n        this.newInlineEditor = (options) => {\n            options.host.dataset.type = 'inline';\n            return new _editor__WEBPACK_IMPORTED_MODULE_1__.CodeMirrorEditor(Object.assign(Object.assign({}, options), { config: Object.assign(Object.assign({}, this.inlineCodeMirrorConfig), (options.config || {})), translator: this.translator }));\n        };\n        /**\n         * Create a new editor for a full document.\n         */\n        this.newDocumentEditor = (options) => {\n            options.host.dataset.type = 'document';\n            return new _editor__WEBPACK_IMPORTED_MODULE_1__.CodeMirrorEditor(Object.assign(Object.assign({}, options), { config: Object.assign(Object.assign({}, this.documentCodeMirrorConfig), (options.config || {})), translator: this.translator }));\n        };\n        this.translator = translator || _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_0__.nullTranslator;\n        this.inlineCodeMirrorConfig = Object.assign(Object.assign(Object.assign({}, _editor__WEBPACK_IMPORTED_MODULE_1__.CodeMirrorEditor.defaultConfig), { extraKeys: {\n                'Cmd-Right': 'goLineRight',\n                End: 'goLineRight',\n                'Cmd-Left': 'goLineLeft',\n                Tab: 'indentMoreOrinsertTab',\n                'Shift-Tab': 'indentLess',\n                'Cmd-/': 'toggleComment',\n                'Ctrl-/': 'toggleComment'\n            } }), defaults);\n        this.documentCodeMirrorConfig = Object.assign(Object.assign(Object.assign({}, _editor__WEBPACK_IMPORTED_MODULE_1__.CodeMirrorEditor.defaultConfig), { extraKeys: {\n                Tab: 'indentMoreOrinsertTab',\n                'Shift-Tab': 'indentLess',\n                'Cmd-/': 'toggleComment',\n                'Ctrl-/': 'toggleComment',\n                'Shift-Enter': () => {\n                    /* no-op */\n                }\n            }, lineNumbers: true, scrollPastEnd: true }), defaults);\n    }\n}\n//# sourceMappingURL=factory.js.map\n\n//# sourceURL=webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codemirror/lib/factory.js?");

/***/ }),

/***/ "../node_modules/@jupyterlab/codemirror/lib/index.js":
/*!***********************************************************!*\
  !*** ../node_modules/@jupyterlab/codemirror/lib/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Mode\": () => (/* reexport safe */ _mode__WEBPACK_IMPORTED_MODULE_2__.Mode),\n/* harmony export */   \"CodeMirrorEditor\": () => (/* reexport safe */ _editor__WEBPACK_IMPORTED_MODULE_3__.CodeMirrorEditor),\n/* harmony export */   \"CodeMirrorEditorFactory\": () => (/* reexport safe */ _factory__WEBPACK_IMPORTED_MODULE_0__.CodeMirrorEditorFactory),\n/* harmony export */   \"CodeMirrorMimeTypeService\": () => (/* reexport safe */ _mimetype__WEBPACK_IMPORTED_MODULE_1__.CodeMirrorMimeTypeService),\n/* harmony export */   \"EditorSyntaxStatus\": () => (/* reexport safe */ _syntaxstatus__WEBPACK_IMPORTED_MODULE_4__.EditorSyntaxStatus),\n/* harmony export */   \"ICodeMirror\": () => (/* reexport safe */ _tokens__WEBPACK_IMPORTED_MODULE_5__.ICodeMirror),\n/* harmony export */   \"editorServices\": () => (/* binding */ editorServices)\n/* harmony export */ });\n/* harmony import */ var _factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./factory */ \"../node_modules/@jupyterlab/codemirror/lib/factory.js\");\n/* harmony import */ var _mimetype__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mimetype */ \"../node_modules/@jupyterlab/codemirror/lib/mimetype.js\");\n/* harmony import */ var _mode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mode */ \"../node_modules/@jupyterlab/codemirror/lib/mode.js\");\n/* harmony import */ var _editor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./editor */ \"../node_modules/@jupyterlab/codemirror/lib/editor.js\");\n/* harmony import */ var _syntaxstatus__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./syntaxstatus */ \"../node_modules/@jupyterlab/codemirror/lib/syntaxstatus.js\");\n/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tokens */ \"../node_modules/@jupyterlab/codemirror/lib/tokens.js\");\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module codemirror\n */\n\n\n\n\n\n\n\n\n/**\n * The default editor services.\n */\nconst editorServices = {\n    factoryService: new _factory__WEBPACK_IMPORTED_MODULE_0__.CodeMirrorEditorFactory(),\n    mimeTypeService: new _mimetype__WEBPACK_IMPORTED_MODULE_1__.CodeMirrorMimeTypeService()\n};\n/**\n * FIXME-TRANS: Maybe an option to be able to pass a translator to the factories?\n *\n\nexport function getEditorServices(translator: ITranslator): IEditorServices {\n  return {\n    factoryService: new CodeMirrorEditorFactory({}, translator),\n    mimeTypeService: new CodeMirrorMimeTypeService(translator)\n  };\n}\n */\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codemirror/lib/index.js?");

/***/ }),

/***/ "../node_modules/@jupyterlab/codemirror/lib/mimetype.js":
/*!**************************************************************!*\
  !*** ../node_modules/@jupyterlab/codemirror/lib/mimetype.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CodeMirrorMimeTypeService\": () => (/* binding */ CodeMirrorMimeTypeService)\n/* harmony export */ });\n/* harmony import */ var _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @jupyterlab/coreutils */ \"webpack/sharing/consume/default/@jupyterlab/coreutils/@jupyterlab/coreutils?3cfe\");\n/* harmony import */ var _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _mode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mode */ \"../node_modules/@jupyterlab/codemirror/lib/mode.js\");\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n\n/**\n * The mime type service for CodeMirror.\n */\nclass CodeMirrorMimeTypeService {\n    /**\n     * Returns a mime type for the given language info.\n     *\n     * #### Notes\n     * If a mime type cannot be found returns the defaul mime type `text/plain`, never `null`.\n     */\n    getMimeTypeByLanguage(info) {\n        const ext = info.file_extension || '';\n        return _mode__WEBPACK_IMPORTED_MODULE_1__.Mode.findBest(info.codemirror_mode || {\n            mimetype: info.mimetype,\n            name: info.name,\n            ext: [ext.split('.').slice(-1)[0]]\n        }).mime;\n    }\n    /**\n     * Returns a mime type for the given file path.\n     *\n     * #### Notes\n     * If a mime type cannot be found returns the default mime type `text/plain`, never `null`.\n     */\n    getMimeTypeByFilePath(path) {\n        const ext = _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_0__.PathExt.extname(path);\n        if (ext === '.ipy') {\n            return 'text/x-python';\n        }\n        else if (ext === '.md') {\n            return 'text/x-ipythongfm';\n        }\n        const mode = _mode__WEBPACK_IMPORTED_MODULE_1__.Mode.findByFileName(path) || _mode__WEBPACK_IMPORTED_MODULE_1__.Mode.findBest('');\n        return mode.mime;\n    }\n}\n//# sourceMappingURL=mimetype.js.map\n\n//# sourceURL=webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codemirror/lib/mimetype.js?");

/***/ }),

/***/ "../node_modules/@jupyterlab/codemirror/lib/mode.js":
/*!**********************************************************!*\
  !*** ../node_modules/@jupyterlab/codemirror/lib/mode.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Mode\": () => (/* binding */ Mode)\n/* harmony export */ });\n/* harmony import */ var _lumino_algorithm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lumino/algorithm */ \"webpack/sharing/consume/default/@lumino/algorithm/@lumino/algorithm\");\n/* harmony import */ var _lumino_algorithm__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lumino_algorithm__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _jupyterlab_codeeditor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jupyterlab/codeeditor */ \"webpack/sharing/consume/default/@jupyterlab/codeeditor/@jupyterlab/codeeditor?7077\");\n/* harmony import */ var _jupyterlab_codeeditor__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_codeeditor__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var codemirror__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! codemirror */ \"webpack/sharing/consume/default/codemirror/codemirror\");\n/* harmony import */ var codemirror__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(codemirror__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var codemirror_mode_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! codemirror/mode/meta */ \"../node_modules/codemirror/mode/meta.js\");\n/* harmony import */ var codemirror_mode_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(codemirror_mode_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var codemirror_addon_runmode_runmode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! codemirror/addon/runmode/runmode */ \"../node_modules/codemirror/addon/runmode/runmode.js\");\n/* harmony import */ var codemirror_addon_runmode_runmode__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(codemirror_addon_runmode_runmode__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _codemirror_ipython__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./codemirror-ipython */ \"../node_modules/@jupyterlab/codemirror/lib/codemirror-ipython.js\");\n/* harmony import */ var _codemirror_ipythongfm__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./codemirror-ipythongfm */ \"../node_modules/@jupyterlab/codemirror/lib/codemirror-ipythongfm.js\");\n/* harmony import */ var codemirror_mode_javascript_javascript__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! codemirror/mode/javascript/javascript */ \"../node_modules/codemirror/mode/javascript/javascript.js\");\n/* harmony import */ var codemirror_mode_javascript_javascript__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(codemirror_mode_javascript_javascript__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var codemirror_mode_css_css__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! codemirror/mode/css/css */ \"../node_modules/codemirror/mode/css/css.js\");\n/* harmony import */ var codemirror_mode_css_css__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(codemirror_mode_css_css__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var codemirror_mode_julia_julia__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! codemirror/mode/julia/julia */ \"../node_modules/codemirror/mode/julia/julia.js\");\n/* harmony import */ var codemirror_mode_julia_julia__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(codemirror_mode_julia_julia__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var codemirror_mode_r_r__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! codemirror/mode/r/r */ \"../node_modules/codemirror/mode/r/r.js\");\n/* harmony import */ var codemirror_mode_r_r__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(codemirror_mode_r_r__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var codemirror_mode_markdown_markdown__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! codemirror/mode/markdown/markdown */ \"../node_modules/codemirror/mode/markdown/markdown.js\");\n/* harmony import */ var codemirror_mode_markdown_markdown__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(codemirror_mode_markdown_markdown__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var codemirror_mode_clike_clike__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! codemirror/mode/clike/clike */ \"../node_modules/codemirror/mode/clike/clike.js\");\n/* harmony import */ var codemirror_mode_clike_clike__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(codemirror_mode_clike_clike__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var codemirror_mode_shell_shell__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! codemirror/mode/shell/shell */ \"../node_modules/codemirror/mode/shell/shell.js\");\n/* harmony import */ var codemirror_mode_shell_shell__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(codemirror_mode_shell_shell__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var codemirror_mode_sql_sql__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! codemirror/mode/sql/sql */ \"../node_modules/codemirror/mode/sql/sql.js\");\n/* harmony import */ var codemirror_mode_sql_sql__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(codemirror_mode_sql_sql__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @jupyterlab/coreutils */ \"webpack/sharing/consume/default/@jupyterlab/coreutils/@jupyterlab/coreutils?3cfe\");\n/* harmony import */ var _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_15__);\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n\n\n\n\n\n\n// Bundle other common modes\n\n\n\n\n\n\n\n\n\n/**\n * The namespace for CodeMirror Mode functionality.\n */\nvar Mode;\n(function (Mode) {\n    const specLoaders = [\n        {\n            // Simplest, cheapest check by mode name.\n            loader: async (spec) => codemirror__WEBPACK_IMPORTED_MODULE_2___default().modes.hasOwnProperty(spec.mode),\n            rank: 0\n        },\n        {\n            // Fetch the mode asynchronously.\n            loader: function (spec) {\n                return new Promise((resolve, reject) => {\n                    // An arrow function below seems to miscompile in our current webpack to\n                    // invalid js.\n                    Promise.all(/*! AMD require */[__webpack_require__.e(\"vendors-node_modules_codemirror_mode_apl_apl_js-node_modules_codemirror_mode_asciiarmor_ascii-26282f\"), __webpack_require__.e(\"node_modules_codemirror_mode_sync_recursive_js_\")]).then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [\n                        __webpack_require__(\"../node_modules/codemirror/mode sync recursive ^\\\\.\\\\/.*\\\\/.*\\\\.js$\")(`./${spec.mode}/${spec.mode}.js`)\n                    ]; (function () {\n                        resolve(true);\n                    }).apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__);}).catch(__webpack_require__.oe);\n                });\n            },\n            rank: 99\n        }\n    ];\n    /**\n     * Get the raw list of available modes specs.\n     */\n    function getModeInfo() {\n        return (codemirror__WEBPACK_IMPORTED_MODULE_2___default().modeInfo);\n    }\n    Mode.getModeInfo = getModeInfo;\n    /**\n     * Running a CodeMirror mode outside of an editor.\n     */\n    function run(code, mode, el) {\n        codemirror__WEBPACK_IMPORTED_MODULE_2___default().runMode(code, mode, el);\n    }\n    Mode.run = run;\n    /**\n     * Ensure a codemirror mode is available by name or Codemirror spec.\n     *\n     * @param mode - The mode to ensure.  If it is a string, uses [findBest]\n     *   to get the appropriate spec.\n     *\n     * @returns A promise that resolves when the mode is available.\n     */\n    async function ensure(mode) {\n        const spec = findBest(mode);\n        for (const specLoader of specLoaders) {\n            if (await specLoader.loader(spec)) {\n                return spec;\n            }\n        }\n        return null;\n    }\n    Mode.ensure = ensure;\n    function addSpecLoader(loader, rank) {\n        const item = { loader, rank };\n        const index = _lumino_algorithm__WEBPACK_IMPORTED_MODULE_0__.ArrayExt.upperBound(specLoaders, item, Private.itemCmp);\n        _lumino_algorithm__WEBPACK_IMPORTED_MODULE_0__.ArrayExt.insert(specLoaders, index, item);\n    }\n    Mode.addSpecLoader = addSpecLoader;\n    /**\n     * Find a codemirror mode by name or CodeMirror spec.\n     */\n    function findBest(mode) {\n        var _a;\n        const modename = typeof mode === 'string' ? mode : mode.mode || mode.name;\n        const mimetype = typeof mode !== 'string' ? mode.mime : modename;\n        const ext = typeof mode !== 'string' ? (_a = mode.ext) !== null && _a !== void 0 ? _a : [] : [];\n        return (codemirror__WEBPACK_IMPORTED_MODULE_2___default().findModeByName(modename || '') ||\n            codemirror__WEBPACK_IMPORTED_MODULE_2___default().findModeByMIME(mimetype || '') ||\n            findByExtension(ext) ||\n            codemirror__WEBPACK_IMPORTED_MODULE_2___default().findModeByMIME(_jupyterlab_codeeditor__WEBPACK_IMPORTED_MODULE_1__.IEditorMimeTypeService.defaultMimeType) ||\n            codemirror__WEBPACK_IMPORTED_MODULE_2___default().findModeByMIME('text/plain'));\n    }\n    Mode.findBest = findBest;\n    /**\n     * Find a codemirror mode by MIME.\n     */\n    function findByMIME(mime) {\n        return codemirror__WEBPACK_IMPORTED_MODULE_2___default().findModeByMIME(mime);\n    }\n    Mode.findByMIME = findByMIME;\n    /**\n     * Find a codemirror mode by name.\n     */\n    function findByName(name) {\n        return codemirror__WEBPACK_IMPORTED_MODULE_2___default().findModeByName(name);\n    }\n    Mode.findByName = findByName;\n    /**\n     * Find a codemirror mode by filename.\n     */\n    function findByFileName(name) {\n        const basename = _jupyterlab_coreutils__WEBPACK_IMPORTED_MODULE_15__.PathExt.basename(name);\n        return codemirror__WEBPACK_IMPORTED_MODULE_2___default().findModeByFileName(basename);\n    }\n    Mode.findByFileName = findByFileName;\n    /**\n     * Find a codemirror mode by extension.\n     */\n    function findByExtension(ext) {\n        if (typeof ext === 'string') {\n            return codemirror__WEBPACK_IMPORTED_MODULE_2___default().findModeByExtension(ext);\n        }\n        for (let i = 0; i < ext.length; i++) {\n            const mode = codemirror__WEBPACK_IMPORTED_MODULE_2___default().findModeByExtension(ext[i]);\n            if (mode) {\n                return mode;\n            }\n        }\n        return null;\n    }\n    Mode.findByExtension = findByExtension;\n})(Mode || (Mode = {}));\nvar Private;\n(function (Private) {\n    /**\n     * A less-than comparison function for the loader rank\n     */\n    function itemCmp(first, second) {\n        return first.rank - second.rank;\n    }\n    Private.itemCmp = itemCmp;\n})(Private || (Private = {}));\n//# sourceMappingURL=mode.js.map\n\n//# sourceURL=webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codemirror/lib/mode.js?");

/***/ }),

/***/ "../node_modules/@jupyterlab/codemirror/lib/syntaxstatus.js":
/*!******************************************************************!*\
  !*** ../node_modules/@jupyterlab/codemirror/lib/syntaxstatus.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"EditorSyntaxStatus\": () => (/* binding */ EditorSyntaxStatus)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"webpack/sharing/consume/default/react/react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @jupyterlab/apputils */ \"webpack/sharing/consume/default/@jupyterlab/apputils/@jupyterlab/apputils?c634\");\n/* harmony import */ var _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _jupyterlab_statusbar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @jupyterlab/statusbar */ \"webpack/sharing/consume/default/@jupyterlab/statusbar/@jupyterlab/statusbar?a905\");\n/* harmony import */ var _jupyterlab_statusbar__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_statusbar__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @jupyterlab/translation */ \"webpack/sharing/consume/default/@jupyterlab/translation/@jupyterlab/translation?0ebc\");\n/* harmony import */ var _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_jupyterlab_translation__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! . */ \"../node_modules/@jupyterlab/codemirror/lib/index.js\");\n/* harmony import */ var _lumino_widgets__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @lumino/widgets */ \"webpack/sharing/consume/default/@lumino/widgets/@lumino/widgets\");\n/* harmony import */ var _lumino_widgets__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_lumino_widgets__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\n/**\n * A pure function that returns a tsx component for an editor syntax item.\n *\n * @param props: the props for the component.\n *\n * @returns an editor syntax component.\n */\nfunction EditorSyntaxComponent(props) {\n    return react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_jupyterlab_statusbar__WEBPACK_IMPORTED_MODULE_2__.TextItem, { source: props.mode, onClick: props.handleClick });\n}\n/**\n * StatusBar item to change the language syntax highlighting of the file editor.\n */\nclass EditorSyntaxStatus extends _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__.VDomRenderer {\n    /**\n     * Construct a new VDomRenderer for the status item.\n     */\n    constructor(opts) {\n        super(new EditorSyntaxStatus.Model());\n        /**\n         * Create a menu for selecting the mode of the editor.\n         */\n        this._handleClick = () => {\n            const modeMenu = new _lumino_widgets__WEBPACK_IMPORTED_MODULE_5__.Menu({ commands: this._commands });\n            const command = 'codemirror:change-mode';\n            if (this._popup) {\n                this._popup.dispose();\n            }\n            ___WEBPACK_IMPORTED_MODULE_4__.Mode.getModeInfo()\n                .sort((a, b) => {\n                const aName = a.name || '';\n                const bName = b.name || '';\n                return aName.localeCompare(bName);\n            })\n                .forEach(spec => {\n                if (spec.mode.indexOf('brainf') === 0) {\n                    return;\n                }\n                const args = {\n                    insertSpaces: true,\n                    name: spec.name\n                };\n                modeMenu.addItem({\n                    command,\n                    args\n                });\n            });\n            this._popup = (0,_jupyterlab_statusbar__WEBPACK_IMPORTED_MODULE_2__.showPopup)({\n                body: modeMenu,\n                anchor: this,\n                align: 'left'\n            });\n        };\n        this._popup = null;\n        this._commands = opts.commands;\n        this.translator = opts.translator || _jupyterlab_translation__WEBPACK_IMPORTED_MODULE_3__.nullTranslator;\n        const trans = this.translator.load('jupyterlab');\n        this.addClass(_jupyterlab_statusbar__WEBPACK_IMPORTED_MODULE_2__.interactiveItem);\n        this.title.caption = trans.__('Change text editor syntax highlighting');\n    }\n    /**\n     * Render the status item.\n     */\n    render() {\n        if (!this.model) {\n            return null;\n        }\n        return (react__WEBPACK_IMPORTED_MODULE_0___default().createElement(EditorSyntaxComponent, { mode: this.model.mode, handleClick: this._handleClick }));\n    }\n}\n/**\n * A namespace for EditorSyntax statics.\n */\n(function (EditorSyntaxStatus) {\n    /**\n     * A VDomModel for the current editor/mode combination.\n     */\n    class Model extends _jupyterlab_apputils__WEBPACK_IMPORTED_MODULE_1__.VDomModel {\n        constructor() {\n            super(...arguments);\n            /**\n             * If the editor mode changes, update the model.\n             */\n            this._onMIMETypeChange = (mode, change) => {\n                const oldMode = this._mode;\n                const spec = ___WEBPACK_IMPORTED_MODULE_4__.Mode.findByMIME(change.newValue);\n                this._mode = spec.name || spec.mode;\n                this._triggerChange(oldMode, this._mode);\n            };\n            this._mode = '';\n            this._editor = null;\n        }\n        /**\n         * The current mode for the editor. If no editor is present,\n         * returns the empty string.\n         */\n        get mode() {\n            return this._mode;\n        }\n        /**\n         * The current editor for the application editor tracker.\n         */\n        get editor() {\n            return this._editor;\n        }\n        set editor(editor) {\n            const oldEditor = this._editor;\n            if (oldEditor !== null) {\n                oldEditor.model.mimeTypeChanged.disconnect(this._onMIMETypeChange);\n            }\n            const oldMode = this._mode;\n            this._editor = editor;\n            if (this._editor === null) {\n                this._mode = '';\n            }\n            else {\n                const spec = ___WEBPACK_IMPORTED_MODULE_4__.Mode.findByMIME(this._editor.model.mimeType);\n                this._mode = spec.name || spec.mode;\n                this._editor.model.mimeTypeChanged.connect(this._onMIMETypeChange);\n            }\n            this._triggerChange(oldMode, this._mode);\n        }\n        /**\n         * Trigger a rerender of the model.\n         */\n        _triggerChange(oldState, newState) {\n            if (oldState !== newState) {\n                this.stateChanged.emit(void 0);\n            }\n        }\n    }\n    EditorSyntaxStatus.Model = Model;\n})(EditorSyntaxStatus || (EditorSyntaxStatus = {}));\n//# sourceMappingURL=syntaxstatus.js.map\n\n//# sourceURL=webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codemirror/lib/syntaxstatus.js?");

/***/ }),

/***/ "../node_modules/@jupyterlab/codemirror/lib/tokens.js":
/*!************************************************************!*\
  !*** ../node_modules/@jupyterlab/codemirror/lib/tokens.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ICodeMirror\": () => (/* binding */ ICodeMirror)\n/* harmony export */ });\n/* harmony import */ var _lumino_coreutils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @lumino/coreutils */ \"webpack/sharing/consume/default/@lumino/coreutils/@lumino/coreutils\");\n/* harmony import */ var _lumino_coreutils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lumino_coreutils__WEBPACK_IMPORTED_MODULE_0__);\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n/* tslint:disable */\n/**\n * The CodeMirror token.\n */\nconst ICodeMirror = new _lumino_coreutils__WEBPACK_IMPORTED_MODULE_0__.Token('@jupyterlab/codemirror:ICodeMirror');\n//# sourceMappingURL=tokens.js.map\n\n//# sourceURL=webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codemirror/lib/tokens.js?");

/***/ })

}]);