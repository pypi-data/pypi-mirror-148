def read_command_line(objectstring='requested'):
    from argparse import ArgumentParser as AP
    from argparse import FileType

    parser = AP()

    parser.add_argument('file', type=FileType('r'),
                        help='OuterWave_momentum/density file generated by reform')
    parser.add_argument('-d', '--dir', help='RMT calculation root directory',
                        default="../")
    parser.add_argument('-o', '--output', type=str,
                        help=f'Output the {objectstring} distribution to named file',
                        default=None)
    parser.add_argument('--plot', '-p', action='store_true', help='display plot')
    parser.add_argument('--normalise_bar', '-nb', action='store_true', help='normalise the colour bar scale')
    parser.add_argument('--log_scale', '-l', action='store_true', help='plot on a log (base 10) scale')
    parser.add_argument('--rmax', type=float, help='Set maximum radial value for plot',
                        default=None)

    return parser


def momentum_command_line():
    parser = read_command_line('momentum')
    parser.add_argument('--rskip', '-r', type=int,
                        help='(int) size of rskip to use in a.u.', default=200)
    return parser


def density_command_line():
    parser = read_command_line('density')
    parser.add_argument('--rmatr', '-r', type=float,
                        help='(float) size of rmatrix boundary in a.u.',
                        default=20.0)
    return parser


def get_command_line(objectstring='requested'):
    if objectstring == 'momentum':
        parser = momentum_command_line()
    elif objectstring == 'density':
        parser = density_command_line()
    else:
        parser = read_command_line(objectstring)
    args = parser.parse_args()
# If no output/plot is specified, output to file
    if not args.plot and not args.output:
        args.output = f"{objectstring}_distribution.png"
    return(args)
