Metadata-Version: 2.1
Name: aio-quakeml-client
Version: 0.2
Summary: An async QuakeML client library.
Home-page: https://github.com/exxamalte/python-aio-quakeml-client
Author: Malte Franken
Author-email: coding@subspace.de
License: Apache-2.0
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aiohttp (<4,>=3.7.4)
Requires-Dist: haversine (>=2.5.1)
Requires-Dist: xmltodict (>=0.12.0)
Requires-Dist: dateparser (>=1.1.1)

# python-aio-quakeml-client

[![Build Status](https://github.com/exxamalte/python-aio-quakeml-client/workflows/CI/badge.svg?branch=main)](https://github.com/exxamalte/python-aio-quakeml-client/actions?workflow=CI)
[![codecov](https://codecov.io/gh/exxamalte/python-aio-quakeml-client/branch/main/graph/badge.svg?token=97PBJ93VGE)](https://codecov.io/gh/exxamalte/python-aio-quakeml-client)
[![PyPi](https://img.shields.io/pypi/v/aio-quakeml-client.svg)](https://pypi.python.org/pypi/aio-quakeml-client)
[![Version](https://img.shields.io/pypi/pyversions/aio-quakeml-client.svg)](https://pypi.python.org/pypi/aio-quakeml-client)

This library provides convenient async access to QuakeML feeds.


**Example**
```python
import asyncio
from aiohttp import ClientSession
from aio_quakeml_client import TestFeed
async def main() -> None:
    async with ClientSession() as websession:    
        # Home Coordinates: Latitude: -33.0, Longitude: 150.0
        # Filter radius: 500 km
        feed = TestFeed(websession, 
                        (-33.0, 150.0),
                        url="https://webservices.ingv.it/fdsnws/event/1/query?starttime=2022-03-01T00:00:00&endtime=2022-03-01T23:59:59",
                        filter_radius=50000)
        status, entries = await feed.update()
        print(status)
        print(entries)
asyncio.get_event_loop().run_until_complete(main())
```


