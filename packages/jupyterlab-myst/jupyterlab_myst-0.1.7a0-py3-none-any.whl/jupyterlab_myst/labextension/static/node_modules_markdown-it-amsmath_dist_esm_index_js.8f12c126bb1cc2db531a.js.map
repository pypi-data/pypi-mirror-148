{"version":3,"sources":["webpack://jupyterlab-myst/./node_modules/markdown-it-amsmath/dist/esm/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA;AACO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,QAAQ,GAAG,YAAY;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,QAAQ;AAC1D;AACA;AACA;AACA;AACA,iEAAe,aAAa,EAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,GAAG,uBAAuB,QAAQ;AACzE;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE,YAAY,EAAE,UAAU;AACjD;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wBAAwB;AACnC,SAAS,SAAS;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,iC","file":"node_modules_markdown-it-amsmath_dist_esm_index_js.8f12c126bb1cc2db531a.js","sourcesContent":["/**\n * An markdown-it plugin that parses bare LaTeX [amsmath](https://ctan.org/pkg/amsmath) environments.\n *\n * ```latex\n    \\begin{gather*}\n      a_1=b_1+c_1\\\\\n      a_2=b_2+c_2-d_2+e_2\n    \\end{gather*}\n  ```\n *\n */\nexport function amsmathPlugin(md, options) {\n    md.block.ruler.before(\"blockquote\", \"amsmath\", amsmathBlock, {\n        alt: [\"paragraph\", \"reference\", \"blockquote\", \"list\", \"footnote_def\"]\n    });\n    const renderer = options === null || options === void 0 ? void 0 : options.renderer;\n    if (renderer) {\n        md.renderer.rules[\"amsmath\"] = (tokens, idx) => {\n            const content = tokens[idx].content;\n            let res;\n            try {\n                res = renderer(content);\n            }\n            catch (err) {\n                res = md.utils.escapeHtml(`${content}:${err.message}`);\n            }\n            return res;\n        };\n    }\n    else {\n        // basic renderer for testing\n        md.renderer.rules[\"amsmath\"] = (tokens, idx) => {\n            const content = md.utils.escapeHtml(tokens[idx].content);\n            return `<div class=\"math amsmath\">\\n${content}\\n</div>\\n`;\n        };\n    }\n}\n// Exporting both a default and named export is necessary for Jest in some cases\nexport default amsmathPlugin;\n// Taken from amsmath version 2.1\n// http://anorien.csc.warwick.ac.uk/mirrors/CTAN/macros/latex/required/amsmath/amsldoc.pdf\nconst ENVIRONMENTS = [\n    // 3.2 single equation with an automatically generated number\n    \"equation\",\n    // 3.3 variation equation, used for equations that don’t fit on a single line\n    \"multline\",\n    // 3.5 a group of consecutive equations when there is no alignment desired among them\n    \"gather\",\n    // 3.6 Used for two or more equations when vertical alignment is desired\n    \"align\",\n    // allows the horizontal space between equations to be explicitly specified.\n    \"alignat\",\n    // stretches the space between the equation columns to the maximum possible width\n    \"flalign\",\n    // 4.1 The pmatrix, bmatrix, Bmatrix, vmatrix and Vmatrix have (respectively)\n    // (),[],{},||,and ‖‖ delimiters built in.\n    \"matrix\",\n    \"pmatrix\",\n    \"bmatrix\",\n    \"Bmatrix\",\n    \"vmatrix\",\n    \"Vmatrix\",\n    // eqnarray is another math environment, it is not part of amsmath,\n    // and note that it is better to use align or equation+split instead\n    \"eqnarray\"\n];\n// other \"non-top-level\" environments:\n// 3.4 the split environment is for single equations that are too long to fit on one line\n// and hence must be split into multiple lines,\n// it is intended for use only inside some other displayed equation structure,\n// usually an equation, align, or gather environment\n// 3.7 variants gathered, aligned,and alignedat are provided\n// whose total width is the actual width of the contents;\n// thus they can be used as a component in a containing expression\nconst RE_OPEN = new RegExp(`^\\\\\\\\begin{(${ENVIRONMENTS.join(\"|\")})([*]?)}`);\nfunction matchEnvironment(string) {\n    const matchOpen = string.match(RE_OPEN);\n    if (!matchOpen)\n        return null;\n    const [, environment, numbered] = matchOpen;\n    const end = `\\\\end{${environment}${numbered}}`;\n    const matchClose = string.indexOf(end);\n    if (matchClose === -1)\n        return null;\n    return { environment, numbered, endpos: matchClose + end.length };\n}\nfunction amsmathBlock(state, startLine, endLine, silent) {\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4)\n        return false;\n    const begin = state.bMarks[startLine] + state.tShift[startLine];\n    const outcome = matchEnvironment(state.src.slice(begin));\n    if (!outcome)\n        return false;\n    const { environment, numbered } = outcome;\n    let { endpos } = outcome;\n    endpos += begin;\n    let line = startLine;\n    while (line < endLine) {\n        if (endpos >= state.bMarks[line] && endpos <= state.eMarks[line]) {\n            // line for end of block math found ...\n            // eslint-disable-next-line no-param-reassign\n            state.line = line + 1;\n            break;\n        }\n        line += 1;\n    }\n    if (!silent) {\n        const token = state.push(\"amsmath\", \"math\", 0);\n        token.block = true;\n        token.content = state.src.slice(begin, endpos);\n        token.meta = { environment, numbered };\n        token.map = [startLine, line];\n    }\n    return true;\n}\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}