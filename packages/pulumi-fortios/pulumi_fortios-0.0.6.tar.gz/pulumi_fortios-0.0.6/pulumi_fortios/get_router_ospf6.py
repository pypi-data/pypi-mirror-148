# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetRouterOspf6Result',
    'AwaitableGetRouterOspf6Result',
    'get_router_ospf6',
    'get_router_ospf6_output',
]

@pulumi.output_type
class GetRouterOspf6Result:
    """
    A collection of values returned by GetRouterOspf6.
    """
    def __init__(__self__, abr_type=None, areas=None, auto_cost_ref_bandwidth=None, bfd=None, default_information_metric=None, default_information_metric_type=None, default_information_originate=None, default_information_route_map=None, default_metric=None, id=None, log_neighbour_changes=None, ospf6_interfaces=None, passive_interfaces=None, redistributes=None, router_id=None, spf_timers=None, summary_addresses=None, vdomparam=None):
        if abr_type and not isinstance(abr_type, str):
            raise TypeError("Expected argument 'abr_type' to be a str")
        pulumi.set(__self__, "abr_type", abr_type)
        if areas and not isinstance(areas, list):
            raise TypeError("Expected argument 'areas' to be a list")
        pulumi.set(__self__, "areas", areas)
        if auto_cost_ref_bandwidth and not isinstance(auto_cost_ref_bandwidth, int):
            raise TypeError("Expected argument 'auto_cost_ref_bandwidth' to be a int")
        pulumi.set(__self__, "auto_cost_ref_bandwidth", auto_cost_ref_bandwidth)
        if bfd and not isinstance(bfd, str):
            raise TypeError("Expected argument 'bfd' to be a str")
        pulumi.set(__self__, "bfd", bfd)
        if default_information_metric and not isinstance(default_information_metric, int):
            raise TypeError("Expected argument 'default_information_metric' to be a int")
        pulumi.set(__self__, "default_information_metric", default_information_metric)
        if default_information_metric_type and not isinstance(default_information_metric_type, str):
            raise TypeError("Expected argument 'default_information_metric_type' to be a str")
        pulumi.set(__self__, "default_information_metric_type", default_information_metric_type)
        if default_information_originate and not isinstance(default_information_originate, str):
            raise TypeError("Expected argument 'default_information_originate' to be a str")
        pulumi.set(__self__, "default_information_originate", default_information_originate)
        if default_information_route_map and not isinstance(default_information_route_map, str):
            raise TypeError("Expected argument 'default_information_route_map' to be a str")
        pulumi.set(__self__, "default_information_route_map", default_information_route_map)
        if default_metric and not isinstance(default_metric, int):
            raise TypeError("Expected argument 'default_metric' to be a int")
        pulumi.set(__self__, "default_metric", default_metric)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if log_neighbour_changes and not isinstance(log_neighbour_changes, str):
            raise TypeError("Expected argument 'log_neighbour_changes' to be a str")
        pulumi.set(__self__, "log_neighbour_changes", log_neighbour_changes)
        if ospf6_interfaces and not isinstance(ospf6_interfaces, list):
            raise TypeError("Expected argument 'ospf6_interfaces' to be a list")
        pulumi.set(__self__, "ospf6_interfaces", ospf6_interfaces)
        if passive_interfaces and not isinstance(passive_interfaces, list):
            raise TypeError("Expected argument 'passive_interfaces' to be a list")
        pulumi.set(__self__, "passive_interfaces", passive_interfaces)
        if redistributes and not isinstance(redistributes, list):
            raise TypeError("Expected argument 'redistributes' to be a list")
        pulumi.set(__self__, "redistributes", redistributes)
        if router_id and not isinstance(router_id, str):
            raise TypeError("Expected argument 'router_id' to be a str")
        pulumi.set(__self__, "router_id", router_id)
        if spf_timers and not isinstance(spf_timers, str):
            raise TypeError("Expected argument 'spf_timers' to be a str")
        pulumi.set(__self__, "spf_timers", spf_timers)
        if summary_addresses and not isinstance(summary_addresses, list):
            raise TypeError("Expected argument 'summary_addresses' to be a list")
        pulumi.set(__self__, "summary_addresses", summary_addresses)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="abrType")
    def abr_type(self) -> str:
        """
        Area border router type.
        """
        return pulumi.get(self, "abr_type")

    @property
    @pulumi.getter
    def areas(self) -> Sequence['outputs.GetRouterOspf6AreaResult']:
        """
        OSPF6 area configuration. The structure of `area` block is documented below.
        """
        return pulumi.get(self, "areas")

    @property
    @pulumi.getter(name="autoCostRefBandwidth")
    def auto_cost_ref_bandwidth(self) -> int:
        """
        Reference bandwidth in terms of megabits per second.
        """
        return pulumi.get(self, "auto_cost_ref_bandwidth")

    @property
    @pulumi.getter
    def bfd(self) -> str:
        """
        Enable/disable Bidirectional Forwarding Detection (BFD).
        """
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter(name="defaultInformationMetric")
    def default_information_metric(self) -> int:
        """
        Default information metric.
        """
        return pulumi.get(self, "default_information_metric")

    @property
    @pulumi.getter(name="defaultInformationMetricType")
    def default_information_metric_type(self) -> str:
        """
        Default information metric type.
        """
        return pulumi.get(self, "default_information_metric_type")

    @property
    @pulumi.getter(name="defaultInformationOriginate")
    def default_information_originate(self) -> str:
        """
        Enable/disable generation of default route.
        """
        return pulumi.get(self, "default_information_originate")

    @property
    @pulumi.getter(name="defaultInformationRouteMap")
    def default_information_route_map(self) -> str:
        """
        Default information route map.
        """
        return pulumi.get(self, "default_information_route_map")

    @property
    @pulumi.getter(name="defaultMetric")
    def default_metric(self) -> int:
        """
        Default metric of redistribute routes.
        """
        return pulumi.get(self, "default_metric")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="logNeighbourChanges")
    def log_neighbour_changes(self) -> str:
        """
        Enable logging of OSPFv3 neighbour's changes
        """
        return pulumi.get(self, "log_neighbour_changes")

    @property
    @pulumi.getter(name="ospf6Interfaces")
    def ospf6_interfaces(self) -> Sequence['outputs.GetRouterOspf6Ospf6InterfaceResult']:
        """
        OSPF6 interface configuration. The structure of `ospf6_interface` block is documented below.
        """
        return pulumi.get(self, "ospf6_interfaces")

    @property
    @pulumi.getter(name="passiveInterfaces")
    def passive_interfaces(self) -> Sequence['outputs.GetRouterOspf6PassiveInterfaceResult']:
        """
        Passive interface configuration. The structure of `passive_interface` block is documented below.
        """
        return pulumi.get(self, "passive_interfaces")

    @property
    @pulumi.getter
    def redistributes(self) -> Sequence['outputs.GetRouterOspf6RedistributeResult']:
        """
        Redistribute configuration. The structure of `redistribute` block is documented below.
        """
        return pulumi.get(self, "redistributes")

    @property
    @pulumi.getter(name="routerId")
    def router_id(self) -> str:
        """
        A.B.C.D, in IPv4 address format.
        """
        return pulumi.get(self, "router_id")

    @property
    @pulumi.getter(name="spfTimers")
    def spf_timers(self) -> str:
        """
        SPF calculation frequency.
        """
        return pulumi.get(self, "spf_timers")

    @property
    @pulumi.getter(name="summaryAddresses")
    def summary_addresses(self) -> Sequence['outputs.GetRouterOspf6SummaryAddressResult']:
        """
        IPv6 address summary configuration. The structure of `summary_address` block is documented below.
        """
        return pulumi.get(self, "summary_addresses")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetRouterOspf6Result(GetRouterOspf6Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRouterOspf6Result(
            abr_type=self.abr_type,
            areas=self.areas,
            auto_cost_ref_bandwidth=self.auto_cost_ref_bandwidth,
            bfd=self.bfd,
            default_information_metric=self.default_information_metric,
            default_information_metric_type=self.default_information_metric_type,
            default_information_originate=self.default_information_originate,
            default_information_route_map=self.default_information_route_map,
            default_metric=self.default_metric,
            id=self.id,
            log_neighbour_changes=self.log_neighbour_changes,
            ospf6_interfaces=self.ospf6_interfaces,
            passive_interfaces=self.passive_interfaces,
            redistributes=self.redistributes,
            router_id=self.router_id,
            spf_timers=self.spf_timers,
            summary_addresses=self.summary_addresses,
            vdomparam=self.vdomparam)


def get_router_ospf6(vdomparam: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRouterOspf6Result:
    """
    Use this data source to get information on fortios router ospf6


    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['vdomparam'] = vdomparam
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('fortios:index/getRouterOspf6:GetRouterOspf6', __args__, opts=opts, typ=GetRouterOspf6Result).value

    return AwaitableGetRouterOspf6Result(
        abr_type=__ret__.abr_type,
        areas=__ret__.areas,
        auto_cost_ref_bandwidth=__ret__.auto_cost_ref_bandwidth,
        bfd=__ret__.bfd,
        default_information_metric=__ret__.default_information_metric,
        default_information_metric_type=__ret__.default_information_metric_type,
        default_information_originate=__ret__.default_information_originate,
        default_information_route_map=__ret__.default_information_route_map,
        default_metric=__ret__.default_metric,
        id=__ret__.id,
        log_neighbour_changes=__ret__.log_neighbour_changes,
        ospf6_interfaces=__ret__.ospf6_interfaces,
        passive_interfaces=__ret__.passive_interfaces,
        redistributes=__ret__.redistributes,
        router_id=__ret__.router_id,
        spf_timers=__ret__.spf_timers,
        summary_addresses=__ret__.summary_addresses,
        vdomparam=__ret__.vdomparam)


@_utilities.lift_output_func(get_router_ospf6)
def get_router_ospf6_output(vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRouterOspf6Result]:
    """
    Use this data source to get information on fortios router ospf6


    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...
