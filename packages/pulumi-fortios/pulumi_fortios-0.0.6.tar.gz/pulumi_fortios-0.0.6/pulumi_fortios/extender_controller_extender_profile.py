# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ExtenderControllerExtenderProfileArgs', 'ExtenderControllerExtenderProfile']

@pulumi.input_type
class ExtenderControllerExtenderProfileArgs:
    def __init__(__self__, *,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 bandwidth_limit: Optional[pulumi.Input[int]] = None,
                 cellular: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularArgs']] = None,
                 enforce_bandwidth: Optional[pulumi.Input[str]] = None,
                 extension: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 lan_extension: Optional[pulumi.Input['ExtenderControllerExtenderProfileLanExtensionArgs']] = None,
                 login_password: Optional[pulumi.Input[str]] = None,
                 login_password_change: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ExtenderControllerExtenderProfile resource.
        :param pulumi.Input[str] allowaccess: Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
        :param pulumi.Input[int] bandwidth_limit: FortiExtender LAN extension bandwidth limit (Mbps).
        :param pulumi.Input['ExtenderControllerExtenderProfileCellularArgs'] cellular: FortiExtender cellular configuration. The structure of `cellular` block is documented below.
        :param pulumi.Input[str] enforce_bandwidth: Enable/disable enforcement of bandwidth on LAN extension interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] extension: Extension option. Valid values: `wan-extension`, `lan-extension`.
        :param pulumi.Input[int] fosid: id
        :param pulumi.Input['ExtenderControllerExtenderProfileLanExtensionArgs'] lan_extension: FortiExtender lan extension configuration. The structure of `lan_extension` block is documented below.
        :param pulumi.Input[str] login_password: Set the managed extender's administrator password.
        :param pulumi.Input[str] login_password_change: Change or reset the administrator password of a managed extender (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
        :param pulumi.Input[str] model: Model. Valid values: `FX201E`, `FX211E`, `FX200F`, `FXA11F`, `FXE11F`, `FXA21F`, `FXE21F`, `FXA22F`, `FXE22F`, `FX212F`, `FX311F`, `FX312F`, `FX511F`, `FVG21F`, `FVA21F`, `FVG22F`, `FVA22F`, `FX04DA`.
        :param pulumi.Input[str] name: FortiExtender LAN extension backhaul name
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if allowaccess is not None:
            pulumi.set(__self__, "allowaccess", allowaccess)
        if bandwidth_limit is not None:
            pulumi.set(__self__, "bandwidth_limit", bandwidth_limit)
        if cellular is not None:
            pulumi.set(__self__, "cellular", cellular)
        if enforce_bandwidth is not None:
            pulumi.set(__self__, "enforce_bandwidth", enforce_bandwidth)
        if extension is not None:
            pulumi.set(__self__, "extension", extension)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if lan_extension is not None:
            pulumi.set(__self__, "lan_extension", lan_extension)
        if login_password is not None:
            pulumi.set(__self__, "login_password", login_password)
        if login_password_change is not None:
            pulumi.set(__self__, "login_password_change", login_password_change)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def allowaccess(self) -> Optional[pulumi.Input[str]]:
        """
        Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
        """
        return pulumi.get(self, "allowaccess")

    @allowaccess.setter
    def allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowaccess", value)

    @property
    @pulumi.getter(name="bandwidthLimit")
    def bandwidth_limit(self) -> Optional[pulumi.Input[int]]:
        """
        FortiExtender LAN extension bandwidth limit (Mbps).
        """
        return pulumi.get(self, "bandwidth_limit")

    @bandwidth_limit.setter
    def bandwidth_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_limit", value)

    @property
    @pulumi.getter
    def cellular(self) -> Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularArgs']]:
        """
        FortiExtender cellular configuration. The structure of `cellular` block is documented below.
        """
        return pulumi.get(self, "cellular")

    @cellular.setter
    def cellular(self, value: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularArgs']]):
        pulumi.set(self, "cellular", value)

    @property
    @pulumi.getter(name="enforceBandwidth")
    def enforce_bandwidth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable enforcement of bandwidth on LAN extension interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "enforce_bandwidth")

    @enforce_bandwidth.setter
    def enforce_bandwidth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enforce_bandwidth", value)

    @property
    @pulumi.getter
    def extension(self) -> Optional[pulumi.Input[str]]:
        """
        Extension option. Valid values: `wan-extension`, `lan-extension`.
        """
        return pulumi.get(self, "extension")

    @extension.setter
    def extension(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extension", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        id
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="lanExtension")
    def lan_extension(self) -> Optional[pulumi.Input['ExtenderControllerExtenderProfileLanExtensionArgs']]:
        """
        FortiExtender lan extension configuration. The structure of `lan_extension` block is documented below.
        """
        return pulumi.get(self, "lan_extension")

    @lan_extension.setter
    def lan_extension(self, value: Optional[pulumi.Input['ExtenderControllerExtenderProfileLanExtensionArgs']]):
        pulumi.set(self, "lan_extension", value)

    @property
    @pulumi.getter(name="loginPassword")
    def login_password(self) -> Optional[pulumi.Input[str]]:
        """
        Set the managed extender's administrator password.
        """
        return pulumi.get(self, "login_password")

    @login_password.setter
    def login_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_password", value)

    @property
    @pulumi.getter(name="loginPasswordChange")
    def login_password_change(self) -> Optional[pulumi.Input[str]]:
        """
        Change or reset the administrator password of a managed extender (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
        """
        return pulumi.get(self, "login_password_change")

    @login_password_change.setter
    def login_password_change(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_password_change", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[str]]:
        """
        Model. Valid values: `FX201E`, `FX211E`, `FX200F`, `FXA11F`, `FXE11F`, `FXA21F`, `FXE21F`, `FXA22F`, `FXE22F`, `FX212F`, `FX311F`, `FX312F`, `FX511F`, `FVG21F`, `FVA21F`, `FVG22F`, `FVA22F`, `FX04DA`.
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender LAN extension backhaul name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _ExtenderControllerExtenderProfileState:
    def __init__(__self__, *,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 bandwidth_limit: Optional[pulumi.Input[int]] = None,
                 cellular: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularArgs']] = None,
                 enforce_bandwidth: Optional[pulumi.Input[str]] = None,
                 extension: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 lan_extension: Optional[pulumi.Input['ExtenderControllerExtenderProfileLanExtensionArgs']] = None,
                 login_password: Optional[pulumi.Input[str]] = None,
                 login_password_change: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ExtenderControllerExtenderProfile resources.
        :param pulumi.Input[str] allowaccess: Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
        :param pulumi.Input[int] bandwidth_limit: FortiExtender LAN extension bandwidth limit (Mbps).
        :param pulumi.Input['ExtenderControllerExtenderProfileCellularArgs'] cellular: FortiExtender cellular configuration. The structure of `cellular` block is documented below.
        :param pulumi.Input[str] enforce_bandwidth: Enable/disable enforcement of bandwidth on LAN extension interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] extension: Extension option. Valid values: `wan-extension`, `lan-extension`.
        :param pulumi.Input[int] fosid: id
        :param pulumi.Input['ExtenderControllerExtenderProfileLanExtensionArgs'] lan_extension: FortiExtender lan extension configuration. The structure of `lan_extension` block is documented below.
        :param pulumi.Input[str] login_password: Set the managed extender's administrator password.
        :param pulumi.Input[str] login_password_change: Change or reset the administrator password of a managed extender (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
        :param pulumi.Input[str] model: Model. Valid values: `FX201E`, `FX211E`, `FX200F`, `FXA11F`, `FXE11F`, `FXA21F`, `FXE21F`, `FXA22F`, `FXE22F`, `FX212F`, `FX311F`, `FX312F`, `FX511F`, `FVG21F`, `FVA21F`, `FVG22F`, `FVA22F`, `FX04DA`.
        :param pulumi.Input[str] name: FortiExtender LAN extension backhaul name
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if allowaccess is not None:
            pulumi.set(__self__, "allowaccess", allowaccess)
        if bandwidth_limit is not None:
            pulumi.set(__self__, "bandwidth_limit", bandwidth_limit)
        if cellular is not None:
            pulumi.set(__self__, "cellular", cellular)
        if enforce_bandwidth is not None:
            pulumi.set(__self__, "enforce_bandwidth", enforce_bandwidth)
        if extension is not None:
            pulumi.set(__self__, "extension", extension)
        if fosid is not None:
            pulumi.set(__self__, "fosid", fosid)
        if lan_extension is not None:
            pulumi.set(__self__, "lan_extension", lan_extension)
        if login_password is not None:
            pulumi.set(__self__, "login_password", login_password)
        if login_password_change is not None:
            pulumi.set(__self__, "login_password_change", login_password_change)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def allowaccess(self) -> Optional[pulumi.Input[str]]:
        """
        Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
        """
        return pulumi.get(self, "allowaccess")

    @allowaccess.setter
    def allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowaccess", value)

    @property
    @pulumi.getter(name="bandwidthLimit")
    def bandwidth_limit(self) -> Optional[pulumi.Input[int]]:
        """
        FortiExtender LAN extension bandwidth limit (Mbps).
        """
        return pulumi.get(self, "bandwidth_limit")

    @bandwidth_limit.setter
    def bandwidth_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_limit", value)

    @property
    @pulumi.getter
    def cellular(self) -> Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularArgs']]:
        """
        FortiExtender cellular configuration. The structure of `cellular` block is documented below.
        """
        return pulumi.get(self, "cellular")

    @cellular.setter
    def cellular(self, value: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularArgs']]):
        pulumi.set(self, "cellular", value)

    @property
    @pulumi.getter(name="enforceBandwidth")
    def enforce_bandwidth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable enforcement of bandwidth on LAN extension interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "enforce_bandwidth")

    @enforce_bandwidth.setter
    def enforce_bandwidth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enforce_bandwidth", value)

    @property
    @pulumi.getter
    def extension(self) -> Optional[pulumi.Input[str]]:
        """
        Extension option. Valid values: `wan-extension`, `lan-extension`.
        """
        return pulumi.get(self, "extension")

    @extension.setter
    def extension(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extension", value)

    @property
    @pulumi.getter
    def fosid(self) -> Optional[pulumi.Input[int]]:
        """
        id
        """
        return pulumi.get(self, "fosid")

    @fosid.setter
    def fosid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fosid", value)

    @property
    @pulumi.getter(name="lanExtension")
    def lan_extension(self) -> Optional[pulumi.Input['ExtenderControllerExtenderProfileLanExtensionArgs']]:
        """
        FortiExtender lan extension configuration. The structure of `lan_extension` block is documented below.
        """
        return pulumi.get(self, "lan_extension")

    @lan_extension.setter
    def lan_extension(self, value: Optional[pulumi.Input['ExtenderControllerExtenderProfileLanExtensionArgs']]):
        pulumi.set(self, "lan_extension", value)

    @property
    @pulumi.getter(name="loginPassword")
    def login_password(self) -> Optional[pulumi.Input[str]]:
        """
        Set the managed extender's administrator password.
        """
        return pulumi.get(self, "login_password")

    @login_password.setter
    def login_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_password", value)

    @property
    @pulumi.getter(name="loginPasswordChange")
    def login_password_change(self) -> Optional[pulumi.Input[str]]:
        """
        Change or reset the administrator password of a managed extender (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
        """
        return pulumi.get(self, "login_password_change")

    @login_password_change.setter
    def login_password_change(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_password_change", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[str]]:
        """
        Model. Valid values: `FX201E`, `FX211E`, `FX200F`, `FXA11F`, `FXE11F`, `FXA21F`, `FXE21F`, `FXA22F`, `FXE22F`, `FX212F`, `FX311F`, `FX312F`, `FX511F`, `FVG21F`, `FVA21F`, `FVG22F`, `FVA22F`, `FX04DA`.
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender LAN extension backhaul name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class ExtenderControllerExtenderProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 bandwidth_limit: Optional[pulumi.Input[int]] = None,
                 cellular: Optional[pulumi.Input[pulumi.InputType['ExtenderControllerExtenderProfileCellularArgs']]] = None,
                 enforce_bandwidth: Optional[pulumi.Input[str]] = None,
                 extension: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 lan_extension: Optional[pulumi.Input[pulumi.InputType['ExtenderControllerExtenderProfileLanExtensionArgs']]] = None,
                 login_password: Optional[pulumi.Input[str]] = None,
                 login_password_change: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        FortiExtender extender profile configuration. Applies to FortiOS Version `>= 7.0.2`.

        ## Import

        ExtenderController ExtenderProfile can be imported using any of these accepted formats

        ```sh
         $ pulumi import fortios:index/extenderControllerExtenderProfile:ExtenderControllerExtenderProfile labelname {{name}}
        ```

         If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
         $ pulumi import fortios:index/extenderControllerExtenderProfile:ExtenderControllerExtenderProfile labelname {{name}}
        ```

         $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] allowaccess: Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
        :param pulumi.Input[int] bandwidth_limit: FortiExtender LAN extension bandwidth limit (Mbps).
        :param pulumi.Input[pulumi.InputType['ExtenderControllerExtenderProfileCellularArgs']] cellular: FortiExtender cellular configuration. The structure of `cellular` block is documented below.
        :param pulumi.Input[str] enforce_bandwidth: Enable/disable enforcement of bandwidth on LAN extension interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] extension: Extension option. Valid values: `wan-extension`, `lan-extension`.
        :param pulumi.Input[int] fosid: id
        :param pulumi.Input[pulumi.InputType['ExtenderControllerExtenderProfileLanExtensionArgs']] lan_extension: FortiExtender lan extension configuration. The structure of `lan_extension` block is documented below.
        :param pulumi.Input[str] login_password: Set the managed extender's administrator password.
        :param pulumi.Input[str] login_password_change: Change or reset the administrator password of a managed extender (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
        :param pulumi.Input[str] model: Model. Valid values: `FX201E`, `FX211E`, `FX200F`, `FXA11F`, `FXE11F`, `FXA21F`, `FXE21F`, `FXA22F`, `FXE22F`, `FX212F`, `FX311F`, `FX312F`, `FX511F`, `FVG21F`, `FVA21F`, `FVG22F`, `FVA22F`, `FX04DA`.
        :param pulumi.Input[str] name: FortiExtender LAN extension backhaul name
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ExtenderControllerExtenderProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        FortiExtender extender profile configuration. Applies to FortiOS Version `>= 7.0.2`.

        ## Import

        ExtenderController ExtenderProfile can be imported using any of these accepted formats

        ```sh
         $ pulumi import fortios:index/extenderControllerExtenderProfile:ExtenderControllerExtenderProfile labelname {{name}}
        ```

         If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
         $ pulumi import fortios:index/extenderControllerExtenderProfile:ExtenderControllerExtenderProfile labelname {{name}}
        ```

         $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param ExtenderControllerExtenderProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExtenderControllerExtenderProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 bandwidth_limit: Optional[pulumi.Input[int]] = None,
                 cellular: Optional[pulumi.Input[pulumi.InputType['ExtenderControllerExtenderProfileCellularArgs']]] = None,
                 enforce_bandwidth: Optional[pulumi.Input[str]] = None,
                 extension: Optional[pulumi.Input[str]] = None,
                 fosid: Optional[pulumi.Input[int]] = None,
                 lan_extension: Optional[pulumi.Input[pulumi.InputType['ExtenderControllerExtenderProfileLanExtensionArgs']]] = None,
                 login_password: Optional[pulumi.Input[str]] = None,
                 login_password_change: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExtenderControllerExtenderProfileArgs.__new__(ExtenderControllerExtenderProfileArgs)

            __props__.__dict__["allowaccess"] = allowaccess
            __props__.__dict__["bandwidth_limit"] = bandwidth_limit
            __props__.__dict__["cellular"] = cellular
            __props__.__dict__["enforce_bandwidth"] = enforce_bandwidth
            __props__.__dict__["extension"] = extension
            __props__.__dict__["fosid"] = fosid
            __props__.__dict__["lan_extension"] = lan_extension
            __props__.__dict__["login_password"] = login_password
            __props__.__dict__["login_password_change"] = login_password_change
            __props__.__dict__["model"] = model
            __props__.__dict__["name"] = name
            __props__.__dict__["vdomparam"] = vdomparam
        super(ExtenderControllerExtenderProfile, __self__).__init__(
            'fortios:index/extenderControllerExtenderProfile:ExtenderControllerExtenderProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allowaccess: Optional[pulumi.Input[str]] = None,
            bandwidth_limit: Optional[pulumi.Input[int]] = None,
            cellular: Optional[pulumi.Input[pulumi.InputType['ExtenderControllerExtenderProfileCellularArgs']]] = None,
            enforce_bandwidth: Optional[pulumi.Input[str]] = None,
            extension: Optional[pulumi.Input[str]] = None,
            fosid: Optional[pulumi.Input[int]] = None,
            lan_extension: Optional[pulumi.Input[pulumi.InputType['ExtenderControllerExtenderProfileLanExtensionArgs']]] = None,
            login_password: Optional[pulumi.Input[str]] = None,
            login_password_change: Optional[pulumi.Input[str]] = None,
            model: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'ExtenderControllerExtenderProfile':
        """
        Get an existing ExtenderControllerExtenderProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] allowaccess: Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
        :param pulumi.Input[int] bandwidth_limit: FortiExtender LAN extension bandwidth limit (Mbps).
        :param pulumi.Input[pulumi.InputType['ExtenderControllerExtenderProfileCellularArgs']] cellular: FortiExtender cellular configuration. The structure of `cellular` block is documented below.
        :param pulumi.Input[str] enforce_bandwidth: Enable/disable enforcement of bandwidth on LAN extension interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] extension: Extension option. Valid values: `wan-extension`, `lan-extension`.
        :param pulumi.Input[int] fosid: id
        :param pulumi.Input[pulumi.InputType['ExtenderControllerExtenderProfileLanExtensionArgs']] lan_extension: FortiExtender lan extension configuration. The structure of `lan_extension` block is documented below.
        :param pulumi.Input[str] login_password: Set the managed extender's administrator password.
        :param pulumi.Input[str] login_password_change: Change or reset the administrator password of a managed extender (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
        :param pulumi.Input[str] model: Model. Valid values: `FX201E`, `FX211E`, `FX200F`, `FXA11F`, `FXE11F`, `FXA21F`, `FXE21F`, `FXA22F`, `FXE22F`, `FX212F`, `FX311F`, `FX312F`, `FX511F`, `FVG21F`, `FVA21F`, `FVG22F`, `FVA22F`, `FX04DA`.
        :param pulumi.Input[str] name: FortiExtender LAN extension backhaul name
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ExtenderControllerExtenderProfileState.__new__(_ExtenderControllerExtenderProfileState)

        __props__.__dict__["allowaccess"] = allowaccess
        __props__.__dict__["bandwidth_limit"] = bandwidth_limit
        __props__.__dict__["cellular"] = cellular
        __props__.__dict__["enforce_bandwidth"] = enforce_bandwidth
        __props__.__dict__["extension"] = extension
        __props__.__dict__["fosid"] = fosid
        __props__.__dict__["lan_extension"] = lan_extension
        __props__.__dict__["login_password"] = login_password
        __props__.__dict__["login_password_change"] = login_password_change
        __props__.__dict__["model"] = model
        __props__.__dict__["name"] = name
        __props__.__dict__["vdomparam"] = vdomparam
        return ExtenderControllerExtenderProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def allowaccess(self) -> pulumi.Output[str]:
        """
        Control management access to the managed extender. Separate entries with a space. Valid values: `ping`, `telnet`, `http`, `https`, `ssh`, `snmp`.
        """
        return pulumi.get(self, "allowaccess")

    @property
    @pulumi.getter(name="bandwidthLimit")
    def bandwidth_limit(self) -> pulumi.Output[int]:
        """
        FortiExtender LAN extension bandwidth limit (Mbps).
        """
        return pulumi.get(self, "bandwidth_limit")

    @property
    @pulumi.getter
    def cellular(self) -> pulumi.Output[Optional['outputs.ExtenderControllerExtenderProfileCellular']]:
        """
        FortiExtender cellular configuration. The structure of `cellular` block is documented below.
        """
        return pulumi.get(self, "cellular")

    @property
    @pulumi.getter(name="enforceBandwidth")
    def enforce_bandwidth(self) -> pulumi.Output[str]:
        """
        Enable/disable enforcement of bandwidth on LAN extension interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "enforce_bandwidth")

    @property
    @pulumi.getter
    def extension(self) -> pulumi.Output[str]:
        """
        Extension option. Valid values: `wan-extension`, `lan-extension`.
        """
        return pulumi.get(self, "extension")

    @property
    @pulumi.getter
    def fosid(self) -> pulumi.Output[int]:
        """
        id
        """
        return pulumi.get(self, "fosid")

    @property
    @pulumi.getter(name="lanExtension")
    def lan_extension(self) -> pulumi.Output[Optional['outputs.ExtenderControllerExtenderProfileLanExtension']]:
        """
        FortiExtender lan extension configuration. The structure of `lan_extension` block is documented below.
        """
        return pulumi.get(self, "lan_extension")

    @property
    @pulumi.getter(name="loginPassword")
    def login_password(self) -> pulumi.Output[Optional[str]]:
        """
        Set the managed extender's administrator password.
        """
        return pulumi.get(self, "login_password")

    @property
    @pulumi.getter(name="loginPasswordChange")
    def login_password_change(self) -> pulumi.Output[str]:
        """
        Change or reset the administrator password of a managed extender (yes, default, or no, default = no). Valid values: `yes`, `default`, `no`.
        """
        return pulumi.get(self, "login_password_change")

    @property
    @pulumi.getter
    def model(self) -> pulumi.Output[str]:
        """
        Model. Valid values: `FX201E`, `FX211E`, `FX200F`, `FXA11F`, `FXE11F`, `FXA21F`, `FXE21F`, `FXA22F`, `FXE22F`, `FX212F`, `FX311F`, `FX312F`, `FX511F`, `FVG21F`, `FVA21F`, `FVG22F`, `FVA22F`, `FX04DA`.
        """
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        FortiExtender LAN extension backhaul name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

