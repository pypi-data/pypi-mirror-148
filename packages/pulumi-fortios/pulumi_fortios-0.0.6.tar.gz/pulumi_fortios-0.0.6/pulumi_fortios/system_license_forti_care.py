# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SystemLicenseFortiCareArgs', 'SystemLicenseFortiCare']

@pulumi.input_type
class SystemLicenseFortiCareArgs:
    def __init__(__self__, *,
                 registration_code: pulumi.Input[str]):
        """
        The set of arguments for constructing a SystemLicenseFortiCare resource.
        :param pulumi.Input[str] registration_code: Registration code.
        """
        pulumi.set(__self__, "registration_code", registration_code)

    @property
    @pulumi.getter(name="registrationCode")
    def registration_code(self) -> pulumi.Input[str]:
        """
        Registration code.
        """
        return pulumi.get(self, "registration_code")

    @registration_code.setter
    def registration_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "registration_code", value)


@pulumi.input_type
class _SystemLicenseFortiCareState:
    def __init__(__self__, *,
                 registration_code: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemLicenseFortiCare resources.
        :param pulumi.Input[str] registration_code: Registration code.
        """
        if registration_code is not None:
            pulumi.set(__self__, "registration_code", registration_code)

    @property
    @pulumi.getter(name="registrationCode")
    def registration_code(self) -> Optional[pulumi.Input[str]]:
        """
        Registration code.
        """
        return pulumi.get(self, "registration_code")

    @registration_code.setter
    def registration_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registration_code", value)


class SystemLicenseFortiCare(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 registration_code: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to add a FortiCare license for FortiOS.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_fortios as fortios

        test2 = fortios.SystemLicenseFortiCare("test2", registration_code="license")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] registration_code: Registration code.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SystemLicenseFortiCareArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to add a FortiCare license for FortiOS.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_fortios as fortios

        test2 = fortios.SystemLicenseFortiCare("test2", registration_code="license")
        ```

        :param str resource_name: The name of the resource.
        :param SystemLicenseFortiCareArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemLicenseFortiCareArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 registration_code: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemLicenseFortiCareArgs.__new__(SystemLicenseFortiCareArgs)

            if registration_code is None and not opts.urn:
                raise TypeError("Missing required property 'registration_code'")
            __props__.__dict__["registration_code"] = registration_code
        super(SystemLicenseFortiCare, __self__).__init__(
            'fortios:index/systemLicenseFortiCare:SystemLicenseFortiCare',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            registration_code: Optional[pulumi.Input[str]] = None) -> 'SystemLicenseFortiCare':
        """
        Get an existing SystemLicenseFortiCare resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] registration_code: Registration code.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemLicenseFortiCareState.__new__(_SystemLicenseFortiCareState)

        __props__.__dict__["registration_code"] = registration_code
        return SystemLicenseFortiCare(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="registrationCode")
    def registration_code(self) -> pulumi.Output[str]:
        """
        Registration code.
        """
        return pulumi.get(self, "registration_code")

