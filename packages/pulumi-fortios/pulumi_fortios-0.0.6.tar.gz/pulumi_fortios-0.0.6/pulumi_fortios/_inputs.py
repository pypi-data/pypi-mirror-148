# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'AntivirusProfileCifsArgs',
    'AntivirusProfileContentDisarmArgs',
    'AntivirusProfileExternalBlocklistArgs',
    'AntivirusProfileFtpArgs',
    'AntivirusProfileHttpArgs',
    'AntivirusProfileImapArgs',
    'AntivirusProfileMapiArgs',
    'AntivirusProfileNacQuarArgs',
    'AntivirusProfileNntpArgs',
    'AntivirusProfileOutbreakPreventionArgs',
    'AntivirusProfilePop3Args',
    'AntivirusProfileSmbArgs',
    'AntivirusProfileSmtpArgs',
    'AntivirusProfileSshArgs',
    'ApplicationGroupApplicationArgs',
    'ApplicationGroupCategoryArgs',
    'ApplicationGroupRiskArgs',
    'ApplicationListDefaultNetworkServiceArgs',
    'ApplicationListEntryArgs',
    'ApplicationListEntryApplicationArgs',
    'ApplicationListEntryCategoryArgs',
    'ApplicationListEntryExclusionArgs',
    'ApplicationListEntryParameterArgs',
    'ApplicationListEntryParameterMemberArgs',
    'ApplicationListEntryRiskArgs',
    'ApplicationListEntrySubCategoryArgs',
    'ApplicationNameMetadataArgs',
    'ApplicationNameParameterArgs',
    'AuthenticationRuleDstaddr6Args',
    'AuthenticationRuleDstaddrArgs',
    'AuthenticationRuleSrcaddr6Args',
    'AuthenticationRuleSrcaddrArgs',
    'AuthenticationRuleSrcintfArgs',
    'AuthenticationSchemeUserDatabaseArgs',
    'AuthenticationSettingDevRangeArgs',
    'AuthenticationSettingUserCertCaArgs',
    'CifsProfileFileFilterArgs',
    'CifsProfileFileFilterEntryArgs',
    'CifsProfileFileFilterEntryFileTypeArgs',
    'CifsProfileServerKeytabArgs',
    'DlpFilepatternEntryArgs',
    'DlpSensorFilterArgs',
    'DlpSensorFilterFpSensitivityArgs',
    'DlpSensorFilterSensitivityArgs',
    'DnsfilterDomainFilterEntryArgs',
    'DnsfilterProfileDnsTranslationArgs',
    'DnsfilterProfileDomainFilterArgs',
    'DnsfilterProfileExternalIpBlocklistArgs',
    'DnsfilterProfileFtgdDnsArgs',
    'DnsfilterProfileFtgdDnsFilterArgs',
    'DpdkGlobalInterfaceArgs',
    'EmailfilterBlockAllowListEntryArgs',
    'EmailfilterBwlEntryArgs',
    'EmailfilterBwordEntryArgs',
    'EmailfilterDnsblEntryArgs',
    'EmailfilterIptrustEntryArgs',
    'EmailfilterMheaderEntryArgs',
    'EmailfilterProfileFileFilterArgs',
    'EmailfilterProfileFileFilterEntryArgs',
    'EmailfilterProfileFileFilterEntryFileTypeArgs',
    'EmailfilterProfileGmailArgs',
    'EmailfilterProfileImapArgs',
    'EmailfilterProfileMapiArgs',
    'EmailfilterProfileMsnHotmailArgs',
    'EmailfilterProfileOtherWebmailsArgs',
    'EmailfilterProfilePop3Args',
    'EmailfilterProfileSmtpArgs',
    'EmailfilterProfileYahooMailArgs',
    'EndpointControlProfileDeviceGroupArgs',
    'EndpointControlProfileForticlientAndroidSettingsArgs',
    'EndpointControlProfileForticlientAndroidSettingsForticlientVpnSettingArgs',
    'EndpointControlProfileForticlientIosSettingsArgs',
    'EndpointControlProfileForticlientIosSettingsClientVpnSettingArgs',
    'EndpointControlProfileForticlientWinmacSettingsArgs',
    'EndpointControlProfileForticlientWinmacSettingsForticlientEmsEntryArgs',
    'EndpointControlProfileForticlientWinmacSettingsForticlientOperatingSystemArgs',
    'EndpointControlProfileForticlientWinmacSettingsForticlientOwnFileArgs',
    'EndpointControlProfileForticlientWinmacSettingsForticlientRegistryEntryArgs',
    'EndpointControlProfileForticlientWinmacSettingsForticlientRunningAppArgs',
    'EndpointControlProfileOnNetAddrArgs',
    'EndpointControlProfileSrcAddrArgs',
    'EndpointControlProfileUserArgs',
    'EndpointControlProfileUserGroupArgs',
    'ExtenderControllerExtender1ControllerReportArgs',
    'ExtenderControllerExtender1Modem1Args',
    'ExtenderControllerExtender1Modem1AutoSwitchArgs',
    'ExtenderControllerExtender1Modem2Args',
    'ExtenderControllerExtender1Modem2AutoSwitchArgs',
    'ExtenderControllerExtenderControllerReportArgs',
    'ExtenderControllerExtenderModem1Args',
    'ExtenderControllerExtenderModem1AutoSwitchArgs',
    'ExtenderControllerExtenderModem2Args',
    'ExtenderControllerExtenderModem2AutoSwitchArgs',
    'ExtenderControllerExtenderProfileCellularArgs',
    'ExtenderControllerExtenderProfileCellularControllerReportArgs',
    'ExtenderControllerExtenderProfileCellularDataplanArgs',
    'ExtenderControllerExtenderProfileCellularModem1Args',
    'ExtenderControllerExtenderProfileCellularModem1AutoSwitchArgs',
    'ExtenderControllerExtenderProfileCellularModem2Args',
    'ExtenderControllerExtenderProfileCellularModem2AutoSwitchArgs',
    'ExtenderControllerExtenderProfileCellularSmsNotificationArgs',
    'ExtenderControllerExtenderProfileCellularSmsNotificationAlertArgs',
    'ExtenderControllerExtenderProfileCellularSmsNotificationReceiverArgs',
    'ExtenderControllerExtenderProfileLanExtensionArgs',
    'ExtenderControllerExtenderProfileLanExtensionBackhaulArgs',
    'ExtenderControllerExtenderWanExtensionArgs',
    'FileFilterProfileRuleArgs',
    'FileFilterProfileRuleFileTypeArgs',
    'FirewallAccessProxy6ApiGateway6Args',
    'FirewallAccessProxy6ApiGateway6RealserverArgs',
    'FirewallAccessProxy6ApiGateway6RealserverSshHostKeyArgs',
    'FirewallAccessProxy6ApiGateway6SslCipherSuiteArgs',
    'FirewallAccessProxy6ApiGatewayArgs',
    'FirewallAccessProxy6ApiGatewayRealserverArgs',
    'FirewallAccessProxy6ApiGatewayRealserverSshHostKeyArgs',
    'FirewallAccessProxy6ApiGatewaySslCipherSuiteArgs',
    'FirewallAccessProxyApiGateway6Args',
    'FirewallAccessProxyApiGateway6RealserverArgs',
    'FirewallAccessProxyApiGateway6RealserverSshHostKeyArgs',
    'FirewallAccessProxyApiGateway6SslCipherSuiteArgs',
    'FirewallAccessProxyApiGatewayArgs',
    'FirewallAccessProxyApiGatewayRealserverArgs',
    'FirewallAccessProxyApiGatewayRealserverSshHostKeyArgs',
    'FirewallAccessProxyApiGatewaySslCipherSuiteArgs',
    'FirewallAccessProxySshClientCertCertExtensionArgs',
    'FirewallAddress6ListArgs',
    'FirewallAddress6MacaddrArgs',
    'FirewallAddress6SubnetSegmentArgs',
    'FirewallAddress6TaggingArgs',
    'FirewallAddress6TaggingTagArgs',
    'FirewallAddress6TemplateSubnetSegmentArgs',
    'FirewallAddress6TemplateSubnetSegmentValueArgs',
    'FirewallAddressFssoGroupArgs',
    'FirewallAddressListArgs',
    'FirewallAddressMacaddrArgs',
    'FirewallAddressTaggingArgs',
    'FirewallAddressTaggingTagArgs',
    'FirewallAddrgrp6MemberArgs',
    'FirewallAddrgrp6TaggingArgs',
    'FirewallAddrgrp6TaggingTagArgs',
    'FirewallAddrgrpExcludeMemberArgs',
    'FirewallAddrgrpMemberArgs',
    'FirewallAddrgrpTaggingArgs',
    'FirewallAddrgrpTaggingTagArgs',
    'FirewallAuthPortalGroupArgs',
    'FirewallCentralSnatMapDstAddr6Args',
    'FirewallCentralSnatMapDstAddrArgs',
    'FirewallCentralSnatMapDstintfArgs',
    'FirewallCentralSnatMapNatIppool6Args',
    'FirewallCentralSnatMapNatIppoolArgs',
    'FirewallCentralSnatMapOrigAddr6Args',
    'FirewallCentralSnatMapOrigAddrArgs',
    'FirewallCentralSnatMapSrcintfArgs',
    'FirewallConsolidatedPolicyAppCategoryArgs',
    'FirewallConsolidatedPolicyAppGroupArgs',
    'FirewallConsolidatedPolicyApplicationArgs',
    'FirewallConsolidatedPolicyDstaddr4Args',
    'FirewallConsolidatedPolicyDstaddr6Args',
    'FirewallConsolidatedPolicyDstintfArgs',
    'FirewallConsolidatedPolicyFssoGroupArgs',
    'FirewallConsolidatedPolicyGroupArgs',
    'FirewallConsolidatedPolicyInternetServiceCustomArgs',
    'FirewallConsolidatedPolicyInternetServiceCustomGroupArgs',
    'FirewallConsolidatedPolicyInternetServiceGroupArgs',
    'FirewallConsolidatedPolicyInternetServiceIdArgs',
    'FirewallConsolidatedPolicyInternetServiceNameArgs',
    'FirewallConsolidatedPolicyInternetServiceSrcCustomArgs',
    'FirewallConsolidatedPolicyInternetServiceSrcCustomGroupArgs',
    'FirewallConsolidatedPolicyInternetServiceSrcGroupArgs',
    'FirewallConsolidatedPolicyInternetServiceSrcIdArgs',
    'FirewallConsolidatedPolicyInternetServiceSrcNameArgs',
    'FirewallConsolidatedPolicyPoolname4Args',
    'FirewallConsolidatedPolicyPoolname6Args',
    'FirewallConsolidatedPolicyServiceArgs',
    'FirewallConsolidatedPolicySrcaddr4Args',
    'FirewallConsolidatedPolicySrcaddr6Args',
    'FirewallConsolidatedPolicySrcintfArgs',
    'FirewallConsolidatedPolicyUrlCategoryArgs',
    'FirewallConsolidatedPolicyUserArgs',
    'FirewallCountryRegionArgs',
    'FirewallDecryptedTrafficMirrorInterfaceArgs',
    'FirewallDosPolicy6AnomalyArgs',
    'FirewallDosPolicy6DstaddrArgs',
    'FirewallDosPolicy6ServiceArgs',
    'FirewallDosPolicy6SrcaddrArgs',
    'FirewallDosPolicyAnomalyArgs',
    'FirewallDosPolicyDstaddrArgs',
    'FirewallDosPolicyServiceArgs',
    'FirewallDosPolicySrcaddrArgs',
    'FirewallIdentityBasedRouteRuleArgs',
    'FirewallIdentityBasedRouteRuleGroupArgs',
    'FirewallInterfacePolicy6Dstaddr6Args',
    'FirewallInterfacePolicy6Service6Args',
    'FirewallInterfacePolicy6Srcaddr6Args',
    'FirewallInterfacePolicyDstaddrArgs',
    'FirewallInterfacePolicyServiceArgs',
    'FirewallInterfacePolicySrcaddrArgs',
    'FirewallInternetServiceAdditionEntryArgs',
    'FirewallInternetServiceAdditionEntryPortRangeArgs',
    'FirewallInternetServiceCustomEntryArgs',
    'FirewallInternetServiceCustomEntryDstArgs',
    'FirewallInternetServiceCustomEntryPortRangeArgs',
    'FirewallInternetServiceCustomGroupMemberArgs',
    'FirewallInternetServiceDefinitionEntryArgs',
    'FirewallInternetServiceDefinitionEntryPortRangeArgs',
    'FirewallInternetServiceExtensionDisableEntryArgs',
    'FirewallInternetServiceExtensionDisableEntryIpRangeArgs',
    'FirewallInternetServiceExtensionDisableEntryPortRangeArgs',
    'FirewallInternetServiceExtensionEntryArgs',
    'FirewallInternetServiceExtensionEntryDstArgs',
    'FirewallInternetServiceExtensionEntryPortRangeArgs',
    'FirewallInternetServiceGroupMemberArgs',
    'FirewallLocalInPolicy6DstaddrArgs',
    'FirewallLocalInPolicy6ServiceArgs',
    'FirewallLocalInPolicy6SrcaddrArgs',
    'FirewallLocalInPolicyDstaddrArgs',
    'FirewallLocalInPolicyServiceArgs',
    'FirewallLocalInPolicySrcaddrArgs',
    'FirewallMulticastAddress6TaggingArgs',
    'FirewallMulticastAddress6TaggingTagArgs',
    'FirewallMulticastAddressTaggingArgs',
    'FirewallMulticastAddressTaggingTagArgs',
    'FirewallMulticastPolicy6DstaddrArgs',
    'FirewallMulticastPolicy6SrcaddrArgs',
    'FirewallMulticastPolicyDstaddrArgs',
    'FirewallMulticastPolicySrcaddrArgs',
    'FirewallPolicy46DstaddrArgs',
    'FirewallPolicy46PoolnameArgs',
    'FirewallPolicy46ServiceArgs',
    'FirewallPolicy46SrcaddrArgs',
    'FirewallPolicy64DstaddrArgs',
    'FirewallPolicy64PoolnameArgs',
    'FirewallPolicy64ServiceArgs',
    'FirewallPolicy64SrcaddrArgs',
    'FirewallPolicy6AppCategoryArgs',
    'FirewallPolicy6AppGroupArgs',
    'FirewallPolicy6ApplicationArgs',
    'FirewallPolicy6CustomLogFieldArgs',
    'FirewallPolicy6DeviceArgs',
    'FirewallPolicy6DstaddrArgs',
    'FirewallPolicy6DstintfArgs',
    'FirewallPolicy6FssoGroupArgs',
    'FirewallPolicy6GroupArgs',
    'FirewallPolicy6PoolnameArgs',
    'FirewallPolicy6ServiceArgs',
    'FirewallPolicy6SrcaddrArgs',
    'FirewallPolicy6SrcintfArgs',
    'FirewallPolicy6SslMirrorIntfArgs',
    'FirewallPolicy6UrlCategoryArgs',
    'FirewallPolicy6UserArgs',
    'FirewallPolicyAppCategoryArgs',
    'FirewallPolicyAppGroupArgs',
    'FirewallPolicyApplicationArgs',
    'FirewallPolicyCustomLogFieldArgs',
    'FirewallPolicyDeviceArgs',
    'FirewallPolicyDstaddr6Args',
    'FirewallPolicyDstaddrArgs',
    'FirewallPolicyDstintfArgs',
    'FirewallPolicyFssoGroupArgs',
    'FirewallPolicyGroupArgs',
    'FirewallPolicyInternetServiceCustomArgs',
    'FirewallPolicyInternetServiceCustomGroupArgs',
    'FirewallPolicyInternetServiceGroupArgs',
    'FirewallPolicyInternetServiceIdArgs',
    'FirewallPolicyInternetServiceNameArgs',
    'FirewallPolicyInternetServiceSrcCustomArgs',
    'FirewallPolicyInternetServiceSrcCustomGroupArgs',
    'FirewallPolicyInternetServiceSrcGroupArgs',
    'FirewallPolicyInternetServiceSrcIdArgs',
    'FirewallPolicyInternetServiceSrcNameArgs',
    'FirewallPolicyNtlmEnabledBrowserArgs',
    'FirewallPolicyPoolname6Args',
    'FirewallPolicyPoolnameArgs',
    'FirewallPolicyRtpAddrArgs',
    'FirewallPolicyServiceArgs',
    'FirewallPolicySgtArgs',
    'FirewallPolicySrcVendorMacArgs',
    'FirewallPolicySrcaddr6Args',
    'FirewallPolicySrcaddrArgs',
    'FirewallPolicySrcintfArgs',
    'FirewallPolicySslMirrorIntfArgs',
    'FirewallPolicyUrlCategoryArgs',
    'FirewallPolicyUserArgs',
    'FirewallPolicyZtnaEmsTagArgs',
    'FirewallPolicyZtnaGeoTagArgs',
    'FirewallProfileProtocolOptionsCifsArgs',
    'FirewallProfileProtocolOptionsCifsServerKeytabArgs',
    'FirewallProfileProtocolOptionsDnsArgs',
    'FirewallProfileProtocolOptionsFtpArgs',
    'FirewallProfileProtocolOptionsHttpArgs',
    'FirewallProfileProtocolOptionsImapArgs',
    'FirewallProfileProtocolOptionsMailSignatureArgs',
    'FirewallProfileProtocolOptionsMapiArgs',
    'FirewallProfileProtocolOptionsNntpArgs',
    'FirewallProfileProtocolOptionsPop3Args',
    'FirewallProfileProtocolOptionsSmtpArgs',
    'FirewallProfileProtocolOptionsSshArgs',
    'FirewallProxyAddressCategoryArgs',
    'FirewallProxyAddressHeaderGroupArgs',
    'FirewallProxyAddressTaggingArgs',
    'FirewallProxyAddressTaggingTagArgs',
    'FirewallProxyAddrgrpMemberArgs',
    'FirewallProxyAddrgrpTaggingArgs',
    'FirewallProxyAddrgrpTaggingTagArgs',
    'FirewallProxyPolicyAccessProxy6Args',
    'FirewallProxyPolicyAccessProxyArgs',
    'FirewallProxyPolicyDstaddr6Args',
    'FirewallProxyPolicyDstaddrArgs',
    'FirewallProxyPolicyDstintfArgs',
    'FirewallProxyPolicyGroupArgs',
    'FirewallProxyPolicyInternetServiceCustomArgs',
    'FirewallProxyPolicyInternetServiceCustomGroupArgs',
    'FirewallProxyPolicyInternetServiceGroupArgs',
    'FirewallProxyPolicyInternetServiceIdArgs',
    'FirewallProxyPolicyInternetServiceNameArgs',
    'FirewallProxyPolicyPoolnameArgs',
    'FirewallProxyPolicyServiceArgs',
    'FirewallProxyPolicySrcaddr6Args',
    'FirewallProxyPolicySrcaddrArgs',
    'FirewallProxyPolicySrcintfArgs',
    'FirewallProxyPolicyUserArgs',
    'FirewallProxyPolicyZtnaEmsTagArgs',
    'FirewallRegionCityArgs',
    'FirewallScheduleGroupMemberArgs',
    'FirewallSecurityPolicyAppCategoryArgs',
    'FirewallSecurityPolicyAppGroupArgs',
    'FirewallSecurityPolicyApplicationArgs',
    'FirewallSecurityPolicyDstaddr4Args',
    'FirewallSecurityPolicyDstaddr6Args',
    'FirewallSecurityPolicyDstaddrArgs',
    'FirewallSecurityPolicyDstintfArgs',
    'FirewallSecurityPolicyFssoGroupArgs',
    'FirewallSecurityPolicyGroupArgs',
    'FirewallSecurityPolicyInternetServiceCustomArgs',
    'FirewallSecurityPolicyInternetServiceCustomGroupArgs',
    'FirewallSecurityPolicyInternetServiceGroupArgs',
    'FirewallSecurityPolicyInternetServiceIdArgs',
    'FirewallSecurityPolicyInternetServiceNameArgs',
    'FirewallSecurityPolicyInternetServiceSrcCustomArgs',
    'FirewallSecurityPolicyInternetServiceSrcCustomGroupArgs',
    'FirewallSecurityPolicyInternetServiceSrcGroupArgs',
    'FirewallSecurityPolicyInternetServiceSrcIdArgs',
    'FirewallSecurityPolicyInternetServiceSrcNameArgs',
    'FirewallSecurityPolicySeqStatePolicyListArgs',
    'FirewallSecurityPolicyServiceArgs',
    'FirewallSecurityPolicySortStatePolicyListArgs',
    'FirewallSecurityPolicySrcaddr4Args',
    'FirewallSecurityPolicySrcaddr6Args',
    'FirewallSecurityPolicySrcaddrArgs',
    'FirewallSecurityPolicySrcintfArgs',
    'FirewallSecurityPolicyUrlCategoryArgs',
    'FirewallSecurityPolicyUserArgs',
    'FirewallServiceCustomAppCategoryArgs',
    'FirewallServiceCustomApplicationArgs',
    'FirewallServiceGroupMemberArgs',
    'FirewallShapingPolicyAppCategoryArgs',
    'FirewallShapingPolicyAppGroupArgs',
    'FirewallShapingPolicyApplicationArgs',
    'FirewallShapingPolicyDstaddr6Args',
    'FirewallShapingPolicyDstaddrArgs',
    'FirewallShapingPolicyDstintfArgs',
    'FirewallShapingPolicyGroupArgs',
    'FirewallShapingPolicyInternetServiceCustomArgs',
    'FirewallShapingPolicyInternetServiceCustomGroupArgs',
    'FirewallShapingPolicyInternetServiceGroupArgs',
    'FirewallShapingPolicyInternetServiceIdArgs',
    'FirewallShapingPolicyInternetServiceNameArgs',
    'FirewallShapingPolicyInternetServiceSrcCustomArgs',
    'FirewallShapingPolicyInternetServiceSrcCustomGroupArgs',
    'FirewallShapingPolicyInternetServiceSrcGroupArgs',
    'FirewallShapingPolicyInternetServiceSrcIdArgs',
    'FirewallShapingPolicyInternetServiceSrcNameArgs',
    'FirewallShapingPolicyServiceArgs',
    'FirewallShapingPolicySrcaddr6Args',
    'FirewallShapingPolicySrcaddrArgs',
    'FirewallShapingPolicySrcintfArgs',
    'FirewallShapingPolicyUrlCategoryArgs',
    'FirewallShapingPolicyUserArgs',
    'FirewallShapingProfileShapingEntryArgs',
    'FirewallSnifferAnomalyArgs',
    'FirewallSnifferIpThreatfeedArgs',
    'FirewallSslSshProfileDotArgs',
    'FirewallSslSshProfileFtpsArgs',
    'FirewallSslSshProfileHttpsArgs',
    'FirewallSslSshProfileImapsArgs',
    'FirewallSslSshProfilePop3sArgs',
    'FirewallSslSshProfileSmtpsArgs',
    'FirewallSslSshProfileSshArgs',
    'FirewallSslSshProfileSslArgs',
    'FirewallSslSshProfileSslExemptArgs',
    'FirewallSslSshProfileSslServerArgs',
    'FirewallTtlPolicyServiceArgs',
    'FirewallTtlPolicySrcaddrArgs',
    'FirewallVip46MonitorArgs',
    'FirewallVip46RealserverArgs',
    'FirewallVip46SrcFilterArgs',
    'FirewallVip46SrcintfFilterArgs',
    'FirewallVip64MonitorArgs',
    'FirewallVip64RealserverArgs',
    'FirewallVip64SrcFilterArgs',
    'FirewallVip6MonitorArgs',
    'FirewallVip6RealserverArgs',
    'FirewallVip6SrcFilterArgs',
    'FirewallVip6SslCipherSuiteArgs',
    'FirewallVip6SslServerCipherSuiteArgs',
    'FirewallVipExtaddrArgs',
    'FirewallVipMappedipArgs',
    'FirewallVipMonitorArgs',
    'FirewallVipRealserverArgs',
    'FirewallVipServiceArgs',
    'FirewallVipSrcFilterArgs',
    'FirewallVipSrcintfFilterArgs',
    'FirewallVipSslCipherSuiteArgs',
    'FirewallVipSslServerCipherSuiteArgs',
    'FirewallVipgrp46MemberArgs',
    'FirewallVipgrp64MemberArgs',
    'FirewallVipgrp6MemberArgs',
    'FirewallVipgrpMemberArgs',
    'FirewallWildcardFqdnGroupMemberArgs',
    'IcapProfileIcapHeaderArgs',
    'IcapProfileRespmodForwardRuleArgs',
    'IcapProfileRespmodForwardRuleHeaderGroupArgs',
    'IcapProfileRespmodForwardRuleHttpRespStatusCodeArgs',
    'IpsDecoderParameterArgs',
    'IpsGlobalTlsActiveProbeArgs',
    'IpsRuleMetadataArgs',
    'IpsSensorEntryArgs',
    'IpsSensorEntryCfeArgs',
    'IpsSensorEntryExemptIpArgs',
    'IpsSensorEntryRuleArgs',
    'IpsSensorFilterArgs',
    'IpsSensorOverrideArgs',
    'IpsSensorOverrideExemptIpArgs',
    'LogDiskFilterFreeStyleArgs',
    'LogFortianalyzer2FilterFreeStyleArgs',
    'LogFortianalyzer2OverrideFilterFreeStyleArgs',
    'LogFortianalyzer2OverrideSettingSerialArgs',
    'LogFortianalyzer2SettingSerialArgs',
    'LogFortianalyzer3FilterFreeStyleArgs',
    'LogFortianalyzer3OverrideFilterFreeStyleArgs',
    'LogFortianalyzer3OverrideSettingSerialArgs',
    'LogFortianalyzer3SettingSerialArgs',
    'LogFortianalyzerCloudFilterFreeStyleArgs',
    'LogFortianalyzerCloudOverrideFilterFreeStyleArgs',
    'LogFortianalyzerCloudSettingSerialArgs',
    'LogFortianalyzerFilterFreeStyleArgs',
    'LogFortianalyzerOverrideFilterFreeStyleArgs',
    'LogFortianalyzerOverrideSettingSerialArgs',
    'LogFortianalyzerSettingSerialArgs',
    'LogFortiguardFilterFreeStyleArgs',
    'LogFortiguardOverrideFilterFreeStyleArgs',
    'LogMemoryFilterFreeStyleArgs',
    'LogNullDeviceFilterFreeStyleArgs',
    'LogSettingCustomLogFieldArgs',
    'LogSyslogd2FilterFreeStyleArgs',
    'LogSyslogd2OverrideFilterFreeStyleArgs',
    'LogSyslogd2OverrideSettingCustomFieldNameArgs',
    'LogSyslogd2SettingCustomFieldNameArgs',
    'LogSyslogd3FilterFreeStyleArgs',
    'LogSyslogd3OverrideFilterFreeStyleArgs',
    'LogSyslogd3OverrideSettingCustomFieldNameArgs',
    'LogSyslogd3SettingCustomFieldNameArgs',
    'LogSyslogd4FilterFreeStyleArgs',
    'LogSyslogd4OverrideFilterFreeStyleArgs',
    'LogSyslogd4OverrideSettingCustomFieldNameArgs',
    'LogSyslogd4SettingCustomFieldNameArgs',
    'LogSyslogdFilterFreeStyleArgs',
    'LogSyslogdOverrideFilterFreeStyleArgs',
    'LogSyslogdOverrideSettingCustomFieldNameArgs',
    'LogSyslogdSettingCustomFieldNameArgs',
    'LogThreatWeightApplicationArgs',
    'LogThreatWeightGeolocationArgs',
    'LogThreatWeightIpsArgs',
    'LogThreatWeightLevelArgs',
    'LogThreatWeightMalwareArgs',
    'LogThreatWeightWebArgs',
    'LogWebtrendsFilterFreeStyleArgs',
    'NsxtServiceChainServiceIndexArgs',
    'ReportChartCategorySeriesArgs',
    'ReportChartColumnArgs',
    'ReportChartColumnMappingArgs',
    'ReportChartDrillDownChartArgs',
    'ReportChartValueSeriesArgs',
    'ReportChartXSeriesArgs',
    'ReportChartYSeriesArgs',
    'ReportDatasetFieldArgs',
    'ReportDatasetParameterArgs',
    'ReportLayoutBodyItemArgs',
    'ReportLayoutBodyItemListArgs',
    'ReportLayoutBodyItemParameterArgs',
    'ReportLayoutPageArgs',
    'ReportLayoutPageFooterArgs',
    'ReportLayoutPageFooterFooterItemArgs',
    'ReportLayoutPageHeaderArgs',
    'ReportLayoutPageHeaderHeaderItemArgs',
    'RouterAccessList6RuleArgs',
    'RouterAccessListRuleArgs',
    'RouterAspathListRuleArgs',
    'RouterBfd6NeighborArgs',
    'RouterBfdNeighborArgs',
    'RouterBgpAdminDistanceArgs',
    'RouterBgpAggregateAddress6Args',
    'RouterBgpAggregateAddressArgs',
    'RouterBgpConfederationPeerArgs',
    'RouterBgpNeighborArgs',
    'RouterBgpNeighborConditionalAdvertise6Args',
    'RouterBgpNeighborConditionalAdvertiseArgs',
    'RouterBgpNeighborGroupArgs',
    'RouterBgpNeighborRange6Args',
    'RouterBgpNeighborRangeArgs',
    'RouterBgpNetwork6Args',
    'RouterBgpNetworkArgs',
    'RouterBgpRedistribute6Args',
    'RouterBgpRedistributeArgs',
    'RouterBgpVrfLeak6Args',
    'RouterBgpVrfLeak6TargetArgs',
    'RouterBgpVrfLeakArgs',
    'RouterBgpVrfLeakTargetArgs',
    'RouterCommunityListRuleArgs',
    'RouterIsisIsisInterfaceArgs',
    'RouterIsisIsisNetArgs',
    'RouterIsisRedistribute6Args',
    'RouterIsisRedistributeArgs',
    'RouterIsisSummaryAddress6Args',
    'RouterIsisSummaryAddressArgs',
    'RouterKeyChainKeyArgs',
    'RouterMulticast6InterfaceArgs',
    'RouterMulticast6PimSmGlobalArgs',
    'RouterMulticast6PimSmGlobalRpAddressArgs',
    'RouterMulticastFlowFlowArgs',
    'RouterMulticastInterfaceArgs',
    'RouterMulticastInterfaceIgmpArgs',
    'RouterMulticastInterfaceJoinGroupArgs',
    'RouterMulticastPimSmGlobalArgs',
    'RouterMulticastPimSmGlobalRpAddressArgs',
    'RouterOspf6AreaArgs',
    'RouterOspf6AreaIpsecKeyArgs',
    'RouterOspf6AreaRangeArgs',
    'RouterOspf6AreaVirtualLinkArgs',
    'RouterOspf6AreaVirtualLinkIpsecKeyArgs',
    'RouterOspf6Ospf6InterfaceArgs',
    'RouterOspf6Ospf6InterfaceIpsecKeyArgs',
    'RouterOspf6Ospf6InterfaceNeighborArgs',
    'RouterOspf6PassiveInterfaceArgs',
    'RouterOspf6RedistributeArgs',
    'RouterOspf6SummaryAddressArgs',
    'RouterOspfAreaArgs',
    'RouterOspfAreaFilterListArgs',
    'RouterOspfAreaRangeArgs',
    'RouterOspfAreaVirtualLinkArgs',
    'RouterOspfAreaVirtualLinkMd5KeyArgs',
    'RouterOspfDistributeListArgs',
    'RouterOspfNeighborArgs',
    'RouterOspfNetworkArgs',
    'RouterOspfOspfInterfaceArgs',
    'RouterOspfOspfInterfaceMd5KeyArgs',
    'RouterOspfPassiveInterfaceArgs',
    'RouterOspfRedistributeArgs',
    'RouterOspfSummaryAddressArgs',
    'RouterPolicyDstArgs',
    'RouterPolicyDstaddrArgs',
    'RouterPolicyInputDeviceArgs',
    'RouterPolicyInternetServiceCustomArgs',
    'RouterPolicyInternetServiceIdArgs',
    'RouterPolicySrcArgs',
    'RouterPolicySrcaddrArgs',
    'RouterPrefixList6RuleArgs',
    'RouterPrefixListRuleArgs',
    'RouterRipDistanceArgs',
    'RouterRipDistributeListArgs',
    'RouterRipInterfaceArgs',
    'RouterRipNeighborArgs',
    'RouterRipNetworkArgs',
    'RouterRipOffsetListArgs',
    'RouterRipPassiveInterfaceArgs',
    'RouterRipRedistributeArgs',
    'RouterRipngAggregateAddressArgs',
    'RouterRipngDistanceArgs',
    'RouterRipngDistributeListArgs',
    'RouterRipngInterfaceArgs',
    'RouterRipngNeighborArgs',
    'RouterRipngNetworkArgs',
    'RouterRipngOffsetListArgs',
    'RouterRipngPassiveInterfaceArgs',
    'RouterRipngRedistributeArgs',
    'RouterRouteMapRuleArgs',
    'RouterRouteMapRuleSetAspathArgs',
    'RouterRouteMapRuleSetCommunityArgs',
    'RouterRouteMapRuleSetExtcommunityRtArgs',
    'RouterRouteMapRuleSetExtcommunitySooArgs',
    'RouterStatic6SdwanZoneArgs',
    'RouterStaticSdwanZoneArgs',
    'RouterbgpNeighborConditionalAdvertise6Args',
    'RouterbgpNeighborConditionalAdvertiseArgs',
    'Routerospf6Ospf6InterfaceIpsecKeyArgs',
    'Routerospf6Ospf6InterfaceNeighborArgs',
    'RouterospfOspfInterfaceMd5KeyArgs',
    'SctpFilterProfilePpidFilterArgs',
    'SpamfilterBwlEntryArgs',
    'SpamfilterBwordEntryArgs',
    'SpamfilterDnsblEntryArgs',
    'SpamfilterIptrustEntryArgs',
    'SpamfilterMheaderEntryArgs',
    'SpamfilterProfileGmailArgs',
    'SpamfilterProfileImapArgs',
    'SpamfilterProfileMapiArgs',
    'SpamfilterProfileMsnHotmailArgs',
    'SpamfilterProfilePop3Args',
    'SpamfilterProfileSmtpArgs',
    'SpamfilterProfileYahooMailArgs',
    'SshFilterProfileFileFilterArgs',
    'SshFilterProfileFileFilterEntryArgs',
    'SshFilterProfileFileFilterEntryFileTypeArgs',
    'SshFilterProfileShellCommandArgs',
    'SwitchControllerAutoConfigCustomSwitchBindingArgs',
    'SwitchControllerDynamicPortPolicyPolicyArgs',
    'SwitchControllerDynamicPortPolicyPolicyInterfaceTagArgs',
    'SwitchControllerFlowTrackingAggregateArgs',
    'SwitchControllerFortilinkSettingsNacPortsArgs',
    'SwitchControllerFortilinkSettingsNacPortsNacSegmentVlanArgs',
    'SwitchControllerGlobalCustomCommandArgs',
    'SwitchControllerGlobalDisableDiscoveryArgs',
    'SwitchControllerLldpProfileCustomTlvArgs',
    'SwitchControllerLldpProfileMedLocationServiceArgs',
    'SwitchControllerLldpProfileMedNetworkPolicyArgs',
    'SwitchControllerLocationAddressCivicArgs',
    'SwitchControllerLocationCoordinatesArgs',
    'SwitchControllerLocationElinNumberArgs',
    'SwitchControllerManagedSwitchCustomCommandArgs',
    'SwitchControllerManagedSwitchIgmpSnoopingArgs',
    'SwitchControllerManagedSwitchIgmpSnoopingVlanArgs',
    'SwitchControllerManagedSwitchIpSourceGuardArgs',
    'SwitchControllerManagedSwitchIpSourceGuardBindingEntryArgs',
    'SwitchControllerManagedSwitchMirrorArgs',
    'SwitchControllerManagedSwitchMirrorSrcEgressArgs',
    'SwitchControllerManagedSwitchMirrorSrcIngressArgs',
    'SwitchControllerManagedSwitchN8021xSettingsArgs',
    'SwitchControllerManagedSwitchPortArgs',
    'SwitchControllerManagedSwitchPortAllowedVlanArgs',
    'SwitchControllerManagedSwitchPortExportTagArgs',
    'SwitchControllerManagedSwitchPortInterfaceTagArgs',
    'SwitchControllerManagedSwitchPortMemberArgs',
    'SwitchControllerManagedSwitchPortUntaggedVlanArgs',
    'SwitchControllerManagedSwitchRemoteLogArgs',
    'SwitchControllerManagedSwitchSnmpCommunityArgs',
    'SwitchControllerManagedSwitchSnmpCommunityHostArgs',
    'SwitchControllerManagedSwitchSnmpSysinfoArgs',
    'SwitchControllerManagedSwitchSnmpTrapThresholdArgs',
    'SwitchControllerManagedSwitchSnmpUserArgs',
    'SwitchControllerManagedSwitchStaticMacArgs',
    'SwitchControllerManagedSwitchStormControlArgs',
    'SwitchControllerManagedSwitchStpInstanceArgs',
    'SwitchControllerManagedSwitchStpSettingsArgs',
    'SwitchControllerManagedSwitchSwitchLogArgs',
    'SwitchControllerManagedSwitchSwitchStpSettingsArgs',
    'SwitchControllerQosIpDscpMapMapArgs',
    'SwitchControllerQosQueuePolicyCosQueueArgs',
    'SwitchControllerQuarantineTargetArgs',
    'SwitchControllerQuarantineTargetTagArgs',
    'SwitchControllerSecurityPolicy8021XUserGroupArgs',
    'SwitchControllerSnmpCommunityHostArgs',
    'SwitchControllerStpInstanceVlanRangeArgs',
    'SwitchControllerSwitchGroupMemberArgs',
    'SwitchControllerTrafficSnifferTargetIpArgs',
    'SwitchControllerTrafficSnifferTargetMacArgs',
    'SwitchControllerTrafficSnifferTargetPortArgs',
    'SwitchControllerTrafficSnifferTargetPortInPortArgs',
    'SwitchControllerTrafficSnifferTargetPortOutPortArgs',
    'SwitchControllerVlanPolicyAllowedVlanArgs',
    'SwitchControllerVlanPolicyUntaggedVlanArgs',
    'SwitchControllerVlanPortalMessageOverridesArgs',
    'SwitchControllerVlanSelectedUsergroupArgs',
    'SystemAPIUserSettingTrusthostArgs',
    'SystemAccprofileFwgrpPermissionArgs',
    'SystemAccprofileLoggrpPermissionArgs',
    'SystemAccprofileNetgrpPermissionArgs',
    'SystemAccprofileSysgrpPermissionArgs',
    'SystemAccprofileUtmgrpPermissionArgs',
    'SystemAcmeAccountArgs',
    'SystemAcmeInterfaceArgs',
    'SystemAdminGuestUsergroupArgs',
    'SystemAdminGuiDashboardArgs',
    'SystemAdminGuiDashboardWidgetArgs',
    'SystemAdminGuiDashboardWidgetFilterArgs',
    'SystemAdminGuiGlobalMenuFavoriteArgs',
    'SystemAdminGuiNewFeatureAcknowledgeArgs',
    'SystemAdminGuiVdomMenuFavoriteArgs',
    'SystemAdminLoginTimeArgs',
    'SystemAdminVdomArgs',
    'SystemAlarmGroupArgs',
    'SystemAlarmGroupFwPolicyViolationArgs',
    'SystemApiUserTrusthostArgs',
    'SystemApiUserVdomArgs',
    'SystemAutomationActionEmailToArgs',
    'SystemAutomationActionHeaderArgs',
    'SystemAutomationActionSdnConnectorArgs',
    'SystemAutomationDestinationDestinationArgs',
    'SystemAutomationStitchActionArgs',
    'SystemAutomationStitchDestinationArgs',
    'SystemAutomationTriggerFieldArgs',
    'SystemAutomationTriggerLogidBlockArgs',
    'SystemCentralManagementServerListArgs',
    'SystemClusterSyncDownIntfsBeforeSessSyncArgs',
    'SystemClusterSyncSessionSyncFilterArgs',
    'SystemClusterSyncSessionSyncFilterCustomServiceArgs',
    'SystemClusterSyncSyncvdArgs',
    'SystemCsfFabricConnectorArgs',
    'SystemCsfFabricDeviceArgs',
    'SystemCsfTrustedListArgs',
    'SystemDdnsDdnsServerAddrArgs',
    'SystemDdnsMonitorInterfaceArgs',
    'SystemDhcp6ServerIpRangeArgs',
    'SystemDhcp6ServerPrefixRangeArgs',
    'SystemDhcpServerExcludeRangeArgs',
    'SystemDhcpServerIpRangeArgs',
    'SystemDhcpServerOptionArgs',
    'SystemDhcpServerReservedAddressArgs',
    'SystemDhcpServerTftpServerArgs',
    'SystemDhcpServerVciStringArgs',
    'SystemDnsDatabaseDnsEntryArgs',
    'SystemDnsDomainArgs',
    'SystemDnsServerHostnameArgs',
    'SystemFederatedUpgradeNodeListArgs',
    'SystemGeoipOverrideIp6RangeArgs',
    'SystemGeoipOverrideIpRangeArgs',
    'SystemHaHaMgmtInterfaceArgs',
    'SystemHaSecondaryVclusterArgs',
    'SystemHaUnicastPeerArgs',
    'SystemIkeDhGroup14Args',
    'SystemIkeDhGroup15Args',
    'SystemIkeDhGroup16Args',
    'SystemIkeDhGroup17Args',
    'SystemIkeDhGroup18Args',
    'SystemIkeDhGroup19Args',
    'SystemIkeDhGroup1Args',
    'SystemIkeDhGroup20Args',
    'SystemIkeDhGroup21Args',
    'SystemIkeDhGroup27Args',
    'SystemIkeDhGroup28Args',
    'SystemIkeDhGroup29Args',
    'SystemIkeDhGroup2Args',
    'SystemIkeDhGroup30Args',
    'SystemIkeDhGroup31Args',
    'SystemIkeDhGroup32Args',
    'SystemIkeDhGroup5Args',
    'SystemInterfaceClientOptionArgs',
    'SystemInterfaceDhcpSnoopingServerListArgs',
    'SystemInterfaceFailAlertInterfaceArgs',
    'SystemInterfaceIpv6Args',
    'SystemInterfaceIpv6Dhcp6IapdListArgs',
    'SystemInterfaceIpv6Ip6DelegatedPrefixListArgs',
    'SystemInterfaceIpv6Ip6ExtraAddrArgs',
    'SystemInterfaceIpv6Ip6PrefixListArgs',
    'SystemInterfaceIpv6Ip6PrefixListDnsslArgs',
    'SystemInterfaceIpv6Vrrp6Args',
    'SystemInterfaceManagedDeviceArgs',
    'SystemInterfaceMemberArgs',
    'SystemInterfaceSecondaryipArgs',
    'SystemInterfaceSecurityGroupArgs',
    'SystemInterfaceTaggingArgs',
    'SystemInterfaceTaggingTagArgs',
    'SystemInterfaceVrrpArgs',
    'SystemInterfaceVrrpProxyArpArgs',
    'SystemIpsecAggregateMemberArgs',
    'SystemLinkMonitorRouteArgs',
    'SystemLinkMonitorServerArgs',
    'SystemLinkMonitorServerListArgs',
    'SystemLldpNetworkPolicyGuestArgs',
    'SystemLldpNetworkPolicyGuestVoiceSignalingArgs',
    'SystemLldpNetworkPolicySoftphoneArgs',
    'SystemLldpNetworkPolicyStreamingVideoArgs',
    'SystemLldpNetworkPolicyVideoConferencingArgs',
    'SystemLldpNetworkPolicyVideoSignalingArgs',
    'SystemLldpNetworkPolicyVoiceArgs',
    'SystemLldpNetworkPolicyVoiceSignalingArgs',
    'SystemMobileTunnelNetworkArgs',
    'SystemNat64SecondaryPrefixArgs',
    'SystemNdProxyMemberArgs',
    'SystemNpuPriorityProtocolArgs',
    'SystemNtpInterfaceArgs',
    'SystemNtpNtpserverArgs',
    'SystemObjectTaggingTagArgs',
    'SystemPtpServerInterfaceArgs',
    'SystemReplacemsgGroupAdminArgs',
    'SystemReplacemsgGroupAlertmailArgs',
    'SystemReplacemsgGroupAuthArgs',
    'SystemReplacemsgGroupAutomationArgs',
    'SystemReplacemsgGroupCustomMessageArgs',
    'SystemReplacemsgGroupDeviceDetectionPortalArgs',
    'SystemReplacemsgGroupEcArgs',
    'SystemReplacemsgGroupFortiguardWfArgs',
    'SystemReplacemsgGroupFtpArgs',
    'SystemReplacemsgGroupHttpArgs',
    'SystemReplacemsgGroupIcapArgs',
    'SystemReplacemsgGroupMailArgs',
    'SystemReplacemsgGroupNacQuarArgs',
    'SystemReplacemsgGroupNntpArgs',
    'SystemReplacemsgGroupSpamArgs',
    'SystemReplacemsgGroupSslvpnArgs',
    'SystemReplacemsgGroupTrafficQuotaArgs',
    'SystemReplacemsgGroupUtmArgs',
    'SystemReplacemsgGroupWebproxyArgs',
    'SystemSamlServiceProviderArgs',
    'SystemSamlServiceProviderAssertionAttributeArgs',
    'SystemSdnConnectorExternalAccountListArgs',
    'SystemSdnConnectorExternalAccountListRegionListArgs',
    'SystemSdnConnectorExternalIpArgs',
    'SystemSdnConnectorForwardingRuleArgs',
    'SystemSdnConnectorGcpProjectListArgs',
    'SystemSdnConnectorGcpProjectListGcpZoneListArgs',
    'SystemSdnConnectorNicArgs',
    'SystemSdnConnectorNicIpArgs',
    'SystemSdnConnectorRouteArgs',
    'SystemSdnConnectorRouteTableArgs',
    'SystemSdnConnectorRouteTableRouteArgs',
    'SystemSdnConnectorServerListArgs',
    'SystemSdwanDuplicationArgs',
    'SystemSdwanDuplicationDstaddr6Args',
    'SystemSdwanDuplicationDstaddrArgs',
    'SystemSdwanDuplicationDstintfArgs',
    'SystemSdwanDuplicationServiceArgs',
    'SystemSdwanDuplicationServiceIdArgs',
    'SystemSdwanDuplicationSrcaddr6Args',
    'SystemSdwanDuplicationSrcaddrArgs',
    'SystemSdwanDuplicationSrcintfArgs',
    'SystemSdwanFailAlertInterfaceArgs',
    'SystemSdwanHealthCheckArgs',
    'SystemSdwanHealthCheckMemberArgs',
    'SystemSdwanHealthCheckSlaArgs',
    'SystemSdwanMemberArgs',
    'SystemSdwanNeighborArgs',
    'SystemSdwanServiceArgs',
    'SystemSdwanServiceDst6Args',
    'SystemSdwanServiceDstArgs',
    'SystemSdwanServiceGroupArgs',
    'SystemSdwanServiceHealthCheckArgs',
    'SystemSdwanServiceInputDeviceArgs',
    'SystemSdwanServiceInternetServiceAppCtrlArgs',
    'SystemSdwanServiceInternetServiceAppCtrlGroupArgs',
    'SystemSdwanServiceInternetServiceCustomArgs',
    'SystemSdwanServiceInternetServiceCustomGroupArgs',
    'SystemSdwanServiceInternetServiceGroupArgs',
    'SystemSdwanServiceInternetServiceNameArgs',
    'SystemSdwanServicePriorityMemberArgs',
    'SystemSdwanServicePriorityZoneArgs',
    'SystemSdwanServiceSlaArgs',
    'SystemSdwanServiceSrc6Args',
    'SystemSdwanServiceSrcArgs',
    'SystemSdwanServiceUserArgs',
    'SystemSdwanZoneArgs',
    'SystemSessionTtlPortArgs',
    'SystemSettingsGuiDefaultPolicyColumnArgs',
    'SystemSnmpCommunityHostArgs',
    'SystemSnmpCommunityHosts6Args',
    'SystemSpeedTestScheduleScheduleArgs',
    'SystemSpeedTestServerHostArgs',
    'SystemSsoAdminVdomArgs',
    'SystemSsoForticloudAdminVdomArgs',
    'SystemSwitchInterfaceMemberArgs',
    'SystemSwitchInterfaceSpanSourcePortArgs',
    'SystemVdomDnsServerHostnameArgs',
    'SystemVdomExceptionVdomArgs',
    'SystemVirtualSwitchPortArgs',
    'SystemVirtualWanLinkFailAlertInterfaceArgs',
    'SystemVirtualWanLinkHealthCheckArgs',
    'SystemVirtualWanLinkHealthCheckMemberArgs',
    'SystemVirtualWanLinkHealthCheckSlaArgs',
    'SystemVirtualWanLinkMemberArgs',
    'SystemVirtualWanLinkNeighborArgs',
    'SystemVirtualWanLinkServiceArgs',
    'SystemVirtualWanLinkServiceDst6Args',
    'SystemVirtualWanLinkServiceDstArgs',
    'SystemVirtualWanLinkServiceGroupArgs',
    'SystemVirtualWanLinkServiceInputDeviceArgs',
    'SystemVirtualWanLinkServiceInternetServiceAppCtrlArgs',
    'SystemVirtualWanLinkServiceInternetServiceAppCtrlGroupArgs',
    'SystemVirtualWanLinkServiceInternetServiceCtrlArgs',
    'SystemVirtualWanLinkServiceInternetServiceCtrlGroupArgs',
    'SystemVirtualWanLinkServiceInternetServiceCustomArgs',
    'SystemVirtualWanLinkServiceInternetServiceCustomGroupArgs',
    'SystemVirtualWanLinkServiceInternetServiceGroupArgs',
    'SystemVirtualWanLinkServiceInternetServiceIdArgs',
    'SystemVirtualWanLinkServiceInternetServiceNameArgs',
    'SystemVirtualWanLinkServicePriorityMemberArgs',
    'SystemVirtualWanLinkServiceSlaArgs',
    'SystemVirtualWanLinkServiceSrc6Args',
    'SystemVirtualWanLinkServiceSrcArgs',
    'SystemVirtualWanLinkServiceUserArgs',
    'SystemVirtualWanLinkZoneArgs',
    'SystemVirtualWirePairMemberArgs',
    'SystemVxlanRemoteIp6Args',
    'SystemVxlanRemoteIpArgs',
    'SystemZoneInterfaceArgs',
    'SystemZoneTaggingArgs',
    'SystemZoneTaggingTagArgs',
    'UserDeviceAccessListDeviceListArgs',
    'UserDeviceGroupMemberArgs',
    'UserDeviceGroupTaggingArgs',
    'UserDeviceGroupTaggingTagArgs',
    'UserDeviceTaggingArgs',
    'UserDeviceTaggingTagArgs',
    'UserDomainControllerExtraServerArgs',
    'UserExchangeKdcIpArgs',
    'UserFssoPollingAdgrpArgs',
    'UserGroupGuestArgs',
    'UserGroupMatchArgs',
    'UserGroupMemberArgs',
    'UserNacPolicySwitchGroupArgs',
    'UserNacPolicySwitchScopeArgs',
    'UserPeergrpMemberArgs',
    'UserQuarantineTargetArgs',
    'UserQuarantineTargetMacArgs',
    'UserRadiusAccountingServerArgs',
    'UserRadiusClassArgs',
    'UserSecurityExemptListRuleArgs',
    'UserSecurityExemptListRuleDeviceArgs',
    'UserSecurityExemptListRuleDstaddrArgs',
    'UserSecurityExemptListRuleServiceArgs',
    'UserSecurityExemptListRuleSrcaddrArgs',
    'UserSettingAuthPortArgs',
    'VideofilterProfileFortiguardCategoryArgs',
    'VideofilterProfileFortiguardCategoryFilterArgs',
    'VideofilterYoutubeChannelFilterEntryArgs',
    'VoipProfileMsrpArgs',
    'VoipProfileSccpArgs',
    'VoipProfileSipArgs',
    'VpnCertificateSettingCrlVerificationArgs',
    'VpnIpsecConcentratorMemberArgs',
    'VpnIpsecFecMappingArgs',
    'VpnIpsecPhase1BackupGatewayArgs',
    'VpnIpsecPhase1CertificateArgs',
    'VpnIpsecPhase1InterfaceBackupGatewayArgs',
    'VpnIpsecPhase1InterfaceCertificateArgs',
    'VpnIpsecPhase1InterfaceIpv4ExcludeRangeArgs',
    'VpnIpsecPhase1InterfaceIpv6ExcludeRangeArgs',
    'VpnIpsecPhase1Ipv4ExcludeRangeArgs',
    'VpnIpsecPhase1Ipv6ExcludeRangeArgs',
    'VpnOcvpnForticlientAccessArgs',
    'VpnOcvpnForticlientAccessAuthGroupArgs',
    'VpnOcvpnForticlientAccessAuthGroupOverlayArgs',
    'VpnOcvpnOverlayArgs',
    'VpnOcvpnOverlaySubnetArgs',
    'VpnOcvpnWanInterfaceArgs',
    'VpnSslSettingsAuthenticationRuleArgs',
    'VpnSslSettingsAuthenticationRuleGroupArgs',
    'VpnSslSettingsAuthenticationRuleSourceAddress6Args',
    'VpnSslSettingsAuthenticationRuleSourceAddressArgs',
    'VpnSslSettingsAuthenticationRuleSourceInterfaceArgs',
    'VpnSslSettingsAuthenticationRuleUserArgs',
    'VpnSslSettingsSourceAddress6Args',
    'VpnSslSettingsSourceAddressArgs',
    'VpnSslSettingsSourceInterfaceArgs',
    'VpnSslSettingsTunnelIpPoolArgs',
    'VpnSslSettingsTunnelIpv6PoolArgs',
    'VpnSslWebHostCheckSoftwareCheckItemListArgs',
    'VpnSslWebHostCheckSoftwareCheckItemListMd5Args',
    'VpnSslWebPortalBookmarkGroupArgs',
    'VpnSslWebPortalBookmarkGroupBookmarkArgs',
    'VpnSslWebPortalBookmarkGroupBookmarkFormDataArgs',
    'VpnSslWebPortalHostCheckPolicyArgs',
    'VpnSslWebPortalIpPoolArgs',
    'VpnSslWebPortalIpv6PoolArgs',
    'VpnSslWebPortalIpv6SplitTunnelingRoutingAddressArgs',
    'VpnSslWebPortalMacAddrCheckRuleArgs',
    'VpnSslWebPortalMacAddrCheckRuleMacAddrListArgs',
    'VpnSslWebPortalOsCheckListArgs',
    'VpnSslWebPortalSplitDnArgs',
    'VpnSslWebPortalSplitTunnelingRoutingAddressArgs',
    'VpnSslWebUserBookmarkBookmarkArgs',
    'VpnSslWebUserBookmarkBookmarkFormDataArgs',
    'VpnSslWebUserGroupBookmarkBookmarkArgs',
    'VpnSslWebUserGroupBookmarkBookmarkFormDataArgs',
    'WafProfileAddressListArgs',
    'WafProfileAddressListBlockedAddressArgs',
    'WafProfileAddressListTrustedAddressArgs',
    'WafProfileConstraintArgs',
    'WafProfileConstraintContentLengthArgs',
    'WafProfileConstraintExceptionArgs',
    'WafProfileConstraintHeaderLengthArgs',
    'WafProfileConstraintHostnameArgs',
    'WafProfileConstraintLineLengthArgs',
    'WafProfileConstraintMalformedArgs',
    'WafProfileConstraintMaxCookieArgs',
    'WafProfileConstraintMaxHeaderLineArgs',
    'WafProfileConstraintMaxRangeSegmentArgs',
    'WafProfileConstraintMaxUrlParamArgs',
    'WafProfileConstraintMethodArgs',
    'WafProfileConstraintParamLengthArgs',
    'WafProfileConstraintUrlParamLengthArgs',
    'WafProfileConstraintVersionArgs',
    'WafProfileMethodArgs',
    'WafProfileMethodMethodPolicyArgs',
    'WafProfileSignatureArgs',
    'WafProfileSignatureCustomSignatureArgs',
    'WafProfileSignatureDisabledSignatureArgs',
    'WafProfileSignatureDisabledSubClassArgs',
    'WafProfileSignatureMainClassArgs',
    'WafProfileUrlAccessArgs',
    'WafProfileUrlAccessAccessPatternArgs',
    'WanoptCacheServiceDstPeerArgs',
    'WanoptCacheServiceSrcPeerArgs',
    'WanoptContentDeliveryNetworkRuleHostDomainNameSuffixArgs',
    'WanoptContentDeliveryNetworkRuleRuleArgs',
    'WanoptContentDeliveryNetworkRuleRuleContentIdArgs',
    'WanoptContentDeliveryNetworkRuleRuleMatchEntryArgs',
    'WanoptContentDeliveryNetworkRuleRuleMatchEntryPatternArgs',
    'WanoptContentDeliveryNetworkRuleRuleSkipEntryArgs',
    'WanoptContentDeliveryNetworkRuleRuleSkipEntryPatternArgs',
    'WanoptProfileCifsArgs',
    'WanoptProfileFtpArgs',
    'WanoptProfileHttpArgs',
    'WanoptProfileMapiArgs',
    'WanoptProfileTcpArgs',
    'WebProxyExplicitPacPolicyArgs',
    'WebProxyExplicitPacPolicyDstaddrArgs',
    'WebProxyExplicitPacPolicySrcaddr6Args',
    'WebProxyExplicitPacPolicySrcaddrArgs',
    'WebProxyForwardServerGroupServerListArgs',
    'WebProxyGlobalLearnClientIpSrcaddr6Args',
    'WebProxyGlobalLearnClientIpSrcaddrArgs',
    'WebProxyProfileHeaderArgs',
    'WebProxyProfileHeaderDstaddr6Args',
    'WebProxyProfileHeaderDstaddrArgs',
    'WebfilterContentEntryArgs',
    'WebfilterContentHeaderEntryArgs',
    'WebfilterProfileAntiphishArgs',
    'WebfilterProfileAntiphishCustomPatternArgs',
    'WebfilterProfileAntiphishInspectionEntryArgs',
    'WebfilterProfileFileFilterArgs',
    'WebfilterProfileFileFilterEntryArgs',
    'WebfilterProfileFileFilterEntryFileTypeArgs',
    'WebfilterProfileFtgdWfArgs',
    'WebfilterProfileFtgdWfFilterArgs',
    'WebfilterProfileFtgdWfFilterAuthUsrGrpArgs',
    'WebfilterProfileFtgdWfQuotaArgs',
    'WebfilterProfileOverrideArgs',
    'WebfilterProfileOverrideOvrdUserGroupArgs',
    'WebfilterProfileOverrideProfileArgs',
    'WebfilterProfileWebArgs',
    'WebfilterProfileWebKeywordMatchArgs',
    'WebfilterProfileWispServerArgs',
    'WebfilterProfileYoutubeChannelFilterArgs',
    'WebfilterUrlfilterEntryArgs',
    'WirelessControllerAccessControlListLayer3Ipv4RuleArgs',
    'WirelessControllerAccessControlListLayer3Ipv6RuleArgs',
    'WirelessControllerAddrgrpAddressArgs',
    'WirelessControllerApcfgProfileCommandListArgs',
    'WirelessControllerArrpProfileDarrpOptimizeScheduleArgs',
    'WirelessControllerBonjourProfilePolicyListArgs',
    'WirelessControllerHotspot20Anqp3GppCellularMccMncListArgs',
    'WirelessControllerHotspot20AnqpNaiRealmNaiListArgs',
    'WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodArgs',
    'WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParamArgs',
    'WirelessControllerHotspot20AnqpRoamingConsortiumOiListArgs',
    'WirelessControllerHotspot20AnqpVenueNameValueListArgs',
    'WirelessControllerHotspot20AnqpVenueUrlValueListArgs',
    'WirelessControllerHotspot20H2QpAdviceOfChargeAocListArgs',
    'WirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfoArgs',
    'WirelessControllerHotspot20H2QpOperatorNameValueListArgs',
    'WirelessControllerHotspot20H2QpOsuProviderFriendlyNameArgs',
    'WirelessControllerHotspot20H2QpOsuProviderNaiNaiListArgs',
    'WirelessControllerHotspot20H2QpOsuProviderServiceDescriptionArgs',
    'WirelessControllerHotspot20HsProfileOsuProviderArgs',
    'WirelessControllerHotspot20IconIconListArgs',
    'WirelessControllerHotspot20QosMapDscpExceptArgs',
    'WirelessControllerHotspot20QosMapDscpRangeArgs',
    'WirelessControllerInterControllerInterControllerPeerArgs',
    'WirelessControllerMpskProfileMpskGroupArgs',
    'WirelessControllerMpskProfileMpskGroupMpskKeyArgs',
    'WirelessControllerMpskProfileMpskGroupMpskKeyMpskScheduleArgs',
    'WirelessControllerQosProfileDscpWmmBeArgs',
    'WirelessControllerQosProfileDscpWmmBkArgs',
    'WirelessControllerQosProfileDscpWmmViArgs',
    'WirelessControllerQosProfileDscpWmmVoArgs',
    'WirelessControllerSettingDarrpOptimizeScheduleArgs',
    'WirelessControllerSettingOffendingSsidArgs',
    'WirelessControllerSnmpCommunityArgs',
    'WirelessControllerSnmpCommunityHostArgs',
    'WirelessControllerSnmpUserArgs',
    'WirelessControllerTimersDarrpTimeArgs',
    'WirelessControllerVapGroupVapArgs',
    'WirelessControllerVapMacFilterListArgs',
    'WirelessControllerVapMpskKeyArgs',
    'WirelessControllerVapMpskKeyMpskScheduleArgs',
    'WirelessControllerVapPortalMessageOverridesArgs',
    'WirelessControllerVapRadiusMacAuthUsergroupArgs',
    'WirelessControllerVapSelectedUsergroupArgs',
    'WirelessControllerVapUsergroupArgs',
    'WirelessControllerVapVlanNameArgs',
    'WirelessControllerVapVlanPoolArgs',
    'WirelessControllerWidsProfileApBgscanDisableScheduleArgs',
    'WirelessControllerWtpGroupWtpArgs',
    'WirelessControllerWtpLanArgs',
    'WirelessControllerWtpProfileDenyMacListArgs',
    'WirelessControllerWtpProfileEslSesDongleArgs',
    'WirelessControllerWtpProfileLanArgs',
    'WirelessControllerWtpProfileLbsArgs',
    'WirelessControllerWtpProfileLedScheduleArgs',
    'WirelessControllerWtpProfilePlatformArgs',
    'WirelessControllerWtpProfileRadio1Args',
    'WirelessControllerWtpProfileRadio1ChannelArgs',
    'WirelessControllerWtpProfileRadio1VapArgs',
    'WirelessControllerWtpProfileRadio2Args',
    'WirelessControllerWtpProfileRadio2ChannelArgs',
    'WirelessControllerWtpProfileRadio2VapArgs',
    'WirelessControllerWtpProfileRadio3Args',
    'WirelessControllerWtpProfileRadio3ChannelArgs',
    'WirelessControllerWtpProfileRadio3VapArgs',
    'WirelessControllerWtpProfileRadio4Args',
    'WirelessControllerWtpProfileRadio4ChannelArgs',
    'WirelessControllerWtpProfileRadio4VapArgs',
    'WirelessControllerWtpProfileSplitTunnelingAclArgs',
    'WirelessControllerWtpRadio1Args',
    'WirelessControllerWtpRadio1ChannelArgs',
    'WirelessControllerWtpRadio1VapArgs',
    'WirelessControllerWtpRadio2Args',
    'WirelessControllerWtpRadio2ChannelArgs',
    'WirelessControllerWtpRadio2VapArgs',
    'WirelessControllerWtpRadio3Args',
    'WirelessControllerWtpRadio3ChannelArgs',
    'WirelessControllerWtpRadio3VapArgs',
    'WirelessControllerWtpRadio4Args',
    'WirelessControllerWtpRadio4ChannelArgs',
    'WirelessControllerWtpRadio4VapArgs',
    'WirelessControllerWtpSplitTunnelingAclArgs',
]

@pulumi.input_type
class AntivirusProfileCifsArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] archive_block: Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        :param pulumi.Input[str] archive_log: Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        :param pulumi.Input[str] av_scan: Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] emulator: Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] external_blocklist: Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] fortiai: Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] options: Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        :param pulumi.Input[str] outbreak_prevention: Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
        :param pulumi.Input[str] quarantine: Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        """
        Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        """
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        """
        Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        """
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        """
        Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
        """
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)


@pulumi.input_type
class AntivirusProfileContentDisarmArgs:
    def __init__(__self__, *,
                 cover_page: Optional[pulumi.Input[str]] = None,
                 detect_only: Optional[pulumi.Input[str]] = None,
                 error_action: Optional[pulumi.Input[str]] = None,
                 office_action: Optional[pulumi.Input[str]] = None,
                 office_dde: Optional[pulumi.Input[str]] = None,
                 office_embed: Optional[pulumi.Input[str]] = None,
                 office_hylink: Optional[pulumi.Input[str]] = None,
                 office_linked: Optional[pulumi.Input[str]] = None,
                 office_macro: Optional[pulumi.Input[str]] = None,
                 original_file_destination: Optional[pulumi.Input[str]] = None,
                 pdf_act_form: Optional[pulumi.Input[str]] = None,
                 pdf_act_gotor: Optional[pulumi.Input[str]] = None,
                 pdf_act_java: Optional[pulumi.Input[str]] = None,
                 pdf_act_launch: Optional[pulumi.Input[str]] = None,
                 pdf_act_movie: Optional[pulumi.Input[str]] = None,
                 pdf_act_sound: Optional[pulumi.Input[str]] = None,
                 pdf_embedfile: Optional[pulumi.Input[str]] = None,
                 pdf_hyperlink: Optional[pulumi.Input[str]] = None,
                 pdf_javacode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cover_page: Enable/disable inserting a cover page into the disarmed document. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] detect_only: Enable/disable only detect disarmable files, do not alter content. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] error_action: Action to be taken if CDR engine encounters an unrecoverable error. Valid values: `block`, `log-only`, `ignore`.
        :param pulumi.Input[str] office_action: Enable/disable stripping of PowerPoint action events in Microsoft Office documents. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] office_dde: Enable/disable stripping of Dynamic Data Exchange events in Microsoft Office documents. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] office_embed: Enable/disable stripping of embedded objects in Microsoft Office documents. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] office_hylink: Enable/disable stripping of hyperlinks in Microsoft Office documents. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] office_linked: Enable/disable stripping of linked objects in Microsoft Office documents. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] office_macro: Enable/disable stripping of macros in Microsoft Office documents. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] original_file_destination: Destination to send original file if active content is removed. Valid values: `fortisandbox`, `quarantine`, `discard`.
        :param pulumi.Input[str] pdf_act_form: Enable/disable stripping of actions that submit data to other targets in PDF documents. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] pdf_act_gotor: Enable/disable stripping of links to other PDFs in PDF documents. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] pdf_act_java: Enable/disable stripping of actions that execute JavaScript code in PDF documents. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] pdf_act_launch: Enable/disable stripping of links to external applications in PDF documents. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] pdf_act_movie: Enable/disable stripping of embedded movies in PDF documents. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] pdf_act_sound: Enable/disable stripping of embedded sound files in PDF documents. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] pdf_embedfile: Enable/disable stripping of embedded files in PDF documents. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] pdf_hyperlink: Enable/disable stripping of hyperlinks from PDF documents. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] pdf_javacode: Enable/disable stripping of JavaScript code in PDF documents. Valid values: `disable`, `enable`.
        """
        if cover_page is not None:
            pulumi.set(__self__, "cover_page", cover_page)
        if detect_only is not None:
            pulumi.set(__self__, "detect_only", detect_only)
        if error_action is not None:
            pulumi.set(__self__, "error_action", error_action)
        if office_action is not None:
            pulumi.set(__self__, "office_action", office_action)
        if office_dde is not None:
            pulumi.set(__self__, "office_dde", office_dde)
        if office_embed is not None:
            pulumi.set(__self__, "office_embed", office_embed)
        if office_hylink is not None:
            pulumi.set(__self__, "office_hylink", office_hylink)
        if office_linked is not None:
            pulumi.set(__self__, "office_linked", office_linked)
        if office_macro is not None:
            pulumi.set(__self__, "office_macro", office_macro)
        if original_file_destination is not None:
            pulumi.set(__self__, "original_file_destination", original_file_destination)
        if pdf_act_form is not None:
            pulumi.set(__self__, "pdf_act_form", pdf_act_form)
        if pdf_act_gotor is not None:
            pulumi.set(__self__, "pdf_act_gotor", pdf_act_gotor)
        if pdf_act_java is not None:
            pulumi.set(__self__, "pdf_act_java", pdf_act_java)
        if pdf_act_launch is not None:
            pulumi.set(__self__, "pdf_act_launch", pdf_act_launch)
        if pdf_act_movie is not None:
            pulumi.set(__self__, "pdf_act_movie", pdf_act_movie)
        if pdf_act_sound is not None:
            pulumi.set(__self__, "pdf_act_sound", pdf_act_sound)
        if pdf_embedfile is not None:
            pulumi.set(__self__, "pdf_embedfile", pdf_embedfile)
        if pdf_hyperlink is not None:
            pulumi.set(__self__, "pdf_hyperlink", pdf_hyperlink)
        if pdf_javacode is not None:
            pulumi.set(__self__, "pdf_javacode", pdf_javacode)

    @property
    @pulumi.getter(name="coverPage")
    def cover_page(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable inserting a cover page into the disarmed document. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "cover_page")

    @cover_page.setter
    def cover_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cover_page", value)

    @property
    @pulumi.getter(name="detectOnly")
    def detect_only(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable only detect disarmable files, do not alter content. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "detect_only")

    @detect_only.setter
    def detect_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detect_only", value)

    @property
    @pulumi.getter(name="errorAction")
    def error_action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to be taken if CDR engine encounters an unrecoverable error. Valid values: `block`, `log-only`, `ignore`.
        """
        return pulumi.get(self, "error_action")

    @error_action.setter
    def error_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_action", value)

    @property
    @pulumi.getter(name="officeAction")
    def office_action(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable stripping of PowerPoint action events in Microsoft Office documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "office_action")

    @office_action.setter
    def office_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "office_action", value)

    @property
    @pulumi.getter(name="officeDde")
    def office_dde(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable stripping of Dynamic Data Exchange events in Microsoft Office documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "office_dde")

    @office_dde.setter
    def office_dde(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "office_dde", value)

    @property
    @pulumi.getter(name="officeEmbed")
    def office_embed(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable stripping of embedded objects in Microsoft Office documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "office_embed")

    @office_embed.setter
    def office_embed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "office_embed", value)

    @property
    @pulumi.getter(name="officeHylink")
    def office_hylink(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable stripping of hyperlinks in Microsoft Office documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "office_hylink")

    @office_hylink.setter
    def office_hylink(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "office_hylink", value)

    @property
    @pulumi.getter(name="officeLinked")
    def office_linked(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable stripping of linked objects in Microsoft Office documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "office_linked")

    @office_linked.setter
    def office_linked(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "office_linked", value)

    @property
    @pulumi.getter(name="officeMacro")
    def office_macro(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable stripping of macros in Microsoft Office documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "office_macro")

    @office_macro.setter
    def office_macro(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "office_macro", value)

    @property
    @pulumi.getter(name="originalFileDestination")
    def original_file_destination(self) -> Optional[pulumi.Input[str]]:
        """
        Destination to send original file if active content is removed. Valid values: `fortisandbox`, `quarantine`, `discard`.
        """
        return pulumi.get(self, "original_file_destination")

    @original_file_destination.setter
    def original_file_destination(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "original_file_destination", value)

    @property
    @pulumi.getter(name="pdfActForm")
    def pdf_act_form(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable stripping of actions that submit data to other targets in PDF documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "pdf_act_form")

    @pdf_act_form.setter
    def pdf_act_form(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_act_form", value)

    @property
    @pulumi.getter(name="pdfActGotor")
    def pdf_act_gotor(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable stripping of links to other PDFs in PDF documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "pdf_act_gotor")

    @pdf_act_gotor.setter
    def pdf_act_gotor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_act_gotor", value)

    @property
    @pulumi.getter(name="pdfActJava")
    def pdf_act_java(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable stripping of actions that execute JavaScript code in PDF documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "pdf_act_java")

    @pdf_act_java.setter
    def pdf_act_java(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_act_java", value)

    @property
    @pulumi.getter(name="pdfActLaunch")
    def pdf_act_launch(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable stripping of links to external applications in PDF documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "pdf_act_launch")

    @pdf_act_launch.setter
    def pdf_act_launch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_act_launch", value)

    @property
    @pulumi.getter(name="pdfActMovie")
    def pdf_act_movie(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable stripping of embedded movies in PDF documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "pdf_act_movie")

    @pdf_act_movie.setter
    def pdf_act_movie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_act_movie", value)

    @property
    @pulumi.getter(name="pdfActSound")
    def pdf_act_sound(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable stripping of embedded sound files in PDF documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "pdf_act_sound")

    @pdf_act_sound.setter
    def pdf_act_sound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_act_sound", value)

    @property
    @pulumi.getter(name="pdfEmbedfile")
    def pdf_embedfile(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable stripping of embedded files in PDF documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "pdf_embedfile")

    @pdf_embedfile.setter
    def pdf_embedfile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_embedfile", value)

    @property
    @pulumi.getter(name="pdfHyperlink")
    def pdf_hyperlink(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable stripping of hyperlinks from PDF documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "pdf_hyperlink")

    @pdf_hyperlink.setter
    def pdf_hyperlink(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_hyperlink", value)

    @property
    @pulumi.getter(name="pdfJavacode")
    def pdf_javacode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable stripping of JavaScript code in PDF documents. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "pdf_javacode")

    @pdf_javacode.setter
    def pdf_javacode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pdf_javacode", value)


@pulumi.input_type
class AntivirusProfileExternalBlocklistArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: External blocklist.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        External blocklist.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AntivirusProfileFtpArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] archive_block: Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        :param pulumi.Input[str] archive_log: Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        :param pulumi.Input[str] av_scan: Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] emulator: Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] external_blocklist: Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] fortiai: Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] options: Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        :param pulumi.Input[str] outbreak_prevention: Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
        :param pulumi.Input[str] quarantine: Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        """
        Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        """
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        """
        Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        """
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        """
        Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
        """
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)


@pulumi.input_type
class AntivirusProfileHttpArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 content_disarm: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] archive_block: Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        :param pulumi.Input[str] archive_log: Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        :param pulumi.Input[str] av_scan: Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] content_disarm: Enable Content Disarm and Reconstruction for this protocol. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] emulator: Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] external_blocklist: Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] fortiai: Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] options: Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        :param pulumi.Input[str] outbreak_prevention: Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
        :param pulumi.Input[str] quarantine: Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        """
        Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        """
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        """
        Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        """
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[pulumi.Input[str]]:
        """
        Enable Content Disarm and Reconstruction for this protocol. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "content_disarm")

    @content_disarm.setter
    def content_disarm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_disarm", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        """
        Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
        """
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)


@pulumi.input_type
class AntivirusProfileImapArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 content_disarm: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 executables: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] archive_block: Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        :param pulumi.Input[str] archive_log: Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        :param pulumi.Input[str] av_scan: Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] content_disarm: Enable Content Disarm and Reconstruction for this protocol. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] emulator: Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] executables: Treat Windows executable files as viruses for the purpose of blocking or monitoring. Valid values: `default`, `virus`.
        :param pulumi.Input[str] external_blocklist: Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] fortiai: Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] options: Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        :param pulumi.Input[str] outbreak_prevention: Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
        :param pulumi.Input[str] quarantine: Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        """
        Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        """
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        """
        Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        """
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[pulumi.Input[str]]:
        """
        Enable Content Disarm and Reconstruction for this protocol. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "content_disarm")

    @content_disarm.setter
    def content_disarm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_disarm", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter
    def executables(self) -> Optional[pulumi.Input[str]]:
        """
        Treat Windows executable files as viruses for the purpose of blocking or monitoring. Valid values: `default`, `virus`.
        """
        return pulumi.get(self, "executables")

    @executables.setter
    def executables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "executables", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        """
        Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
        """
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)


@pulumi.input_type
class AntivirusProfileMapiArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 executables: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] archive_block: Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        :param pulumi.Input[str] archive_log: Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        :param pulumi.Input[str] av_scan: Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] emulator: Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] executables: Treat Windows executable files as viruses for the purpose of blocking or monitoring. Valid values: `default`, `virus`.
        :param pulumi.Input[str] external_blocklist: Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] fortiai: Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] options: Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        :param pulumi.Input[str] outbreak_prevention: Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
        :param pulumi.Input[str] quarantine: Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        """
        Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        """
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        """
        Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        """
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter
    def executables(self) -> Optional[pulumi.Input[str]]:
        """
        Treat Windows executable files as viruses for the purpose of blocking or monitoring. Valid values: `default`, `virus`.
        """
        return pulumi.get(self, "executables")

    @executables.setter
    def executables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "executables", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        """
        Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
        """
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)


@pulumi.input_type
class AntivirusProfileNacQuarArgs:
    def __init__(__self__, *,
                 expiry: Optional[pulumi.Input[str]] = None,
                 infected: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] expiry: Duration of quarantine.
        :param pulumi.Input[str] infected: Enable/Disable quarantining infected hosts to the banned user list. Valid values: `none`, `quar-src-ip`.
        :param pulumi.Input[str] log: Enable/disable AntiVirus quarantine logging. Valid values: `enable`, `disable`.
        """
        if expiry is not None:
            pulumi.set(__self__, "expiry", expiry)
        if infected is not None:
            pulumi.set(__self__, "infected", infected)
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter
    def expiry(self) -> Optional[pulumi.Input[str]]:
        """
        Duration of quarantine.
        """
        return pulumi.get(self, "expiry")

    @expiry.setter
    def expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiry", value)

    @property
    @pulumi.getter
    def infected(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/Disable quarantining infected hosts to the banned user list. Valid values: `none`, `quar-src-ip`.
        """
        return pulumi.get(self, "infected")

    @infected.setter
    def infected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "infected", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable AntiVirus quarantine logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)


@pulumi.input_type
class AntivirusProfileNntpArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] archive_block: Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        :param pulumi.Input[str] archive_log: Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        :param pulumi.Input[str] av_scan: Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] emulator: Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] external_blocklist: Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] fortiai: Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] options: Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        :param pulumi.Input[str] outbreak_prevention: Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
        :param pulumi.Input[str] quarantine: Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        """
        Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        """
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        """
        Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        """
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        """
        Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
        """
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)


@pulumi.input_type
class AntivirusProfileOutbreakPreventionArgs:
    def __init__(__self__, *,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 ftgd_service: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] external_blocklist: Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ftgd_service: Enable/disable FortiGuard Virus outbreak prevention service. Valid values: `disable`, `enable`.
        """
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if ftgd_service is not None:
            pulumi.set(__self__, "ftgd_service", ftgd_service)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter(name="ftgdService")
    def ftgd_service(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiGuard Virus outbreak prevention service. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ftgd_service")

    @ftgd_service.setter
    def ftgd_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftgd_service", value)


@pulumi.input_type
class AntivirusProfilePop3Args:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 content_disarm: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 executables: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] archive_block: Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        :param pulumi.Input[str] archive_log: Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        :param pulumi.Input[str] av_scan: Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] content_disarm: Enable Content Disarm and Reconstruction for this protocol. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] emulator: Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] executables: Treat Windows executable files as viruses for the purpose of blocking or monitoring. Valid values: `default`, `virus`.
        :param pulumi.Input[str] external_blocklist: Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] fortiai: Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] options: Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        :param pulumi.Input[str] outbreak_prevention: Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
        :param pulumi.Input[str] quarantine: Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        """
        Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        """
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        """
        Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        """
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[pulumi.Input[str]]:
        """
        Enable Content Disarm and Reconstruction for this protocol. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "content_disarm")

    @content_disarm.setter
    def content_disarm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_disarm", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter
    def executables(self) -> Optional[pulumi.Input[str]]:
        """
        Treat Windows executable files as viruses for the purpose of blocking or monitoring. Valid values: `default`, `virus`.
        """
        return pulumi.get(self, "executables")

    @executables.setter
    def executables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "executables", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        """
        Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
        """
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)


@pulumi.input_type
class AntivirusProfileSmbArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] archive_block: Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        :param pulumi.Input[str] archive_log: Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        :param pulumi.Input[str] emulator: Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] options: Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        :param pulumi.Input[str] outbreak_prevention: Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
        """
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        """
        Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        """
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        """
        Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        """
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        """
        Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
        """
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)


@pulumi.input_type
class AntivirusProfileSmtpArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 content_disarm: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 executables: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] archive_block: Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        :param pulumi.Input[str] archive_log: Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        :param pulumi.Input[str] av_scan: Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] content_disarm: Enable Content Disarm and Reconstruction for this protocol. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] emulator: Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] executables: Treat Windows executable files as viruses for the purpose of blocking or monitoring. Valid values: `default`, `virus`.
        :param pulumi.Input[str] external_blocklist: Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] fortiai: Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] options: Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        :param pulumi.Input[str] outbreak_prevention: Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
        :param pulumi.Input[str] quarantine: Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if executables is not None:
            pulumi.set(__self__, "executables", executables)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        """
        Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        """
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        """
        Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        """
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[pulumi.Input[str]]:
        """
        Enable Content Disarm and Reconstruction for this protocol. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "content_disarm")

    @content_disarm.setter
    def content_disarm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_disarm", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter
    def executables(self) -> Optional[pulumi.Input[str]]:
        """
        Treat Windows executable files as viruses for the purpose of blocking or monitoring. Valid values: `default`, `virus`.
        """
        return pulumi.get(self, "executables")

    @executables.setter
    def executables(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "executables", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        """
        Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
        """
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)


@pulumi.input_type
class AntivirusProfileSshArgs:
    def __init__(__self__, *,
                 archive_block: Optional[pulumi.Input[str]] = None,
                 archive_log: Optional[pulumi.Input[str]] = None,
                 av_scan: Optional[pulumi.Input[str]] = None,
                 emulator: Optional[pulumi.Input[str]] = None,
                 external_blocklist: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] archive_block: Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        :param pulumi.Input[str] archive_log: Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        :param pulumi.Input[str] av_scan: Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] emulator: Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] external_blocklist: Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] fortiai: Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        :param pulumi.Input[str] options: Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        :param pulumi.Input[str] outbreak_prevention: Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
        :param pulumi.Input[str] quarantine: Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        if archive_block is not None:
            pulumi.set(__self__, "archive_block", archive_block)
        if archive_log is not None:
            pulumi.set(__self__, "archive_log", archive_log)
        if av_scan is not None:
            pulumi.set(__self__, "av_scan", av_scan)
        if emulator is not None:
            pulumi.set(__self__, "emulator", emulator)
        if external_blocklist is not None:
            pulumi.set(__self__, "external_blocklist", external_blocklist)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if outbreak_prevention is not None:
            pulumi.set(__self__, "outbreak_prevention", outbreak_prevention)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)

    @property
    @pulumi.getter(name="archiveBlock")
    def archive_block(self) -> Optional[pulumi.Input[str]]:
        """
        Select the archive types to block. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        """
        return pulumi.get(self, "archive_block")

    @archive_block.setter
    def archive_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_block", value)

    @property
    @pulumi.getter(name="archiveLog")
    def archive_log(self) -> Optional[pulumi.Input[str]]:
        """
        Select the archive types to log. Valid values: `encrypted`, `corrupted`, `partiallycorrupted`, `multipart`, `nested`, `mailbomb`, `fileslimit`, `timeout`, `unhandled`.
        """
        return pulumi.get(self, "archive_log")

    @archive_log.setter
    def archive_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive_log", value)

    @property
    @pulumi.getter(name="avScan")
    def av_scan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable AntiVirus scan service. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "av_scan")

    @av_scan.setter
    def av_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_scan", value)

    @property
    @pulumi.getter
    def emulator(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the virus emulator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "emulator")

    @emulator.setter
    def emulator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emulator", value)

    @property
    @pulumi.getter(name="externalBlocklist")
    def external_blocklist(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable external malware blocklist. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "external_blocklist")

    @external_blocklist.setter
    def external_blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_blocklist", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of files by FortiAI server. Valid values: `disable`, `block`, `monitor`.
        """
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SMB AntiVirus scanning, monitoring, and quarantine. Valid values: `scan`, `avmonitor`, `quarantine`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="outbreakPrevention")
    def outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        """
        Enable Virus Outbreak Prevention service. Valid values: `disabled`, `files`, `full-archive`.
        """
        return pulumi.get(self, "outbreak_prevention")

    @outbreak_prevention.setter
    def outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbreak_prevention", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable quarantine for infected files. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)


@pulumi.input_type
class ApplicationGroupApplicationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Category IDs.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Category IDs.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ApplicationGroupCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Category IDs.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Category IDs.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ApplicationGroupRiskArgs:
    def __init__(__self__, *,
                 level: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] level: Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical).
        """
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[int]]:
        """
        Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical).
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "level", value)


@pulumi.input_type
class ApplicationListDefaultNetworkServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 services: Optional[pulumi.Input[str]] = None,
                 violation_action: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[int] port: Port number.
        :param pulumi.Input[str] services: Network protocols. Valid values: `http`, `ssh`, `telnet`, `ftp`, `dns`, `smtp`, `pop3`, `imap`, `snmp`, `nntp`, `https`.
        :param pulumi.Input[str] violation_action: Action for protocols not white listed under selected port. Valid values: `pass`, `monitor`, `block`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if violation_action is not None:
            pulumi.set(__self__, "violation_action", violation_action)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port number.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[str]]:
        """
        Network protocols. Valid values: `http`, `ssh`, `telnet`, `ftp`, `dns`, `smtp`, `pop3`, `imap`, `snmp`, `nntp`, `https`.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="violationAction")
    def violation_action(self) -> Optional[pulumi.Input[str]]:
        """
        Action for protocols not white listed under selected port. Valid values: `pass`, `monitor`, `block`.
        """
        return pulumi.get(self, "violation_action")

    @violation_action.setter
    def violation_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "violation_action", value)


@pulumi.input_type
class ApplicationListEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 applications: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryApplicationArgs']]]] = None,
                 behavior: Optional[pulumi.Input[str]] = None,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryCategoryArgs']]]] = None,
                 exclusions: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryExclusionArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 log_packet: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryParameterArgs']]]] = None,
                 per_ip_shaper: Optional[pulumi.Input[str]] = None,
                 popularity: Optional[pulumi.Input[str]] = None,
                 protocols: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 quarantine_expiry: Optional[pulumi.Input[str]] = None,
                 quarantine_log: Optional[pulumi.Input[str]] = None,
                 rate_count: Optional[pulumi.Input[int]] = None,
                 rate_duration: Optional[pulumi.Input[int]] = None,
                 rate_mode: Optional[pulumi.Input[str]] = None,
                 rate_track: Optional[pulumi.Input[str]] = None,
                 risks: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryRiskArgs']]]] = None,
                 session_ttl: Optional[pulumi.Input[int]] = None,
                 shaper: Optional[pulumi.Input[str]] = None,
                 shaper_reverse: Optional[pulumi.Input[str]] = None,
                 sub_categories: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntrySubCategoryArgs']]]] = None,
                 technology: Optional[pulumi.Input[str]] = None,
                 vendor: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Pass or block traffic, or reset connection for traffic from this application. Valid values: `pass`, `block`, `reset`.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryApplicationArgs']]] applications: ID of allowed applications. The structure of `application` block is documented below.
        :param pulumi.Input[str] behavior: Application behavior filter.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryCategoryArgs']]] categories: Category ID list. The structure of `category` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryExclusionArgs']]] exclusions: ID of excluded applications. The structure of `exclusion` block is documented below.
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[str] log: Enable/disable logging for this application list. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] log_packet: Enable/disable packet logging. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryParameterArgs']]] parameters: Application parameters. The structure of `parameters` block is documented below.
        :param pulumi.Input[str] per_ip_shaper: Per-IP traffic shaper.
        :param pulumi.Input[str] popularity: Application popularity filter (1 - 5, from least to most popular). Valid values: `1`, `2`, `3`, `4`, `5`.
        :param pulumi.Input[str] protocols: Application protocol filter.
        :param pulumi.Input[str] quarantine: Quarantine method. Valid values: `none`, `attacker`.
        :param pulumi.Input[str] quarantine_expiry: Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
        :param pulumi.Input[str] quarantine_log: Enable/disable quarantine logging. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] rate_count: Count of the rate.
        :param pulumi.Input[int] rate_duration: Duration (sec) of the rate.
        :param pulumi.Input[str] rate_mode: Rate limit mode. Valid values: `periodical`, `continuous`.
        :param pulumi.Input[str] rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`, `dhcp-client-mac`, `dns-domain`.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryRiskArgs']]] risks: Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical). The structure of `risk` block is documented below.
        :param pulumi.Input[int] session_ttl: Session TTL (0 = default).
        :param pulumi.Input[str] shaper: Traffic shaper.
        :param pulumi.Input[str] shaper_reverse: Reverse traffic shaper.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationListEntrySubCategoryArgs']]] sub_categories: Application Sub-category ID list. The structure of `sub_category` block is documented below.
        :param pulumi.Input[str] technology: Application technology filter.
        :param pulumi.Input[str] vendor: Application vendor filter.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if categories is not None:
            pulumi.set(__self__, "categories", categories)
        if exclusions is not None:
            pulumi.set(__self__, "exclusions", exclusions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_packet is not None:
            pulumi.set(__self__, "log_packet", log_packet)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if per_ip_shaper is not None:
            pulumi.set(__self__, "per_ip_shaper", per_ip_shaper)
        if popularity is not None:
            pulumi.set(__self__, "popularity", popularity)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if rate_count is not None:
            pulumi.set(__self__, "rate_count", rate_count)
        if rate_duration is not None:
            pulumi.set(__self__, "rate_duration", rate_duration)
        if rate_mode is not None:
            pulumi.set(__self__, "rate_mode", rate_mode)
        if rate_track is not None:
            pulumi.set(__self__, "rate_track", rate_track)
        if risks is not None:
            pulumi.set(__self__, "risks", risks)
        if session_ttl is not None:
            pulumi.set(__self__, "session_ttl", session_ttl)
        if shaper is not None:
            pulumi.set(__self__, "shaper", shaper)
        if shaper_reverse is not None:
            pulumi.set(__self__, "shaper_reverse", shaper_reverse)
        if sub_categories is not None:
            pulumi.set(__self__, "sub_categories", sub_categories)
        if technology is not None:
            pulumi.set(__self__, "technology", technology)
        if vendor is not None:
            pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Pass or block traffic, or reset connection for traffic from this application. Valid values: `pass`, `block`, `reset`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryApplicationArgs']]]]:
        """
        ID of allowed applications. The structure of `application` block is documented below.
        """
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryApplicationArgs']]]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[pulumi.Input[str]]:
        """
        Application behavior filter.
        """
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "behavior", value)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryCategoryArgs']]]]:
        """
        Category ID list. The structure of `category` block is documented below.
        """
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryCategoryArgs']]]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def exclusions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryExclusionArgs']]]]:
        """
        ID of excluded applications. The structure of `exclusion` block is documented below.
        """
        return pulumi.get(self, "exclusions")

    @exclusions.setter
    def exclusions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryExclusionArgs']]]]):
        pulumi.set(self, "exclusions", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging for this application list. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logPacket")
    def log_packet(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable packet logging. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_packet")

    @log_packet.setter
    def log_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_packet", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryParameterArgs']]]]:
        """
        Application parameters. The structure of `parameters` block is documented below.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="perIpShaper")
    def per_ip_shaper(self) -> Optional[pulumi.Input[str]]:
        """
        Per-IP traffic shaper.
        """
        return pulumi.get(self, "per_ip_shaper")

    @per_ip_shaper.setter
    def per_ip_shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "per_ip_shaper", value)

    @property
    @pulumi.getter
    def popularity(self) -> Optional[pulumi.Input[str]]:
        """
        Application popularity filter (1 - 5, from least to most popular). Valid values: `1`, `2`, `3`, `4`, `5`.
        """
        return pulumi.get(self, "popularity")

    @popularity.setter
    def popularity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "popularity", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[str]]:
        """
        Application protocol filter.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine method. Valid values: `none`, `attacker`.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[pulumi.Input[str]]:
        """
        Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
        """
        return pulumi.get(self, "quarantine_expiry")

    @quarantine_expiry.setter
    def quarantine_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_expiry", value)

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable quarantine logging. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine_log")

    @quarantine_log.setter
    def quarantine_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_log", value)

    @property
    @pulumi.getter(name="rateCount")
    def rate_count(self) -> Optional[pulumi.Input[int]]:
        """
        Count of the rate.
        """
        return pulumi.get(self, "rate_count")

    @rate_count.setter
    def rate_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rate_count", value)

    @property
    @pulumi.getter(name="rateDuration")
    def rate_duration(self) -> Optional[pulumi.Input[int]]:
        """
        Duration (sec) of the rate.
        """
        return pulumi.get(self, "rate_duration")

    @rate_duration.setter
    def rate_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rate_duration", value)

    @property
    @pulumi.getter(name="rateMode")
    def rate_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Rate limit mode. Valid values: `periodical`, `continuous`.
        """
        return pulumi.get(self, "rate_mode")

    @rate_mode.setter
    def rate_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_mode", value)

    @property
    @pulumi.getter(name="rateTrack")
    def rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`, `dhcp-client-mac`, `dns-domain`.
        """
        return pulumi.get(self, "rate_track")

    @rate_track.setter
    def rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_track", value)

    @property
    @pulumi.getter
    def risks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryRiskArgs']]]]:
        """
        Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical). The structure of `risk` block is documented below.
        """
        return pulumi.get(self, "risks")

    @risks.setter
    def risks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryRiskArgs']]]]):
        pulumi.set(self, "risks", value)

    @property
    @pulumi.getter(name="sessionTtl")
    def session_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Session TTL (0 = default).
        """
        return pulumi.get(self, "session_ttl")

    @session_ttl.setter
    def session_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_ttl", value)

    @property
    @pulumi.getter
    def shaper(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic shaper.
        """
        return pulumi.get(self, "shaper")

    @shaper.setter
    def shaper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shaper", value)

    @property
    @pulumi.getter(name="shaperReverse")
    def shaper_reverse(self) -> Optional[pulumi.Input[str]]:
        """
        Reverse traffic shaper.
        """
        return pulumi.get(self, "shaper_reverse")

    @shaper_reverse.setter
    def shaper_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shaper_reverse", value)

    @property
    @pulumi.getter(name="subCategories")
    def sub_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntrySubCategoryArgs']]]]:
        """
        Application Sub-category ID list. The structure of `sub_category` block is documented below.
        """
        return pulumi.get(self, "sub_categories")

    @sub_categories.setter
    def sub_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntrySubCategoryArgs']]]]):
        pulumi.set(self, "sub_categories", value)

    @property
    @pulumi.getter
    def technology(self) -> Optional[pulumi.Input[str]]:
        """
        Application technology filter.
        """
        return pulumi.get(self, "technology")

    @technology.setter
    def technology(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "technology", value)

    @property
    @pulumi.getter
    def vendor(self) -> Optional[pulumi.Input[str]]:
        """
        Application vendor filter.
        """
        return pulumi.get(self, "vendor")

    @vendor.setter
    def vendor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vendor", value)


@pulumi.input_type
class ApplicationListEntryApplicationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Entry ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ApplicationListEntryCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Entry ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ApplicationListEntryExclusionArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Entry ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ApplicationListEntryParameterArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryParameterMemberArgs']]]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryParameterMemberArgs']]] members: Parameter tuple members. The structure of `members` block is documented below.
        :param pulumi.Input[str] value: Parameter value.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryParameterMemberArgs']]]]:
        """
        Parameter tuple members. The structure of `members` block is documented below.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationListEntryParameterMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationListEntryParameterMemberArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[str] name: Parameter name.
        :param pulumi.Input[str] value: Parameter value.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationListEntryRiskArgs:
    def __init__(__self__, *,
                 level: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] level: Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical).
        """
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[int]]:
        """
        Risk, or impact, of allowing traffic from this application to occur (1 - 5; Low, Elevated, Medium, High, and Critical).
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "level", value)


@pulumi.input_type
class ApplicationListEntrySubCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Entry ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ApplicationNameMetadataArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 metaid: Optional[pulumi.Input[int]] = None,
                 valueid: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[int] metaid: Meta ID.
        :param pulumi.Input[int] valueid: Value ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metaid is not None:
            pulumi.set(__self__, "metaid", metaid)
        if valueid is not None:
            pulumi.set(__self__, "valueid", valueid)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def metaid(self) -> Optional[pulumi.Input[int]]:
        """
        Meta ID.
        """
        return pulumi.get(self, "metaid")

    @metaid.setter
    def metaid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metaid", value)

    @property
    @pulumi.getter
    def valueid(self) -> Optional[pulumi.Input[int]]:
        """
        Value ID.
        """
        return pulumi.get(self, "valueid")

    @valueid.setter
    def valueid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "valueid", value)


@pulumi.input_type
class ApplicationNameParameterArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Parameter name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AuthenticationRuleDstaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AuthenticationRuleDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AuthenticationRuleSrcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AuthenticationRuleSrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AuthenticationRuleSrcintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AuthenticationSchemeUserDatabaseArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Authentication server name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication server name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AuthenticationSettingDevRangeArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AuthenticationSettingUserCertCaArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class CifsProfileFileFilterArgs:
    def __init__(__self__, *,
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input['CifsProfileFileFilterEntryArgs']]]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['CifsProfileFileFilterEntryArgs']]] entries: File filter entries. The structure of `entries` block is documented below.
        :param pulumi.Input[str] log: Enable/disable file filter logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable file filter. Valid values: `enable`, `disable`.
        """
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CifsProfileFileFilterEntryArgs']]]]:
        """
        File filter entries. The structure of `entries` block is documented below.
        """
        return pulumi.get(self, "entries")

    @entries.setter
    def entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CifsProfileFileFilterEntryArgs']]]]):
        pulumi.set(self, "entries", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable file filter logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable file filter. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class CifsProfileFileFilterEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input['CifsProfileFileFilterEntryFileTypeArgs']]]] = None,
                 filter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action taken for matched file. Valid values: `log`, `block`.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] direction: Match files transmitted in the session's originating or reply direction. Valid values: `incoming`, `outgoing`, `any`.
        :param pulumi.Input[Sequence[pulumi.Input['CifsProfileFileFilterEntryFileTypeArgs']]] file_types: Select file type. The structure of `file_type` block is documented below.
        :param pulumi.Input[str] filter: Add a file filter.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action taken for matched file. Valid values: `log`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        """
        Match files transmitted in the session's originating or reply direction. Valid values: `incoming`, `outgoing`, `any`.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CifsProfileFileFilterEntryFileTypeArgs']]]]:
        """
        Select file type. The structure of `file_type` block is documented below.
        """
        return pulumi.get(self, "file_types")

    @file_types.setter
    def file_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CifsProfileFileFilterEntryFileTypeArgs']]]]):
        pulumi.set(self, "file_types", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Add a file filter.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)


@pulumi.input_type
class CifsProfileFileFilterEntryFileTypeArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: File type name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        File type name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class CifsProfileServerKeytabArgs:
    def __init__(__self__, *,
                 keytab: Optional[pulumi.Input[str]] = None,
                 principal: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keytab: Base64 encoded keytab file containing credential of the server.
        :param pulumi.Input[str] principal: Service principal.  For example, "host/cifsserver.example.com@example.com".
        """
        if keytab is not None:
            pulumi.set(__self__, "keytab", keytab)
        if principal is not None:
            pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def keytab(self) -> Optional[pulumi.Input[str]]:
        """
        Base64 encoded keytab file containing credential of the server.
        """
        return pulumi.get(self, "keytab")

    @keytab.setter
    def keytab(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keytab", value)

    @property
    @pulumi.getter
    def principal(self) -> Optional[pulumi.Input[str]]:
        """
        Service principal.  For example, "host/cifsserver.example.com@example.com".
        """
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal", value)


@pulumi.input_type
class DlpFilepatternEntryArgs:
    def __init__(__self__, *,
                 file_type: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] file_type: Select a file type.
        :param pulumi.Input[str] filter_type: Filter by file name pattern or by file type. Valid values: `pattern`, `type`.
        :param pulumi.Input[str] pattern: Add a file name pattern.
        """
        if file_type is not None:
            pulumi.set(__self__, "file_type", file_type)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[pulumi.Input[str]]:
        """
        Select a file type.
        """
        return pulumi.get(self, "file_type")

    @file_type.setter
    def file_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_type", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filter by file name pattern or by file type. Valid values: `pattern`, `type`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Add a file name pattern.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class DlpSensorFilterArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 archive: Optional[pulumi.Input[str]] = None,
                 company_identifier: Optional[pulumi.Input[str]] = None,
                 expiry: Optional[pulumi.Input[str]] = None,
                 file_size: Optional[pulumi.Input[int]] = None,
                 file_type: Optional[pulumi.Input[int]] = None,
                 filter_by: Optional[pulumi.Input[str]] = None,
                 fp_sensitivities: Optional[pulumi.Input[Sequence[pulumi.Input['DlpSensorFilterFpSensitivityArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 match_percentage: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 proto: Optional[pulumi.Input[str]] = None,
                 regexp: Optional[pulumi.Input[str]] = None,
                 sensitivities: Optional[pulumi.Input[Sequence[pulumi.Input['DlpSensorFilterSensitivityArgs']]]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action to take with content that this DLP sensor matches. Valid values: `allow`, `log-only`, `block`, `quarantine-ip`.
        :param pulumi.Input[str] archive: Enable/disable DLP archiving. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] company_identifier: Enter a company identifier watermark to match. Only watermarks that your company has placed on the files are matched.
        :param pulumi.Input[str] expiry: Quarantine duration in days, hours, minutes format (dddhhmm).
        :param pulumi.Input[int] file_size: Match files this size or larger (0 - 4294967295 kbytes).
        :param pulumi.Input[int] file_type: Select the number of a DLP file pattern table to match.
        :param pulumi.Input[str] filter_by: Select the type of content to match.
        :param pulumi.Input[Sequence[pulumi.Input['DlpSensorFilterFpSensitivityArgs']]] fp_sensitivities: Select a DLP file pattern sensitivity to match. The structure of `fp_sensitivity` block is documented below.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[int] match_percentage: Percentage of fingerprints in the fingerprint databases designated with the selected fp-sensitivity to match.
        :param pulumi.Input[str] name: Select a DLP sensitivity.
        :param pulumi.Input[str] proto: Check messages or files over one or more of these protocols.
        :param pulumi.Input[str] regexp: Enter a regular expression to match (max. 255 characters).
        :param pulumi.Input[Sequence[pulumi.Input['DlpSensorFilterSensitivityArgs']]] sensitivities: Select a DLP file pattern sensitivity to match. The structure of `sensitivity` block is documented below.
        :param pulumi.Input[str] severity: Select the severity or threat level that matches this filter. Valid values: `info`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] type: Select whether to check the content of messages (an email message) or files (downloaded files or email attachments).  Valid values: `file`, `message`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if archive is not None:
            pulumi.set(__self__, "archive", archive)
        if company_identifier is not None:
            pulumi.set(__self__, "company_identifier", company_identifier)
        if expiry is not None:
            pulumi.set(__self__, "expiry", expiry)
        if file_size is not None:
            pulumi.set(__self__, "file_size", file_size)
        if file_type is not None:
            pulumi.set(__self__, "file_type", file_type)
        if filter_by is not None:
            pulumi.set(__self__, "filter_by", filter_by)
        if fp_sensitivities is not None:
            pulumi.set(__self__, "fp_sensitivities", fp_sensitivities)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if match_percentage is not None:
            pulumi.set(__self__, "match_percentage", match_percentage)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if proto is not None:
            pulumi.set(__self__, "proto", proto)
        if regexp is not None:
            pulumi.set(__self__, "regexp", regexp)
        if sensitivities is not None:
            pulumi.set(__self__, "sensitivities", sensitivities)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take with content that this DLP sensor matches. Valid values: `allow`, `log-only`, `block`, `quarantine-ip`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def archive(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DLP archiving. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "archive")

    @archive.setter
    def archive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "archive", value)

    @property
    @pulumi.getter(name="companyIdentifier")
    def company_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Enter a company identifier watermark to match. Only watermarks that your company has placed on the files are matched.
        """
        return pulumi.get(self, "company_identifier")

    @company_identifier.setter
    def company_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company_identifier", value)

    @property
    @pulumi.getter
    def expiry(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine duration in days, hours, minutes format (dddhhmm).
        """
        return pulumi.get(self, "expiry")

    @expiry.setter
    def expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiry", value)

    @property
    @pulumi.getter(name="fileSize")
    def file_size(self) -> Optional[pulumi.Input[int]]:
        """
        Match files this size or larger (0 - 4294967295 kbytes).
        """
        return pulumi.get(self, "file_size")

    @file_size.setter
    def file_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_size", value)

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[pulumi.Input[int]]:
        """
        Select the number of a DLP file pattern table to match.
        """
        return pulumi.get(self, "file_type")

    @file_type.setter
    def file_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_type", value)

    @property
    @pulumi.getter(name="filterBy")
    def filter_by(self) -> Optional[pulumi.Input[str]]:
        """
        Select the type of content to match.
        """
        return pulumi.get(self, "filter_by")

    @filter_by.setter
    def filter_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_by", value)

    @property
    @pulumi.getter(name="fpSensitivities")
    def fp_sensitivities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DlpSensorFilterFpSensitivityArgs']]]]:
        """
        Select a DLP file pattern sensitivity to match. The structure of `fp_sensitivity` block is documented below.
        """
        return pulumi.get(self, "fp_sensitivities")

    @fp_sensitivities.setter
    def fp_sensitivities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DlpSensorFilterFpSensitivityArgs']]]]):
        pulumi.set(self, "fp_sensitivities", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="matchPercentage")
    def match_percentage(self) -> Optional[pulumi.Input[int]]:
        """
        Percentage of fingerprints in the fingerprint databases designated with the selected fp-sensitivity to match.
        """
        return pulumi.get(self, "match_percentage")

    @match_percentage.setter
    def match_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "match_percentage", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Select a DLP sensitivity.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def proto(self) -> Optional[pulumi.Input[str]]:
        """
        Check messages or files over one or more of these protocols.
        """
        return pulumi.get(self, "proto")

    @proto.setter
    def proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proto", value)

    @property
    @pulumi.getter
    def regexp(self) -> Optional[pulumi.Input[str]]:
        """
        Enter a regular expression to match (max. 255 characters).
        """
        return pulumi.get(self, "regexp")

    @regexp.setter
    def regexp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regexp", value)

    @property
    @pulumi.getter
    def sensitivities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DlpSensorFilterSensitivityArgs']]]]:
        """
        Select a DLP file pattern sensitivity to match. The structure of `sensitivity` block is documented below.
        """
        return pulumi.get(self, "sensitivities")

    @sensitivities.setter
    def sensitivities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DlpSensorFilterSensitivityArgs']]]]):
        pulumi.set(self, "sensitivities", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Select the severity or threat level that matches this filter. Valid values: `info`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Select whether to check the content of messages (an email message) or files (downloaded files or email attachments).  Valid values: `file`, `message`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DlpSensorFilterFpSensitivityArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Select a DLP sensitivity.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Select a DLP sensitivity.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DlpSensorFilterSensitivityArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Select a DLP sensitivity.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Select a DLP sensitivity.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DnsfilterDomainFilterEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action to take for domain filter matches. Valid values: `block`, `allow`, `monitor`.
        :param pulumi.Input[str] domain: Domain entries to be filtered.
        :param pulumi.Input[int] id: Id.
        :param pulumi.Input[str] status: Enable/disable this domain filter. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] type: DNS domain filter type. Valid values: `simple`, `regex`, `wildcard`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take for domain filter matches. Valid values: `block`, `allow`, `monitor`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain entries to be filtered.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this domain filter. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        DNS domain filter type. Valid values: `simple`, `regex`, `wildcard`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DnsfilterProfileDnsTranslationArgs:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 dst: Optional[pulumi.Input[str]] = None,
                 dst6: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 netmask: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[int]] = None,
                 src: Optional[pulumi.Input[str]] = None,
                 src6: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] addr_type: DNS translation type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] dst: IPv4 address or subnet on the external network to substitute for the resolved address in DNS query replies. Can be single IP address or subnet on the external network, but number of addresses must equal number of mapped IP addresses in src.
        :param pulumi.Input[str] dst6: IPv6 address or subnet on the external network to substitute for the resolved address in DNS query replies. Can be single IP address or subnet on the external network, but number of addresses must equal number of mapped IP addresses in src6.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] netmask: If src and dst are subnets rather than single IP addresses, enter the netmask for both src and dst.
        :param pulumi.Input[int] prefix: If src6 and dst6 are subnets rather than single IP addresses, enter the prefix for both src6 and dst6 (1 - 128, default = 128).
        :param pulumi.Input[str] src: IPv4 address or subnet on the internal network to compare with the resolved address in DNS query replies. If the resolved address matches, the resolved address is substituted with dst.
        :param pulumi.Input[str] src6: IPv6 address or subnet on the internal network to compare with the resolved address in DNS query replies. If the resolved address matches, the resolved address is substituted with dst6.
        :param pulumi.Input[str] status: Enable/disable this DNS translation entry. Valid values: `enable`, `disable`.
        """
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if dst6 is not None:
            pulumi.set(__self__, "dst6", dst6)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if netmask is not None:
            pulumi.set(__self__, "netmask", netmask)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if src is not None:
            pulumi.set(__self__, "src", src)
        if src6 is not None:
            pulumi.set(__self__, "src6", src6)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        DNS translation type (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter
    def dst(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address or subnet on the external network to substitute for the resolved address in DNS query replies. Can be single IP address or subnet on the external network, but number of addresses must equal number of mapped IP addresses in src.
        """
        return pulumi.get(self, "dst")

    @dst.setter
    def dst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst", value)

    @property
    @pulumi.getter
    def dst6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address or subnet on the external network to substitute for the resolved address in DNS query replies. Can be single IP address or subnet on the external network, but number of addresses must equal number of mapped IP addresses in src6.
        """
        return pulumi.get(self, "dst6")

    @dst6.setter
    def dst6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst6", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def netmask(self) -> Optional[pulumi.Input[str]]:
        """
        If src and dst are subnets rather than single IP addresses, enter the netmask for both src and dst.
        """
        return pulumi.get(self, "netmask")

    @netmask.setter
    def netmask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "netmask", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[int]]:
        """
        If src6 and dst6 are subnets rather than single IP addresses, enter the prefix for both src6 and dst6 (1 - 128, default = 128).
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def src(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address or subnet on the internal network to compare with the resolved address in DNS query replies. If the resolved address matches, the resolved address is substituted with dst.
        """
        return pulumi.get(self, "src")

    @src.setter
    def src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src", value)

    @property
    @pulumi.getter
    def src6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address or subnet on the internal network to compare with the resolved address in DNS query replies. If the resolved address matches, the resolved address is substituted with dst6.
        """
        return pulumi.get(self, "src6")

    @src6.setter
    def src6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src6", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this DNS translation entry. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class DnsfilterProfileDomainFilterArgs:
    def __init__(__self__, *,
                 domain_filter_table: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] domain_filter_table: DNS domain filter table ID.
        """
        if domain_filter_table is not None:
            pulumi.set(__self__, "domain_filter_table", domain_filter_table)

    @property
    @pulumi.getter(name="domainFilterTable")
    def domain_filter_table(self) -> Optional[pulumi.Input[int]]:
        """
        DNS domain filter table ID.
        """
        return pulumi.get(self, "domain_filter_table")

    @domain_filter_table.setter
    def domain_filter_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "domain_filter_table", value)


@pulumi.input_type
class DnsfilterProfileExternalIpBlocklistArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: External domain block list name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        External domain block list name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DnsfilterProfileFtgdDnsArgs:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['DnsfilterProfileFtgdDnsFilterArgs']]]] = None,
                 options: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DnsfilterProfileFtgdDnsFilterArgs']]] filters: FortiGuard DNS domain filters. The structure of `filters` block is documented below.
        :param pulumi.Input[str] options: FortiGuard DNS filter options. Valid values: `error-allow`, `ftgd-disable`.
        """
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if options is not None:
            pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DnsfilterProfileFtgdDnsFilterArgs']]]]:
        """
        FortiGuard DNS domain filters. The structure of `filters` block is documented below.
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DnsfilterProfileFtgdDnsFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        FortiGuard DNS filter options. Valid values: `error-allow`, `ftgd-disable`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)


@pulumi.input_type
class DnsfilterProfileFtgdDnsFilterArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 category: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action to take for DNS requests matching the category. Valid values: `block`, `monitor`.
        :param pulumi.Input[int] category: Category number.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] log: Enable/disable DNS filter logging for this DNS profile. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take for DNS requests matching the category. Valid values: `block`, `monitor`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[int]]:
        """
        Category number.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DNS filter logging for this DNS profile. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)


@pulumi.input_type
class DpdkGlobalInterfaceArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface_name: Physical interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Physical interface name.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class EmailfilterBlockAllowListEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 email_pattern: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip4_subnet: Optional[pulumi.Input[str]] = None,
                 ip6_subnet: Optional[pulumi.Input[str]] = None,
                 pattern_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Reject, mark as spam or good email. Valid values: `reject`, `spam`, `clear`.
        :param pulumi.Input[str] addr_type: IP address type. Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] email_pattern: Email address pattern.
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[str] ip4_subnet: IPv4 network address/subnet mask bits.
        :param pulumi.Input[str] ip6_subnet: IPv6 network address/subnet mask bits.
        :param pulumi.Input[str] pattern_type: Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
        :param pulumi.Input[str] status: Enable/disable status. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] type: Entry type. Valid values: `ip`, `email`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if email_pattern is not None:
            pulumi.set(__self__, "email_pattern", email_pattern)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip4_subnet is not None:
            pulumi.set(__self__, "ip4_subnet", ip4_subnet)
        if ip6_subnet is not None:
            pulumi.set(__self__, "ip6_subnet", ip6_subnet)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Reject, mark as spam or good email. Valid values: `reject`, `spam`, `clear`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        IP address type. Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter(name="emailPattern")
    def email_pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Email address pattern.
        """
        return pulumi.get(self, "email_pattern")

    @email_pattern.setter
    def email_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_pattern", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ip4Subnet")
    def ip4_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 network address/subnet mask bits.
        """
        return pulumi.get(self, "ip4_subnet")

    @ip4_subnet.setter
    def ip4_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip4_subnet", value)

    @property
    @pulumi.getter(name="ip6Subnet")
    def ip6_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 network address/subnet mask bits.
        """
        return pulumi.get(self, "ip6_subnet")

    @ip6_subnet.setter
    def ip6_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_subnet", value)

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[pulumi.Input[str]]:
        """
        Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
        """
        return pulumi.get(self, "pattern_type")

    @pattern_type.setter
    def pattern_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Entry type. Valid values: `ip`, `email`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class EmailfilterBwlEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 email_pattern: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip4_subnet: Optional[pulumi.Input[str]] = None,
                 ip6_subnet: Optional[pulumi.Input[str]] = None,
                 pattern_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Reject, mark as spam or good email. Valid values: `reject`, `spam`, `clear`.
        :param pulumi.Input[str] addr_type: IP address type. Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] email_pattern: Email address pattern.
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[str] ip4_subnet: IPv4 network address/subnet mask bits.
        :param pulumi.Input[str] ip6_subnet: IPv6 network address/subnet mask bits.
        :param pulumi.Input[str] pattern_type: Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
        :param pulumi.Input[str] status: Enable/disable status. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] type: Entry type. Valid values: `ip`, `email`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if email_pattern is not None:
            pulumi.set(__self__, "email_pattern", email_pattern)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip4_subnet is not None:
            pulumi.set(__self__, "ip4_subnet", ip4_subnet)
        if ip6_subnet is not None:
            pulumi.set(__self__, "ip6_subnet", ip6_subnet)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Reject, mark as spam or good email. Valid values: `reject`, `spam`, `clear`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        IP address type. Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter(name="emailPattern")
    def email_pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Email address pattern.
        """
        return pulumi.get(self, "email_pattern")

    @email_pattern.setter
    def email_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_pattern", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ip4Subnet")
    def ip4_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 network address/subnet mask bits.
        """
        return pulumi.get(self, "ip4_subnet")

    @ip4_subnet.setter
    def ip4_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip4_subnet", value)

    @property
    @pulumi.getter(name="ip6Subnet")
    def ip6_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 network address/subnet mask bits.
        """
        return pulumi.get(self, "ip6_subnet")

    @ip6_subnet.setter
    def ip6_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_subnet", value)

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[pulumi.Input[str]]:
        """
        Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
        """
        return pulumi.get(self, "pattern_type")

    @pattern_type.setter
    def pattern_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Entry type. Valid values: `ip`, `email`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class EmailfilterBwordEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 language: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 pattern_type: Optional[pulumi.Input[str]] = None,
                 score: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 where: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Mark spam or good. Valid values: `spam`, `clear`.
        :param pulumi.Input[int] id: Banned word entry ID.
        :param pulumi.Input[str] language: Language for the banned word. Valid values: `western`, `simch`, `trach`, `japanese`, `korean`, `french`, `thai`, `spanish`.
        :param pulumi.Input[str] pattern: Pattern for the banned word.
        :param pulumi.Input[str] pattern_type: Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
        :param pulumi.Input[int] score: Score value.
        :param pulumi.Input[str] status: Enable/disable status. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] where: Component of the email to be scanned. Valid values: `subject`, `body`, `all`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if score is not None:
            pulumi.set(__self__, "score", score)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if where is not None:
            pulumi.set(__self__, "where", where)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Mark spam or good. Valid values: `spam`, `clear`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Banned word entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[str]]:
        """
        Language for the banned word. Valid values: `western`, `simch`, `trach`, `japanese`, `korean`, `french`, `thai`, `spanish`.
        """
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Pattern for the banned word.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[pulumi.Input[str]]:
        """
        Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
        """
        return pulumi.get(self, "pattern_type")

    @pattern_type.setter
    def pattern_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_type", value)

    @property
    @pulumi.getter
    def score(self) -> Optional[pulumi.Input[int]]:
        """
        Score value.
        """
        return pulumi.get(self, "score")

    @score.setter
    def score(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "score", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def where(self) -> Optional[pulumi.Input[str]]:
        """
        Component of the email to be scanned. Valid values: `subject`, `body`, `all`.
        """
        return pulumi.get(self, "where")

    @where.setter
    def where(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "where", value)


@pulumi.input_type
class EmailfilterDnsblEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Reject connection or mark as spam email. Valid values: `reject`, `spam`.
        :param pulumi.Input[int] id: DNSBL/ORBL entry ID.
        :param pulumi.Input[str] server: DNSBL or ORBL server name.
        :param pulumi.Input[str] status: Enable/disable status. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Reject connection or mark as spam email. Valid values: `reject`, `spam`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        DNSBL/ORBL entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        DNSBL or ORBL server name.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class EmailfilterIptrustEntryArgs:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip4_subnet: Optional[pulumi.Input[str]] = None,
                 ip6_subnet: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] addr_type: Type of address. Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[int] id: Trusted IP entry ID.
        :param pulumi.Input[str] ip4_subnet: IPv4 network address or network address/subnet mask bits.
        :param pulumi.Input[str] ip6_subnet: IPv6 network address/subnet mask bits.
        :param pulumi.Input[str] status: Enable/disable status. Valid values: `enable`, `disable`.
        """
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip4_subnet is not None:
            pulumi.set(__self__, "ip4_subnet", ip4_subnet)
        if ip6_subnet is not None:
            pulumi.set(__self__, "ip6_subnet", ip6_subnet)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of address. Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Trusted IP entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ip4Subnet")
    def ip4_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 network address or network address/subnet mask bits.
        """
        return pulumi.get(self, "ip4_subnet")

    @ip4_subnet.setter
    def ip4_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip4_subnet", value)

    @property
    @pulumi.getter(name="ip6Subnet")
    def ip6_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 network address/subnet mask bits.
        """
        return pulumi.get(self, "ip6_subnet")

    @ip6_subnet.setter
    def ip6_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_subnet", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class EmailfilterMheaderEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 fieldbody: Optional[pulumi.Input[str]] = None,
                 fieldname: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 pattern_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Mark spam or good. Valid values: `spam`, `clear`.
        :param pulumi.Input[str] fieldbody: Pattern for the header field body.
        :param pulumi.Input[str] fieldname: Pattern for header field name.
        :param pulumi.Input[int] id: Mime header entry ID.
        :param pulumi.Input[str] pattern_type: Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
        :param pulumi.Input[str] status: Enable/disable status. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if fieldbody is not None:
            pulumi.set(__self__, "fieldbody", fieldbody)
        if fieldname is not None:
            pulumi.set(__self__, "fieldname", fieldname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Mark spam or good. Valid values: `spam`, `clear`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def fieldbody(self) -> Optional[pulumi.Input[str]]:
        """
        Pattern for the header field body.
        """
        return pulumi.get(self, "fieldbody")

    @fieldbody.setter
    def fieldbody(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fieldbody", value)

    @property
    @pulumi.getter
    def fieldname(self) -> Optional[pulumi.Input[str]]:
        """
        Pattern for header field name.
        """
        return pulumi.get(self, "fieldname")

    @fieldname.setter
    def fieldname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fieldname", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Mime header entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[pulumi.Input[str]]:
        """
        Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
        """
        return pulumi.get(self, "pattern_type")

    @pattern_type.setter
    def pattern_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class EmailfilterProfileFileFilterArgs:
    def __init__(__self__, *,
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input['EmailfilterProfileFileFilterEntryArgs']]]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 scan_archive_contents: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['EmailfilterProfileFileFilterEntryArgs']]] entries: File filter entries. The structure of `entries` block is documented below.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] scan_archive_contents: Enable/disable file filter archive contents scan. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable file filter. Valid values: `enable`, `disable`.
        """
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if scan_archive_contents is not None:
            pulumi.set(__self__, "scan_archive_contents", scan_archive_contents)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EmailfilterProfileFileFilterEntryArgs']]]]:
        """
        File filter entries. The structure of `entries` block is documented below.
        """
        return pulumi.get(self, "entries")

    @entries.setter
    def entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EmailfilterProfileFileFilterEntryArgs']]]]):
        pulumi.set(self, "entries", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="scanArchiveContents")
    def scan_archive_contents(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable file filter archive contents scan. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_archive_contents")

    @scan_archive_contents.setter
    def scan_archive_contents(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_archive_contents", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable file filter. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class EmailfilterProfileFileFilterEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input['EmailfilterProfileFileFilterEntryFileTypeArgs']]]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 password_protected: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action for spam email. Valid values: `pass`, `discard`.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[Sequence[pulumi.Input['EmailfilterProfileFileFilterEntryFileTypeArgs']]] file_types: Select file type. The structure of `file_type` block is documented below.
        :param pulumi.Input[str] filter: Add a file filter.
        :param pulumi.Input[str] password_protected: Match password-protected files. Valid values: `yes`, `any`.
        :param pulumi.Input[str] protocol: Protocols to apply with. Valid values: `smtp`, `imap`, `pop3`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if password_protected is not None:
            pulumi.set(__self__, "password_protected", password_protected)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action for spam email. Valid values: `pass`, `discard`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EmailfilterProfileFileFilterEntryFileTypeArgs']]]]:
        """
        Select file type. The structure of `file_type` block is documented below.
        """
        return pulumi.get(self, "file_types")

    @file_types.setter
    def file_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EmailfilterProfileFileFilterEntryFileTypeArgs']]]]):
        pulumi.set(self, "file_types", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Add a file filter.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="passwordProtected")
    def password_protected(self) -> Optional[pulumi.Input[str]]:
        """
        Match password-protected files. Valid values: `yes`, `any`.
        """
        return pulumi.get(self, "password_protected")

    @password_protected.setter
    def password_protected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_protected", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocols to apply with. Valid values: `smtp`, `imap`, `pop3`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class EmailfilterProfileFileFilterEntryFileTypeArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: File type name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        File type name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class EmailfilterProfileGmailArgs:
    def __init__(__self__, *,
                 log: Optional[pulumi.Input[str]] = None,
                 log_all: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_all: Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        """
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all", value)


@pulumi.input_type
class EmailfilterProfileImapArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 log_all: Optional[pulumi.Input[str]] = None,
                 tag_msg: Optional[pulumi.Input[str]] = None,
                 tag_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action for spam email. Valid values: `pass`, `discard`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_all: Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] tag_msg: Subject text or header added to spam email.
        :param pulumi.Input[str] tag_type: Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)
        if tag_msg is not None:
            pulumi.set(__self__, "tag_msg", tag_msg)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action for spam email. Valid values: `pass`, `discard`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all", value)

    @property
    @pulumi.getter(name="tagMsg")
    def tag_msg(self) -> Optional[pulumi.Input[str]]:
        """
        Subject text or header added to spam email.
        """
        return pulumi.get(self, "tag_msg")

    @tag_msg.setter
    def tag_msg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_msg", value)

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[pulumi.Input[str]]:
        """
        Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
        """
        return pulumi.get(self, "tag_type")

    @tag_type.setter
    def tag_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_type", value)


@pulumi.input_type
class EmailfilterProfileMapiArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 log_all: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action for spam email. Valid values: `pass`, `discard`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_all: Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action for spam email. Valid values: `pass`, `discard`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all", value)


@pulumi.input_type
class EmailfilterProfileMsnHotmailArgs:
    def __init__(__self__, *,
                 log: Optional[pulumi.Input[str]] = None,
                 log_all: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_all: Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        """
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all", value)


@pulumi.input_type
class EmailfilterProfileOtherWebmailsArgs:
    def __init__(__self__, *,
                 log_all: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] log_all: Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        """
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all", value)


@pulumi.input_type
class EmailfilterProfilePop3Args:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 log_all: Optional[pulumi.Input[str]] = None,
                 tag_msg: Optional[pulumi.Input[str]] = None,
                 tag_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action for spam email. Valid values: `pass`, `discard`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_all: Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] tag_msg: Subject text or header added to spam email.
        :param pulumi.Input[str] tag_type: Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)
        if tag_msg is not None:
            pulumi.set(__self__, "tag_msg", tag_msg)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action for spam email. Valid values: `pass`, `discard`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all", value)

    @property
    @pulumi.getter(name="tagMsg")
    def tag_msg(self) -> Optional[pulumi.Input[str]]:
        """
        Subject text or header added to spam email.
        """
        return pulumi.get(self, "tag_msg")

    @tag_msg.setter
    def tag_msg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_msg", value)

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[pulumi.Input[str]]:
        """
        Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
        """
        return pulumi.get(self, "tag_type")

    @tag_type.setter
    def tag_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_type", value)


@pulumi.input_type
class EmailfilterProfileSmtpArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 hdrip: Optional[pulumi.Input[str]] = None,
                 local_override: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 log_all: Optional[pulumi.Input[str]] = None,
                 tag_msg: Optional[pulumi.Input[str]] = None,
                 tag_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action for spam email. Valid values: `pass`, `discard`.
        :param pulumi.Input[str] hdrip: Enable/disable SMTP email header IP checks for spamfsip, spamrbl and spambwl filters. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] local_override: Enable/disable local filter to override SMTP remote check result. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_all: Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] tag_msg: Subject text or header added to spam email.
        :param pulumi.Input[str] tag_type: Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if hdrip is not None:
            pulumi.set(__self__, "hdrip", hdrip)
        if local_override is not None:
            pulumi.set(__self__, "local_override", local_override)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)
        if tag_msg is not None:
            pulumi.set(__self__, "tag_msg", tag_msg)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action for spam email. Valid values: `pass`, `discard`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def hdrip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SMTP email header IP checks for spamfsip, spamrbl and spambwl filters. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "hdrip")

    @hdrip.setter
    def hdrip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hdrip", value)

    @property
    @pulumi.getter(name="localOverride")
    def local_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable local filter to override SMTP remote check result. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "local_override")

    @local_override.setter
    def local_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_override", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all", value)

    @property
    @pulumi.getter(name="tagMsg")
    def tag_msg(self) -> Optional[pulumi.Input[str]]:
        """
        Subject text or header added to spam email.
        """
        return pulumi.get(self, "tag_msg")

    @tag_msg.setter
    def tag_msg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_msg", value)

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[pulumi.Input[str]]:
        """
        Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
        """
        return pulumi.get(self, "tag_type")

    @tag_type.setter
    def tag_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_type", value)


@pulumi.input_type
class EmailfilterProfileYahooMailArgs:
    def __init__(__self__, *,
                 log: Optional[pulumi.Input[str]] = None,
                 log_all: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_all: Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        """
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_all is not None:
            pulumi.set(__self__, "log_all", log_all)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logAll")
    def log_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of all email traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_all")

    @log_all.setter
    def log_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_all", value)


@pulumi.input_type
class EndpointControlProfileDeviceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address object from available options.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address object from available options.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class EndpointControlProfileForticlientAndroidSettingsArgs:
    def __init__(__self__, *,
                 disable_wf_when_protected: Optional[pulumi.Input[str]] = None,
                 forticlient_advanced_vpn: Optional[pulumi.Input[str]] = None,
                 forticlient_advanced_vpn_buffer: Optional[pulumi.Input[str]] = None,
                 forticlient_vpn_provisioning: Optional[pulumi.Input[str]] = None,
                 forticlient_vpn_settings: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientAndroidSettingsForticlientVpnSettingArgs']]]] = None,
                 forticlient_wf: Optional[pulumi.Input[str]] = None,
                 forticlient_wf_profile: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] disable_wf_when_protected: Enable/disable FortiClient web category filtering when protected by FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] forticlient_advanced_vpn: Enable/disable advanced FortiClient VPN configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] forticlient_advanced_vpn_buffer: Advanced FortiClient VPN configuration.
        :param pulumi.Input[str] forticlient_vpn_provisioning: Enable/disable FortiClient VPN provisioning. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientAndroidSettingsForticlientVpnSettingArgs']]] forticlient_vpn_settings: FortiClient VPN settings. The structure of `forticlient_vpn_settings` block is documented below.
        :param pulumi.Input[str] forticlient_wf: Enable/disable FortiClient web filtering. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] forticlient_wf_profile: The FortiClient web filter profile to apply.
        """
        if disable_wf_when_protected is not None:
            pulumi.set(__self__, "disable_wf_when_protected", disable_wf_when_protected)
        if forticlient_advanced_vpn is not None:
            pulumi.set(__self__, "forticlient_advanced_vpn", forticlient_advanced_vpn)
        if forticlient_advanced_vpn_buffer is not None:
            pulumi.set(__self__, "forticlient_advanced_vpn_buffer", forticlient_advanced_vpn_buffer)
        if forticlient_vpn_provisioning is not None:
            pulumi.set(__self__, "forticlient_vpn_provisioning", forticlient_vpn_provisioning)
        if forticlient_vpn_settings is not None:
            pulumi.set(__self__, "forticlient_vpn_settings", forticlient_vpn_settings)
        if forticlient_wf is not None:
            pulumi.set(__self__, "forticlient_wf", forticlient_wf)
        if forticlient_wf_profile is not None:
            pulumi.set(__self__, "forticlient_wf_profile", forticlient_wf_profile)

    @property
    @pulumi.getter(name="disableWfWhenProtected")
    def disable_wf_when_protected(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiClient web category filtering when protected by FortiGate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "disable_wf_when_protected")

    @disable_wf_when_protected.setter
    def disable_wf_when_protected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disable_wf_when_protected", value)

    @property
    @pulumi.getter(name="forticlientAdvancedVpn")
    def forticlient_advanced_vpn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advanced FortiClient VPN configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_advanced_vpn")

    @forticlient_advanced_vpn.setter
    def forticlient_advanced_vpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_advanced_vpn", value)

    @property
    @pulumi.getter(name="forticlientAdvancedVpnBuffer")
    def forticlient_advanced_vpn_buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Advanced FortiClient VPN configuration.
        """
        return pulumi.get(self, "forticlient_advanced_vpn_buffer")

    @forticlient_advanced_vpn_buffer.setter
    def forticlient_advanced_vpn_buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_advanced_vpn_buffer", value)

    @property
    @pulumi.getter(name="forticlientVpnProvisioning")
    def forticlient_vpn_provisioning(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiClient VPN provisioning. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_vpn_provisioning")

    @forticlient_vpn_provisioning.setter
    def forticlient_vpn_provisioning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_vpn_provisioning", value)

    @property
    @pulumi.getter(name="forticlientVpnSettings")
    def forticlient_vpn_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientAndroidSettingsForticlientVpnSettingArgs']]]]:
        """
        FortiClient VPN settings. The structure of `forticlient_vpn_settings` block is documented below.
        """
        return pulumi.get(self, "forticlient_vpn_settings")

    @forticlient_vpn_settings.setter
    def forticlient_vpn_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientAndroidSettingsForticlientVpnSettingArgs']]]]):
        pulumi.set(self, "forticlient_vpn_settings", value)

    @property
    @pulumi.getter(name="forticlientWf")
    def forticlient_wf(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiClient web filtering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_wf")

    @forticlient_wf.setter
    def forticlient_wf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_wf", value)

    @property
    @pulumi.getter(name="forticlientWfProfile")
    def forticlient_wf_profile(self) -> Optional[pulumi.Input[str]]:
        """
        The FortiClient web filter profile to apply.
        """
        return pulumi.get(self, "forticlient_wf_profile")

    @forticlient_wf_profile.setter
    def forticlient_wf_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_wf_profile", value)


@pulumi.input_type
class EndpointControlProfileForticlientAndroidSettingsForticlientVpnSettingArgs:
    def __init__(__self__, *,
                 auth_method: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 preshared_key: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 sslvpn_access_port: Optional[pulumi.Input[int]] = None,
                 sslvpn_require_certificate: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_method: Authentication method. Valid values: `psk`, `certificate`.
        :param pulumi.Input[str] name: Address object from available options.
        :param pulumi.Input[str] preshared_key: Pre-shared secret for PSK authentication.
        :param pulumi.Input[str] remote_gw: IP address or FQDN of the remote VPN gateway.
        :param pulumi.Input[int] sslvpn_access_port: SSL VPN access port (1 - 65535).
        :param pulumi.Input[str] sslvpn_require_certificate: Enable/disable requiring SSL VPN client certificate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] type: VPN type (IPsec or SSL VPN). Valid values: `ipsec`, `ssl`.
        """
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if preshared_key is not None:
            pulumi.set(__self__, "preshared_key", preshared_key)
        if remote_gw is not None:
            pulumi.set(__self__, "remote_gw", remote_gw)
        if sslvpn_access_port is not None:
            pulumi.set(__self__, "sslvpn_access_port", sslvpn_access_port)
        if sslvpn_require_certificate is not None:
            pulumi.set(__self__, "sslvpn_require_certificate", sslvpn_require_certificate)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication method. Valid values: `psk`, `certificate`.
        """
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address object from available options.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="presharedKey")
    def preshared_key(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-shared secret for PSK authentication.
        """
        return pulumi.get(self, "preshared_key")

    @preshared_key.setter
    def preshared_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preshared_key", value)

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> Optional[pulumi.Input[str]]:
        """
        IP address or FQDN of the remote VPN gateway.
        """
        return pulumi.get(self, "remote_gw")

    @remote_gw.setter
    def remote_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gw", value)

    @property
    @pulumi.getter(name="sslvpnAccessPort")
    def sslvpn_access_port(self) -> Optional[pulumi.Input[int]]:
        """
        SSL VPN access port (1 - 65535).
        """
        return pulumi.get(self, "sslvpn_access_port")

    @sslvpn_access_port.setter
    def sslvpn_access_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sslvpn_access_port", value)

    @property
    @pulumi.getter(name="sslvpnRequireCertificate")
    def sslvpn_require_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable requiring SSL VPN client certificate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sslvpn_require_certificate")

    @sslvpn_require_certificate.setter
    def sslvpn_require_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sslvpn_require_certificate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        VPN type (IPsec or SSL VPN). Valid values: `ipsec`, `ssl`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class EndpointControlProfileForticlientIosSettingsArgs:
    def __init__(__self__, *,
                 client_vpn_provisioning: Optional[pulumi.Input[str]] = None,
                 client_vpn_settings: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientIosSettingsClientVpnSettingArgs']]]] = None,
                 configuration_content: Optional[pulumi.Input[str]] = None,
                 configuration_name: Optional[pulumi.Input[str]] = None,
                 disable_wf_when_protected: Optional[pulumi.Input[str]] = None,
                 distribute_configuration_profile: Optional[pulumi.Input[str]] = None,
                 forticlient_wf: Optional[pulumi.Input[str]] = None,
                 forticlient_wf_profile: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] client_vpn_provisioning: FortiClient VPN provisioning. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientIosSettingsClientVpnSettingArgs']]] client_vpn_settings: FortiClient VPN settings. The structure of `client_vpn_settings` block is documented below.
        :param pulumi.Input[str] configuration_content: Content of configuration profile.
        :param pulumi.Input[str] configuration_name: Name of configuration profile.
        :param pulumi.Input[str] disable_wf_when_protected: Enable/disable FortiClient web category filtering when protected by FortiGate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] distribute_configuration_profile: Enable/disable configuration profile (.mobileconfig file) distribution. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] forticlient_wf: Enable/disable FortiClient web filtering. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] forticlient_wf_profile: The FortiClient web filter profile to apply.
        """
        if client_vpn_provisioning is not None:
            pulumi.set(__self__, "client_vpn_provisioning", client_vpn_provisioning)
        if client_vpn_settings is not None:
            pulumi.set(__self__, "client_vpn_settings", client_vpn_settings)
        if configuration_content is not None:
            pulumi.set(__self__, "configuration_content", configuration_content)
        if configuration_name is not None:
            pulumi.set(__self__, "configuration_name", configuration_name)
        if disable_wf_when_protected is not None:
            pulumi.set(__self__, "disable_wf_when_protected", disable_wf_when_protected)
        if distribute_configuration_profile is not None:
            pulumi.set(__self__, "distribute_configuration_profile", distribute_configuration_profile)
        if forticlient_wf is not None:
            pulumi.set(__self__, "forticlient_wf", forticlient_wf)
        if forticlient_wf_profile is not None:
            pulumi.set(__self__, "forticlient_wf_profile", forticlient_wf_profile)

    @property
    @pulumi.getter(name="clientVpnProvisioning")
    def client_vpn_provisioning(self) -> Optional[pulumi.Input[str]]:
        """
        FortiClient VPN provisioning. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "client_vpn_provisioning")

    @client_vpn_provisioning.setter
    def client_vpn_provisioning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_vpn_provisioning", value)

    @property
    @pulumi.getter(name="clientVpnSettings")
    def client_vpn_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientIosSettingsClientVpnSettingArgs']]]]:
        """
        FortiClient VPN settings. The structure of `client_vpn_settings` block is documented below.
        """
        return pulumi.get(self, "client_vpn_settings")

    @client_vpn_settings.setter
    def client_vpn_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientIosSettingsClientVpnSettingArgs']]]]):
        pulumi.set(self, "client_vpn_settings", value)

    @property
    @pulumi.getter(name="configurationContent")
    def configuration_content(self) -> Optional[pulumi.Input[str]]:
        """
        Content of configuration profile.
        """
        return pulumi.get(self, "configuration_content")

    @configuration_content.setter
    def configuration_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration_content", value)

    @property
    @pulumi.getter(name="configurationName")
    def configuration_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of configuration profile.
        """
        return pulumi.get(self, "configuration_name")

    @configuration_name.setter
    def configuration_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration_name", value)

    @property
    @pulumi.getter(name="disableWfWhenProtected")
    def disable_wf_when_protected(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiClient web category filtering when protected by FortiGate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "disable_wf_when_protected")

    @disable_wf_when_protected.setter
    def disable_wf_when_protected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disable_wf_when_protected", value)

    @property
    @pulumi.getter(name="distributeConfigurationProfile")
    def distribute_configuration_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable configuration profile (.mobileconfig file) distribution. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "distribute_configuration_profile")

    @distribute_configuration_profile.setter
    def distribute_configuration_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_configuration_profile", value)

    @property
    @pulumi.getter(name="forticlientWf")
    def forticlient_wf(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiClient web filtering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_wf")

    @forticlient_wf.setter
    def forticlient_wf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_wf", value)

    @property
    @pulumi.getter(name="forticlientWfProfile")
    def forticlient_wf_profile(self) -> Optional[pulumi.Input[str]]:
        """
        The FortiClient web filter profile to apply.
        """
        return pulumi.get(self, "forticlient_wf_profile")

    @forticlient_wf_profile.setter
    def forticlient_wf_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_wf_profile", value)


@pulumi.input_type
class EndpointControlProfileForticlientIosSettingsClientVpnSettingArgs:
    def __init__(__self__, *,
                 auth_method: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 preshared_key: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 sslvpn_access_port: Optional[pulumi.Input[int]] = None,
                 sslvpn_require_certificate: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vpn_configuration_content: Optional[pulumi.Input[str]] = None,
                 vpn_configuration_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_method: Authentication method. Valid values: `psk`, `certificate`.
        :param pulumi.Input[str] name: Address object from available options.
        :param pulumi.Input[str] preshared_key: Pre-shared secret for PSK authentication.
        :param pulumi.Input[str] remote_gw: IP address or FQDN of the remote VPN gateway.
        :param pulumi.Input[int] sslvpn_access_port: SSL VPN access port (1 - 65535).
        :param pulumi.Input[str] sslvpn_require_certificate: Enable/disable requiring SSL VPN client certificate. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] type: VPN type (IPsec or SSL VPN). Valid values: `ipsec`, `ssl`.
        :param pulumi.Input[str] vpn_configuration_content: Content of VPN configuration.
        :param pulumi.Input[str] vpn_configuration_name: Name of VPN configuration.
        """
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if preshared_key is not None:
            pulumi.set(__self__, "preshared_key", preshared_key)
        if remote_gw is not None:
            pulumi.set(__self__, "remote_gw", remote_gw)
        if sslvpn_access_port is not None:
            pulumi.set(__self__, "sslvpn_access_port", sslvpn_access_port)
        if sslvpn_require_certificate is not None:
            pulumi.set(__self__, "sslvpn_require_certificate", sslvpn_require_certificate)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vpn_configuration_content is not None:
            pulumi.set(__self__, "vpn_configuration_content", vpn_configuration_content)
        if vpn_configuration_name is not None:
            pulumi.set(__self__, "vpn_configuration_name", vpn_configuration_name)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication method. Valid values: `psk`, `certificate`.
        """
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address object from available options.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="presharedKey")
    def preshared_key(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-shared secret for PSK authentication.
        """
        return pulumi.get(self, "preshared_key")

    @preshared_key.setter
    def preshared_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preshared_key", value)

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> Optional[pulumi.Input[str]]:
        """
        IP address or FQDN of the remote VPN gateway.
        """
        return pulumi.get(self, "remote_gw")

    @remote_gw.setter
    def remote_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gw", value)

    @property
    @pulumi.getter(name="sslvpnAccessPort")
    def sslvpn_access_port(self) -> Optional[pulumi.Input[int]]:
        """
        SSL VPN access port (1 - 65535).
        """
        return pulumi.get(self, "sslvpn_access_port")

    @sslvpn_access_port.setter
    def sslvpn_access_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sslvpn_access_port", value)

    @property
    @pulumi.getter(name="sslvpnRequireCertificate")
    def sslvpn_require_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable requiring SSL VPN client certificate. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sslvpn_require_certificate")

    @sslvpn_require_certificate.setter
    def sslvpn_require_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sslvpn_require_certificate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        VPN type (IPsec or SSL VPN). Valid values: `ipsec`, `ssl`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vpnConfigurationContent")
    def vpn_configuration_content(self) -> Optional[pulumi.Input[str]]:
        """
        Content of VPN configuration.
        """
        return pulumi.get(self, "vpn_configuration_content")

    @vpn_configuration_content.setter
    def vpn_configuration_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_configuration_content", value)

    @property
    @pulumi.getter(name="vpnConfigurationName")
    def vpn_configuration_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of VPN configuration.
        """
        return pulumi.get(self, "vpn_configuration_name")

    @vpn_configuration_name.setter
    def vpn_configuration_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_configuration_name", value)


@pulumi.input_type
class EndpointControlProfileForticlientWinmacSettingsArgs:
    def __init__(__self__, *,
                 av_realtime_protection: Optional[pulumi.Input[str]] = None,
                 av_signature_up_to_date: Optional[pulumi.Input[str]] = None,
                 forticlient_application_firewall: Optional[pulumi.Input[str]] = None,
                 forticlient_application_firewall_list: Optional[pulumi.Input[str]] = None,
                 forticlient_av: Optional[pulumi.Input[str]] = None,
                 forticlient_ems_compliance: Optional[pulumi.Input[str]] = None,
                 forticlient_ems_compliance_action: Optional[pulumi.Input[str]] = None,
                 forticlient_ems_entries: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientEmsEntryArgs']]]] = None,
                 forticlient_linux_ver: Optional[pulumi.Input[str]] = None,
                 forticlient_log_upload: Optional[pulumi.Input[str]] = None,
                 forticlient_log_upload_level: Optional[pulumi.Input[str]] = None,
                 forticlient_log_upload_server: Optional[pulumi.Input[str]] = None,
                 forticlient_mac_ver: Optional[pulumi.Input[str]] = None,
                 forticlient_minimum_software_version: Optional[pulumi.Input[str]] = None,
                 forticlient_operating_systems: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientOperatingSystemArgs']]]] = None,
                 forticlient_own_files: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientOwnFileArgs']]]] = None,
                 forticlient_registration_compliance_action: Optional[pulumi.Input[str]] = None,
                 forticlient_registry_entries: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientRegistryEntryArgs']]]] = None,
                 forticlient_running_apps: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientRunningAppArgs']]]] = None,
                 forticlient_security_posture: Optional[pulumi.Input[str]] = None,
                 forticlient_security_posture_compliance_action: Optional[pulumi.Input[str]] = None,
                 forticlient_system_compliance: Optional[pulumi.Input[str]] = None,
                 forticlient_system_compliance_action: Optional[pulumi.Input[str]] = None,
                 forticlient_vuln_scan: Optional[pulumi.Input[str]] = None,
                 forticlient_vuln_scan_compliance_action: Optional[pulumi.Input[str]] = None,
                 forticlient_vuln_scan_enforce: Optional[pulumi.Input[str]] = None,
                 forticlient_vuln_scan_enforce_grace: Optional[pulumi.Input[int]] = None,
                 forticlient_vuln_scan_exempt: Optional[pulumi.Input[str]] = None,
                 forticlient_wf: Optional[pulumi.Input[str]] = None,
                 forticlient_wf_profile: Optional[pulumi.Input[str]] = None,
                 forticlient_win_ver: Optional[pulumi.Input[str]] = None,
                 os_av_software_installed: Optional[pulumi.Input[str]] = None,
                 sandbox_address: Optional[pulumi.Input[str]] = None,
                 sandbox_analysis: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] av_realtime_protection: Enable/disable FortiClient AntiVirus real-time protection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] av_signature_up_to_date: Enable/disable FortiClient AV signature updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] forticlient_application_firewall: Enable/disable the FortiClient application firewall. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] forticlient_application_firewall_list: FortiClient application firewall rule list.
        :param pulumi.Input[str] forticlient_av: Enable/disable FortiClient AntiVirus scanning. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] forticlient_ems_compliance: Enable/disable FortiClient Enterprise Management Server (EMS) compliance. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] forticlient_ems_compliance_action: FortiClient EMS compliance action. Valid values: `block`, `warning`.
        :param pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientEmsEntryArgs']]] forticlient_ems_entries: FortiClient EMS entries. The structure of `forticlient_ems_entries` block is documented below.
        :param pulumi.Input[str] forticlient_linux_ver: Minimum FortiClient Linux version.
        :param pulumi.Input[str] forticlient_log_upload: Enable/disable uploading FortiClient logs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] forticlient_log_upload_level: Select the FortiClient logs to upload. Valid values: `traffic`, `vulnerability`, `event`.
        :param pulumi.Input[str] forticlient_log_upload_server: IP address or FQDN of the server to which to upload FortiClient logs.
        :param pulumi.Input[str] forticlient_mac_ver: Minimum FortiClient Mac OS version.
        :param pulumi.Input[str] forticlient_minimum_software_version: Enable/disable requiring clients to run FortiClient with a minimum software version number. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientOperatingSystemArgs']]] forticlient_operating_systems: FortiClient operating system. The structure of `forticlient_operating_system` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientOwnFileArgs']]] forticlient_own_files: Checking the path and filename of the FortiClient application. The structure of `forticlient_own_file` block is documented below.
        :param pulumi.Input[str] forticlient_registration_compliance_action: FortiClient registration compliance action. Valid values: `block`, `warning`.
        :param pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientRegistryEntryArgs']]] forticlient_registry_entries: FortiClient registry entry. The structure of `forticlient_registry_entry` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientRunningAppArgs']]] forticlient_running_apps: Use FortiClient to verify if the listed applications are running on the client. The structure of `forticlient_running_app` block is documented below.
        :param pulumi.Input[str] forticlient_security_posture: Enable/disable FortiClient security posture check options. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] forticlient_security_posture_compliance_action: FortiClient security posture compliance action. Valid values: `block`, `warning`.
        :param pulumi.Input[str] forticlient_system_compliance: Enable/disable enforcement of FortiClient system compliance. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] forticlient_system_compliance_action: Block or warn clients not compliant with FortiClient requirements. Valid values: `block`, `warning`.
        :param pulumi.Input[str] forticlient_vuln_scan: Enable/disable FortiClient vulnerability scanning. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] forticlient_vuln_scan_compliance_action: FortiClient vulnerability compliance action. Valid values: `block`, `warning`.
        :param pulumi.Input[str] forticlient_vuln_scan_enforce: Configure the level of the vulnerability found that causes a FortiClient vulnerability compliance action. Valid values: `critical`, `high`, `medium`, `low`, `info`.
        :param pulumi.Input[int] forticlient_vuln_scan_enforce_grace: FortiClient vulnerability scan enforcement grace period (0 - 30 days, default = 1).
        :param pulumi.Input[str] forticlient_vuln_scan_exempt: Enable/disable compliance exemption for vulnerabilities that cannot be patched automatically. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] forticlient_wf: Enable/disable FortiClient web filtering. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] forticlient_wf_profile: The FortiClient web filter profile to apply.
        :param pulumi.Input[str] forticlient_win_ver: Minimum FortiClient Windows version.
        :param pulumi.Input[str] os_av_software_installed: Enable/disable checking for OS recognized AntiVirus software. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sandbox_address: FortiSandbox address.
        :param pulumi.Input[str] sandbox_analysis: Enable/disable sending files to FortiSandbox for analysis. Valid values: `enable`, `disable`.
        """
        if av_realtime_protection is not None:
            pulumi.set(__self__, "av_realtime_protection", av_realtime_protection)
        if av_signature_up_to_date is not None:
            pulumi.set(__self__, "av_signature_up_to_date", av_signature_up_to_date)
        if forticlient_application_firewall is not None:
            pulumi.set(__self__, "forticlient_application_firewall", forticlient_application_firewall)
        if forticlient_application_firewall_list is not None:
            pulumi.set(__self__, "forticlient_application_firewall_list", forticlient_application_firewall_list)
        if forticlient_av is not None:
            pulumi.set(__self__, "forticlient_av", forticlient_av)
        if forticlient_ems_compliance is not None:
            pulumi.set(__self__, "forticlient_ems_compliance", forticlient_ems_compliance)
        if forticlient_ems_compliance_action is not None:
            pulumi.set(__self__, "forticlient_ems_compliance_action", forticlient_ems_compliance_action)
        if forticlient_ems_entries is not None:
            pulumi.set(__self__, "forticlient_ems_entries", forticlient_ems_entries)
        if forticlient_linux_ver is not None:
            pulumi.set(__self__, "forticlient_linux_ver", forticlient_linux_ver)
        if forticlient_log_upload is not None:
            pulumi.set(__self__, "forticlient_log_upload", forticlient_log_upload)
        if forticlient_log_upload_level is not None:
            pulumi.set(__self__, "forticlient_log_upload_level", forticlient_log_upload_level)
        if forticlient_log_upload_server is not None:
            pulumi.set(__self__, "forticlient_log_upload_server", forticlient_log_upload_server)
        if forticlient_mac_ver is not None:
            pulumi.set(__self__, "forticlient_mac_ver", forticlient_mac_ver)
        if forticlient_minimum_software_version is not None:
            pulumi.set(__self__, "forticlient_minimum_software_version", forticlient_minimum_software_version)
        if forticlient_operating_systems is not None:
            pulumi.set(__self__, "forticlient_operating_systems", forticlient_operating_systems)
        if forticlient_own_files is not None:
            pulumi.set(__self__, "forticlient_own_files", forticlient_own_files)
        if forticlient_registration_compliance_action is not None:
            pulumi.set(__self__, "forticlient_registration_compliance_action", forticlient_registration_compliance_action)
        if forticlient_registry_entries is not None:
            pulumi.set(__self__, "forticlient_registry_entries", forticlient_registry_entries)
        if forticlient_running_apps is not None:
            pulumi.set(__self__, "forticlient_running_apps", forticlient_running_apps)
        if forticlient_security_posture is not None:
            pulumi.set(__self__, "forticlient_security_posture", forticlient_security_posture)
        if forticlient_security_posture_compliance_action is not None:
            pulumi.set(__self__, "forticlient_security_posture_compliance_action", forticlient_security_posture_compliance_action)
        if forticlient_system_compliance is not None:
            pulumi.set(__self__, "forticlient_system_compliance", forticlient_system_compliance)
        if forticlient_system_compliance_action is not None:
            pulumi.set(__self__, "forticlient_system_compliance_action", forticlient_system_compliance_action)
        if forticlient_vuln_scan is not None:
            pulumi.set(__self__, "forticlient_vuln_scan", forticlient_vuln_scan)
        if forticlient_vuln_scan_compliance_action is not None:
            pulumi.set(__self__, "forticlient_vuln_scan_compliance_action", forticlient_vuln_scan_compliance_action)
        if forticlient_vuln_scan_enforce is not None:
            pulumi.set(__self__, "forticlient_vuln_scan_enforce", forticlient_vuln_scan_enforce)
        if forticlient_vuln_scan_enforce_grace is not None:
            pulumi.set(__self__, "forticlient_vuln_scan_enforce_grace", forticlient_vuln_scan_enforce_grace)
        if forticlient_vuln_scan_exempt is not None:
            pulumi.set(__self__, "forticlient_vuln_scan_exempt", forticlient_vuln_scan_exempt)
        if forticlient_wf is not None:
            pulumi.set(__self__, "forticlient_wf", forticlient_wf)
        if forticlient_wf_profile is not None:
            pulumi.set(__self__, "forticlient_wf_profile", forticlient_wf_profile)
        if forticlient_win_ver is not None:
            pulumi.set(__self__, "forticlient_win_ver", forticlient_win_ver)
        if os_av_software_installed is not None:
            pulumi.set(__self__, "os_av_software_installed", os_av_software_installed)
        if sandbox_address is not None:
            pulumi.set(__self__, "sandbox_address", sandbox_address)
        if sandbox_analysis is not None:
            pulumi.set(__self__, "sandbox_analysis", sandbox_analysis)

    @property
    @pulumi.getter(name="avRealtimeProtection")
    def av_realtime_protection(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiClient AntiVirus real-time protection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "av_realtime_protection")

    @av_realtime_protection.setter
    def av_realtime_protection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_realtime_protection", value)

    @property
    @pulumi.getter(name="avSignatureUpToDate")
    def av_signature_up_to_date(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiClient AV signature updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "av_signature_up_to_date")

    @av_signature_up_to_date.setter
    def av_signature_up_to_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "av_signature_up_to_date", value)

    @property
    @pulumi.getter(name="forticlientApplicationFirewall")
    def forticlient_application_firewall(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the FortiClient application firewall. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_application_firewall")

    @forticlient_application_firewall.setter
    def forticlient_application_firewall(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_application_firewall", value)

    @property
    @pulumi.getter(name="forticlientApplicationFirewallList")
    def forticlient_application_firewall_list(self) -> Optional[pulumi.Input[str]]:
        """
        FortiClient application firewall rule list.
        """
        return pulumi.get(self, "forticlient_application_firewall_list")

    @forticlient_application_firewall_list.setter
    def forticlient_application_firewall_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_application_firewall_list", value)

    @property
    @pulumi.getter(name="forticlientAv")
    def forticlient_av(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiClient AntiVirus scanning. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_av")

    @forticlient_av.setter
    def forticlient_av(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_av", value)

    @property
    @pulumi.getter(name="forticlientEmsCompliance")
    def forticlient_ems_compliance(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiClient Enterprise Management Server (EMS) compliance. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_ems_compliance")

    @forticlient_ems_compliance.setter
    def forticlient_ems_compliance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_ems_compliance", value)

    @property
    @pulumi.getter(name="forticlientEmsComplianceAction")
    def forticlient_ems_compliance_action(self) -> Optional[pulumi.Input[str]]:
        """
        FortiClient EMS compliance action. Valid values: `block`, `warning`.
        """
        return pulumi.get(self, "forticlient_ems_compliance_action")

    @forticlient_ems_compliance_action.setter
    def forticlient_ems_compliance_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_ems_compliance_action", value)

    @property
    @pulumi.getter(name="forticlientEmsEntries")
    def forticlient_ems_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientEmsEntryArgs']]]]:
        """
        FortiClient EMS entries. The structure of `forticlient_ems_entries` block is documented below.
        """
        return pulumi.get(self, "forticlient_ems_entries")

    @forticlient_ems_entries.setter
    def forticlient_ems_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientEmsEntryArgs']]]]):
        pulumi.set(self, "forticlient_ems_entries", value)

    @property
    @pulumi.getter(name="forticlientLinuxVer")
    def forticlient_linux_ver(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum FortiClient Linux version.
        """
        return pulumi.get(self, "forticlient_linux_ver")

    @forticlient_linux_ver.setter
    def forticlient_linux_ver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_linux_ver", value)

    @property
    @pulumi.getter(name="forticlientLogUpload")
    def forticlient_log_upload(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable uploading FortiClient logs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_log_upload")

    @forticlient_log_upload.setter
    def forticlient_log_upload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_log_upload", value)

    @property
    @pulumi.getter(name="forticlientLogUploadLevel")
    def forticlient_log_upload_level(self) -> Optional[pulumi.Input[str]]:
        """
        Select the FortiClient logs to upload. Valid values: `traffic`, `vulnerability`, `event`.
        """
        return pulumi.get(self, "forticlient_log_upload_level")

    @forticlient_log_upload_level.setter
    def forticlient_log_upload_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_log_upload_level", value)

    @property
    @pulumi.getter(name="forticlientLogUploadServer")
    def forticlient_log_upload_server(self) -> Optional[pulumi.Input[str]]:
        """
        IP address or FQDN of the server to which to upload FortiClient logs.
        """
        return pulumi.get(self, "forticlient_log_upload_server")

    @forticlient_log_upload_server.setter
    def forticlient_log_upload_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_log_upload_server", value)

    @property
    @pulumi.getter(name="forticlientMacVer")
    def forticlient_mac_ver(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum FortiClient Mac OS version.
        """
        return pulumi.get(self, "forticlient_mac_ver")

    @forticlient_mac_ver.setter
    def forticlient_mac_ver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_mac_ver", value)

    @property
    @pulumi.getter(name="forticlientMinimumSoftwareVersion")
    def forticlient_minimum_software_version(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable requiring clients to run FortiClient with a minimum software version number. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_minimum_software_version")

    @forticlient_minimum_software_version.setter
    def forticlient_minimum_software_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_minimum_software_version", value)

    @property
    @pulumi.getter(name="forticlientOperatingSystems")
    def forticlient_operating_systems(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientOperatingSystemArgs']]]]:
        """
        FortiClient operating system. The structure of `forticlient_operating_system` block is documented below.
        """
        return pulumi.get(self, "forticlient_operating_systems")

    @forticlient_operating_systems.setter
    def forticlient_operating_systems(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientOperatingSystemArgs']]]]):
        pulumi.set(self, "forticlient_operating_systems", value)

    @property
    @pulumi.getter(name="forticlientOwnFiles")
    def forticlient_own_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientOwnFileArgs']]]]:
        """
        Checking the path and filename of the FortiClient application. The structure of `forticlient_own_file` block is documented below.
        """
        return pulumi.get(self, "forticlient_own_files")

    @forticlient_own_files.setter
    def forticlient_own_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientOwnFileArgs']]]]):
        pulumi.set(self, "forticlient_own_files", value)

    @property
    @pulumi.getter(name="forticlientRegistrationComplianceAction")
    def forticlient_registration_compliance_action(self) -> Optional[pulumi.Input[str]]:
        """
        FortiClient registration compliance action. Valid values: `block`, `warning`.
        """
        return pulumi.get(self, "forticlient_registration_compliance_action")

    @forticlient_registration_compliance_action.setter
    def forticlient_registration_compliance_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_registration_compliance_action", value)

    @property
    @pulumi.getter(name="forticlientRegistryEntries")
    def forticlient_registry_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientRegistryEntryArgs']]]]:
        """
        FortiClient registry entry. The structure of `forticlient_registry_entry` block is documented below.
        """
        return pulumi.get(self, "forticlient_registry_entries")

    @forticlient_registry_entries.setter
    def forticlient_registry_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientRegistryEntryArgs']]]]):
        pulumi.set(self, "forticlient_registry_entries", value)

    @property
    @pulumi.getter(name="forticlientRunningApps")
    def forticlient_running_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientRunningAppArgs']]]]:
        """
        Use FortiClient to verify if the listed applications are running on the client. The structure of `forticlient_running_app` block is documented below.
        """
        return pulumi.get(self, "forticlient_running_apps")

    @forticlient_running_apps.setter
    def forticlient_running_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EndpointControlProfileForticlientWinmacSettingsForticlientRunningAppArgs']]]]):
        pulumi.set(self, "forticlient_running_apps", value)

    @property
    @pulumi.getter(name="forticlientSecurityPosture")
    def forticlient_security_posture(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiClient security posture check options. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_security_posture")

    @forticlient_security_posture.setter
    def forticlient_security_posture(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_security_posture", value)

    @property
    @pulumi.getter(name="forticlientSecurityPostureComplianceAction")
    def forticlient_security_posture_compliance_action(self) -> Optional[pulumi.Input[str]]:
        """
        FortiClient security posture compliance action. Valid values: `block`, `warning`.
        """
        return pulumi.get(self, "forticlient_security_posture_compliance_action")

    @forticlient_security_posture_compliance_action.setter
    def forticlient_security_posture_compliance_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_security_posture_compliance_action", value)

    @property
    @pulumi.getter(name="forticlientSystemCompliance")
    def forticlient_system_compliance(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable enforcement of FortiClient system compliance. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_system_compliance")

    @forticlient_system_compliance.setter
    def forticlient_system_compliance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_system_compliance", value)

    @property
    @pulumi.getter(name="forticlientSystemComplianceAction")
    def forticlient_system_compliance_action(self) -> Optional[pulumi.Input[str]]:
        """
        Block or warn clients not compliant with FortiClient requirements. Valid values: `block`, `warning`.
        """
        return pulumi.get(self, "forticlient_system_compliance_action")

    @forticlient_system_compliance_action.setter
    def forticlient_system_compliance_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_system_compliance_action", value)

    @property
    @pulumi.getter(name="forticlientVulnScan")
    def forticlient_vuln_scan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiClient vulnerability scanning. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_vuln_scan")

    @forticlient_vuln_scan.setter
    def forticlient_vuln_scan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_vuln_scan", value)

    @property
    @pulumi.getter(name="forticlientVulnScanComplianceAction")
    def forticlient_vuln_scan_compliance_action(self) -> Optional[pulumi.Input[str]]:
        """
        FortiClient vulnerability compliance action. Valid values: `block`, `warning`.
        """
        return pulumi.get(self, "forticlient_vuln_scan_compliance_action")

    @forticlient_vuln_scan_compliance_action.setter
    def forticlient_vuln_scan_compliance_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_vuln_scan_compliance_action", value)

    @property
    @pulumi.getter(name="forticlientVulnScanEnforce")
    def forticlient_vuln_scan_enforce(self) -> Optional[pulumi.Input[str]]:
        """
        Configure the level of the vulnerability found that causes a FortiClient vulnerability compliance action. Valid values: `critical`, `high`, `medium`, `low`, `info`.
        """
        return pulumi.get(self, "forticlient_vuln_scan_enforce")

    @forticlient_vuln_scan_enforce.setter
    def forticlient_vuln_scan_enforce(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_vuln_scan_enforce", value)

    @property
    @pulumi.getter(name="forticlientVulnScanEnforceGrace")
    def forticlient_vuln_scan_enforce_grace(self) -> Optional[pulumi.Input[int]]:
        """
        FortiClient vulnerability scan enforcement grace period (0 - 30 days, default = 1).
        """
        return pulumi.get(self, "forticlient_vuln_scan_enforce_grace")

    @forticlient_vuln_scan_enforce_grace.setter
    def forticlient_vuln_scan_enforce_grace(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "forticlient_vuln_scan_enforce_grace", value)

    @property
    @pulumi.getter(name="forticlientVulnScanExempt")
    def forticlient_vuln_scan_exempt(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable compliance exemption for vulnerabilities that cannot be patched automatically. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_vuln_scan_exempt")

    @forticlient_vuln_scan_exempt.setter
    def forticlient_vuln_scan_exempt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_vuln_scan_exempt", value)

    @property
    @pulumi.getter(name="forticlientWf")
    def forticlient_wf(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiClient web filtering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "forticlient_wf")

    @forticlient_wf.setter
    def forticlient_wf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_wf", value)

    @property
    @pulumi.getter(name="forticlientWfProfile")
    def forticlient_wf_profile(self) -> Optional[pulumi.Input[str]]:
        """
        The FortiClient web filter profile to apply.
        """
        return pulumi.get(self, "forticlient_wf_profile")

    @forticlient_wf_profile.setter
    def forticlient_wf_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_wf_profile", value)

    @property
    @pulumi.getter(name="forticlientWinVer")
    def forticlient_win_ver(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum FortiClient Windows version.
        """
        return pulumi.get(self, "forticlient_win_ver")

    @forticlient_win_ver.setter
    def forticlient_win_ver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forticlient_win_ver", value)

    @property
    @pulumi.getter(name="osAvSoftwareInstalled")
    def os_av_software_installed(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable checking for OS recognized AntiVirus software. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "os_av_software_installed")

    @os_av_software_installed.setter
    def os_av_software_installed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_av_software_installed", value)

    @property
    @pulumi.getter(name="sandboxAddress")
    def sandbox_address(self) -> Optional[pulumi.Input[str]]:
        """
        FortiSandbox address.
        """
        return pulumi.get(self, "sandbox_address")

    @sandbox_address.setter
    def sandbox_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sandbox_address", value)

    @property
    @pulumi.getter(name="sandboxAnalysis")
    def sandbox_analysis(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending files to FortiSandbox for analysis. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sandbox_analysis")

    @sandbox_analysis.setter
    def sandbox_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sandbox_analysis", value)


@pulumi.input_type
class EndpointControlProfileForticlientWinmacSettingsForticlientEmsEntryArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address object from available options.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address object from available options.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class EndpointControlProfileForticlientWinmacSettingsForticlientOperatingSystemArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 os_name: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: File ID.
        :param pulumi.Input[str] os_name: Customize operating system name or Mac OS format:x.x.x
        :param pulumi.Input[str] os_type: Operating system type. Valid values: `custom`, `mac-os`, `win-7`, `win-80`, `win-81`, `win-10`, `win-2000`, `win-home-svr`, `win-svr-10`, `win-svr-2003`, `win-svr-2003-r2`, `win-svr-2008`, `win-svr-2008-r2`, `win-svr-2012`, `win-svr-2012-r2`, `win-sto-svr-2003`, `win-vista`, `win-xp`, `ubuntu-linux`, `centos-linux`, `redhat-linux`, `fedora-linux`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if os_name is not None:
            pulumi.set(__self__, "os_name", os_name)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        File ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> Optional[pulumi.Input[str]]:
        """
        Customize operating system name or Mac OS format:x.x.x
        """
        return pulumi.get(self, "os_name")

    @os_name.setter
    def os_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_name", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[str]]:
        """
        Operating system type. Valid values: `custom`, `mac-os`, `win-7`, `win-80`, `win-81`, `win-10`, `win-2000`, `win-home-svr`, `win-svr-10`, `win-svr-2003`, `win-svr-2003-r2`, `win-svr-2008`, `win-svr-2008-r2`, `win-svr-2012`, `win-svr-2012-r2`, `win-sto-svr-2003`, `win-vista`, `win-xp`, `ubuntu-linux`, `centos-linux`, `redhat-linux`, `fedora-linux`.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_type", value)


@pulumi.input_type
class EndpointControlProfileForticlientWinmacSettingsForticlientOwnFileArgs:
    def __init__(__self__, *,
                 file: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] file: File path and name.
        :param pulumi.Input[int] id: File ID.
        """
        if file is not None:
            pulumi.set(__self__, "file", file)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input[str]]:
        """
        File path and name.
        """
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        File ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class EndpointControlProfileForticlientWinmacSettingsForticlientRegistryEntryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 registry_entry: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: File ID.
        :param pulumi.Input[str] registry_entry: Registry entry.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if registry_entry is not None:
            pulumi.set(__self__, "registry_entry", registry_entry)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        File ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="registryEntry")
    def registry_entry(self) -> Optional[pulumi.Input[str]]:
        """
        Registry entry.
        """
        return pulumi.get(self, "registry_entry")

    @registry_entry.setter
    def registry_entry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry_entry", value)


@pulumi.input_type
class EndpointControlProfileForticlientWinmacSettingsForticlientRunningAppArgs:
    def __init__(__self__, *,
                 app_name: Optional[pulumi.Input[str]] = None,
                 app_sha256_signature: Optional[pulumi.Input[str]] = None,
                 app_sha256_signature2: Optional[pulumi.Input[str]] = None,
                 app_sha256_signature3: Optional[pulumi.Input[str]] = None,
                 app_sha256_signature4: Optional[pulumi.Input[str]] = None,
                 application_check_rule: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 process_name: Optional[pulumi.Input[str]] = None,
                 process_name2: Optional[pulumi.Input[str]] = None,
                 process_name3: Optional[pulumi.Input[str]] = None,
                 process_name4: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] app_name: Application name.
        :param pulumi.Input[str] app_sha256_signature: App's SHA256 signature.
        :param pulumi.Input[str] app_sha256_signature2: App's SHA256 Signature.
        :param pulumi.Input[str] app_sha256_signature3: App's SHA256 Signature.
        :param pulumi.Input[str] app_sha256_signature4: App's SHA256 Signature.
        :param pulumi.Input[str] application_check_rule: Application check rule. Valid values: `present`, `absent`.
        :param pulumi.Input[int] id: File ID.
        :param pulumi.Input[str] process_name: Process name.
        :param pulumi.Input[str] process_name2: Process name.
        :param pulumi.Input[str] process_name3: Process name.
        :param pulumi.Input[str] process_name4: Process name.
        """
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if app_sha256_signature is not None:
            pulumi.set(__self__, "app_sha256_signature", app_sha256_signature)
        if app_sha256_signature2 is not None:
            pulumi.set(__self__, "app_sha256_signature2", app_sha256_signature2)
        if app_sha256_signature3 is not None:
            pulumi.set(__self__, "app_sha256_signature3", app_sha256_signature3)
        if app_sha256_signature4 is not None:
            pulumi.set(__self__, "app_sha256_signature4", app_sha256_signature4)
        if application_check_rule is not None:
            pulumi.set(__self__, "application_check_rule", application_check_rule)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if process_name is not None:
            pulumi.set(__self__, "process_name", process_name)
        if process_name2 is not None:
            pulumi.set(__self__, "process_name2", process_name2)
        if process_name3 is not None:
            pulumi.set(__self__, "process_name3", process_name3)
        if process_name4 is not None:
            pulumi.set(__self__, "process_name4", process_name4)

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[pulumi.Input[str]]:
        """
        Application name.
        """
        return pulumi.get(self, "app_name")

    @app_name.setter
    def app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_name", value)

    @property
    @pulumi.getter(name="appSha256Signature")
    def app_sha256_signature(self) -> Optional[pulumi.Input[str]]:
        """
        App's SHA256 signature.
        """
        return pulumi.get(self, "app_sha256_signature")

    @app_sha256_signature.setter
    def app_sha256_signature(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_sha256_signature", value)

    @property
    @pulumi.getter(name="appSha256Signature2")
    def app_sha256_signature2(self) -> Optional[pulumi.Input[str]]:
        """
        App's SHA256 Signature.
        """
        return pulumi.get(self, "app_sha256_signature2")

    @app_sha256_signature2.setter
    def app_sha256_signature2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_sha256_signature2", value)

    @property
    @pulumi.getter(name="appSha256Signature3")
    def app_sha256_signature3(self) -> Optional[pulumi.Input[str]]:
        """
        App's SHA256 Signature.
        """
        return pulumi.get(self, "app_sha256_signature3")

    @app_sha256_signature3.setter
    def app_sha256_signature3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_sha256_signature3", value)

    @property
    @pulumi.getter(name="appSha256Signature4")
    def app_sha256_signature4(self) -> Optional[pulumi.Input[str]]:
        """
        App's SHA256 Signature.
        """
        return pulumi.get(self, "app_sha256_signature4")

    @app_sha256_signature4.setter
    def app_sha256_signature4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_sha256_signature4", value)

    @property
    @pulumi.getter(name="applicationCheckRule")
    def application_check_rule(self) -> Optional[pulumi.Input[str]]:
        """
        Application check rule. Valid values: `present`, `absent`.
        """
        return pulumi.get(self, "application_check_rule")

    @application_check_rule.setter
    def application_check_rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_check_rule", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        File ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="processName")
    def process_name(self) -> Optional[pulumi.Input[str]]:
        """
        Process name.
        """
        return pulumi.get(self, "process_name")

    @process_name.setter
    def process_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "process_name", value)

    @property
    @pulumi.getter(name="processName2")
    def process_name2(self) -> Optional[pulumi.Input[str]]:
        """
        Process name.
        """
        return pulumi.get(self, "process_name2")

    @process_name2.setter
    def process_name2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "process_name2", value)

    @property
    @pulumi.getter(name="processName3")
    def process_name3(self) -> Optional[pulumi.Input[str]]:
        """
        Process name.
        """
        return pulumi.get(self, "process_name3")

    @process_name3.setter
    def process_name3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "process_name3", value)

    @property
    @pulumi.getter(name="processName4")
    def process_name4(self) -> Optional[pulumi.Input[str]]:
        """
        Process name.
        """
        return pulumi.get(self, "process_name4")

    @process_name4.setter
    def process_name4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "process_name4", value)


@pulumi.input_type
class EndpointControlProfileOnNetAddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address object from available options.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address object from available options.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class EndpointControlProfileSrcAddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address object from available options.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address object from available options.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class EndpointControlProfileUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address object from available options.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address object from available options.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class EndpointControlProfileUserGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address object from available options.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address object from available options.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ExtenderControllerExtender1ControllerReportArgs:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input[int]] = None,
                 signal_threshold: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] interval: Controller report interval.
        :param pulumi.Input[int] signal_threshold: Controller report signal threshold.
        :param pulumi.Input[str] status: FortiExtender controller report status. Valid values: `disable`, `enable`.
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if signal_threshold is not None:
            pulumi.set(__self__, "signal_threshold", signal_threshold)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Controller report interval.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="signalThreshold")
    def signal_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Controller report signal threshold.
        """
        return pulumi.get(self, "signal_threshold")

    @signal_threshold.setter
    def signal_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "signal_threshold", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender controller report status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ExtenderControllerExtender1Modem1Args:
    def __init__(__self__, *,
                 auto_switch: Optional[pulumi.Input['ExtenderControllerExtender1Modem1AutoSwitchArgs']] = None,
                 conn_status: Optional[pulumi.Input[int]] = None,
                 default_sim: Optional[pulumi.Input[str]] = None,
                 gps: Optional[pulumi.Input[str]] = None,
                 ifname: Optional[pulumi.Input[str]] = None,
                 preferred_carrier: Optional[pulumi.Input[str]] = None,
                 redundant_intf: Optional[pulumi.Input[str]] = None,
                 redundant_mode: Optional[pulumi.Input[str]] = None,
                 sim1_pin: Optional[pulumi.Input[str]] = None,
                 sim1_pin_code: Optional[pulumi.Input[str]] = None,
                 sim2_pin: Optional[pulumi.Input[str]] = None,
                 sim2_pin_code: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ExtenderControllerExtender1Modem1AutoSwitchArgs'] auto_switch: FortiExtender auto switch configuration. The structure of `auto_switch` block is documented below.
        :param pulumi.Input[int] conn_status: Connection status.
        :param pulumi.Input[str] default_sim: Default SIM selection. Valid values: `sim1`, `sim2`, `carrier`, `cost`.
        :param pulumi.Input[str] gps: FortiExtender GPS enable/disable. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ifname: FortiExtender interface name.
        :param pulumi.Input[str] preferred_carrier: Preferred carrier.
        :param pulumi.Input[str] redundant_intf: Redundant interface.
        :param pulumi.Input[str] redundant_mode: FortiExtender mode. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] sim1_pin: SIM #1 PIN status. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] sim1_pin_code: SIM #1 PIN password.
        :param pulumi.Input[str] sim2_pin: SIM #2 PIN status. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] sim2_pin_code: SIM #2 PIN password.
        """
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if ifname is not None:
            pulumi.set(__self__, "ifname", ifname)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional[pulumi.Input['ExtenderControllerExtender1Modem1AutoSwitchArgs']]:
        """
        FortiExtender auto switch configuration. The structure of `auto_switch` block is documented below.
        """
        return pulumi.get(self, "auto_switch")

    @auto_switch.setter
    def auto_switch(self, value: Optional[pulumi.Input['ExtenderControllerExtender1Modem1AutoSwitchArgs']]):
        pulumi.set(self, "auto_switch", value)

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[pulumi.Input[int]]:
        """
        Connection status.
        """
        return pulumi.get(self, "conn_status")

    @conn_status.setter
    def conn_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_status", value)

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[pulumi.Input[str]]:
        """
        Default SIM selection. Valid values: `sim1`, `sim2`, `carrier`, `cost`.
        """
        return pulumi.get(self, "default_sim")

    @default_sim.setter
    def default_sim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_sim", value)

    @property
    @pulumi.getter
    def gps(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender GPS enable/disable. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "gps")

    @gps.setter
    def gps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gps", value)

    @property
    @pulumi.getter
    def ifname(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender interface name.
        """
        return pulumi.get(self, "ifname")

    @ifname.setter
    def ifname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ifname", value)

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[pulumi.Input[str]]:
        """
        Preferred carrier.
        """
        return pulumi.get(self, "preferred_carrier")

    @preferred_carrier.setter
    def preferred_carrier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_carrier", value)

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[pulumi.Input[str]]:
        """
        Redundant interface.
        """
        return pulumi.get(self, "redundant_intf")

    @redundant_intf.setter
    def redundant_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_intf", value)

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender mode. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "redundant_mode")

    @redundant_mode.setter
    def redundant_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_mode", value)

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[pulumi.Input[str]]:
        """
        SIM #1 PIN status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "sim1_pin")

    @sim1_pin.setter
    def sim1_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin", value)

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[pulumi.Input[str]]:
        """
        SIM #1 PIN password.
        """
        return pulumi.get(self, "sim1_pin_code")

    @sim1_pin_code.setter
    def sim1_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin_code", value)

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[pulumi.Input[str]]:
        """
        SIM #2 PIN status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "sim2_pin")

    @sim2_pin.setter
    def sim2_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin", value)

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[pulumi.Input[str]]:
        """
        SIM #2 PIN password.
        """
        return pulumi.get(self, "sim2_pin_code")

    @sim2_pin_code.setter
    def sim2_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin_code", value)


@pulumi.input_type
class ExtenderControllerExtender1Modem1AutoSwitchArgs:
    def __init__(__self__, *,
                 dataplan: Optional[pulumi.Input[str]] = None,
                 disconnect: Optional[pulumi.Input[str]] = None,
                 disconnect_period: Optional[pulumi.Input[int]] = None,
                 disconnect_threshold: Optional[pulumi.Input[int]] = None,
                 signal: Optional[pulumi.Input[str]] = None,
                 switch_back: Optional[pulumi.Input[str]] = None,
                 switch_back_time: Optional[pulumi.Input[str]] = None,
                 switch_back_timer: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] dataplan: Automatically switch based on data usage. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] disconnect: Auto switch by disconnect. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] disconnect_period: Automatically switch based on disconnect period.
        :param pulumi.Input[int] disconnect_threshold: Automatically switch based on disconnect threshold.
        :param pulumi.Input[str] signal: Automatically switch based on signal strength. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] switch_back: Auto switch with switch back multi-options. Valid values: `time`, `timer`.
        :param pulumi.Input[str] switch_back_time: Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
        :param pulumi.Input[int] switch_back_timer: Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
        """
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch based on data usage. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dataplan")

    @dataplan.setter
    def dataplan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataplan", value)

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[pulumi.Input[str]]:
        """
        Auto switch by disconnect. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "disconnect")

    @disconnect.setter
    def disconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disconnect", value)

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch based on disconnect period.
        """
        return pulumi.get(self, "disconnect_period")

    @disconnect_period.setter
    def disconnect_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_period", value)

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch based on disconnect threshold.
        """
        return pulumi.get(self, "disconnect_threshold")

    @disconnect_threshold.setter
    def disconnect_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_threshold", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch based on signal strength. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[pulumi.Input[str]]:
        """
        Auto switch with switch back multi-options. Valid values: `time`, `timer`.
        """
        return pulumi.get(self, "switch_back")

    @switch_back.setter
    def switch_back(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back", value)

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
        """
        return pulumi.get(self, "switch_back_time")

    @switch_back_time.setter
    def switch_back_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back_time", value)

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
        """
        return pulumi.get(self, "switch_back_timer")

    @switch_back_timer.setter
    def switch_back_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_back_timer", value)


@pulumi.input_type
class ExtenderControllerExtender1Modem2Args:
    def __init__(__self__, *,
                 auto_switch: Optional[pulumi.Input['ExtenderControllerExtender1Modem2AutoSwitchArgs']] = None,
                 conn_status: Optional[pulumi.Input[int]] = None,
                 default_sim: Optional[pulumi.Input[str]] = None,
                 gps: Optional[pulumi.Input[str]] = None,
                 ifname: Optional[pulumi.Input[str]] = None,
                 preferred_carrier: Optional[pulumi.Input[str]] = None,
                 redundant_intf: Optional[pulumi.Input[str]] = None,
                 redundant_mode: Optional[pulumi.Input[str]] = None,
                 sim1_pin: Optional[pulumi.Input[str]] = None,
                 sim1_pin_code: Optional[pulumi.Input[str]] = None,
                 sim2_pin: Optional[pulumi.Input[str]] = None,
                 sim2_pin_code: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ExtenderControllerExtender1Modem2AutoSwitchArgs'] auto_switch: FortiExtender auto switch configuration. The structure of `auto_switch` block is documented below.
        :param pulumi.Input[int] conn_status: Connection status.
        :param pulumi.Input[str] default_sim: Default SIM selection. Valid values: `sim1`, `sim2`, `carrier`, `cost`.
        :param pulumi.Input[str] gps: FortiExtender GPS enable/disable. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ifname: FortiExtender interface name.
        :param pulumi.Input[str] preferred_carrier: Preferred carrier.
        :param pulumi.Input[str] redundant_intf: Redundant interface.
        :param pulumi.Input[str] redundant_mode: FortiExtender mode. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] sim1_pin: SIM #1 PIN status. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] sim1_pin_code: SIM #1 PIN password.
        :param pulumi.Input[str] sim2_pin: SIM #2 PIN status. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] sim2_pin_code: SIM #2 PIN password.
        """
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if ifname is not None:
            pulumi.set(__self__, "ifname", ifname)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional[pulumi.Input['ExtenderControllerExtender1Modem2AutoSwitchArgs']]:
        """
        FortiExtender auto switch configuration. The structure of `auto_switch` block is documented below.
        """
        return pulumi.get(self, "auto_switch")

    @auto_switch.setter
    def auto_switch(self, value: Optional[pulumi.Input['ExtenderControllerExtender1Modem2AutoSwitchArgs']]):
        pulumi.set(self, "auto_switch", value)

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[pulumi.Input[int]]:
        """
        Connection status.
        """
        return pulumi.get(self, "conn_status")

    @conn_status.setter
    def conn_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_status", value)

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[pulumi.Input[str]]:
        """
        Default SIM selection. Valid values: `sim1`, `sim2`, `carrier`, `cost`.
        """
        return pulumi.get(self, "default_sim")

    @default_sim.setter
    def default_sim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_sim", value)

    @property
    @pulumi.getter
    def gps(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender GPS enable/disable. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "gps")

    @gps.setter
    def gps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gps", value)

    @property
    @pulumi.getter
    def ifname(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender interface name.
        """
        return pulumi.get(self, "ifname")

    @ifname.setter
    def ifname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ifname", value)

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[pulumi.Input[str]]:
        """
        Preferred carrier.
        """
        return pulumi.get(self, "preferred_carrier")

    @preferred_carrier.setter
    def preferred_carrier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_carrier", value)

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[pulumi.Input[str]]:
        """
        Redundant interface.
        """
        return pulumi.get(self, "redundant_intf")

    @redundant_intf.setter
    def redundant_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_intf", value)

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender mode. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "redundant_mode")

    @redundant_mode.setter
    def redundant_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_mode", value)

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[pulumi.Input[str]]:
        """
        SIM #1 PIN status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "sim1_pin")

    @sim1_pin.setter
    def sim1_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin", value)

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[pulumi.Input[str]]:
        """
        SIM #1 PIN password.
        """
        return pulumi.get(self, "sim1_pin_code")

    @sim1_pin_code.setter
    def sim1_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin_code", value)

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[pulumi.Input[str]]:
        """
        SIM #2 PIN status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "sim2_pin")

    @sim2_pin.setter
    def sim2_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin", value)

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[pulumi.Input[str]]:
        """
        SIM #2 PIN password.
        """
        return pulumi.get(self, "sim2_pin_code")

    @sim2_pin_code.setter
    def sim2_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin_code", value)


@pulumi.input_type
class ExtenderControllerExtender1Modem2AutoSwitchArgs:
    def __init__(__self__, *,
                 dataplan: Optional[pulumi.Input[str]] = None,
                 disconnect: Optional[pulumi.Input[str]] = None,
                 disconnect_period: Optional[pulumi.Input[int]] = None,
                 disconnect_threshold: Optional[pulumi.Input[int]] = None,
                 signal: Optional[pulumi.Input[str]] = None,
                 switch_back: Optional[pulumi.Input[str]] = None,
                 switch_back_time: Optional[pulumi.Input[str]] = None,
                 switch_back_timer: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] dataplan: Automatically switch based on data usage. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] disconnect: Auto switch by disconnect. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] disconnect_period: Automatically switch based on disconnect period.
        :param pulumi.Input[int] disconnect_threshold: Automatically switch based on disconnect threshold.
        :param pulumi.Input[str] signal: Automatically switch based on signal strength. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] switch_back: Auto switch with switch back multi-options. Valid values: `time`, `timer`.
        :param pulumi.Input[str] switch_back_time: Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
        :param pulumi.Input[int] switch_back_timer: Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
        """
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch based on data usage. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dataplan")

    @dataplan.setter
    def dataplan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataplan", value)

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[pulumi.Input[str]]:
        """
        Auto switch by disconnect. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "disconnect")

    @disconnect.setter
    def disconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disconnect", value)

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch based on disconnect period.
        """
        return pulumi.get(self, "disconnect_period")

    @disconnect_period.setter
    def disconnect_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_period", value)

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch based on disconnect threshold.
        """
        return pulumi.get(self, "disconnect_threshold")

    @disconnect_threshold.setter
    def disconnect_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_threshold", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch based on signal strength. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[pulumi.Input[str]]:
        """
        Auto switch with switch back multi-options. Valid values: `time`, `timer`.
        """
        return pulumi.get(self, "switch_back")

    @switch_back.setter
    def switch_back(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back", value)

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
        """
        return pulumi.get(self, "switch_back_time")

    @switch_back_time.setter
    def switch_back_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back_time", value)

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
        """
        return pulumi.get(self, "switch_back_timer")

    @switch_back_timer.setter
    def switch_back_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_back_timer", value)


@pulumi.input_type
class ExtenderControllerExtenderControllerReportArgs:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input[int]] = None,
                 signal_threshold: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] interval: Controller report interval.
        :param pulumi.Input[int] signal_threshold: Controller report signal threshold.
        :param pulumi.Input[str] status: FortiExtender controller report status. Valid values: `disable`, `enable`.
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if signal_threshold is not None:
            pulumi.set(__self__, "signal_threshold", signal_threshold)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Controller report interval.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="signalThreshold")
    def signal_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Controller report signal threshold.
        """
        return pulumi.get(self, "signal_threshold")

    @signal_threshold.setter
    def signal_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "signal_threshold", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender controller report status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ExtenderControllerExtenderModem1Args:
    def __init__(__self__, *,
                 auto_switch: Optional[pulumi.Input['ExtenderControllerExtenderModem1AutoSwitchArgs']] = None,
                 conn_status: Optional[pulumi.Input[int]] = None,
                 default_sim: Optional[pulumi.Input[str]] = None,
                 gps: Optional[pulumi.Input[str]] = None,
                 ifname: Optional[pulumi.Input[str]] = None,
                 preferred_carrier: Optional[pulumi.Input[str]] = None,
                 redundant_intf: Optional[pulumi.Input[str]] = None,
                 redundant_mode: Optional[pulumi.Input[str]] = None,
                 sim1_pin: Optional[pulumi.Input[str]] = None,
                 sim1_pin_code: Optional[pulumi.Input[str]] = None,
                 sim2_pin: Optional[pulumi.Input[str]] = None,
                 sim2_pin_code: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ExtenderControllerExtenderModem1AutoSwitchArgs'] auto_switch: FortiExtender auto switch configuration. The structure of `auto_switch` block is documented below.
        :param pulumi.Input[int] conn_status: Connection status.
        :param pulumi.Input[str] default_sim: Default SIM selection. Valid values: `sim1`, `sim2`, `carrier`, `cost`.
        :param pulumi.Input[str] gps: FortiExtender GPS enable/disable. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ifname: FortiExtender interface name.
        :param pulumi.Input[str] preferred_carrier: Preferred carrier.
        :param pulumi.Input[str] redundant_intf: Redundant interface.
        :param pulumi.Input[str] redundant_mode: FortiExtender mode. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] sim1_pin: SIM #1 PIN status. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] sim1_pin_code: SIM #1 PIN password.
        :param pulumi.Input[str] sim2_pin: SIM #2 PIN status. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] sim2_pin_code: SIM #2 PIN password.
        """
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if ifname is not None:
            pulumi.set(__self__, "ifname", ifname)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional[pulumi.Input['ExtenderControllerExtenderModem1AutoSwitchArgs']]:
        """
        FortiExtender auto switch configuration. The structure of `auto_switch` block is documented below.
        """
        return pulumi.get(self, "auto_switch")

    @auto_switch.setter
    def auto_switch(self, value: Optional[pulumi.Input['ExtenderControllerExtenderModem1AutoSwitchArgs']]):
        pulumi.set(self, "auto_switch", value)

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[pulumi.Input[int]]:
        """
        Connection status.
        """
        return pulumi.get(self, "conn_status")

    @conn_status.setter
    def conn_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_status", value)

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[pulumi.Input[str]]:
        """
        Default SIM selection. Valid values: `sim1`, `sim2`, `carrier`, `cost`.
        """
        return pulumi.get(self, "default_sim")

    @default_sim.setter
    def default_sim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_sim", value)

    @property
    @pulumi.getter
    def gps(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender GPS enable/disable. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "gps")

    @gps.setter
    def gps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gps", value)

    @property
    @pulumi.getter
    def ifname(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender interface name.
        """
        return pulumi.get(self, "ifname")

    @ifname.setter
    def ifname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ifname", value)

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[pulumi.Input[str]]:
        """
        Preferred carrier.
        """
        return pulumi.get(self, "preferred_carrier")

    @preferred_carrier.setter
    def preferred_carrier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_carrier", value)

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[pulumi.Input[str]]:
        """
        Redundant interface.
        """
        return pulumi.get(self, "redundant_intf")

    @redundant_intf.setter
    def redundant_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_intf", value)

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender mode. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "redundant_mode")

    @redundant_mode.setter
    def redundant_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_mode", value)

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[pulumi.Input[str]]:
        """
        SIM #1 PIN status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "sim1_pin")

    @sim1_pin.setter
    def sim1_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin", value)

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[pulumi.Input[str]]:
        """
        SIM #1 PIN password.
        """
        return pulumi.get(self, "sim1_pin_code")

    @sim1_pin_code.setter
    def sim1_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin_code", value)

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[pulumi.Input[str]]:
        """
        SIM #2 PIN status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "sim2_pin")

    @sim2_pin.setter
    def sim2_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin", value)

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[pulumi.Input[str]]:
        """
        SIM #2 PIN password.
        """
        return pulumi.get(self, "sim2_pin_code")

    @sim2_pin_code.setter
    def sim2_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin_code", value)


@pulumi.input_type
class ExtenderControllerExtenderModem1AutoSwitchArgs:
    def __init__(__self__, *,
                 dataplan: Optional[pulumi.Input[str]] = None,
                 disconnect: Optional[pulumi.Input[str]] = None,
                 disconnect_period: Optional[pulumi.Input[int]] = None,
                 disconnect_threshold: Optional[pulumi.Input[int]] = None,
                 signal: Optional[pulumi.Input[str]] = None,
                 switch_back: Optional[pulumi.Input[str]] = None,
                 switch_back_time: Optional[pulumi.Input[str]] = None,
                 switch_back_timer: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] dataplan: Automatically switch based on data usage. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] disconnect: Auto switch by disconnect. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] disconnect_period: Automatically switch based on disconnect period.
        :param pulumi.Input[int] disconnect_threshold: Automatically switch based on disconnect threshold.
        :param pulumi.Input[str] signal: Automatically switch based on signal strength. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] switch_back: Auto switch with switch back multi-options. Valid values: `time`, `timer`.
        :param pulumi.Input[str] switch_back_time: Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
        :param pulumi.Input[int] switch_back_timer: Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
        """
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch based on data usage. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dataplan")

    @dataplan.setter
    def dataplan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataplan", value)

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[pulumi.Input[str]]:
        """
        Auto switch by disconnect. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "disconnect")

    @disconnect.setter
    def disconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disconnect", value)

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch based on disconnect period.
        """
        return pulumi.get(self, "disconnect_period")

    @disconnect_period.setter
    def disconnect_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_period", value)

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch based on disconnect threshold.
        """
        return pulumi.get(self, "disconnect_threshold")

    @disconnect_threshold.setter
    def disconnect_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_threshold", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch based on signal strength. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[pulumi.Input[str]]:
        """
        Auto switch with switch back multi-options. Valid values: `time`, `timer`.
        """
        return pulumi.get(self, "switch_back")

    @switch_back.setter
    def switch_back(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back", value)

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
        """
        return pulumi.get(self, "switch_back_time")

    @switch_back_time.setter
    def switch_back_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back_time", value)

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
        """
        return pulumi.get(self, "switch_back_timer")

    @switch_back_timer.setter
    def switch_back_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_back_timer", value)


@pulumi.input_type
class ExtenderControllerExtenderModem2Args:
    def __init__(__self__, *,
                 auto_switch: Optional[pulumi.Input['ExtenderControllerExtenderModem2AutoSwitchArgs']] = None,
                 conn_status: Optional[pulumi.Input[int]] = None,
                 default_sim: Optional[pulumi.Input[str]] = None,
                 gps: Optional[pulumi.Input[str]] = None,
                 ifname: Optional[pulumi.Input[str]] = None,
                 preferred_carrier: Optional[pulumi.Input[str]] = None,
                 redundant_intf: Optional[pulumi.Input[str]] = None,
                 redundant_mode: Optional[pulumi.Input[str]] = None,
                 sim1_pin: Optional[pulumi.Input[str]] = None,
                 sim1_pin_code: Optional[pulumi.Input[str]] = None,
                 sim2_pin: Optional[pulumi.Input[str]] = None,
                 sim2_pin_code: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ExtenderControllerExtenderModem2AutoSwitchArgs'] auto_switch: FortiExtender auto switch configuration. The structure of `auto_switch` block is documented below.
        :param pulumi.Input[int] conn_status: Connection status.
        :param pulumi.Input[str] default_sim: Default SIM selection. Valid values: `sim1`, `sim2`, `carrier`, `cost`.
        :param pulumi.Input[str] gps: FortiExtender GPS enable/disable. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ifname: FortiExtender interface name.
        :param pulumi.Input[str] preferred_carrier: Preferred carrier.
        :param pulumi.Input[str] redundant_intf: Redundant interface.
        :param pulumi.Input[str] redundant_mode: FortiExtender mode. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] sim1_pin: SIM #1 PIN status. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] sim1_pin_code: SIM #1 PIN password.
        :param pulumi.Input[str] sim2_pin: SIM #2 PIN status. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] sim2_pin_code: SIM #2 PIN password.
        """
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if ifname is not None:
            pulumi.set(__self__, "ifname", ifname)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional[pulumi.Input['ExtenderControllerExtenderModem2AutoSwitchArgs']]:
        """
        FortiExtender auto switch configuration. The structure of `auto_switch` block is documented below.
        """
        return pulumi.get(self, "auto_switch")

    @auto_switch.setter
    def auto_switch(self, value: Optional[pulumi.Input['ExtenderControllerExtenderModem2AutoSwitchArgs']]):
        pulumi.set(self, "auto_switch", value)

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[pulumi.Input[int]]:
        """
        Connection status.
        """
        return pulumi.get(self, "conn_status")

    @conn_status.setter
    def conn_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_status", value)

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[pulumi.Input[str]]:
        """
        Default SIM selection. Valid values: `sim1`, `sim2`, `carrier`, `cost`.
        """
        return pulumi.get(self, "default_sim")

    @default_sim.setter
    def default_sim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_sim", value)

    @property
    @pulumi.getter
    def gps(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender GPS enable/disable. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "gps")

    @gps.setter
    def gps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gps", value)

    @property
    @pulumi.getter
    def ifname(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender interface name.
        """
        return pulumi.get(self, "ifname")

    @ifname.setter
    def ifname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ifname", value)

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[pulumi.Input[str]]:
        """
        Preferred carrier.
        """
        return pulumi.get(self, "preferred_carrier")

    @preferred_carrier.setter
    def preferred_carrier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_carrier", value)

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[pulumi.Input[str]]:
        """
        Redundant interface.
        """
        return pulumi.get(self, "redundant_intf")

    @redundant_intf.setter
    def redundant_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_intf", value)

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender mode. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "redundant_mode")

    @redundant_mode.setter
    def redundant_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_mode", value)

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[pulumi.Input[str]]:
        """
        SIM #1 PIN status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "sim1_pin")

    @sim1_pin.setter
    def sim1_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin", value)

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[pulumi.Input[str]]:
        """
        SIM #1 PIN password.
        """
        return pulumi.get(self, "sim1_pin_code")

    @sim1_pin_code.setter
    def sim1_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin_code", value)

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[pulumi.Input[str]]:
        """
        SIM #2 PIN status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "sim2_pin")

    @sim2_pin.setter
    def sim2_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin", value)

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[pulumi.Input[str]]:
        """
        SIM #2 PIN password.
        """
        return pulumi.get(self, "sim2_pin_code")

    @sim2_pin_code.setter
    def sim2_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin_code", value)


@pulumi.input_type
class ExtenderControllerExtenderModem2AutoSwitchArgs:
    def __init__(__self__, *,
                 dataplan: Optional[pulumi.Input[str]] = None,
                 disconnect: Optional[pulumi.Input[str]] = None,
                 disconnect_period: Optional[pulumi.Input[int]] = None,
                 disconnect_threshold: Optional[pulumi.Input[int]] = None,
                 signal: Optional[pulumi.Input[str]] = None,
                 switch_back: Optional[pulumi.Input[str]] = None,
                 switch_back_time: Optional[pulumi.Input[str]] = None,
                 switch_back_timer: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] dataplan: Automatically switch based on data usage. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] disconnect: Auto switch by disconnect. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] disconnect_period: Automatically switch based on disconnect period.
        :param pulumi.Input[int] disconnect_threshold: Automatically switch based on disconnect threshold.
        :param pulumi.Input[str] signal: Automatically switch based on signal strength. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] switch_back: Auto switch with switch back multi-options. Valid values: `time`, `timer`.
        :param pulumi.Input[str] switch_back_time: Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
        :param pulumi.Input[int] switch_back_timer: Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
        """
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch based on data usage. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dataplan")

    @dataplan.setter
    def dataplan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataplan", value)

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[pulumi.Input[str]]:
        """
        Auto switch by disconnect. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "disconnect")

    @disconnect.setter
    def disconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disconnect", value)

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch based on disconnect period.
        """
        return pulumi.get(self, "disconnect_period")

    @disconnect_period.setter
    def disconnect_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_period", value)

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch based on disconnect threshold.
        """
        return pulumi.get(self, "disconnect_threshold")

    @disconnect_threshold.setter
    def disconnect_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_threshold", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch based on signal strength. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[pulumi.Input[str]]:
        """
        Auto switch with switch back multi-options. Valid values: `time`, `timer`.
        """
        return pulumi.get(self, "switch_back")

    @switch_back.setter
    def switch_back(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back", value)

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
        """
        return pulumi.get(self, "switch_back_time")

    @switch_back_time.setter
    def switch_back_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back_time", value)

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
        """
        return pulumi.get(self, "switch_back_timer")

    @switch_back_timer.setter
    def switch_back_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_back_timer", value)


@pulumi.input_type
class ExtenderControllerExtenderProfileCellularArgs:
    def __init__(__self__, *,
                 controller_report: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularControllerReportArgs']] = None,
                 dataplans: Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderControllerExtenderProfileCellularDataplanArgs']]]] = None,
                 modem1: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularModem1Args']] = None,
                 modem2: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularModem2Args']] = None,
                 sms_notification: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularSmsNotificationArgs']] = None):
        """
        :param pulumi.Input['ExtenderControllerExtenderProfileCellularControllerReportArgs'] controller_report: FortiExtender controller report configuration. The structure of `controller_report` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['ExtenderControllerExtenderProfileCellularDataplanArgs']]] dataplans: Automatically switch based on data usage. Valid values: `disable`, `enable`.
        :param pulumi.Input['ExtenderControllerExtenderProfileCellularModem1Args'] modem1: Configuration options for modem 1. The structure of `modem1` block is documented below.
        :param pulumi.Input['ExtenderControllerExtenderProfileCellularModem2Args'] modem2: Configuration options for modem 2. The structure of `modem2` block is documented below.
        :param pulumi.Input['ExtenderControllerExtenderProfileCellularSmsNotificationArgs'] sms_notification: FortiExtender cellular SMS notification configuration. The structure of `sms_notification` block is documented below.
        """
        if controller_report is not None:
            pulumi.set(__self__, "controller_report", controller_report)
        if dataplans is not None:
            pulumi.set(__self__, "dataplans", dataplans)
        if modem1 is not None:
            pulumi.set(__self__, "modem1", modem1)
        if modem2 is not None:
            pulumi.set(__self__, "modem2", modem2)
        if sms_notification is not None:
            pulumi.set(__self__, "sms_notification", sms_notification)

    @property
    @pulumi.getter(name="controllerReport")
    def controller_report(self) -> Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularControllerReportArgs']]:
        """
        FortiExtender controller report configuration. The structure of `controller_report` block is documented below.
        """
        return pulumi.get(self, "controller_report")

    @controller_report.setter
    def controller_report(self, value: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularControllerReportArgs']]):
        pulumi.set(self, "controller_report", value)

    @property
    @pulumi.getter
    def dataplans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderControllerExtenderProfileCellularDataplanArgs']]]]:
        """
        Automatically switch based on data usage. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dataplans")

    @dataplans.setter
    def dataplans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderControllerExtenderProfileCellularDataplanArgs']]]]):
        pulumi.set(self, "dataplans", value)

    @property
    @pulumi.getter
    def modem1(self) -> Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularModem1Args']]:
        """
        Configuration options for modem 1. The structure of `modem1` block is documented below.
        """
        return pulumi.get(self, "modem1")

    @modem1.setter
    def modem1(self, value: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularModem1Args']]):
        pulumi.set(self, "modem1", value)

    @property
    @pulumi.getter
    def modem2(self) -> Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularModem2Args']]:
        """
        Configuration options for modem 2. The structure of `modem2` block is documented below.
        """
        return pulumi.get(self, "modem2")

    @modem2.setter
    def modem2(self, value: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularModem2Args']]):
        pulumi.set(self, "modem2", value)

    @property
    @pulumi.getter(name="smsNotification")
    def sms_notification(self) -> Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularSmsNotificationArgs']]:
        """
        FortiExtender cellular SMS notification configuration. The structure of `sms_notification` block is documented below.
        """
        return pulumi.get(self, "sms_notification")

    @sms_notification.setter
    def sms_notification(self, value: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularSmsNotificationArgs']]):
        pulumi.set(self, "sms_notification", value)


@pulumi.input_type
class ExtenderControllerExtenderProfileCellularControllerReportArgs:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input[int]] = None,
                 signal_threshold: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] interval: Controller report interval.
        :param pulumi.Input[int] signal_threshold: Controller report signal threshold.
        :param pulumi.Input[str] status: SMS notification receiver status. Valid values: `disable`, `enable`.
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if signal_threshold is not None:
            pulumi.set(__self__, "signal_threshold", signal_threshold)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Controller report interval.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="signalThreshold")
    def signal_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Controller report signal threshold.
        """
        return pulumi.get(self, "signal_threshold")

    @signal_threshold.setter
    def signal_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "signal_threshold", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        SMS notification receiver status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ExtenderControllerExtenderProfileCellularDataplanArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: FortiExtender LAN extension backhaul name
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender LAN extension backhaul name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ExtenderControllerExtenderProfileCellularModem1Args:
    def __init__(__self__, *,
                 auto_switch: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularModem1AutoSwitchArgs']] = None,
                 conn_status: Optional[pulumi.Input[int]] = None,
                 default_sim: Optional[pulumi.Input[str]] = None,
                 gps: Optional[pulumi.Input[str]] = None,
                 preferred_carrier: Optional[pulumi.Input[str]] = None,
                 redundant_intf: Optional[pulumi.Input[str]] = None,
                 redundant_mode: Optional[pulumi.Input[str]] = None,
                 sim1_pin: Optional[pulumi.Input[str]] = None,
                 sim1_pin_code: Optional[pulumi.Input[str]] = None,
                 sim2_pin: Optional[pulumi.Input[str]] = None,
                 sim2_pin_code: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ExtenderControllerExtenderProfileCellularModem1AutoSwitchArgs'] auto_switch: FortiExtender auto switch configuration. The structure of `auto_switch` block is documented below.
        :param pulumi.Input[int] conn_status: Connection status.
        :param pulumi.Input[str] default_sim: Default SIM selection. Valid values: `sim1`, `sim2`, `carrier`, `cost`.
        :param pulumi.Input[str] gps: FortiExtender GPS enable/disable. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] preferred_carrier: Preferred carrier.
        :param pulumi.Input[str] redundant_intf: Redundant interface.
        :param pulumi.Input[str] redundant_mode: FortiExtender mode. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] sim1_pin: SIM #1 PIN status. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] sim1_pin_code: SIM #1 PIN password.
        :param pulumi.Input[str] sim2_pin: SIM #2 PIN status. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] sim2_pin_code: SIM #2 PIN password.
        """
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularModem1AutoSwitchArgs']]:
        """
        FortiExtender auto switch configuration. The structure of `auto_switch` block is documented below.
        """
        return pulumi.get(self, "auto_switch")

    @auto_switch.setter
    def auto_switch(self, value: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularModem1AutoSwitchArgs']]):
        pulumi.set(self, "auto_switch", value)

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[pulumi.Input[int]]:
        """
        Connection status.
        """
        return pulumi.get(self, "conn_status")

    @conn_status.setter
    def conn_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_status", value)

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[pulumi.Input[str]]:
        """
        Default SIM selection. Valid values: `sim1`, `sim2`, `carrier`, `cost`.
        """
        return pulumi.get(self, "default_sim")

    @default_sim.setter
    def default_sim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_sim", value)

    @property
    @pulumi.getter
    def gps(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender GPS enable/disable. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "gps")

    @gps.setter
    def gps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gps", value)

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[pulumi.Input[str]]:
        """
        Preferred carrier.
        """
        return pulumi.get(self, "preferred_carrier")

    @preferred_carrier.setter
    def preferred_carrier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_carrier", value)

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[pulumi.Input[str]]:
        """
        Redundant interface.
        """
        return pulumi.get(self, "redundant_intf")

    @redundant_intf.setter
    def redundant_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_intf", value)

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender mode. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "redundant_mode")

    @redundant_mode.setter
    def redundant_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_mode", value)

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[pulumi.Input[str]]:
        """
        SIM #1 PIN status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "sim1_pin")

    @sim1_pin.setter
    def sim1_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin", value)

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[pulumi.Input[str]]:
        """
        SIM #1 PIN password.
        """
        return pulumi.get(self, "sim1_pin_code")

    @sim1_pin_code.setter
    def sim1_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin_code", value)

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[pulumi.Input[str]]:
        """
        SIM #2 PIN status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "sim2_pin")

    @sim2_pin.setter
    def sim2_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin", value)

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[pulumi.Input[str]]:
        """
        SIM #2 PIN password.
        """
        return pulumi.get(self, "sim2_pin_code")

    @sim2_pin_code.setter
    def sim2_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin_code", value)


@pulumi.input_type
class ExtenderControllerExtenderProfileCellularModem1AutoSwitchArgs:
    def __init__(__self__, *,
                 dataplan: Optional[pulumi.Input[str]] = None,
                 disconnect: Optional[pulumi.Input[str]] = None,
                 disconnect_period: Optional[pulumi.Input[int]] = None,
                 disconnect_threshold: Optional[pulumi.Input[int]] = None,
                 signal: Optional[pulumi.Input[str]] = None,
                 switch_back: Optional[pulumi.Input[str]] = None,
                 switch_back_time: Optional[pulumi.Input[str]] = None,
                 switch_back_timer: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] dataplan: Automatically switch based on data usage. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] disconnect: Auto switch by disconnect. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] disconnect_period: Automatically switch based on disconnect period.
        :param pulumi.Input[int] disconnect_threshold: Automatically switch based on disconnect threshold.
        :param pulumi.Input[str] signal: Automatically switch based on signal strength. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] switch_back: Auto switch with switch back multi-options. Valid values: `time`, `timer`.
        :param pulumi.Input[str] switch_back_time: Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
        :param pulumi.Input[int] switch_back_timer: Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
        """
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch based on data usage. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dataplan")

    @dataplan.setter
    def dataplan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataplan", value)

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[pulumi.Input[str]]:
        """
        Auto switch by disconnect. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "disconnect")

    @disconnect.setter
    def disconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disconnect", value)

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch based on disconnect period.
        """
        return pulumi.get(self, "disconnect_period")

    @disconnect_period.setter
    def disconnect_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_period", value)

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch based on disconnect threshold.
        """
        return pulumi.get(self, "disconnect_threshold")

    @disconnect_threshold.setter
    def disconnect_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_threshold", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch based on signal strength. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[pulumi.Input[str]]:
        """
        Auto switch with switch back multi-options. Valid values: `time`, `timer`.
        """
        return pulumi.get(self, "switch_back")

    @switch_back.setter
    def switch_back(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back", value)

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
        """
        return pulumi.get(self, "switch_back_time")

    @switch_back_time.setter
    def switch_back_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back_time", value)

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
        """
        return pulumi.get(self, "switch_back_timer")

    @switch_back_timer.setter
    def switch_back_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_back_timer", value)


@pulumi.input_type
class ExtenderControllerExtenderProfileCellularModem2Args:
    def __init__(__self__, *,
                 auto_switch: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularModem2AutoSwitchArgs']] = None,
                 conn_status: Optional[pulumi.Input[int]] = None,
                 default_sim: Optional[pulumi.Input[str]] = None,
                 gps: Optional[pulumi.Input[str]] = None,
                 preferred_carrier: Optional[pulumi.Input[str]] = None,
                 redundant_intf: Optional[pulumi.Input[str]] = None,
                 redundant_mode: Optional[pulumi.Input[str]] = None,
                 sim1_pin: Optional[pulumi.Input[str]] = None,
                 sim1_pin_code: Optional[pulumi.Input[str]] = None,
                 sim2_pin: Optional[pulumi.Input[str]] = None,
                 sim2_pin_code: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ExtenderControllerExtenderProfileCellularModem2AutoSwitchArgs'] auto_switch: FortiExtender auto switch configuration. The structure of `auto_switch` block is documented below.
        :param pulumi.Input[int] conn_status: Connection status.
        :param pulumi.Input[str] default_sim: Default SIM selection. Valid values: `sim1`, `sim2`, `carrier`, `cost`.
        :param pulumi.Input[str] gps: FortiExtender GPS enable/disable. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] preferred_carrier: Preferred carrier.
        :param pulumi.Input[str] redundant_intf: Redundant interface.
        :param pulumi.Input[str] redundant_mode: FortiExtender mode. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] sim1_pin: SIM #1 PIN status. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] sim1_pin_code: SIM #1 PIN password.
        :param pulumi.Input[str] sim2_pin: SIM #2 PIN status. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] sim2_pin_code: SIM #2 PIN password.
        """
        if auto_switch is not None:
            pulumi.set(__self__, "auto_switch", auto_switch)
        if conn_status is not None:
            pulumi.set(__self__, "conn_status", conn_status)
        if default_sim is not None:
            pulumi.set(__self__, "default_sim", default_sim)
        if gps is not None:
            pulumi.set(__self__, "gps", gps)
        if preferred_carrier is not None:
            pulumi.set(__self__, "preferred_carrier", preferred_carrier)
        if redundant_intf is not None:
            pulumi.set(__self__, "redundant_intf", redundant_intf)
        if redundant_mode is not None:
            pulumi.set(__self__, "redundant_mode", redundant_mode)
        if sim1_pin is not None:
            pulumi.set(__self__, "sim1_pin", sim1_pin)
        if sim1_pin_code is not None:
            pulumi.set(__self__, "sim1_pin_code", sim1_pin_code)
        if sim2_pin is not None:
            pulumi.set(__self__, "sim2_pin", sim2_pin)
        if sim2_pin_code is not None:
            pulumi.set(__self__, "sim2_pin_code", sim2_pin_code)

    @property
    @pulumi.getter(name="autoSwitch")
    def auto_switch(self) -> Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularModem2AutoSwitchArgs']]:
        """
        FortiExtender auto switch configuration. The structure of `auto_switch` block is documented below.
        """
        return pulumi.get(self, "auto_switch")

    @auto_switch.setter
    def auto_switch(self, value: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularModem2AutoSwitchArgs']]):
        pulumi.set(self, "auto_switch", value)

    @property
    @pulumi.getter(name="connStatus")
    def conn_status(self) -> Optional[pulumi.Input[int]]:
        """
        Connection status.
        """
        return pulumi.get(self, "conn_status")

    @conn_status.setter
    def conn_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_status", value)

    @property
    @pulumi.getter(name="defaultSim")
    def default_sim(self) -> Optional[pulumi.Input[str]]:
        """
        Default SIM selection. Valid values: `sim1`, `sim2`, `carrier`, `cost`.
        """
        return pulumi.get(self, "default_sim")

    @default_sim.setter
    def default_sim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_sim", value)

    @property
    @pulumi.getter
    def gps(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender GPS enable/disable. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "gps")

    @gps.setter
    def gps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gps", value)

    @property
    @pulumi.getter(name="preferredCarrier")
    def preferred_carrier(self) -> Optional[pulumi.Input[str]]:
        """
        Preferred carrier.
        """
        return pulumi.get(self, "preferred_carrier")

    @preferred_carrier.setter
    def preferred_carrier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_carrier", value)

    @property
    @pulumi.getter(name="redundantIntf")
    def redundant_intf(self) -> Optional[pulumi.Input[str]]:
        """
        Redundant interface.
        """
        return pulumi.get(self, "redundant_intf")

    @redundant_intf.setter
    def redundant_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_intf", value)

    @property
    @pulumi.getter(name="redundantMode")
    def redundant_mode(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender mode. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "redundant_mode")

    @redundant_mode.setter
    def redundant_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_mode", value)

    @property
    @pulumi.getter(name="sim1Pin")
    def sim1_pin(self) -> Optional[pulumi.Input[str]]:
        """
        SIM #1 PIN status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "sim1_pin")

    @sim1_pin.setter
    def sim1_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin", value)

    @property
    @pulumi.getter(name="sim1PinCode")
    def sim1_pin_code(self) -> Optional[pulumi.Input[str]]:
        """
        SIM #1 PIN password.
        """
        return pulumi.get(self, "sim1_pin_code")

    @sim1_pin_code.setter
    def sim1_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim1_pin_code", value)

    @property
    @pulumi.getter(name="sim2Pin")
    def sim2_pin(self) -> Optional[pulumi.Input[str]]:
        """
        SIM #2 PIN status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "sim2_pin")

    @sim2_pin.setter
    def sim2_pin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin", value)

    @property
    @pulumi.getter(name="sim2PinCode")
    def sim2_pin_code(self) -> Optional[pulumi.Input[str]]:
        """
        SIM #2 PIN password.
        """
        return pulumi.get(self, "sim2_pin_code")

    @sim2_pin_code.setter
    def sim2_pin_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sim2_pin_code", value)


@pulumi.input_type
class ExtenderControllerExtenderProfileCellularModem2AutoSwitchArgs:
    def __init__(__self__, *,
                 dataplan: Optional[pulumi.Input[str]] = None,
                 disconnect: Optional[pulumi.Input[str]] = None,
                 disconnect_period: Optional[pulumi.Input[int]] = None,
                 disconnect_threshold: Optional[pulumi.Input[int]] = None,
                 signal: Optional[pulumi.Input[str]] = None,
                 switch_back: Optional[pulumi.Input[str]] = None,
                 switch_back_time: Optional[pulumi.Input[str]] = None,
                 switch_back_timer: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] dataplan: Automatically switch based on data usage. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] disconnect: Auto switch by disconnect. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] disconnect_period: Automatically switch based on disconnect period.
        :param pulumi.Input[int] disconnect_threshold: Automatically switch based on disconnect threshold.
        :param pulumi.Input[str] signal: Automatically switch based on signal strength. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] switch_back: Auto switch with switch back multi-options. Valid values: `time`, `timer`.
        :param pulumi.Input[str] switch_back_time: Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
        :param pulumi.Input[int] switch_back_timer: Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
        """
        if dataplan is not None:
            pulumi.set(__self__, "dataplan", dataplan)
        if disconnect is not None:
            pulumi.set(__self__, "disconnect", disconnect)
        if disconnect_period is not None:
            pulumi.set(__self__, "disconnect_period", disconnect_period)
        if disconnect_threshold is not None:
            pulumi.set(__self__, "disconnect_threshold", disconnect_threshold)
        if signal is not None:
            pulumi.set(__self__, "signal", signal)
        if switch_back is not None:
            pulumi.set(__self__, "switch_back", switch_back)
        if switch_back_time is not None:
            pulumi.set(__self__, "switch_back_time", switch_back_time)
        if switch_back_timer is not None:
            pulumi.set(__self__, "switch_back_timer", switch_back_timer)

    @property
    @pulumi.getter
    def dataplan(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch based on data usage. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dataplan")

    @dataplan.setter
    def dataplan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataplan", value)

    @property
    @pulumi.getter
    def disconnect(self) -> Optional[pulumi.Input[str]]:
        """
        Auto switch by disconnect. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "disconnect")

    @disconnect.setter
    def disconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disconnect", value)

    @property
    @pulumi.getter(name="disconnectPeriod")
    def disconnect_period(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch based on disconnect period.
        """
        return pulumi.get(self, "disconnect_period")

    @disconnect_period.setter
    def disconnect_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_period", value)

    @property
    @pulumi.getter(name="disconnectThreshold")
    def disconnect_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch based on disconnect threshold.
        """
        return pulumi.get(self, "disconnect_threshold")

    @disconnect_threshold.setter
    def disconnect_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disconnect_threshold", value)

    @property
    @pulumi.getter
    def signal(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch based on signal strength. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "signal")

    @signal.setter
    def signal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signal", value)

    @property
    @pulumi.getter(name="switchBack")
    def switch_back(self) -> Optional[pulumi.Input[str]]:
        """
        Auto switch with switch back multi-options. Valid values: `time`, `timer`.
        """
        return pulumi.get(self, "switch_back")

    @switch_back.setter
    def switch_back(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back", value)

    @property
    @pulumi.getter(name="switchBackTime")
    def switch_back_time(self) -> Optional[pulumi.Input[str]]:
        """
        Automatically switch over to preferred SIM/carrier at a specified time in UTC (HH:MM).
        """
        return pulumi.get(self, "switch_back_time")

    @switch_back_time.setter
    def switch_back_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_back_time", value)

    @property
    @pulumi.getter(name="switchBackTimer")
    def switch_back_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Automatically switch over to preferred SIM/carrier after the given time (3600 - 2147483647 sec).
        """
        return pulumi.get(self, "switch_back_timer")

    @switch_back_timer.setter
    def switch_back_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_back_timer", value)


@pulumi.input_type
class ExtenderControllerExtenderProfileCellularSmsNotificationArgs:
    def __init__(__self__, *,
                 alert: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularSmsNotificationAlertArgs']] = None,
                 receivers: Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderControllerExtenderProfileCellularSmsNotificationReceiverArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ExtenderControllerExtenderProfileCellularSmsNotificationAlertArgs'] alert: Alert multi-options. Valid values: `system-reboot`, `data-exhausted`, `session-disconnect`, `low-signal-strength`, `mode-switch`, `os-image-fallback`, `fgt-backup-mode-switch`.
        :param pulumi.Input[Sequence[pulumi.Input['ExtenderControllerExtenderProfileCellularSmsNotificationReceiverArgs']]] receivers: SMS notification receiver list. The structure of `receiver` block is documented below.
        :param pulumi.Input[str] status: SMS notification receiver status. Valid values: `disable`, `enable`.
        """
        if alert is not None:
            pulumi.set(__self__, "alert", alert)
        if receivers is not None:
            pulumi.set(__self__, "receivers", receivers)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def alert(self) -> Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularSmsNotificationAlertArgs']]:
        """
        Alert multi-options. Valid values: `system-reboot`, `data-exhausted`, `session-disconnect`, `low-signal-strength`, `mode-switch`, `os-image-fallback`, `fgt-backup-mode-switch`.
        """
        return pulumi.get(self, "alert")

    @alert.setter
    def alert(self, value: Optional[pulumi.Input['ExtenderControllerExtenderProfileCellularSmsNotificationAlertArgs']]):
        pulumi.set(self, "alert", value)

    @property
    @pulumi.getter
    def receivers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderControllerExtenderProfileCellularSmsNotificationReceiverArgs']]]]:
        """
        SMS notification receiver list. The structure of `receiver` block is documented below.
        """
        return pulumi.get(self, "receivers")

    @receivers.setter
    def receivers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderControllerExtenderProfileCellularSmsNotificationReceiverArgs']]]]):
        pulumi.set(self, "receivers", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        SMS notification receiver status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ExtenderControllerExtenderProfileCellularSmsNotificationAlertArgs:
    def __init__(__self__, *,
                 data_exhausted: Optional[pulumi.Input[str]] = None,
                 fgt_backup_mode_switch: Optional[pulumi.Input[str]] = None,
                 low_signal_strength: Optional[pulumi.Input[str]] = None,
                 mode_switch: Optional[pulumi.Input[str]] = None,
                 os_image_fallback: Optional[pulumi.Input[str]] = None,
                 session_disconnect: Optional[pulumi.Input[str]] = None,
                 system_reboot: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_exhausted: Display string when data exhausted.
        :param pulumi.Input[str] fgt_backup_mode_switch: Display string when FortiGate backup mode switched.
        :param pulumi.Input[str] low_signal_strength: Display string when signal strength is low.
        :param pulumi.Input[str] mode_switch: Display string when mode is switched.
        :param pulumi.Input[str] os_image_fallback: Display string when falling back to a previous OS image.
        :param pulumi.Input[str] session_disconnect: Display string when session disconnected.
        :param pulumi.Input[str] system_reboot: Display string when system rebooted.
        """
        if data_exhausted is not None:
            pulumi.set(__self__, "data_exhausted", data_exhausted)
        if fgt_backup_mode_switch is not None:
            pulumi.set(__self__, "fgt_backup_mode_switch", fgt_backup_mode_switch)
        if low_signal_strength is not None:
            pulumi.set(__self__, "low_signal_strength", low_signal_strength)
        if mode_switch is not None:
            pulumi.set(__self__, "mode_switch", mode_switch)
        if os_image_fallback is not None:
            pulumi.set(__self__, "os_image_fallback", os_image_fallback)
        if session_disconnect is not None:
            pulumi.set(__self__, "session_disconnect", session_disconnect)
        if system_reboot is not None:
            pulumi.set(__self__, "system_reboot", system_reboot)

    @property
    @pulumi.getter(name="dataExhausted")
    def data_exhausted(self) -> Optional[pulumi.Input[str]]:
        """
        Display string when data exhausted.
        """
        return pulumi.get(self, "data_exhausted")

    @data_exhausted.setter
    def data_exhausted(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_exhausted", value)

    @property
    @pulumi.getter(name="fgtBackupModeSwitch")
    def fgt_backup_mode_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Display string when FortiGate backup mode switched.
        """
        return pulumi.get(self, "fgt_backup_mode_switch")

    @fgt_backup_mode_switch.setter
    def fgt_backup_mode_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fgt_backup_mode_switch", value)

    @property
    @pulumi.getter(name="lowSignalStrength")
    def low_signal_strength(self) -> Optional[pulumi.Input[str]]:
        """
        Display string when signal strength is low.
        """
        return pulumi.get(self, "low_signal_strength")

    @low_signal_strength.setter
    def low_signal_strength(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "low_signal_strength", value)

    @property
    @pulumi.getter(name="modeSwitch")
    def mode_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Display string when mode is switched.
        """
        return pulumi.get(self, "mode_switch")

    @mode_switch.setter
    def mode_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode_switch", value)

    @property
    @pulumi.getter(name="osImageFallback")
    def os_image_fallback(self) -> Optional[pulumi.Input[str]]:
        """
        Display string when falling back to a previous OS image.
        """
        return pulumi.get(self, "os_image_fallback")

    @os_image_fallback.setter
    def os_image_fallback(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_image_fallback", value)

    @property
    @pulumi.getter(name="sessionDisconnect")
    def session_disconnect(self) -> Optional[pulumi.Input[str]]:
        """
        Display string when session disconnected.
        """
        return pulumi.get(self, "session_disconnect")

    @session_disconnect.setter
    def session_disconnect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_disconnect", value)

    @property
    @pulumi.getter(name="systemReboot")
    def system_reboot(self) -> Optional[pulumi.Input[str]]:
        """
        Display string when system rebooted.
        """
        return pulumi.get(self, "system_reboot")

    @system_reboot.setter
    def system_reboot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_reboot", value)


@pulumi.input_type
class ExtenderControllerExtenderProfileCellularSmsNotificationReceiverArgs:
    def __init__(__self__, *,
                 alert: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 phone_number: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] alert: Alert multi-options. Valid values: `system-reboot`, `data-exhausted`, `session-disconnect`, `low-signal-strength`, `mode-switch`, `os-image-fallback`, `fgt-backup-mode-switch`.
        :param pulumi.Input[str] name: FortiExtender LAN extension backhaul name
        :param pulumi.Input[str] phone_number: Receiver phone number.  Format: [+][country code][area code][local phone number].  For example: +16501234567.
        :param pulumi.Input[str] status: SMS notification receiver status. Valid values: `disable`, `enable`.
        """
        if alert is not None:
            pulumi.set(__self__, "alert", alert)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phone_number is not None:
            pulumi.set(__self__, "phone_number", phone_number)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def alert(self) -> Optional[pulumi.Input[str]]:
        """
        Alert multi-options. Valid values: `system-reboot`, `data-exhausted`, `session-disconnect`, `low-signal-strength`, `mode-switch`, `os-image-fallback`, `fgt-backup-mode-switch`.
        """
        return pulumi.get(self, "alert")

    @alert.setter
    def alert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender LAN extension backhaul name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> Optional[pulumi.Input[str]]:
        """
        Receiver phone number.  Format: [+][country code][area code][local phone number].  For example: +16501234567.
        """
        return pulumi.get(self, "phone_number")

    @phone_number.setter
    def phone_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phone_number", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        SMS notification receiver status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ExtenderControllerExtenderProfileLanExtensionArgs:
    def __init__(__self__, *,
                 backhaul_interface: Optional[pulumi.Input[str]] = None,
                 backhaul_ip: Optional[pulumi.Input[str]] = None,
                 backhauls: Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderControllerExtenderProfileLanExtensionBackhaulArgs']]]] = None,
                 ipsec_tunnel: Optional[pulumi.Input[str]] = None,
                 link_loadbalance: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] backhaul_interface: IPsec phase1 interface.
        :param pulumi.Input[str] backhaul_ip: IPsec phase1 IPv4/FQDN. Used to specify the external IP/FQDN when the FortiGate unit is behind a NAT device.
        :param pulumi.Input[Sequence[pulumi.Input['ExtenderControllerExtenderProfileLanExtensionBackhaulArgs']]] backhauls: LAN extension backhaul tunnel configuration. The structure of `backhaul` block is documented below.
        :param pulumi.Input[str] ipsec_tunnel: IPsec tunnel name.
        :param pulumi.Input[str] link_loadbalance: LAN extension link load balance strategy. Valid values: `activebackup`, `loadbalance`.
        """
        if backhaul_interface is not None:
            pulumi.set(__self__, "backhaul_interface", backhaul_interface)
        if backhaul_ip is not None:
            pulumi.set(__self__, "backhaul_ip", backhaul_ip)
        if backhauls is not None:
            pulumi.set(__self__, "backhauls", backhauls)
        if ipsec_tunnel is not None:
            pulumi.set(__self__, "ipsec_tunnel", ipsec_tunnel)
        if link_loadbalance is not None:
            pulumi.set(__self__, "link_loadbalance", link_loadbalance)

    @property
    @pulumi.getter(name="backhaulInterface")
    def backhaul_interface(self) -> Optional[pulumi.Input[str]]:
        """
        IPsec phase1 interface.
        """
        return pulumi.get(self, "backhaul_interface")

    @backhaul_interface.setter
    def backhaul_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backhaul_interface", value)

    @property
    @pulumi.getter(name="backhaulIp")
    def backhaul_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPsec phase1 IPv4/FQDN. Used to specify the external IP/FQDN when the FortiGate unit is behind a NAT device.
        """
        return pulumi.get(self, "backhaul_ip")

    @backhaul_ip.setter
    def backhaul_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backhaul_ip", value)

    @property
    @pulumi.getter
    def backhauls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderControllerExtenderProfileLanExtensionBackhaulArgs']]]]:
        """
        LAN extension backhaul tunnel configuration. The structure of `backhaul` block is documented below.
        """
        return pulumi.get(self, "backhauls")

    @backhauls.setter
    def backhauls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExtenderControllerExtenderProfileLanExtensionBackhaulArgs']]]]):
        pulumi.set(self, "backhauls", value)

    @property
    @pulumi.getter(name="ipsecTunnel")
    def ipsec_tunnel(self) -> Optional[pulumi.Input[str]]:
        """
        IPsec tunnel name.
        """
        return pulumi.get(self, "ipsec_tunnel")

    @ipsec_tunnel.setter
    def ipsec_tunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_tunnel", value)

    @property
    @pulumi.getter(name="linkLoadbalance")
    def link_loadbalance(self) -> Optional[pulumi.Input[str]]:
        """
        LAN extension link load balance strategy. Valid values: `activebackup`, `loadbalance`.
        """
        return pulumi.get(self, "link_loadbalance")

    @link_loadbalance.setter
    def link_loadbalance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_loadbalance", value)


@pulumi.input_type
class ExtenderControllerExtenderProfileLanExtensionBackhaulArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: FortiExtender LAN extension backhaul name
        :param pulumi.Input[str] port: FortiExtender uplink port. Valid values: `wan`, `lte1`, `lte2`, `port1`, `port2`, `port3`, `port4`, `port5`, `sfp`.
        :param pulumi.Input[str] role: FortiExtender uplink port. Valid values: `primary`, `secondary`.
        :param pulumi.Input[int] weight: WRR weight parameter
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender LAN extension backhaul name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender uplink port. Valid values: `wan`, `lte1`, `lte2`, `port1`, `port2`, `port3`, `port4`, `port5`, `sfp`.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender uplink port. Valid values: `primary`, `secondary`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        WRR weight parameter
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class ExtenderControllerExtenderWanExtensionArgs:
    def __init__(__self__, *,
                 modem1_extension: Optional[pulumi.Input[str]] = None,
                 modem2_extension: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] modem1_extension: FortiExtender interface name.
        :param pulumi.Input[str] modem2_extension: FortiExtender interface name.
        """
        if modem1_extension is not None:
            pulumi.set(__self__, "modem1_extension", modem1_extension)
        if modem2_extension is not None:
            pulumi.set(__self__, "modem2_extension", modem2_extension)

    @property
    @pulumi.getter(name="modem1Extension")
    def modem1_extension(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender interface name.
        """
        return pulumi.get(self, "modem1_extension")

    @modem1_extension.setter
    def modem1_extension(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modem1_extension", value)

    @property
    @pulumi.getter(name="modem2Extension")
    def modem2_extension(self) -> Optional[pulumi.Input[str]]:
        """
        FortiExtender interface name.
        """
        return pulumi.get(self, "modem2_extension")

    @modem2_extension.setter
    def modem2_extension(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modem2_extension", value)


@pulumi.input_type
class FileFilterProfileRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input['FileFilterProfileRuleFileTypeArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password_protected: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action taken for matched file. Valid values: `log-only`, `block`.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] direction: Traffic direction. (HTTP, FTP, SSH, CIFS only) Valid values: `incoming`, `outgoing`, `any`.
        :param pulumi.Input[Sequence[pulumi.Input['FileFilterProfileRuleFileTypeArgs']]] file_types: Select file type. The structure of `file_type` block is documented below.
        :param pulumi.Input[str] name: File type name.
        :param pulumi.Input[str] password_protected: Match password-protected files. Valid values: `yes`, `any`.
        :param pulumi.Input[str] protocol: Protocols to apply rule to. Valid values: `http`, `ftp`, `smtp`, `imap`, `pop3`, `mapi`, `cifs`, `ssh`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password_protected is not None:
            pulumi.set(__self__, "password_protected", password_protected)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action taken for matched file. Valid values: `log-only`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic direction. (HTTP, FTP, SSH, CIFS only) Valid values: `incoming`, `outgoing`, `any`.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FileFilterProfileRuleFileTypeArgs']]]]:
        """
        Select file type. The structure of `file_type` block is documented below.
        """
        return pulumi.get(self, "file_types")

    @file_types.setter
    def file_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FileFilterProfileRuleFileTypeArgs']]]]):
        pulumi.set(self, "file_types", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        File type name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="passwordProtected")
    def password_protected(self) -> Optional[pulumi.Input[str]]:
        """
        Match password-protected files. Valid values: `yes`, `any`.
        """
        return pulumi.get(self, "password_protected")

    @password_protected.setter
    def password_protected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_protected", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocols to apply rule to. Valid values: `http`, `ftp`, `smtp`, `imap`, `pop3`, `mapi`, `cifs`, `ssh`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class FileFilterProfileRuleFileTypeArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: File type name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        File type name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAccessProxy6ApiGateway6Args:
    def __init__(__self__, *,
                 http_cookie_age: Optional[pulumi.Input[int]] = None,
                 http_cookie_domain: Optional[pulumi.Input[str]] = None,
                 http_cookie_domain_from_host: Optional[pulumi.Input[str]] = None,
                 http_cookie_generation: Optional[pulumi.Input[int]] = None,
                 http_cookie_path: Optional[pulumi.Input[str]] = None,
                 http_cookie_share: Optional[pulumi.Input[str]] = None,
                 https_cookie_secure: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ldb_method: Optional[pulumi.Input[str]] = None,
                 persistence: Optional[pulumi.Input[str]] = None,
                 realservers: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGateway6RealserverArgs']]]] = None,
                 saml_redirect: Optional[pulumi.Input[str]] = None,
                 saml_server: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGateway6SslCipherSuiteArgs']]]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 ssl_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_vpn_web_portal: Optional[pulumi.Input[str]] = None,
                 url_map: Optional[pulumi.Input[str]] = None,
                 url_map_type: Optional[pulumi.Input[str]] = None,
                 virtual_host: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] http_cookie_age: Time in minutes that client web browsers should keep a cookie. Default is 60 minutes. 0 = no time limit.
        :param pulumi.Input[str] http_cookie_domain: Domain that HTTP cookie persistence should apply to.
        :param pulumi.Input[str] http_cookie_domain_from_host: Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] http_cookie_generation: Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
        :param pulumi.Input[str] http_cookie_path: Limit HTTP cookie persistence to the specified path.
        :param pulumi.Input[str] http_cookie_share: Control sharing of cookies across API Gateway. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
        :param pulumi.Input[str] https_cookie_secure: Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] id: Real server ID.
        :param pulumi.Input[str] ldb_method: Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `first-alive`, `http-host`.
        :param pulumi.Input[str] persistence: Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGateway6RealserverArgs']]] realservers: Select the real servers that this Access Proxy will distribute traffic to. The structure of `realservers` block is documented below.
        :param pulumi.Input[str] saml_redirect: Enable/disable SAML redirection after successful authentication. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] saml_server: SAML service provider configuration for VIP authentication.
        :param pulumi.Input[str] service: Service.
        :param pulumi.Input[str] ssl_algorithm: Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGateway6SslCipherSuiteArgs']]] ssl_cipher_suites: SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `ssl_cipher_suites` block is documented below.
        :param pulumi.Input[str] ssl_dh_bits: Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
        :param pulumi.Input[str] ssl_max_version: Highest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        :param pulumi.Input[str] ssl_min_version: Lowest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        :param pulumi.Input[str] ssl_vpn_web_portal: SSL-VPN web portal.
        :param pulumi.Input[str] url_map: URL pattern to match.
        :param pulumi.Input[str] url_map_type: Type of url-map. Valid values: `sub-string`, `wildcard`, `regex`.
        :param pulumi.Input[str] virtual_host: Virtual host.
        """
        if http_cookie_age is not None:
            pulumi.set(__self__, "http_cookie_age", http_cookie_age)
        if http_cookie_domain is not None:
            pulumi.set(__self__, "http_cookie_domain", http_cookie_domain)
        if http_cookie_domain_from_host is not None:
            pulumi.set(__self__, "http_cookie_domain_from_host", http_cookie_domain_from_host)
        if http_cookie_generation is not None:
            pulumi.set(__self__, "http_cookie_generation", http_cookie_generation)
        if http_cookie_path is not None:
            pulumi.set(__self__, "http_cookie_path", http_cookie_path)
        if http_cookie_share is not None:
            pulumi.set(__self__, "http_cookie_share", http_cookie_share)
        if https_cookie_secure is not None:
            pulumi.set(__self__, "https_cookie_secure", https_cookie_secure)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ldb_method is not None:
            pulumi.set(__self__, "ldb_method", ldb_method)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if realservers is not None:
            pulumi.set(__self__, "realservers", realservers)
        if saml_redirect is not None:
            pulumi.set(__self__, "saml_redirect", saml_redirect)
        if saml_server is not None:
            pulumi.set(__self__, "saml_server", saml_server)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_cipher_suites is not None:
            pulumi.set(__self__, "ssl_cipher_suites", ssl_cipher_suites)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if ssl_max_version is not None:
            pulumi.set(__self__, "ssl_max_version", ssl_max_version)
        if ssl_min_version is not None:
            pulumi.set(__self__, "ssl_min_version", ssl_min_version)
        if ssl_vpn_web_portal is not None:
            pulumi.set(__self__, "ssl_vpn_web_portal", ssl_vpn_web_portal)
        if url_map is not None:
            pulumi.set(__self__, "url_map", url_map)
        if url_map_type is not None:
            pulumi.set(__self__, "url_map_type", url_map_type)
        if virtual_host is not None:
            pulumi.set(__self__, "virtual_host", virtual_host)

    @property
    @pulumi.getter(name="httpCookieAge")
    def http_cookie_age(self) -> Optional[pulumi.Input[int]]:
        """
        Time in minutes that client web browsers should keep a cookie. Default is 60 minutes. 0 = no time limit.
        """
        return pulumi.get(self, "http_cookie_age")

    @http_cookie_age.setter
    def http_cookie_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_age", value)

    @property
    @pulumi.getter(name="httpCookieDomain")
    def http_cookie_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain that HTTP cookie persistence should apply to.
        """
        return pulumi.get(self, "http_cookie_domain")

    @http_cookie_domain.setter
    def http_cookie_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain", value)

    @property
    @pulumi.getter(name="httpCookieDomainFromHost")
    def http_cookie_domain_from_host(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "http_cookie_domain_from_host")

    @http_cookie_domain_from_host.setter
    def http_cookie_domain_from_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain_from_host", value)

    @property
    @pulumi.getter(name="httpCookieGeneration")
    def http_cookie_generation(self) -> Optional[pulumi.Input[int]]:
        """
        Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
        """
        return pulumi.get(self, "http_cookie_generation")

    @http_cookie_generation.setter
    def http_cookie_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_generation", value)

    @property
    @pulumi.getter(name="httpCookiePath")
    def http_cookie_path(self) -> Optional[pulumi.Input[str]]:
        """
        Limit HTTP cookie persistence to the specified path.
        """
        return pulumi.get(self, "http_cookie_path")

    @http_cookie_path.setter
    def http_cookie_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_path", value)

    @property
    @pulumi.getter(name="httpCookieShare")
    def http_cookie_share(self) -> Optional[pulumi.Input[str]]:
        """
        Control sharing of cookies across API Gateway. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
        """
        return pulumi.get(self, "http_cookie_share")

    @http_cookie_share.setter
    def http_cookie_share(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_share", value)

    @property
    @pulumi.getter(name="httpsCookieSecure")
    def https_cookie_secure(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "https_cookie_secure")

    @https_cookie_secure.setter
    def https_cookie_secure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_cookie_secure", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Real server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ldbMethod")
    def ldb_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `first-alive`, `http-host`.
        """
        return pulumi.get(self, "ldb_method")

    @ldb_method.setter
    def ldb_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldb_method", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input[str]]:
        """
        Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`.
        """
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistence", value)

    @property
    @pulumi.getter
    def realservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGateway6RealserverArgs']]]]:
        """
        Select the real servers that this Access Proxy will distribute traffic to. The structure of `realservers` block is documented below.
        """
        return pulumi.get(self, "realservers")

    @realservers.setter
    def realservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGateway6RealserverArgs']]]]):
        pulumi.set(self, "realservers", value)

    @property
    @pulumi.getter(name="samlRedirect")
    def saml_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SAML redirection after successful authentication. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "saml_redirect")

    @saml_redirect.setter
    def saml_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_redirect", value)

    @property
    @pulumi.getter(name="samlServer")
    def saml_server(self) -> Optional[pulumi.Input[str]]:
        """
        SAML service provider configuration for VIP authentication.
        """
        return pulumi.get(self, "saml_server")

    @saml_server.setter
    def saml_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_server", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "ssl_algorithm")

    @ssl_algorithm.setter
    def ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_algorithm", value)

    @property
    @pulumi.getter(name="sslCipherSuites")
    def ssl_cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGateway6SslCipherSuiteArgs']]]]:
        """
        SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `ssl_cipher_suites` block is documented below.
        """
        return pulumi.get(self, "ssl_cipher_suites")

    @ssl_cipher_suites.setter
    def ssl_cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGateway6SslCipherSuiteArgs']]]]):
        pulumi.set(self, "ssl_cipher_suites", value)

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[pulumi.Input[str]]:
        """
        Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
        """
        return pulumi.get(self, "ssl_dh_bits")

    @ssl_dh_bits.setter
    def ssl_dh_bits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_dh_bits", value)

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> Optional[pulumi.Input[str]]:
        """
        Highest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "ssl_max_version")

    @ssl_max_version.setter
    def ssl_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_max_version", value)

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "ssl_min_version")

    @ssl_min_version.setter
    def ssl_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_version", value)

    @property
    @pulumi.getter(name="sslVpnWebPortal")
    def ssl_vpn_web_portal(self) -> Optional[pulumi.Input[str]]:
        """
        SSL-VPN web portal.
        """
        return pulumi.get(self, "ssl_vpn_web_portal")

    @ssl_vpn_web_portal.setter
    def ssl_vpn_web_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_vpn_web_portal", value)

    @property
    @pulumi.getter(name="urlMap")
    def url_map(self) -> Optional[pulumi.Input[str]]:
        """
        URL pattern to match.
        """
        return pulumi.get(self, "url_map")

    @url_map.setter
    def url_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_map", value)

    @property
    @pulumi.getter(name="urlMapType")
    def url_map_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of url-map. Valid values: `sub-string`, `wildcard`, `regex`.
        """
        return pulumi.get(self, "url_map_type")

    @url_map_type.setter
    def url_map_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_map_type", value)

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual host.
        """
        return pulumi.get(self, "virtual_host")

    @virtual_host.setter
    def virtual_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host", value)


@pulumi.input_type
class FirewallAccessProxy6ApiGateway6RealserverArgs:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 health_check: Optional[pulumi.Input[str]] = None,
                 health_check_proto: Optional[pulumi.Input[str]] = None,
                 holddown_interval: Optional[pulumi.Input[str]] = None,
                 http_host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 mappedport: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 ssh_client_cert: Optional[pulumi.Input[str]] = None,
                 ssh_host_key_validation: Optional[pulumi.Input[str]] = None,
                 ssh_host_keys: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGateway6RealserverSshHostKeyArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] addr_type: Type of address. Valid values: `ip`, `fqdn`.
        :param pulumi.Input[str] address: Address or address group of the real server.
        :param pulumi.Input[str] domain: Wildcard domain name of the real server.
        :param pulumi.Input[str] health_check: Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] health_check_proto: Protocol of the health check monitor to use when polling to determine server's connectivity status. Valid values: `ping`, `http`, `tcp-connect`.
        :param pulumi.Input[str] holddown_interval: Enable/disable holddown timer. Server will be considered active and reachable once the holddown period has expired (30 seconds). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] http_host: HTTP server domain name in HTTP header.
        :param pulumi.Input[int] id: Real server ID.
        :param pulumi.Input[str] ip: IPv6 address of the real server.
        :param pulumi.Input[str] mappedport: Port for communicating with the real server.
        :param pulumi.Input[int] port: Port for communicating with the real server.
        :param pulumi.Input[str] ssh_client_cert: Set access-proxy SSH client certificate profile.
        :param pulumi.Input[str] ssh_host_key_validation: Enable/disable SSH real server host key validation. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGateway6RealserverSshHostKeyArgs']]] ssh_host_keys: One or more server host key. The structure of `ssh_host_key` block is documented below.
        :param pulumi.Input[str] status: Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
        :param pulumi.Input[str] type: TCP forwarding server type. Valid values: `tcp-forwarding`, `ssh`.
        :param pulumi.Input[int] weight: Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
        """
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if health_check_proto is not None:
            pulumi.set(__self__, "health_check_proto", health_check_proto)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if http_host is not None:
            pulumi.set(__self__, "http_host", http_host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mappedport is not None:
            pulumi.set(__self__, "mappedport", mappedport)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssh_client_cert is not None:
            pulumi.set(__self__, "ssh_client_cert", ssh_client_cert)
        if ssh_host_key_validation is not None:
            pulumi.set(__self__, "ssh_host_key_validation", ssh_host_key_validation)
        if ssh_host_keys is not None:
            pulumi.set(__self__, "ssh_host_keys", ssh_host_keys)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of address. Valid values: `ip`, `fqdn`.
        """
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Address or address group of the real server.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Wildcard domain name of the real server.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="healthCheckProto")
    def health_check_proto(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol of the health check monitor to use when polling to determine server's connectivity status. Valid values: `ping`, `http`, `tcp-connect`.
        """
        return pulumi.get(self, "health_check_proto")

    @health_check_proto.setter
    def health_check_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_proto", value)

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable holddown timer. Server will be considered active and reachable once the holddown period has expired (30 seconds). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "holddown_interval")

    @holddown_interval.setter
    def holddown_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "holddown_interval", value)

    @property
    @pulumi.getter(name="httpHost")
    def http_host(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP server domain name in HTTP header.
        """
        return pulumi.get(self, "http_host")

    @http_host.setter
    def http_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Real server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the real server.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def mappedport(self) -> Optional[pulumi.Input[str]]:
        """
        Port for communicating with the real server.
        """
        return pulumi.get(self, "mappedport")

    @mappedport.setter
    def mappedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mappedport", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port for communicating with the real server.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sshClientCert")
    def ssh_client_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Set access-proxy SSH client certificate profile.
        """
        return pulumi.get(self, "ssh_client_cert")

    @ssh_client_cert.setter
    def ssh_client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_client_cert", value)

    @property
    @pulumi.getter(name="sshHostKeyValidation")
    def ssh_host_key_validation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSH real server host key validation. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssh_host_key_validation")

    @ssh_host_key_validation.setter
    def ssh_host_key_validation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_host_key_validation", value)

    @property
    @pulumi.getter(name="sshHostKeys")
    def ssh_host_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGateway6RealserverSshHostKeyArgs']]]]:
        """
        One or more server host key. The structure of `ssh_host_key` block is documented below.
        """
        return pulumi.get(self, "ssh_host_keys")

    @ssh_host_keys.setter
    def ssh_host_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGateway6RealserverSshHostKeyArgs']]]]):
        pulumi.set(self, "ssh_host_keys", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        TCP forwarding server type. Valid values: `tcp-forwarding`, `ssh`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class FirewallAccessProxy6ApiGateway6RealserverSshHostKeyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Server host key name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Server host key name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAccessProxy6ApiGateway6SslCipherSuiteArgs:
    def __init__(__self__, *,
                 cipher: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 versions: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cipher: Cipher suite name. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-ECDSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-128-GCM-SHA256`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-AES-128-CBC-SHA`, `TLS-RSA-WITH-AES-256-CBC-SHA`, `TLS-RSA-WITH-AES-128-CBC-SHA256`, `TLS-RSA-WITH-AES-128-GCM-SHA256`, `TLS-RSA-WITH-AES-256-CBC-SHA256`, `TLS-RSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-SEED-CBC-SHA`, `TLS-DHE-DSS-WITH-SEED-CBC-SHA`, `TLS-DHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-DHE-DSS-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-ARIA-256-CBC-SHA384`, `TLS-RSA-WITH-SEED-CBC-SHA`, `TLS-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-RC4-128-SHA`, `TLS-ECDHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-DSS-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-RC4-128-MD5`, `TLS-RSA-WITH-RC4-128-SHA`, `TLS-DHE-RSA-WITH-DES-CBC-SHA`, `TLS-DHE-DSS-WITH-DES-CBC-SHA`, `TLS-RSA-WITH-DES-CBC-SHA`.
        :param pulumi.Input[int] priority: SSL/TLS cipher suites priority.
        :param pulumi.Input[str] versions: SSL/TLS versions that the cipher suite can be used with. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Cipher suite name. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-ECDSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-128-GCM-SHA256`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-AES-128-CBC-SHA`, `TLS-RSA-WITH-AES-256-CBC-SHA`, `TLS-RSA-WITH-AES-128-CBC-SHA256`, `TLS-RSA-WITH-AES-128-GCM-SHA256`, `TLS-RSA-WITH-AES-256-CBC-SHA256`, `TLS-RSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-SEED-CBC-SHA`, `TLS-DHE-DSS-WITH-SEED-CBC-SHA`, `TLS-DHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-DHE-DSS-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-ARIA-256-CBC-SHA384`, `TLS-RSA-WITH-SEED-CBC-SHA`, `TLS-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-RC4-128-SHA`, `TLS-ECDHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-DSS-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-RC4-128-MD5`, `TLS-RSA-WITH-RC4-128-SHA`, `TLS-DHE-RSA-WITH-DES-CBC-SHA`, `TLS-DHE-DSS-WITH-DES-CBC-SHA`, `TLS-RSA-WITH-DES-CBC-SHA`.
        """
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        SSL/TLS cipher suites priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[str]]:
        """
        SSL/TLS versions that the cipher suite can be used with. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class FirewallAccessProxy6ApiGatewayArgs:
    def __init__(__self__, *,
                 http_cookie_age: Optional[pulumi.Input[int]] = None,
                 http_cookie_domain: Optional[pulumi.Input[str]] = None,
                 http_cookie_domain_from_host: Optional[pulumi.Input[str]] = None,
                 http_cookie_generation: Optional[pulumi.Input[int]] = None,
                 http_cookie_path: Optional[pulumi.Input[str]] = None,
                 http_cookie_share: Optional[pulumi.Input[str]] = None,
                 https_cookie_secure: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ldb_method: Optional[pulumi.Input[str]] = None,
                 persistence: Optional[pulumi.Input[str]] = None,
                 realservers: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGatewayRealserverArgs']]]] = None,
                 saml_redirect: Optional[pulumi.Input[str]] = None,
                 saml_server: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGatewaySslCipherSuiteArgs']]]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 ssl_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_vpn_web_portal: Optional[pulumi.Input[str]] = None,
                 url_map: Optional[pulumi.Input[str]] = None,
                 url_map_type: Optional[pulumi.Input[str]] = None,
                 virtual_host: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] http_cookie_age: Time in minutes that client web browsers should keep a cookie. Default is 60 minutes. 0 = no time limit.
        :param pulumi.Input[str] http_cookie_domain: Domain that HTTP cookie persistence should apply to.
        :param pulumi.Input[str] http_cookie_domain_from_host: Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] http_cookie_generation: Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
        :param pulumi.Input[str] http_cookie_path: Limit HTTP cookie persistence to the specified path.
        :param pulumi.Input[str] http_cookie_share: Control sharing of cookies across API Gateway. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
        :param pulumi.Input[str] https_cookie_secure: Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] id: Real server ID.
        :param pulumi.Input[str] ldb_method: Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `first-alive`, `http-host`.
        :param pulumi.Input[str] persistence: Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGatewayRealserverArgs']]] realservers: Select the real servers that this Access Proxy will distribute traffic to. The structure of `realservers` block is documented below.
        :param pulumi.Input[str] saml_redirect: Enable/disable SAML redirection after successful authentication. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] saml_server: SAML service provider configuration for VIP authentication.
        :param pulumi.Input[str] service: Service.
        :param pulumi.Input[str] ssl_algorithm: Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGatewaySslCipherSuiteArgs']]] ssl_cipher_suites: SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `ssl_cipher_suites` block is documented below.
        :param pulumi.Input[str] ssl_dh_bits: Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
        :param pulumi.Input[str] ssl_max_version: Highest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        :param pulumi.Input[str] ssl_min_version: Lowest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        :param pulumi.Input[str] ssl_vpn_web_portal: SSL-VPN web portal.
        :param pulumi.Input[str] url_map: URL pattern to match.
        :param pulumi.Input[str] url_map_type: Type of url-map. Valid values: `sub-string`, `wildcard`, `regex`.
        :param pulumi.Input[str] virtual_host: Virtual host.
        """
        if http_cookie_age is not None:
            pulumi.set(__self__, "http_cookie_age", http_cookie_age)
        if http_cookie_domain is not None:
            pulumi.set(__self__, "http_cookie_domain", http_cookie_domain)
        if http_cookie_domain_from_host is not None:
            pulumi.set(__self__, "http_cookie_domain_from_host", http_cookie_domain_from_host)
        if http_cookie_generation is not None:
            pulumi.set(__self__, "http_cookie_generation", http_cookie_generation)
        if http_cookie_path is not None:
            pulumi.set(__self__, "http_cookie_path", http_cookie_path)
        if http_cookie_share is not None:
            pulumi.set(__self__, "http_cookie_share", http_cookie_share)
        if https_cookie_secure is not None:
            pulumi.set(__self__, "https_cookie_secure", https_cookie_secure)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ldb_method is not None:
            pulumi.set(__self__, "ldb_method", ldb_method)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if realservers is not None:
            pulumi.set(__self__, "realservers", realservers)
        if saml_redirect is not None:
            pulumi.set(__self__, "saml_redirect", saml_redirect)
        if saml_server is not None:
            pulumi.set(__self__, "saml_server", saml_server)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_cipher_suites is not None:
            pulumi.set(__self__, "ssl_cipher_suites", ssl_cipher_suites)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if ssl_max_version is not None:
            pulumi.set(__self__, "ssl_max_version", ssl_max_version)
        if ssl_min_version is not None:
            pulumi.set(__self__, "ssl_min_version", ssl_min_version)
        if ssl_vpn_web_portal is not None:
            pulumi.set(__self__, "ssl_vpn_web_portal", ssl_vpn_web_portal)
        if url_map is not None:
            pulumi.set(__self__, "url_map", url_map)
        if url_map_type is not None:
            pulumi.set(__self__, "url_map_type", url_map_type)
        if virtual_host is not None:
            pulumi.set(__self__, "virtual_host", virtual_host)

    @property
    @pulumi.getter(name="httpCookieAge")
    def http_cookie_age(self) -> Optional[pulumi.Input[int]]:
        """
        Time in minutes that client web browsers should keep a cookie. Default is 60 minutes. 0 = no time limit.
        """
        return pulumi.get(self, "http_cookie_age")

    @http_cookie_age.setter
    def http_cookie_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_age", value)

    @property
    @pulumi.getter(name="httpCookieDomain")
    def http_cookie_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain that HTTP cookie persistence should apply to.
        """
        return pulumi.get(self, "http_cookie_domain")

    @http_cookie_domain.setter
    def http_cookie_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain", value)

    @property
    @pulumi.getter(name="httpCookieDomainFromHost")
    def http_cookie_domain_from_host(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "http_cookie_domain_from_host")

    @http_cookie_domain_from_host.setter
    def http_cookie_domain_from_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain_from_host", value)

    @property
    @pulumi.getter(name="httpCookieGeneration")
    def http_cookie_generation(self) -> Optional[pulumi.Input[int]]:
        """
        Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
        """
        return pulumi.get(self, "http_cookie_generation")

    @http_cookie_generation.setter
    def http_cookie_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_generation", value)

    @property
    @pulumi.getter(name="httpCookiePath")
    def http_cookie_path(self) -> Optional[pulumi.Input[str]]:
        """
        Limit HTTP cookie persistence to the specified path.
        """
        return pulumi.get(self, "http_cookie_path")

    @http_cookie_path.setter
    def http_cookie_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_path", value)

    @property
    @pulumi.getter(name="httpCookieShare")
    def http_cookie_share(self) -> Optional[pulumi.Input[str]]:
        """
        Control sharing of cookies across API Gateway. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
        """
        return pulumi.get(self, "http_cookie_share")

    @http_cookie_share.setter
    def http_cookie_share(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_share", value)

    @property
    @pulumi.getter(name="httpsCookieSecure")
    def https_cookie_secure(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "https_cookie_secure")

    @https_cookie_secure.setter
    def https_cookie_secure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_cookie_secure", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Real server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ldbMethod")
    def ldb_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `first-alive`, `http-host`.
        """
        return pulumi.get(self, "ldb_method")

    @ldb_method.setter
    def ldb_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldb_method", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input[str]]:
        """
        Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`.
        """
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistence", value)

    @property
    @pulumi.getter
    def realservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGatewayRealserverArgs']]]]:
        """
        Select the real servers that this Access Proxy will distribute traffic to. The structure of `realservers` block is documented below.
        """
        return pulumi.get(self, "realservers")

    @realservers.setter
    def realservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGatewayRealserverArgs']]]]):
        pulumi.set(self, "realservers", value)

    @property
    @pulumi.getter(name="samlRedirect")
    def saml_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SAML redirection after successful authentication. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "saml_redirect")

    @saml_redirect.setter
    def saml_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_redirect", value)

    @property
    @pulumi.getter(name="samlServer")
    def saml_server(self) -> Optional[pulumi.Input[str]]:
        """
        SAML service provider configuration for VIP authentication.
        """
        return pulumi.get(self, "saml_server")

    @saml_server.setter
    def saml_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_server", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "ssl_algorithm")

    @ssl_algorithm.setter
    def ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_algorithm", value)

    @property
    @pulumi.getter(name="sslCipherSuites")
    def ssl_cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGatewaySslCipherSuiteArgs']]]]:
        """
        SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `ssl_cipher_suites` block is documented below.
        """
        return pulumi.get(self, "ssl_cipher_suites")

    @ssl_cipher_suites.setter
    def ssl_cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGatewaySslCipherSuiteArgs']]]]):
        pulumi.set(self, "ssl_cipher_suites", value)

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[pulumi.Input[str]]:
        """
        Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
        """
        return pulumi.get(self, "ssl_dh_bits")

    @ssl_dh_bits.setter
    def ssl_dh_bits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_dh_bits", value)

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> Optional[pulumi.Input[str]]:
        """
        Highest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "ssl_max_version")

    @ssl_max_version.setter
    def ssl_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_max_version", value)

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "ssl_min_version")

    @ssl_min_version.setter
    def ssl_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_version", value)

    @property
    @pulumi.getter(name="sslVpnWebPortal")
    def ssl_vpn_web_portal(self) -> Optional[pulumi.Input[str]]:
        """
        SSL-VPN web portal.
        """
        return pulumi.get(self, "ssl_vpn_web_portal")

    @ssl_vpn_web_portal.setter
    def ssl_vpn_web_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_vpn_web_portal", value)

    @property
    @pulumi.getter(name="urlMap")
    def url_map(self) -> Optional[pulumi.Input[str]]:
        """
        URL pattern to match.
        """
        return pulumi.get(self, "url_map")

    @url_map.setter
    def url_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_map", value)

    @property
    @pulumi.getter(name="urlMapType")
    def url_map_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of url-map. Valid values: `sub-string`, `wildcard`, `regex`.
        """
        return pulumi.get(self, "url_map_type")

    @url_map_type.setter
    def url_map_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_map_type", value)

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual host.
        """
        return pulumi.get(self, "virtual_host")

    @virtual_host.setter
    def virtual_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host", value)


@pulumi.input_type
class FirewallAccessProxy6ApiGatewayRealserverArgs:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 health_check: Optional[pulumi.Input[str]] = None,
                 health_check_proto: Optional[pulumi.Input[str]] = None,
                 holddown_interval: Optional[pulumi.Input[str]] = None,
                 http_host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 mappedport: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 ssh_client_cert: Optional[pulumi.Input[str]] = None,
                 ssh_host_key_validation: Optional[pulumi.Input[str]] = None,
                 ssh_host_keys: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGatewayRealserverSshHostKeyArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] addr_type: Type of address. Valid values: `ip`, `fqdn`.
        :param pulumi.Input[str] address: Address or address group of the real server.
        :param pulumi.Input[str] domain: Wildcard domain name of the real server.
        :param pulumi.Input[str] health_check: Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] health_check_proto: Protocol of the health check monitor to use when polling to determine server's connectivity status. Valid values: `ping`, `http`, `tcp-connect`.
        :param pulumi.Input[str] holddown_interval: Enable/disable holddown timer. Server will be considered active and reachable once the holddown period has expired (30 seconds). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] http_host: HTTP server domain name in HTTP header.
        :param pulumi.Input[int] id: Real server ID.
        :param pulumi.Input[str] ip: IPv6 address of the real server.
        :param pulumi.Input[str] mappedport: Port for communicating with the real server.
        :param pulumi.Input[int] port: Port for communicating with the real server.
        :param pulumi.Input[str] ssh_client_cert: Set access-proxy SSH client certificate profile.
        :param pulumi.Input[str] ssh_host_key_validation: Enable/disable SSH real server host key validation. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGatewayRealserverSshHostKeyArgs']]] ssh_host_keys: One or more server host key. The structure of `ssh_host_key` block is documented below.
        :param pulumi.Input[str] status: Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
        :param pulumi.Input[str] type: TCP forwarding server type. Valid values: `tcp-forwarding`, `ssh`.
        :param pulumi.Input[int] weight: Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
        """
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if health_check_proto is not None:
            pulumi.set(__self__, "health_check_proto", health_check_proto)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if http_host is not None:
            pulumi.set(__self__, "http_host", http_host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mappedport is not None:
            pulumi.set(__self__, "mappedport", mappedport)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssh_client_cert is not None:
            pulumi.set(__self__, "ssh_client_cert", ssh_client_cert)
        if ssh_host_key_validation is not None:
            pulumi.set(__self__, "ssh_host_key_validation", ssh_host_key_validation)
        if ssh_host_keys is not None:
            pulumi.set(__self__, "ssh_host_keys", ssh_host_keys)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of address. Valid values: `ip`, `fqdn`.
        """
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Address or address group of the real server.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Wildcard domain name of the real server.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="healthCheckProto")
    def health_check_proto(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol of the health check monitor to use when polling to determine server's connectivity status. Valid values: `ping`, `http`, `tcp-connect`.
        """
        return pulumi.get(self, "health_check_proto")

    @health_check_proto.setter
    def health_check_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_proto", value)

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable holddown timer. Server will be considered active and reachable once the holddown period has expired (30 seconds). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "holddown_interval")

    @holddown_interval.setter
    def holddown_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "holddown_interval", value)

    @property
    @pulumi.getter(name="httpHost")
    def http_host(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP server domain name in HTTP header.
        """
        return pulumi.get(self, "http_host")

    @http_host.setter
    def http_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Real server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the real server.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def mappedport(self) -> Optional[pulumi.Input[str]]:
        """
        Port for communicating with the real server.
        """
        return pulumi.get(self, "mappedport")

    @mappedport.setter
    def mappedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mappedport", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port for communicating with the real server.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sshClientCert")
    def ssh_client_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Set access-proxy SSH client certificate profile.
        """
        return pulumi.get(self, "ssh_client_cert")

    @ssh_client_cert.setter
    def ssh_client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_client_cert", value)

    @property
    @pulumi.getter(name="sshHostKeyValidation")
    def ssh_host_key_validation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSH real server host key validation. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssh_host_key_validation")

    @ssh_host_key_validation.setter
    def ssh_host_key_validation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_host_key_validation", value)

    @property
    @pulumi.getter(name="sshHostKeys")
    def ssh_host_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGatewayRealserverSshHostKeyArgs']]]]:
        """
        One or more server host key. The structure of `ssh_host_key` block is documented below.
        """
        return pulumi.get(self, "ssh_host_keys")

    @ssh_host_keys.setter
    def ssh_host_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxy6ApiGatewayRealserverSshHostKeyArgs']]]]):
        pulumi.set(self, "ssh_host_keys", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        TCP forwarding server type. Valid values: `tcp-forwarding`, `ssh`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class FirewallAccessProxy6ApiGatewayRealserverSshHostKeyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Server host key name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Server host key name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAccessProxy6ApiGatewaySslCipherSuiteArgs:
    def __init__(__self__, *,
                 cipher: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 versions: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cipher: Cipher suite name. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-ECDSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-128-GCM-SHA256`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-AES-128-CBC-SHA`, `TLS-RSA-WITH-AES-256-CBC-SHA`, `TLS-RSA-WITH-AES-128-CBC-SHA256`, `TLS-RSA-WITH-AES-128-GCM-SHA256`, `TLS-RSA-WITH-AES-256-CBC-SHA256`, `TLS-RSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-SEED-CBC-SHA`, `TLS-DHE-DSS-WITH-SEED-CBC-SHA`, `TLS-DHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-DHE-DSS-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-ARIA-256-CBC-SHA384`, `TLS-RSA-WITH-SEED-CBC-SHA`, `TLS-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-RC4-128-SHA`, `TLS-ECDHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-DSS-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-RC4-128-MD5`, `TLS-RSA-WITH-RC4-128-SHA`, `TLS-DHE-RSA-WITH-DES-CBC-SHA`, `TLS-DHE-DSS-WITH-DES-CBC-SHA`, `TLS-RSA-WITH-DES-CBC-SHA`.
        :param pulumi.Input[int] priority: SSL/TLS cipher suites priority.
        :param pulumi.Input[str] versions: SSL/TLS versions that the cipher suite can be used with. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Cipher suite name. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-ECDSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-128-GCM-SHA256`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-AES-128-CBC-SHA`, `TLS-RSA-WITH-AES-256-CBC-SHA`, `TLS-RSA-WITH-AES-128-CBC-SHA256`, `TLS-RSA-WITH-AES-128-GCM-SHA256`, `TLS-RSA-WITH-AES-256-CBC-SHA256`, `TLS-RSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-SEED-CBC-SHA`, `TLS-DHE-DSS-WITH-SEED-CBC-SHA`, `TLS-DHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-DHE-DSS-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-ARIA-256-CBC-SHA384`, `TLS-RSA-WITH-SEED-CBC-SHA`, `TLS-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-RC4-128-SHA`, `TLS-ECDHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-DSS-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-RC4-128-MD5`, `TLS-RSA-WITH-RC4-128-SHA`, `TLS-DHE-RSA-WITH-DES-CBC-SHA`, `TLS-DHE-DSS-WITH-DES-CBC-SHA`, `TLS-RSA-WITH-DES-CBC-SHA`.
        """
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        SSL/TLS cipher suites priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[str]]:
        """
        SSL/TLS versions that the cipher suite can be used with. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class FirewallAccessProxyApiGateway6Args:
    def __init__(__self__, *,
                 http_cookie_age: Optional[pulumi.Input[int]] = None,
                 http_cookie_domain: Optional[pulumi.Input[str]] = None,
                 http_cookie_domain_from_host: Optional[pulumi.Input[str]] = None,
                 http_cookie_generation: Optional[pulumi.Input[int]] = None,
                 http_cookie_path: Optional[pulumi.Input[str]] = None,
                 http_cookie_share: Optional[pulumi.Input[str]] = None,
                 https_cookie_secure: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ldb_method: Optional[pulumi.Input[str]] = None,
                 persistence: Optional[pulumi.Input[str]] = None,
                 realservers: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGateway6RealserverArgs']]]] = None,
                 saml_redirect: Optional[pulumi.Input[str]] = None,
                 saml_server: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGateway6SslCipherSuiteArgs']]]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 ssl_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_vpn_web_portal: Optional[pulumi.Input[str]] = None,
                 url_map: Optional[pulumi.Input[str]] = None,
                 url_map_type: Optional[pulumi.Input[str]] = None,
                 virtual_host: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] http_cookie_age: Time in minutes that client web browsers should keep a cookie. Default is 60 minutes. 0 = no time limit.
        :param pulumi.Input[str] http_cookie_domain: Domain that HTTP cookie persistence should apply to.
        :param pulumi.Input[str] http_cookie_domain_from_host: Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] http_cookie_generation: Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
        :param pulumi.Input[str] http_cookie_path: Limit HTTP cookie persistence to the specified path.
        :param pulumi.Input[str] http_cookie_share: Control sharing of cookies across API Gateway. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
        :param pulumi.Input[str] https_cookie_secure: Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] id: Real server ID.
        :param pulumi.Input[str] ldb_method: Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `first-alive`, `http-host`.
        :param pulumi.Input[str] persistence: Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGateway6RealserverArgs']]] realservers: Select the real servers that this Access Proxy will distribute traffic to. The structure of `realservers` block is documented below.
        :param pulumi.Input[str] saml_redirect: Enable/disable SAML redirection after successful authentication. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] saml_server: SAML service provider configuration for VIP authentication.
        :param pulumi.Input[str] service: Service.
        :param pulumi.Input[str] ssl_algorithm: Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGateway6SslCipherSuiteArgs']]] ssl_cipher_suites: SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `ssl_cipher_suites` block is documented below.
        :param pulumi.Input[str] ssl_dh_bits: Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
        :param pulumi.Input[str] ssl_max_version: Highest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        :param pulumi.Input[str] ssl_min_version: Lowest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        :param pulumi.Input[str] ssl_vpn_web_portal: SSL-VPN web portal.
        :param pulumi.Input[str] url_map: URL pattern to match.
        :param pulumi.Input[str] url_map_type: Type of url-map. Valid values: `sub-string`, `wildcard`, `regex`.
        :param pulumi.Input[str] virtual_host: Virtual host.
        """
        if http_cookie_age is not None:
            pulumi.set(__self__, "http_cookie_age", http_cookie_age)
        if http_cookie_domain is not None:
            pulumi.set(__self__, "http_cookie_domain", http_cookie_domain)
        if http_cookie_domain_from_host is not None:
            pulumi.set(__self__, "http_cookie_domain_from_host", http_cookie_domain_from_host)
        if http_cookie_generation is not None:
            pulumi.set(__self__, "http_cookie_generation", http_cookie_generation)
        if http_cookie_path is not None:
            pulumi.set(__self__, "http_cookie_path", http_cookie_path)
        if http_cookie_share is not None:
            pulumi.set(__self__, "http_cookie_share", http_cookie_share)
        if https_cookie_secure is not None:
            pulumi.set(__self__, "https_cookie_secure", https_cookie_secure)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ldb_method is not None:
            pulumi.set(__self__, "ldb_method", ldb_method)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if realservers is not None:
            pulumi.set(__self__, "realservers", realservers)
        if saml_redirect is not None:
            pulumi.set(__self__, "saml_redirect", saml_redirect)
        if saml_server is not None:
            pulumi.set(__self__, "saml_server", saml_server)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_cipher_suites is not None:
            pulumi.set(__self__, "ssl_cipher_suites", ssl_cipher_suites)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if ssl_max_version is not None:
            pulumi.set(__self__, "ssl_max_version", ssl_max_version)
        if ssl_min_version is not None:
            pulumi.set(__self__, "ssl_min_version", ssl_min_version)
        if ssl_vpn_web_portal is not None:
            pulumi.set(__self__, "ssl_vpn_web_portal", ssl_vpn_web_portal)
        if url_map is not None:
            pulumi.set(__self__, "url_map", url_map)
        if url_map_type is not None:
            pulumi.set(__self__, "url_map_type", url_map_type)
        if virtual_host is not None:
            pulumi.set(__self__, "virtual_host", virtual_host)

    @property
    @pulumi.getter(name="httpCookieAge")
    def http_cookie_age(self) -> Optional[pulumi.Input[int]]:
        """
        Time in minutes that client web browsers should keep a cookie. Default is 60 minutes. 0 = no time limit.
        """
        return pulumi.get(self, "http_cookie_age")

    @http_cookie_age.setter
    def http_cookie_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_age", value)

    @property
    @pulumi.getter(name="httpCookieDomain")
    def http_cookie_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain that HTTP cookie persistence should apply to.
        """
        return pulumi.get(self, "http_cookie_domain")

    @http_cookie_domain.setter
    def http_cookie_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain", value)

    @property
    @pulumi.getter(name="httpCookieDomainFromHost")
    def http_cookie_domain_from_host(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "http_cookie_domain_from_host")

    @http_cookie_domain_from_host.setter
    def http_cookie_domain_from_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain_from_host", value)

    @property
    @pulumi.getter(name="httpCookieGeneration")
    def http_cookie_generation(self) -> Optional[pulumi.Input[int]]:
        """
        Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
        """
        return pulumi.get(self, "http_cookie_generation")

    @http_cookie_generation.setter
    def http_cookie_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_generation", value)

    @property
    @pulumi.getter(name="httpCookiePath")
    def http_cookie_path(self) -> Optional[pulumi.Input[str]]:
        """
        Limit HTTP cookie persistence to the specified path.
        """
        return pulumi.get(self, "http_cookie_path")

    @http_cookie_path.setter
    def http_cookie_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_path", value)

    @property
    @pulumi.getter(name="httpCookieShare")
    def http_cookie_share(self) -> Optional[pulumi.Input[str]]:
        """
        Control sharing of cookies across API Gateway. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
        """
        return pulumi.get(self, "http_cookie_share")

    @http_cookie_share.setter
    def http_cookie_share(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_share", value)

    @property
    @pulumi.getter(name="httpsCookieSecure")
    def https_cookie_secure(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "https_cookie_secure")

    @https_cookie_secure.setter
    def https_cookie_secure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_cookie_secure", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Real server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ldbMethod")
    def ldb_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `first-alive`, `http-host`.
        """
        return pulumi.get(self, "ldb_method")

    @ldb_method.setter
    def ldb_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldb_method", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input[str]]:
        """
        Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`.
        """
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistence", value)

    @property
    @pulumi.getter
    def realservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGateway6RealserverArgs']]]]:
        """
        Select the real servers that this Access Proxy will distribute traffic to. The structure of `realservers` block is documented below.
        """
        return pulumi.get(self, "realservers")

    @realservers.setter
    def realservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGateway6RealserverArgs']]]]):
        pulumi.set(self, "realservers", value)

    @property
    @pulumi.getter(name="samlRedirect")
    def saml_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SAML redirection after successful authentication. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "saml_redirect")

    @saml_redirect.setter
    def saml_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_redirect", value)

    @property
    @pulumi.getter(name="samlServer")
    def saml_server(self) -> Optional[pulumi.Input[str]]:
        """
        SAML service provider configuration for VIP authentication.
        """
        return pulumi.get(self, "saml_server")

    @saml_server.setter
    def saml_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_server", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "ssl_algorithm")

    @ssl_algorithm.setter
    def ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_algorithm", value)

    @property
    @pulumi.getter(name="sslCipherSuites")
    def ssl_cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGateway6SslCipherSuiteArgs']]]]:
        """
        SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `ssl_cipher_suites` block is documented below.
        """
        return pulumi.get(self, "ssl_cipher_suites")

    @ssl_cipher_suites.setter
    def ssl_cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGateway6SslCipherSuiteArgs']]]]):
        pulumi.set(self, "ssl_cipher_suites", value)

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[pulumi.Input[str]]:
        """
        Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
        """
        return pulumi.get(self, "ssl_dh_bits")

    @ssl_dh_bits.setter
    def ssl_dh_bits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_dh_bits", value)

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> Optional[pulumi.Input[str]]:
        """
        Highest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "ssl_max_version")

    @ssl_max_version.setter
    def ssl_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_max_version", value)

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "ssl_min_version")

    @ssl_min_version.setter
    def ssl_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_version", value)

    @property
    @pulumi.getter(name="sslVpnWebPortal")
    def ssl_vpn_web_portal(self) -> Optional[pulumi.Input[str]]:
        """
        SSL-VPN web portal.
        """
        return pulumi.get(self, "ssl_vpn_web_portal")

    @ssl_vpn_web_portal.setter
    def ssl_vpn_web_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_vpn_web_portal", value)

    @property
    @pulumi.getter(name="urlMap")
    def url_map(self) -> Optional[pulumi.Input[str]]:
        """
        URL pattern to match.
        """
        return pulumi.get(self, "url_map")

    @url_map.setter
    def url_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_map", value)

    @property
    @pulumi.getter(name="urlMapType")
    def url_map_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of url-map. Valid values: `sub-string`, `wildcard`, `regex`.
        """
        return pulumi.get(self, "url_map_type")

    @url_map_type.setter
    def url_map_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_map_type", value)

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual host.
        """
        return pulumi.get(self, "virtual_host")

    @virtual_host.setter
    def virtual_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host", value)


@pulumi.input_type
class FirewallAccessProxyApiGateway6RealserverArgs:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 health_check: Optional[pulumi.Input[str]] = None,
                 health_check_proto: Optional[pulumi.Input[str]] = None,
                 holddown_interval: Optional[pulumi.Input[str]] = None,
                 http_host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 mappedport: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 ssh_client_cert: Optional[pulumi.Input[str]] = None,
                 ssh_host_key_validation: Optional[pulumi.Input[str]] = None,
                 ssh_host_keys: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGateway6RealserverSshHostKeyArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] addr_type: Type of address. Valid values: `ip`, `fqdn`.
        :param pulumi.Input[str] address: Address or address group of the real server.
        :param pulumi.Input[str] domain: Wildcard domain name of the real server.
        :param pulumi.Input[str] health_check: Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] health_check_proto: Protocol of the health check monitor to use when polling to determine server's connectivity status. Valid values: `ping`, `http`, `tcp-connect`.
        :param pulumi.Input[str] holddown_interval: Enable/disable holddown timer. Server will be considered active and reachable once the holddown period has expired (30 seconds). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] http_host: HTTP server domain name in HTTP header.
        :param pulumi.Input[int] id: Real server ID.
        :param pulumi.Input[str] ip: IPv6 address of the real server.
        :param pulumi.Input[str] mappedport: Port for communicating with the real server.
        :param pulumi.Input[int] port: Port for communicating with the real server.
        :param pulumi.Input[str] ssh_client_cert: Set access-proxy SSH client certificate profile.
        :param pulumi.Input[str] ssh_host_key_validation: Enable/disable SSH real server host key validation. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGateway6RealserverSshHostKeyArgs']]] ssh_host_keys: One or more server host key. The structure of `ssh_host_key` block is documented below.
        :param pulumi.Input[str] status: Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
        :param pulumi.Input[str] type: TCP forwarding server type. Valid values: `tcp-forwarding`, `ssh`.
        :param pulumi.Input[int] weight: Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
        """
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if health_check_proto is not None:
            pulumi.set(__self__, "health_check_proto", health_check_proto)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if http_host is not None:
            pulumi.set(__self__, "http_host", http_host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mappedport is not None:
            pulumi.set(__self__, "mappedport", mappedport)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssh_client_cert is not None:
            pulumi.set(__self__, "ssh_client_cert", ssh_client_cert)
        if ssh_host_key_validation is not None:
            pulumi.set(__self__, "ssh_host_key_validation", ssh_host_key_validation)
        if ssh_host_keys is not None:
            pulumi.set(__self__, "ssh_host_keys", ssh_host_keys)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of address. Valid values: `ip`, `fqdn`.
        """
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Address or address group of the real server.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Wildcard domain name of the real server.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="healthCheckProto")
    def health_check_proto(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol of the health check monitor to use when polling to determine server's connectivity status. Valid values: `ping`, `http`, `tcp-connect`.
        """
        return pulumi.get(self, "health_check_proto")

    @health_check_proto.setter
    def health_check_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_proto", value)

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable holddown timer. Server will be considered active and reachable once the holddown period has expired (30 seconds). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "holddown_interval")

    @holddown_interval.setter
    def holddown_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "holddown_interval", value)

    @property
    @pulumi.getter(name="httpHost")
    def http_host(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP server domain name in HTTP header.
        """
        return pulumi.get(self, "http_host")

    @http_host.setter
    def http_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Real server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the real server.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def mappedport(self) -> Optional[pulumi.Input[str]]:
        """
        Port for communicating with the real server.
        """
        return pulumi.get(self, "mappedport")

    @mappedport.setter
    def mappedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mappedport", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port for communicating with the real server.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sshClientCert")
    def ssh_client_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Set access-proxy SSH client certificate profile.
        """
        return pulumi.get(self, "ssh_client_cert")

    @ssh_client_cert.setter
    def ssh_client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_client_cert", value)

    @property
    @pulumi.getter(name="sshHostKeyValidation")
    def ssh_host_key_validation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSH real server host key validation. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssh_host_key_validation")

    @ssh_host_key_validation.setter
    def ssh_host_key_validation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_host_key_validation", value)

    @property
    @pulumi.getter(name="sshHostKeys")
    def ssh_host_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGateway6RealserverSshHostKeyArgs']]]]:
        """
        One or more server host key. The structure of `ssh_host_key` block is documented below.
        """
        return pulumi.get(self, "ssh_host_keys")

    @ssh_host_keys.setter
    def ssh_host_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGateway6RealserverSshHostKeyArgs']]]]):
        pulumi.set(self, "ssh_host_keys", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        TCP forwarding server type. Valid values: `tcp-forwarding`, `ssh`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class FirewallAccessProxyApiGateway6RealserverSshHostKeyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Server host key name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Server host key name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAccessProxyApiGateway6SslCipherSuiteArgs:
    def __init__(__self__, *,
                 cipher: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 versions: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cipher: Cipher suite name. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-ECDSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-128-GCM-SHA256`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-AES-128-CBC-SHA`, `TLS-RSA-WITH-AES-256-CBC-SHA`, `TLS-RSA-WITH-AES-128-CBC-SHA256`, `TLS-RSA-WITH-AES-128-GCM-SHA256`, `TLS-RSA-WITH-AES-256-CBC-SHA256`, `TLS-RSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-SEED-CBC-SHA`, `TLS-DHE-DSS-WITH-SEED-CBC-SHA`, `TLS-DHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-DHE-DSS-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-ARIA-256-CBC-SHA384`, `TLS-RSA-WITH-SEED-CBC-SHA`, `TLS-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-RC4-128-SHA`, `TLS-ECDHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-DSS-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-RC4-128-MD5`, `TLS-RSA-WITH-RC4-128-SHA`, `TLS-DHE-RSA-WITH-DES-CBC-SHA`, `TLS-DHE-DSS-WITH-DES-CBC-SHA`, `TLS-RSA-WITH-DES-CBC-SHA`.
        :param pulumi.Input[int] priority: SSL/TLS cipher suites priority.
        :param pulumi.Input[str] versions: SSL/TLS versions that the cipher suite can be used with. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Cipher suite name. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-ECDSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-128-GCM-SHA256`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-AES-128-CBC-SHA`, `TLS-RSA-WITH-AES-256-CBC-SHA`, `TLS-RSA-WITH-AES-128-CBC-SHA256`, `TLS-RSA-WITH-AES-128-GCM-SHA256`, `TLS-RSA-WITH-AES-256-CBC-SHA256`, `TLS-RSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-SEED-CBC-SHA`, `TLS-DHE-DSS-WITH-SEED-CBC-SHA`, `TLS-DHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-DHE-DSS-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-ARIA-256-CBC-SHA384`, `TLS-RSA-WITH-SEED-CBC-SHA`, `TLS-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-RC4-128-SHA`, `TLS-ECDHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-DSS-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-RC4-128-MD5`, `TLS-RSA-WITH-RC4-128-SHA`, `TLS-DHE-RSA-WITH-DES-CBC-SHA`, `TLS-DHE-DSS-WITH-DES-CBC-SHA`, `TLS-RSA-WITH-DES-CBC-SHA`.
        """
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        SSL/TLS cipher suites priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[str]]:
        """
        SSL/TLS versions that the cipher suite can be used with. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class FirewallAccessProxyApiGatewayArgs:
    def __init__(__self__, *,
                 http_cookie_age: Optional[pulumi.Input[int]] = None,
                 http_cookie_domain: Optional[pulumi.Input[str]] = None,
                 http_cookie_domain_from_host: Optional[pulumi.Input[str]] = None,
                 http_cookie_generation: Optional[pulumi.Input[int]] = None,
                 http_cookie_path: Optional[pulumi.Input[str]] = None,
                 http_cookie_share: Optional[pulumi.Input[str]] = None,
                 https_cookie_secure: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ldb_method: Optional[pulumi.Input[str]] = None,
                 persistence: Optional[pulumi.Input[str]] = None,
                 realservers: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGatewayRealserverArgs']]]] = None,
                 saml_redirect: Optional[pulumi.Input[str]] = None,
                 saml_server: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_cipher_suites: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGatewaySslCipherSuiteArgs']]]] = None,
                 ssl_dh_bits: Optional[pulumi.Input[str]] = None,
                 ssl_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_vpn_web_portal: Optional[pulumi.Input[str]] = None,
                 url_map: Optional[pulumi.Input[str]] = None,
                 url_map_type: Optional[pulumi.Input[str]] = None,
                 virtual_host: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] http_cookie_age: Time in minutes that client web browsers should keep a cookie. Default is 60 minutes. 0 = no time limit.
        :param pulumi.Input[str] http_cookie_domain: Domain that HTTP cookie persistence should apply to.
        :param pulumi.Input[str] http_cookie_domain_from_host: Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] http_cookie_generation: Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
        :param pulumi.Input[str] http_cookie_path: Limit HTTP cookie persistence to the specified path.
        :param pulumi.Input[str] http_cookie_share: Control sharing of cookies across API Gateway. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
        :param pulumi.Input[str] https_cookie_secure: Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] id: Real server ID.
        :param pulumi.Input[str] ldb_method: Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `first-alive`, `http-host`.
        :param pulumi.Input[str] persistence: Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGatewayRealserverArgs']]] realservers: Select the real servers that this Access Proxy will distribute traffic to. The structure of `realservers` block is documented below.
        :param pulumi.Input[str] saml_redirect: Enable/disable SAML redirection after successful authentication. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] saml_server: SAML service provider configuration for VIP authentication.
        :param pulumi.Input[str] service: Service.
        :param pulumi.Input[str] ssl_algorithm: Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGatewaySslCipherSuiteArgs']]] ssl_cipher_suites: SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `ssl_cipher_suites` block is documented below.
        :param pulumi.Input[str] ssl_dh_bits: Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
        :param pulumi.Input[str] ssl_max_version: Highest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        :param pulumi.Input[str] ssl_min_version: Lowest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        :param pulumi.Input[str] ssl_vpn_web_portal: SSL-VPN web portal.
        :param pulumi.Input[str] url_map: URL pattern to match.
        :param pulumi.Input[str] url_map_type: Type of url-map. Valid values: `sub-string`, `wildcard`, `regex`.
        :param pulumi.Input[str] virtual_host: Virtual host.
        """
        if http_cookie_age is not None:
            pulumi.set(__self__, "http_cookie_age", http_cookie_age)
        if http_cookie_domain is not None:
            pulumi.set(__self__, "http_cookie_domain", http_cookie_domain)
        if http_cookie_domain_from_host is not None:
            pulumi.set(__self__, "http_cookie_domain_from_host", http_cookie_domain_from_host)
        if http_cookie_generation is not None:
            pulumi.set(__self__, "http_cookie_generation", http_cookie_generation)
        if http_cookie_path is not None:
            pulumi.set(__self__, "http_cookie_path", http_cookie_path)
        if http_cookie_share is not None:
            pulumi.set(__self__, "http_cookie_share", http_cookie_share)
        if https_cookie_secure is not None:
            pulumi.set(__self__, "https_cookie_secure", https_cookie_secure)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ldb_method is not None:
            pulumi.set(__self__, "ldb_method", ldb_method)
        if persistence is not None:
            pulumi.set(__self__, "persistence", persistence)
        if realservers is not None:
            pulumi.set(__self__, "realservers", realservers)
        if saml_redirect is not None:
            pulumi.set(__self__, "saml_redirect", saml_redirect)
        if saml_server is not None:
            pulumi.set(__self__, "saml_server", saml_server)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_cipher_suites is not None:
            pulumi.set(__self__, "ssl_cipher_suites", ssl_cipher_suites)
        if ssl_dh_bits is not None:
            pulumi.set(__self__, "ssl_dh_bits", ssl_dh_bits)
        if ssl_max_version is not None:
            pulumi.set(__self__, "ssl_max_version", ssl_max_version)
        if ssl_min_version is not None:
            pulumi.set(__self__, "ssl_min_version", ssl_min_version)
        if ssl_vpn_web_portal is not None:
            pulumi.set(__self__, "ssl_vpn_web_portal", ssl_vpn_web_portal)
        if url_map is not None:
            pulumi.set(__self__, "url_map", url_map)
        if url_map_type is not None:
            pulumi.set(__self__, "url_map_type", url_map_type)
        if virtual_host is not None:
            pulumi.set(__self__, "virtual_host", virtual_host)

    @property
    @pulumi.getter(name="httpCookieAge")
    def http_cookie_age(self) -> Optional[pulumi.Input[int]]:
        """
        Time in minutes that client web browsers should keep a cookie. Default is 60 minutes. 0 = no time limit.
        """
        return pulumi.get(self, "http_cookie_age")

    @http_cookie_age.setter
    def http_cookie_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_age", value)

    @property
    @pulumi.getter(name="httpCookieDomain")
    def http_cookie_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain that HTTP cookie persistence should apply to.
        """
        return pulumi.get(self, "http_cookie_domain")

    @http_cookie_domain.setter
    def http_cookie_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain", value)

    @property
    @pulumi.getter(name="httpCookieDomainFromHost")
    def http_cookie_domain_from_host(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of HTTP cookie domain from host field in HTTP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "http_cookie_domain_from_host")

    @http_cookie_domain_from_host.setter
    def http_cookie_domain_from_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_domain_from_host", value)

    @property
    @pulumi.getter(name="httpCookieGeneration")
    def http_cookie_generation(self) -> Optional[pulumi.Input[int]]:
        """
        Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
        """
        return pulumi.get(self, "http_cookie_generation")

    @http_cookie_generation.setter
    def http_cookie_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_cookie_generation", value)

    @property
    @pulumi.getter(name="httpCookiePath")
    def http_cookie_path(self) -> Optional[pulumi.Input[str]]:
        """
        Limit HTTP cookie persistence to the specified path.
        """
        return pulumi.get(self, "http_cookie_path")

    @http_cookie_path.setter
    def http_cookie_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_path", value)

    @property
    @pulumi.getter(name="httpCookieShare")
    def http_cookie_share(self) -> Optional[pulumi.Input[str]]:
        """
        Control sharing of cookies across API Gateway. same-ip means a cookie from one virtual server can be used by another. Disable stops cookie sharing. Valid values: `disable`, `same-ip`.
        """
        return pulumi.get(self, "http_cookie_share")

    @http_cookie_share.setter
    def http_cookie_share(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_cookie_share", value)

    @property
    @pulumi.getter(name="httpsCookieSecure")
    def https_cookie_secure(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable verification that inserted HTTPS cookies are secure. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "https_cookie_secure")

    @https_cookie_secure.setter
    def https_cookie_secure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_cookie_secure", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Real server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ldbMethod")
    def ldb_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method used to distribute sessions to real servers. Valid values: `static`, `round-robin`, `weighted`, `first-alive`, `http-host`.
        """
        return pulumi.get(self, "ldb_method")

    @ldb_method.setter
    def ldb_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldb_method", value)

    @property
    @pulumi.getter
    def persistence(self) -> Optional[pulumi.Input[str]]:
        """
        Configure how to make sure that clients connect to the same server every time they make a request that is part of the same session. Valid values: `none`, `http-cookie`.
        """
        return pulumi.get(self, "persistence")

    @persistence.setter
    def persistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persistence", value)

    @property
    @pulumi.getter
    def realservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGatewayRealserverArgs']]]]:
        """
        Select the real servers that this Access Proxy will distribute traffic to. The structure of `realservers` block is documented below.
        """
        return pulumi.get(self, "realservers")

    @realservers.setter
    def realservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGatewayRealserverArgs']]]]):
        pulumi.set(self, "realservers", value)

    @property
    @pulumi.getter(name="samlRedirect")
    def saml_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SAML redirection after successful authentication. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "saml_redirect")

    @saml_redirect.setter
    def saml_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_redirect", value)

    @property
    @pulumi.getter(name="samlServer")
    def saml_server(self) -> Optional[pulumi.Input[str]]:
        """
        SAML service provider configuration for VIP authentication.
        """
        return pulumi.get(self, "saml_server")

    @saml_server.setter
    def saml_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_server", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Permitted encryption algorithms for the server side of SSL full mode sessions according to encryption strength. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "ssl_algorithm")

    @ssl_algorithm.setter
    def ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_algorithm", value)

    @property
    @pulumi.getter(name="sslCipherSuites")
    def ssl_cipher_suites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGatewaySslCipherSuiteArgs']]]]:
        """
        SSL/TLS cipher suites to offer to a server, ordered by priority. The structure of `ssl_cipher_suites` block is documented below.
        """
        return pulumi.get(self, "ssl_cipher_suites")

    @ssl_cipher_suites.setter
    def ssl_cipher_suites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGatewaySslCipherSuiteArgs']]]]):
        pulumi.set(self, "ssl_cipher_suites", value)

    @property
    @pulumi.getter(name="sslDhBits")
    def ssl_dh_bits(self) -> Optional[pulumi.Input[str]]:
        """
        Number of bits to use in the Diffie-Hellman exchange for RSA encryption of SSL sessions. Valid values: `768`, `1024`, `1536`, `2048`, `3072`, `4096`.
        """
        return pulumi.get(self, "ssl_dh_bits")

    @ssl_dh_bits.setter
    def ssl_dh_bits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_dh_bits", value)

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> Optional[pulumi.Input[str]]:
        """
        Highest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "ssl_max_version")

    @ssl_max_version.setter
    def ssl_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_max_version", value)

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest SSL/TLS version acceptable from a server. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "ssl_min_version")

    @ssl_min_version.setter
    def ssl_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_version", value)

    @property
    @pulumi.getter(name="sslVpnWebPortal")
    def ssl_vpn_web_portal(self) -> Optional[pulumi.Input[str]]:
        """
        SSL-VPN web portal.
        """
        return pulumi.get(self, "ssl_vpn_web_portal")

    @ssl_vpn_web_portal.setter
    def ssl_vpn_web_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_vpn_web_portal", value)

    @property
    @pulumi.getter(name="urlMap")
    def url_map(self) -> Optional[pulumi.Input[str]]:
        """
        URL pattern to match.
        """
        return pulumi.get(self, "url_map")

    @url_map.setter
    def url_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_map", value)

    @property
    @pulumi.getter(name="urlMapType")
    def url_map_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of url-map. Valid values: `sub-string`, `wildcard`, `regex`.
        """
        return pulumi.get(self, "url_map_type")

    @url_map_type.setter
    def url_map_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_map_type", value)

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual host.
        """
        return pulumi.get(self, "virtual_host")

    @virtual_host.setter
    def virtual_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host", value)


@pulumi.input_type
class FirewallAccessProxyApiGatewayRealserverArgs:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 health_check: Optional[pulumi.Input[str]] = None,
                 health_check_proto: Optional[pulumi.Input[str]] = None,
                 holddown_interval: Optional[pulumi.Input[str]] = None,
                 http_host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 mappedport: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 ssh_client_cert: Optional[pulumi.Input[str]] = None,
                 ssh_host_key_validation: Optional[pulumi.Input[str]] = None,
                 ssh_host_keys: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGatewayRealserverSshHostKeyArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] addr_type: Type of address. Valid values: `ip`, `fqdn`.
        :param pulumi.Input[str] address: Address or address group of the real server.
        :param pulumi.Input[str] domain: Wildcard domain name of the real server.
        :param pulumi.Input[str] health_check: Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] health_check_proto: Protocol of the health check monitor to use when polling to determine server's connectivity status. Valid values: `ping`, `http`, `tcp-connect`.
        :param pulumi.Input[str] holddown_interval: Enable/disable holddown timer. Server will be considered active and reachable once the holddown period has expired (30 seconds). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] http_host: HTTP server domain name in HTTP header.
        :param pulumi.Input[int] id: Real server ID.
        :param pulumi.Input[str] ip: IPv6 address of the real server.
        :param pulumi.Input[str] mappedport: Port for communicating with the real server.
        :param pulumi.Input[int] port: Port for communicating with the real server.
        :param pulumi.Input[str] ssh_client_cert: Set access-proxy SSH client certificate profile.
        :param pulumi.Input[str] ssh_host_key_validation: Enable/disable SSH real server host key validation. Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGatewayRealserverSshHostKeyArgs']]] ssh_host_keys: One or more server host key. The structure of `ssh_host_key` block is documented below.
        :param pulumi.Input[str] status: Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
        :param pulumi.Input[str] type: TCP forwarding server type. Valid values: `tcp-forwarding`, `ssh`.
        :param pulumi.Input[int] weight: Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
        """
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if health_check_proto is not None:
            pulumi.set(__self__, "health_check_proto", health_check_proto)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if http_host is not None:
            pulumi.set(__self__, "http_host", http_host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mappedport is not None:
            pulumi.set(__self__, "mappedport", mappedport)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if ssh_client_cert is not None:
            pulumi.set(__self__, "ssh_client_cert", ssh_client_cert)
        if ssh_host_key_validation is not None:
            pulumi.set(__self__, "ssh_host_key_validation", ssh_host_key_validation)
        if ssh_host_keys is not None:
            pulumi.set(__self__, "ssh_host_keys", ssh_host_keys)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of address. Valid values: `ip`, `fqdn`.
        """
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Address or address group of the real server.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Wildcard domain name of the real server.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="healthCheckProto")
    def health_check_proto(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol of the health check monitor to use when polling to determine server's connectivity status. Valid values: `ping`, `http`, `tcp-connect`.
        """
        return pulumi.get(self, "health_check_proto")

    @health_check_proto.setter
    def health_check_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_proto", value)

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable holddown timer. Server will be considered active and reachable once the holddown period has expired (30 seconds). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "holddown_interval")

    @holddown_interval.setter
    def holddown_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "holddown_interval", value)

    @property
    @pulumi.getter(name="httpHost")
    def http_host(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP server domain name in HTTP header.
        """
        return pulumi.get(self, "http_host")

    @http_host.setter
    def http_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Real server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the real server.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def mappedport(self) -> Optional[pulumi.Input[str]]:
        """
        Port for communicating with the real server.
        """
        return pulumi.get(self, "mappedport")

    @mappedport.setter
    def mappedport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mappedport", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port for communicating with the real server.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sshClientCert")
    def ssh_client_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Set access-proxy SSH client certificate profile.
        """
        return pulumi.get(self, "ssh_client_cert")

    @ssh_client_cert.setter
    def ssh_client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_client_cert", value)

    @property
    @pulumi.getter(name="sshHostKeyValidation")
    def ssh_host_key_validation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSH real server host key validation. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssh_host_key_validation")

    @ssh_host_key_validation.setter
    def ssh_host_key_validation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_host_key_validation", value)

    @property
    @pulumi.getter(name="sshHostKeys")
    def ssh_host_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGatewayRealserverSshHostKeyArgs']]]]:
        """
        One or more server host key. The structure of `ssh_host_key` block is documented below.
        """
        return pulumi.get(self, "ssh_host_keys")

    @ssh_host_keys.setter
    def ssh_host_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAccessProxyApiGatewayRealserverSshHostKeyArgs']]]]):
        pulumi.set(self, "ssh_host_keys", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        TCP forwarding server type. Valid values: `tcp-forwarding`, `ssh`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class FirewallAccessProxyApiGatewayRealserverSshHostKeyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Server host key name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Server host key name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAccessProxyApiGatewaySslCipherSuiteArgs:
    def __init__(__self__, *,
                 cipher: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 versions: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cipher: Cipher suite name. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-ECDSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-128-GCM-SHA256`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-AES-128-CBC-SHA`, `TLS-RSA-WITH-AES-256-CBC-SHA`, `TLS-RSA-WITH-AES-128-CBC-SHA256`, `TLS-RSA-WITH-AES-128-GCM-SHA256`, `TLS-RSA-WITH-AES-256-CBC-SHA256`, `TLS-RSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-SEED-CBC-SHA`, `TLS-DHE-DSS-WITH-SEED-CBC-SHA`, `TLS-DHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-DHE-DSS-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-ARIA-256-CBC-SHA384`, `TLS-RSA-WITH-SEED-CBC-SHA`, `TLS-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-RC4-128-SHA`, `TLS-ECDHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-DSS-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-RC4-128-MD5`, `TLS-RSA-WITH-RC4-128-SHA`, `TLS-DHE-RSA-WITH-DES-CBC-SHA`, `TLS-DHE-DSS-WITH-DES-CBC-SHA`, `TLS-RSA-WITH-DES-CBC-SHA`.
        :param pulumi.Input[int] priority: SSL/TLS cipher suites priority.
        :param pulumi.Input[str] versions: SSL/TLS versions that the cipher suite can be used with. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Cipher suite name. Valid values: `TLS-AES-128-GCM-SHA256`, `TLS-AES-256-GCM-SHA384`, `TLS-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-ECDHE-ECDSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-CHACHA20-POLY1305-SHA256`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-DHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-DHE-RSA-WITH-AES-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA`, `TLS-DHE-DSS-WITH-AES-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-128-GCM-SHA256`, `TLS-DHE-DSS-WITH-AES-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-RSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA`, `TLS-ECDHE-ECDSA-WITH-AES-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-AES-128-CBC-SHA`, `TLS-RSA-WITH-AES-256-CBC-SHA`, `TLS-RSA-WITH-AES-128-CBC-SHA256`, `TLS-RSA-WITH-AES-128-GCM-SHA256`, `TLS-RSA-WITH-AES-256-CBC-SHA256`, `TLS-RSA-WITH-AES-256-GCM-SHA384`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA`, `TLS-DHE-RSA-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-DSS-WITH-CAMELLIA-256-CBC-SHA256`, `TLS-DHE-RSA-WITH-SEED-CBC-SHA`, `TLS-DHE-DSS-WITH-SEED-CBC-SHA`, `TLS-DHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-DHE-DSS-WITH-ARIA-128-CBC-SHA256`, `TLS-DHE-DSS-WITH-ARIA-256-CBC-SHA384`, `TLS-RSA-WITH-SEED-CBC-SHA`, `TLS-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-RSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-ECDSA-WITH-ARIA-128-CBC-SHA256`, `TLS-ECDHE-ECDSA-WITH-ARIA-256-CBC-SHA384`, `TLS-ECDHE-RSA-WITH-RC4-128-SHA`, `TLS-ECDHE-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-DHE-DSS-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-3DES-EDE-CBC-SHA`, `TLS-RSA-WITH-RC4-128-MD5`, `TLS-RSA-WITH-RC4-128-SHA`, `TLS-DHE-RSA-WITH-DES-CBC-SHA`, `TLS-DHE-DSS-WITH-DES-CBC-SHA`, `TLS-RSA-WITH-DES-CBC-SHA`.
        """
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        SSL/TLS cipher suites priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[str]]:
        """
        SSL/TLS versions that the cipher suite can be used with. Valid values: `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class FirewallAccessProxySshClientCertCertExtensionArgs:
    def __init__(__self__, *,
                 critical: Optional[pulumi.Input[str]] = None,
                 data: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] critical: Critical option. Valid values: `no`, `yes`.
        :param pulumi.Input[str] data: Data of certificate extension.
        :param pulumi.Input[str] name: Name of certificate extension.
        :param pulumi.Input[str] type: Type of certificate extension. Valid values: `fixed`, `user`.
        """
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if data is not None:
            pulumi.set(__self__, "data", data)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def critical(self) -> Optional[pulumi.Input[str]]:
        """
        Critical option. Valid values: `no`, `yes`.
        """
        return pulumi.get(self, "critical")

    @critical.setter
    def critical(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "critical", value)

    @property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input[str]]:
        """
        Data of certificate extension.
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of certificate extension.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of certificate extension. Valid values: `fixed`, `user`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class FirewallAddress6ListArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ip: IP.
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class FirewallAddress6MacaddrArgs:
    def __init__(__self__, *,
                 macaddr: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] macaddr: MAC address ranges <start>[-<end>] separated by space.
        """
        if macaddr is not None:
            pulumi.set(__self__, "macaddr", macaddr)

    @property
    @pulumi.getter
    def macaddr(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address ranges <start>[-<end>] separated by space.
        """
        return pulumi.get(self, "macaddr")

    @macaddr.setter
    def macaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "macaddr", value)


@pulumi.input_type
class FirewallAddress6SubnetSegmentArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] type: Subnet segment type. Valid values: `any`, `specific`.
        :param pulumi.Input[str] value: Subnet segment value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet segment type. Valid values: `any`, `specific`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet segment value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FirewallAddress6TaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddress6TaggingTagArgs']]]] = None):
        """
        :param pulumi.Input[str] category: Tag category.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallAddress6TaggingTagArgs']]] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddress6TaggingTagArgs']]]]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddress6TaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class FirewallAddress6TaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAddress6TemplateSubnetSegmentArgs:
    def __init__(__self__, *,
                 bits: Optional[pulumi.Input[int]] = None,
                 exclusive: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddress6TemplateSubnetSegmentValueArgs']]]] = None):
        """
        :param pulumi.Input[int] bits: Number of bits.
        :param pulumi.Input[str] exclusive: Enable/disable exclusive value. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] id: Subnet segment ID.
        :param pulumi.Input[str] name: Subnet segment value name.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallAddress6TemplateSubnetSegmentValueArgs']]] values: Subnet segment values. The structure of `values` block is documented below.
        """
        if bits is not None:
            pulumi.set(__self__, "bits", bits)
        if exclusive is not None:
            pulumi.set(__self__, "exclusive", exclusive)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def bits(self) -> Optional[pulumi.Input[int]]:
        """
        Number of bits.
        """
        return pulumi.get(self, "bits")

    @bits.setter
    def bits(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bits", value)

    @property
    @pulumi.getter
    def exclusive(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable exclusive value. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "exclusive")

    @exclusive.setter
    def exclusive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclusive", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Subnet segment ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet segment value name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddress6TemplateSubnetSegmentValueArgs']]]]:
        """
        Subnet segment values. The structure of `values` block is documented below.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddress6TemplateSubnetSegmentValueArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class FirewallAddress6TemplateSubnetSegmentValueArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Subnet segment value name.
        :param pulumi.Input[str] value: Subnet segment value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet segment value name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet segment value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FirewallAddressFssoGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAddressListArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ip: IP.
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class FirewallAddressMacaddrArgs:
    def __init__(__self__, *,
                 macaddr: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] macaddr: MAC address ranges <start>[-<end>] separated by space.
        """
        if macaddr is not None:
            pulumi.set(__self__, "macaddr", macaddr)

    @property
    @pulumi.getter
    def macaddr(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address ranges <start>[-<end>] separated by space.
        """
        return pulumi.get(self, "macaddr")

    @macaddr.setter
    def macaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "macaddr", value)


@pulumi.input_type
class FirewallAddressTaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddressTaggingTagArgs']]]] = None):
        """
        :param pulumi.Input[str] category: Tag category.
        :param pulumi.Input[str] name: Tag name.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallAddressTaggingTagArgs']]] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddressTaggingTagArgs']]]]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddressTaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class FirewallAddressTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAddrgrp6MemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAddrgrp6TaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddrgrp6TaggingTagArgs']]]] = None):
        """
        :param pulumi.Input[str] category: Tag category.
        :param pulumi.Input[str] name: Tag name.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallAddrgrp6TaggingTagArgs']]] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddrgrp6TaggingTagArgs']]]]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddrgrp6TaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class FirewallAddrgrp6TaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAddrgrpExcludeMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAddrgrpMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAddrgrpTaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddrgrpTaggingTagArgs']]]] = None):
        """
        :param pulumi.Input[str] category: Tag category.
        :param pulumi.Input[str] name: Tag name.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallAddrgrpTaggingTagArgs']]] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddrgrpTaggingTagArgs']]]]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallAddrgrpTaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class FirewallAddrgrpTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallAuthPortalGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallCentralSnatMapDstAddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: IPv6 pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallCentralSnatMapDstAddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: IPv6 pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallCentralSnatMapDstintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: IPv6 pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallCentralSnatMapNatIppool6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: IPv6 pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallCentralSnatMapNatIppoolArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: IPv6 pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallCentralSnatMapOrigAddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: IPv6 pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallCentralSnatMapOrigAddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: IPv6 pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallCentralSnatMapSrcintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: IPv6 pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyAppCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: URL category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL category ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallConsolidatedPolicyAppGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application group names.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application group names.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyApplicationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: URL category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL category ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallConsolidatedPolicyDstaddr4Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application group names.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application group names.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyDstaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application group names.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application group names.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyDstintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application group names.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application group names.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyFssoGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application group names.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application group names.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application group names.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application group names.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyInternetServiceCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application group names.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application group names.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyInternetServiceCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application group names.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application group names.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyInternetServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application group names.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application group names.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyInternetServiceIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: URL category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL category ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallConsolidatedPolicyInternetServiceNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application group names.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application group names.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyInternetServiceSrcCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application group names.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application group names.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyInternetServiceSrcCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application group names.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application group names.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyInternetServiceSrcGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application group names.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application group names.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyInternetServiceSrcIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: URL category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL category ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallConsolidatedPolicyInternetServiceSrcNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application group names.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application group names.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyPoolname4Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application group names.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application group names.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyPoolname6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application group names.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application group names.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application group names.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application group names.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicySrcaddr4Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application group names.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application group names.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicySrcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application group names.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application group names.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicySrcintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application group names.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application group names.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallConsolidatedPolicyUrlCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: URL category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL category ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallConsolidatedPolicyUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Application group names.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Application group names.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallCountryRegionArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Region ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Region ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallDecryptedTrafficMirrorInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Decrypted traffic mirror interface.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Decrypted traffic mirror interface.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallDosPolicy6AnomalyArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 quarantine_expiry: Optional[pulumi.Input[str]] = None,
                 quarantine_log: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 threshold: Optional[pulumi.Input[int]] = None,
                 thresholddefault: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] action: Action taken when the threshold is reached.
        :param pulumi.Input[str] log: Enable/disable anomaly logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Anomaly name.
        :param pulumi.Input[str] quarantine: Quarantine method. Valid values: `none`, `attacker`.
        :param pulumi.Input[str] quarantine_expiry: Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
        :param pulumi.Input[str] quarantine_log: Enable/disable quarantine logging. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] status: Enable/disable this anomaly. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] threshold: Anomaly threshold. Number of detected instances per minute that triggers the anomaly action.
        :param pulumi.Input[int] thresholddefault: Number of detected instances per minute which triggers action (1 - 2147483647, default = 1000). Note that each anomaly has a different threshold value assigned to it.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if thresholddefault is not None:
            pulumi.set(__self__, "thresholddefault", thresholddefault)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action taken when the threshold is reached.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable anomaly logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Anomaly name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine method. Valid values: `none`, `attacker`.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[pulumi.Input[str]]:
        """
        Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
        """
        return pulumi.get(self, "quarantine_expiry")

    @quarantine_expiry.setter
    def quarantine_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_expiry", value)

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable quarantine logging. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine_log")

    @quarantine_log.setter
    def quarantine_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_log", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this anomaly. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Anomaly threshold. Number of detected instances per minute that triggers the anomaly action.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter
    def thresholddefault(self) -> Optional[pulumi.Input[int]]:
        """
        Number of detected instances per minute which triggers action (1 - 2147483647, default = 1000). Note that each anomaly has a different threshold value assigned to it.
        """
        return pulumi.get(self, "thresholddefault")

    @thresholddefault.setter
    def thresholddefault(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "thresholddefault", value)


@pulumi.input_type
class FirewallDosPolicy6DstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Anomaly name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Anomaly name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallDosPolicy6ServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Anomaly name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Anomaly name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallDosPolicy6SrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Anomaly name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Anomaly name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallDosPolicyAnomalyArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 quarantine_expiry: Optional[pulumi.Input[str]] = None,
                 quarantine_log: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 threshold: Optional[pulumi.Input[int]] = None,
                 thresholddefault: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] action: Action taken when the threshold is reached.
        :param pulumi.Input[str] log: Enable/disable anomaly logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Anomaly name.
        :param pulumi.Input[str] quarantine: Quarantine method. Valid values: `none`, `attacker`.
        :param pulumi.Input[str] quarantine_expiry: Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
        :param pulumi.Input[str] quarantine_log: Enable/disable quarantine logging. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] status: Enable/disable this anomaly. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] threshold: Anomaly threshold. Number of detected instances per minute that triggers the anomaly action.
        :param pulumi.Input[int] thresholddefault: Number of detected instances per minute which triggers action (1 - 2147483647, default = 1000). Note that each anomaly has a different threshold value assigned to it.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if thresholddefault is not None:
            pulumi.set(__self__, "thresholddefault", thresholddefault)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action taken when the threshold is reached.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable anomaly logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Anomaly name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine method. Valid values: `none`, `attacker`.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[pulumi.Input[str]]:
        """
        Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
        """
        return pulumi.get(self, "quarantine_expiry")

    @quarantine_expiry.setter
    def quarantine_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_expiry", value)

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable quarantine logging. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine_log")

    @quarantine_log.setter
    def quarantine_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_log", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this anomaly. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Anomaly threshold. Number of detected instances per minute that triggers the anomaly action.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter
    def thresholddefault(self) -> Optional[pulumi.Input[int]]:
        """
        Number of detected instances per minute which triggers action (1 - 2147483647, default = 1000). Note that each anomaly has a different threshold value assigned to it.
        """
        return pulumi.get(self, "thresholddefault")

    @thresholddefault.setter
    def thresholddefault(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "thresholddefault", value)


@pulumi.input_type
class FirewallDosPolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Anomaly name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Anomaly name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallDosPolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Anomaly name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Anomaly name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallDosPolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Anomaly name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Anomaly name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallIdentityBasedRouteRuleArgs:
    def __init__(__self__, *,
                 device: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallIdentityBasedRouteRuleGroupArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] device: Outgoing interface for the rule.
        :param pulumi.Input[str] gateway: IPv4 address of the gateway (Format: xxx.xxx.xxx.xxx , Default: 0.0.0.0).
        :param pulumi.Input[Sequence[pulumi.Input['FirewallIdentityBasedRouteRuleGroupArgs']]] groups: Select one or more group(s) from available groups that are allowed to use this route. Separate group names with a space. The structure of `groups` block is documented below.
        :param pulumi.Input[int] id: Rule ID.
        """
        if device is not None:
            pulumi.set(__self__, "device", device)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        Outgoing interface for the rule.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of the gateway (Format: xxx.xxx.xxx.xxx , Default: 0.0.0.0).
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallIdentityBasedRouteRuleGroupArgs']]]]:
        """
        Select one or more group(s) from available groups that are allowed to use this route. Separate group names with a space. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallIdentityBasedRouteRuleGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Rule ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallIdentityBasedRouteRuleGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallInterfacePolicy6Dstaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallInterfacePolicy6Service6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallInterfacePolicy6Srcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallInterfacePolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallInterfacePolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallInterfacePolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallInternetServiceAdditionEntryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceAdditionEntryPortRangeArgs']]]] = None,
                 protocol: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Custom entry port range ID.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceAdditionEntryPortRangeArgs']]] port_ranges: Port ranges in the custom entry. The structure of `port_range` block is documented below.
        :param pulumi.Input[int] protocol: Integer value for the protocol type as defined by IANA (0 - 255).
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Custom entry port range ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceAdditionEntryPortRangeArgs']]]]:
        """
        Port ranges in the custom entry. The structure of `port_range` block is documented below.
        """
        return pulumi.get(self, "port_ranges")

    @port_ranges.setter
    def port_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceAdditionEntryPortRangeArgs']]]]):
        pulumi.set(self, "port_ranges", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Integer value for the protocol type as defined by IANA (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class FirewallInternetServiceAdditionEntryPortRangeArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] end_port: Integer value for ending TCP/UDP/SCTP destination port in range (1 to 65535).
        :param pulumi.Input[int] id: Custom entry port range ID.
        :param pulumi.Input[int] start_port: Integer value for starting TCP/UDP/SCTP destination port in range (1 to 65535).
        """
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        """
        Integer value for ending TCP/UDP/SCTP destination port in range (1 to 65535).
        """
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Custom entry port range ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        """
        Integer value for starting TCP/UDP/SCTP destination port in range (1 to 65535).
        """
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


@pulumi.input_type
class FirewallInternetServiceCustomEntryArgs:
    def __init__(__self__, *,
                 dsts: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceCustomEntryDstArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceCustomEntryPortRangeArgs']]]] = None,
                 protocol: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceCustomEntryDstArgs']]] dsts: Destination address or address group name. The structure of `dst` block is documented below.
        :param pulumi.Input[int] id: Custom entry port range ID.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceCustomEntryPortRangeArgs']]] port_ranges: Port ranges in the custom entry. The structure of `port_range` block is documented below.
        :param pulumi.Input[int] protocol: Integer value for the protocol type as defined by IANA (0 - 255).
        """
        if dsts is not None:
            pulumi.set(__self__, "dsts", dsts)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def dsts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceCustomEntryDstArgs']]]]:
        """
        Destination address or address group name. The structure of `dst` block is documented below.
        """
        return pulumi.get(self, "dsts")

    @dsts.setter
    def dsts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceCustomEntryDstArgs']]]]):
        pulumi.set(self, "dsts", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Custom entry port range ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceCustomEntryPortRangeArgs']]]]:
        """
        Port ranges in the custom entry. The structure of `port_range` block is documented below.
        """
        return pulumi.get(self, "port_ranges")

    @port_ranges.setter
    def port_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceCustomEntryPortRangeArgs']]]]):
        pulumi.set(self, "port_ranges", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Integer value for the protocol type as defined by IANA (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class FirewallInternetServiceCustomEntryDstArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Select the destination address or address group object from available options.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Select the destination address or address group object from available options.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallInternetServiceCustomEntryPortRangeArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] end_port: Integer value for ending TCP/UDP/SCTP destination port in range (1 to 65535).
        :param pulumi.Input[int] id: Custom entry port range ID.
        :param pulumi.Input[int] start_port: Integer value for starting TCP/UDP/SCTP destination port in range (1 to 65535).
        """
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        """
        Integer value for ending TCP/UDP/SCTP destination port in range (1 to 65535).
        """
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Custom entry port range ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        """
        Integer value for starting TCP/UDP/SCTP destination port in range (1 to 65535).
        """
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


@pulumi.input_type
class FirewallInternetServiceCustomGroupMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group member name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group member name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallInternetServiceDefinitionEntryArgs:
    def __init__(__self__, *,
                 category_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceDefinitionEntryPortRangeArgs']]]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 seq_num: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] category_id: Internet Service category ID.
        :param pulumi.Input[str] name: Internet Service name.
        :param pulumi.Input[int] port: Integer value for ending TCP/UDP/SCTP destination port in range (0 to 65535). 0 means undefined.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceDefinitionEntryPortRangeArgs']]] port_ranges: Port ranges in the definition entry. The structure of `port_range` block is documented below.
        :param pulumi.Input[int] protocol: Integer value for the protocol type as defined by IANA (0 - 255).
        :param pulumi.Input[int] seq_num: Entry sequence number.
        """
        if category_id is not None:
            pulumi.set(__self__, "category_id", category_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="categoryId")
    def category_id(self) -> Optional[pulumi.Input[int]]:
        """
        Internet Service category ID.
        """
        return pulumi.get(self, "category_id")

    @category_id.setter
    def category_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "category_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Internet Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Integer value for ending TCP/UDP/SCTP destination port in range (0 to 65535). 0 means undefined.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceDefinitionEntryPortRangeArgs']]]]:
        """
        Port ranges in the definition entry. The structure of `port_range` block is documented below.
        """
        return pulumi.get(self, "port_ranges")

    @port_ranges.setter
    def port_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceDefinitionEntryPortRangeArgs']]]]):
        pulumi.set(self, "port_ranges", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Integer value for the protocol type as defined by IANA (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        """
        Entry sequence number.
        """
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)


@pulumi.input_type
class FirewallInternetServiceDefinitionEntryPortRangeArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] end_port: Ending TCP/UDP/SCTP destination port (1 to 65535).
        :param pulumi.Input[int] id: Custom entry port range ID.
        :param pulumi.Input[int] start_port: Starting TCP/UDP/SCTP destination port (1 to 65535).
        """
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        """
        Ending TCP/UDP/SCTP destination port (1 to 65535).
        """
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Custom entry port range ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        """
        Starting TCP/UDP/SCTP destination port (1 to 65535).
        """
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


@pulumi.input_type
class FirewallInternetServiceExtensionDisableEntryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionDisableEntryIpRangeArgs']]]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionDisableEntryPortRangeArgs']]]] = None,
                 protocol: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Disable entry range ID.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionDisableEntryIpRangeArgs']]] ip_ranges: IP ranges in the disable entry. The structure of `ip_range` block is documented below.
        :param pulumi.Input[int] port: Integer value for the TCP/IP port (0 - 65535).
        :param pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionDisableEntryPortRangeArgs']]] port_ranges: Port ranges in the disable entry. The structure of `port_range` block is documented below.
        :param pulumi.Input[int] protocol: Integer value for the protocol type as defined by IANA (0 - 255).
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Disable entry range ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionDisableEntryIpRangeArgs']]]]:
        """
        IP ranges in the disable entry. The structure of `ip_range` block is documented below.
        """
        return pulumi.get(self, "ip_ranges")

    @ip_ranges.setter
    def ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionDisableEntryIpRangeArgs']]]]):
        pulumi.set(self, "ip_ranges", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Integer value for the TCP/IP port (0 - 65535).
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionDisableEntryPortRangeArgs']]]]:
        """
        Port ranges in the disable entry. The structure of `port_range` block is documented below.
        """
        return pulumi.get(self, "port_ranges")

    @port_ranges.setter
    def port_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionDisableEntryPortRangeArgs']]]]):
        pulumi.set(self, "port_ranges", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Integer value for the protocol type as defined by IANA (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class FirewallInternetServiceExtensionDisableEntryIpRangeArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end_ip: End IP address.
        :param pulumi.Input[int] id: Disable entry range ID.
        :param pulumi.Input[str] start_ip: Start IP address.
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        End IP address.
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Disable entry range ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Start IP address.
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class FirewallInternetServiceExtensionDisableEntryPortRangeArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] end_port: Ending TCP/UDP/SCTP destination port (1 to 65535).
        :param pulumi.Input[int] id: Disable entry range ID.
        :param pulumi.Input[int] start_port: Starting TCP/UDP/SCTP destination port (1 to 65535).
        """
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        """
        Ending TCP/UDP/SCTP destination port (1 to 65535).
        """
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Disable entry range ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        """
        Starting TCP/UDP/SCTP destination port (1 to 65535).
        """
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


@pulumi.input_type
class FirewallInternetServiceExtensionEntryArgs:
    def __init__(__self__, *,
                 dsts: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionEntryDstArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 port_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionEntryPortRangeArgs']]]] = None,
                 protocol: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionEntryDstArgs']]] dsts: Destination address or address group name. The structure of `dst` block is documented below.
        :param pulumi.Input[int] id: Disable entry range ID.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionEntryPortRangeArgs']]] port_ranges: Port ranges in the disable entry. The structure of `port_range` block is documented below.
        :param pulumi.Input[int] protocol: Integer value for the protocol type as defined by IANA (0 - 255).
        """
        if dsts is not None:
            pulumi.set(__self__, "dsts", dsts)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port_ranges is not None:
            pulumi.set(__self__, "port_ranges", port_ranges)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def dsts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionEntryDstArgs']]]]:
        """
        Destination address or address group name. The structure of `dst` block is documented below.
        """
        return pulumi.get(self, "dsts")

    @dsts.setter
    def dsts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionEntryDstArgs']]]]):
        pulumi.set(self, "dsts", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Disable entry range ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="portRanges")
    def port_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionEntryPortRangeArgs']]]]:
        """
        Port ranges in the disable entry. The structure of `port_range` block is documented below.
        """
        return pulumi.get(self, "port_ranges")

    @port_ranges.setter
    def port_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallInternetServiceExtensionEntryPortRangeArgs']]]]):
        pulumi.set(self, "port_ranges", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Integer value for the protocol type as defined by IANA (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class FirewallInternetServiceExtensionEntryDstArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Select the destination address or address group object from available options.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Select the destination address or address group object from available options.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallInternetServiceExtensionEntryPortRangeArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] end_port: Ending TCP/UDP/SCTP destination port (1 to 65535).
        :param pulumi.Input[int] id: Disable entry range ID.
        :param pulumi.Input[int] start_port: Starting TCP/UDP/SCTP destination port (1 to 65535).
        """
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        """
        Ending TCP/UDP/SCTP destination port (1 to 65535).
        """
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Disable entry range ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        """
        Starting TCP/UDP/SCTP destination port (1 to 65535).
        """
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


@pulumi.input_type
class FirewallInternetServiceGroupMemberArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Internet Service ID.
        :param pulumi.Input[str] name: Internet Service name.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Internet Service ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Internet Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallLocalInPolicy6DstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallLocalInPolicy6ServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallLocalInPolicy6SrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallLocalInPolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallLocalInPolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallLocalInPolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallMulticastAddress6TaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallMulticastAddress6TaggingTagArgs']]]] = None):
        """
        :param pulumi.Input[str] category: Tag category.
        :param pulumi.Input[str] name: Tag name.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallMulticastAddress6TaggingTagArgs']]] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallMulticastAddress6TaggingTagArgs']]]]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallMulticastAddress6TaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class FirewallMulticastAddress6TaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallMulticastAddressTaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallMulticastAddressTaggingTagArgs']]]] = None):
        """
        :param pulumi.Input[str] category: Tag category.
        :param pulumi.Input[str] name: Tag name.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallMulticastAddressTaggingTagArgs']]] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallMulticastAddressTaggingTagArgs']]]]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallMulticastAddressTaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class FirewallMulticastAddressTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallMulticastPolicy6DstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallMulticastPolicy6SrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallMulticastPolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Destination address objects.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Destination address objects.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallMulticastPolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Destination address objects.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Destination address objects.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy46DstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: IP pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IP pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy46PoolnameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: IP pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IP pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy46ServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: IP pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IP pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy46SrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: IP pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IP pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy64DstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: IP pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IP pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy64PoolnameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: IP pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IP pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy64ServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: IP pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IP pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy64SrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: IP pool name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IP pool name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy6AppCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: URL category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL category ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallPolicy6AppGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy6ApplicationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: URL category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL category ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallPolicy6CustomLogFieldArgs:
    def __init__(__self__, *,
                 field_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] field_id: Custom log field.
        """
        if field_id is not None:
            pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[str]]:
        """
        Custom log field.
        """
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_id", value)


@pulumi.input_type
class FirewallPolicy6DeviceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy6DstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy6DstintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy6FssoGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy6GroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy6PoolnameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy6ServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy6SrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy6SrcintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy6SslMirrorIntfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicy6UrlCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: URL category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL category ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallPolicy6UserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyAppCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Security group tag.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Security group tag.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallPolicyAppGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyApplicationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Security group tag.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Security group tag.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallPolicyCustomLogFieldArgs:
    def __init__(__self__, *,
                 field_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] field_id: Custom log field.
        """
        if field_id is not None:
            pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[str]]:
        """
        Custom log field.
        """
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_id", value)


@pulumi.input_type
class FirewallPolicyDeviceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyDstaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyDstintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyFssoGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyInternetServiceCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyInternetServiceCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyInternetServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyInternetServiceIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Security group tag.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Security group tag.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallPolicyInternetServiceNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyInternetServiceSrcCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyInternetServiceSrcCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyInternetServiceSrcGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyInternetServiceSrcIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Security group tag.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Security group tag.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallPolicyInternetServiceSrcNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyNtlmEnabledBrowserArgs:
    def __init__(__self__, *,
                 user_agent_string: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] user_agent_string: User agent string.
        """
        if user_agent_string is not None:
            pulumi.set(__self__, "user_agent_string", user_agent_string)

    @property
    @pulumi.getter(name="userAgentString")
    def user_agent_string(self) -> Optional[pulumi.Input[str]]:
        """
        User agent string.
        """
        return pulumi.get(self, "user_agent_string")

    @user_agent_string.setter
    def user_agent_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_agent_string", value)


@pulumi.input_type
class FirewallPolicyPoolname6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyPoolnameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyRtpAddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicySgtArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Security group tag.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Security group tag.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallPolicySrcVendorMacArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Security group tag.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Security group tag.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallPolicySrcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicySrcintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicySslMirrorIntfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyUrlCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Security group tag.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Security group tag.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallPolicyUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyZtnaEmsTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallPolicyZtnaGeoTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Mirror Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProfileProtocolOptionsCifsArgs:
    def __init__(__self__, *,
                 domain_controller: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 server_credential_type: Optional[pulumi.Input[str]] = None,
                 server_keytabs: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallProfileProtocolOptionsCifsServerKeytabArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tcp_window_maximum: Optional[pulumi.Input[int]] = None,
                 tcp_window_minimum: Optional[pulumi.Input[int]] = None,
                 tcp_window_size: Optional[pulumi.Input[int]] = None,
                 tcp_window_type: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] domain_controller: Domain for which to decrypt CIFS traffic.
        :param pulumi.Input[str] options: One or more options that can be applied to the session. Valid values: `oversize`.
        :param pulumi.Input[int] oversize_limit: Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
        :param pulumi.Input[int] ports: Ports to scan for content (1 - 65535, default = 445).
        :param pulumi.Input[str] scan_bzip2: Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] server_credential_type: CIFS server credential type. Valid values: `none`, `credential-replication`, `credential-keytab`.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallProfileProtocolOptionsCifsServerKeytabArgs']]] server_keytabs: Server keytab. The structure of `server_keytab` block is documented below.
        :param pulumi.Input[str] status: Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] tcp_window_maximum: Maximum dynamic TCP window size (default = 8MB).
        :param pulumi.Input[int] tcp_window_minimum: Minimum dynamic TCP window size (default = 128KB).
        :param pulumi.Input[int] tcp_window_size: Set TCP static window size (default = 256KB).
        :param pulumi.Input[str] tcp_window_type: Specify type of TCP window to use for this protocol.
        :param pulumi.Input[int] uncompressed_nest_limit: Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        :param pulumi.Input[int] uncompressed_oversize_limit: Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
        """
        if domain_controller is not None:
            pulumi.set(__self__, "domain_controller", domain_controller)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if server_credential_type is not None:
            pulumi.set(__self__, "server_credential_type", server_credential_type)
        if server_keytabs is not None:
            pulumi.set(__self__, "server_keytabs", server_keytabs)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tcp_window_maximum is not None:
            pulumi.set(__self__, "tcp_window_maximum", tcp_window_maximum)
        if tcp_window_minimum is not None:
            pulumi.set(__self__, "tcp_window_minimum", tcp_window_minimum)
        if tcp_window_size is not None:
            pulumi.set(__self__, "tcp_window_size", tcp_window_size)
        if tcp_window_type is not None:
            pulumi.set(__self__, "tcp_window_type", tcp_window_type)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="domainController")
    def domain_controller(self) -> Optional[pulumi.Input[str]]:
        """
        Domain for which to decrypt CIFS traffic.
        """
        return pulumi.get(self, "domain_controller")

    @domain_controller.setter
    def domain_controller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_controller", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        One or more options that can be applied to the session. Valid values: `oversize`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
        """
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        """
        Ports to scan for content (1 - 65535, default = 445).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter(name="serverCredentialType")
    def server_credential_type(self) -> Optional[pulumi.Input[str]]:
        """
        CIFS server credential type. Valid values: `none`, `credential-replication`, `credential-keytab`.
        """
        return pulumi.get(self, "server_credential_type")

    @server_credential_type.setter
    def server_credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_credential_type", value)

    @property
    @pulumi.getter(name="serverKeytabs")
    def server_keytabs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallProfileProtocolOptionsCifsServerKeytabArgs']]]]:
        """
        Server keytab. The structure of `server_keytab` block is documented below.
        """
        return pulumi.get(self, "server_keytabs")

    @server_keytabs.setter
    def server_keytabs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallProfileProtocolOptionsCifsServerKeytabArgs']]]]):
        pulumi.set(self, "server_keytabs", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tcpWindowMaximum")
    def tcp_window_maximum(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum dynamic TCP window size (default = 8MB).
        """
        return pulumi.get(self, "tcp_window_maximum")

    @tcp_window_maximum.setter
    def tcp_window_maximum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_maximum", value)

    @property
    @pulumi.getter(name="tcpWindowMinimum")
    def tcp_window_minimum(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum dynamic TCP window size (default = 128KB).
        """
        return pulumi.get(self, "tcp_window_minimum")

    @tcp_window_minimum.setter
    def tcp_window_minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_minimum", value)

    @property
    @pulumi.getter(name="tcpWindowSize")
    def tcp_window_size(self) -> Optional[pulumi.Input[int]]:
        """
        Set TCP static window size (default = 256KB).
        """
        return pulumi.get(self, "tcp_window_size")

    @tcp_window_size.setter
    def tcp_window_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_size", value)

    @property
    @pulumi.getter(name="tcpWindowType")
    def tcp_window_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specify type of TCP window to use for this protocol.
        """
        return pulumi.get(self, "tcp_window_type")

    @tcp_window_type.setter
    def tcp_window_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_window_type", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        """
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
        """
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)


@pulumi.input_type
class FirewallProfileProtocolOptionsCifsServerKeytabArgs:
    def __init__(__self__, *,
                 keytab: Optional[pulumi.Input[str]] = None,
                 principal: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keytab: Base64 encoded keytab file containing credential of the server.
        :param pulumi.Input[str] principal: Service principal.  For example, "host/cifsserver.example.com@example.com".
        """
        if keytab is not None:
            pulumi.set(__self__, "keytab", keytab)
        if principal is not None:
            pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def keytab(self) -> Optional[pulumi.Input[str]]:
        """
        Base64 encoded keytab file containing credential of the server.
        """
        return pulumi.get(self, "keytab")

    @keytab.setter
    def keytab(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keytab", value)

    @property
    @pulumi.getter
    def principal(self) -> Optional[pulumi.Input[str]]:
        """
        Service principal.  For example, "host/cifsserver.example.com@example.com".
        """
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "principal", value)


@pulumi.input_type
class FirewallProfileProtocolOptionsDnsArgs:
    def __init__(__self__, *,
                 ports: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] ports: Ports to scan for content (1 - 65535, default = 445).
        :param pulumi.Input[str] status: Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
        """
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        """
        Ports to scan for content (1 - 65535, default = 445).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class FirewallProfileProtocolOptionsFtpArgs:
    def __init__(__self__, *,
                 comfort_amount: Optional[pulumi.Input[int]] = None,
                 comfort_interval: Optional[pulumi.Input[int]] = None,
                 inspect_all: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 ssl_offloaded: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 stream_based_uncompressed_limit: Optional[pulumi.Input[int]] = None,
                 tcp_window_maximum: Optional[pulumi.Input[int]] = None,
                 tcp_window_minimum: Optional[pulumi.Input[int]] = None,
                 tcp_window_size: Optional[pulumi.Input[int]] = None,
                 tcp_window_type: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] comfort_amount: Amount of data to send in a transmission for client comforting (1 - 65535 bytes, default = 1).
        :param pulumi.Input[int] comfort_interval: Period of time between start, or last transmission, and the next client comfort transmission of data (1 - 900 sec, default = 10).
        :param pulumi.Input[str] inspect_all: Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] options: One or more options that can be applied to the session. Valid values: `oversize`.
        :param pulumi.Input[int] oversize_limit: Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
        :param pulumi.Input[int] ports: Ports to scan for content (1 - 65535, default = 445).
        :param pulumi.Input[str] scan_bzip2: Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_offloaded: SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
        :param pulumi.Input[str] status: Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] stream_based_uncompressed_limit: Maximum stream-based uncompressed data size that will be scanned (MB, 0 = unlimited (default).  Stream-based uncompression used only under certain conditions.).
        :param pulumi.Input[int] tcp_window_maximum: Maximum dynamic TCP window size (default = 8MB).
        :param pulumi.Input[int] tcp_window_minimum: Minimum dynamic TCP window size (default = 128KB).
        :param pulumi.Input[int] tcp_window_size: Set TCP static window size (default = 256KB).
        :param pulumi.Input[str] tcp_window_type: Specify type of TCP window to use for this protocol.
        :param pulumi.Input[int] uncompressed_nest_limit: Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        :param pulumi.Input[int] uncompressed_oversize_limit: Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
        """
        if comfort_amount is not None:
            pulumi.set(__self__, "comfort_amount", comfort_amount)
        if comfort_interval is not None:
            pulumi.set(__self__, "comfort_interval", comfort_interval)
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if ssl_offloaded is not None:
            pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if stream_based_uncompressed_limit is not None:
            pulumi.set(__self__, "stream_based_uncompressed_limit", stream_based_uncompressed_limit)
        if tcp_window_maximum is not None:
            pulumi.set(__self__, "tcp_window_maximum", tcp_window_maximum)
        if tcp_window_minimum is not None:
            pulumi.set(__self__, "tcp_window_minimum", tcp_window_minimum)
        if tcp_window_size is not None:
            pulumi.set(__self__, "tcp_window_size", tcp_window_size)
        if tcp_window_type is not None:
            pulumi.set(__self__, "tcp_window_type", tcp_window_type)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="comfortAmount")
    def comfort_amount(self) -> Optional[pulumi.Input[int]]:
        """
        Amount of data to send in a transmission for client comforting (1 - 65535 bytes, default = 1).
        """
        return pulumi.get(self, "comfort_amount")

    @comfort_amount.setter
    def comfort_amount(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "comfort_amount", value)

    @property
    @pulumi.getter(name="comfortInterval")
    def comfort_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Period of time between start, or last transmission, and the next client comfort transmission of data (1 - 900 sec, default = 10).
        """
        return pulumi.get(self, "comfort_interval")

    @comfort_interval.setter
    def comfort_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "comfort_interval", value)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "inspect_all")

    @inspect_all.setter
    def inspect_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspect_all", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        One or more options that can be applied to the session. Valid values: `oversize`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
        """
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        """
        Ports to scan for content (1 - 65535, default = 445).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> Optional[pulumi.Input[str]]:
        """
        SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
        """
        return pulumi.get(self, "ssl_offloaded")

    @ssl_offloaded.setter
    def ssl_offloaded(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_offloaded", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="streamBasedUncompressedLimit")
    def stream_based_uncompressed_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum stream-based uncompressed data size that will be scanned (MB, 0 = unlimited (default).  Stream-based uncompression used only under certain conditions.).
        """
        return pulumi.get(self, "stream_based_uncompressed_limit")

    @stream_based_uncompressed_limit.setter
    def stream_based_uncompressed_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stream_based_uncompressed_limit", value)

    @property
    @pulumi.getter(name="tcpWindowMaximum")
    def tcp_window_maximum(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum dynamic TCP window size (default = 8MB).
        """
        return pulumi.get(self, "tcp_window_maximum")

    @tcp_window_maximum.setter
    def tcp_window_maximum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_maximum", value)

    @property
    @pulumi.getter(name="tcpWindowMinimum")
    def tcp_window_minimum(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum dynamic TCP window size (default = 128KB).
        """
        return pulumi.get(self, "tcp_window_minimum")

    @tcp_window_minimum.setter
    def tcp_window_minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_minimum", value)

    @property
    @pulumi.getter(name="tcpWindowSize")
    def tcp_window_size(self) -> Optional[pulumi.Input[int]]:
        """
        Set TCP static window size (default = 256KB).
        """
        return pulumi.get(self, "tcp_window_size")

    @tcp_window_size.setter
    def tcp_window_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_size", value)

    @property
    @pulumi.getter(name="tcpWindowType")
    def tcp_window_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specify type of TCP window to use for this protocol.
        """
        return pulumi.get(self, "tcp_window_type")

    @tcp_window_type.setter
    def tcp_window_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_window_type", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        """
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
        """
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)


@pulumi.input_type
class FirewallProfileProtocolOptionsHttpArgs:
    def __init__(__self__, *,
                 block_page_status_code: Optional[pulumi.Input[int]] = None,
                 comfort_amount: Optional[pulumi.Input[int]] = None,
                 comfort_interval: Optional[pulumi.Input[int]] = None,
                 fortinet_bar: Optional[pulumi.Input[str]] = None,
                 fortinet_bar_port: Optional[pulumi.Input[int]] = None,
                 http_policy: Optional[pulumi.Input[str]] = None,
                 inspect_all: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 post_lang: Optional[pulumi.Input[str]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 range_block: Optional[pulumi.Input[str]] = None,
                 retry_count: Optional[pulumi.Input[int]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 ssl_offloaded: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 stream_based_uncompressed_limit: Optional[pulumi.Input[int]] = None,
                 streaming_content_bypass: Optional[pulumi.Input[str]] = None,
                 strip_x_forwarded_for: Optional[pulumi.Input[str]] = None,
                 switching_protocols: Optional[pulumi.Input[str]] = None,
                 tcp_window_maximum: Optional[pulumi.Input[int]] = None,
                 tcp_window_minimum: Optional[pulumi.Input[int]] = None,
                 tcp_window_size: Optional[pulumi.Input[int]] = None,
                 tcp_window_type: Optional[pulumi.Input[str]] = None,
                 tunnel_non_http: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None,
                 unknown_http_version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] block_page_status_code: Code number returned for blocked HTTP pages (non-FortiGuard only) (100 - 599, default = 403).
        :param pulumi.Input[int] comfort_amount: Amount of data to send in a transmission for client comforting (1 - 65535 bytes, default = 1).
        :param pulumi.Input[int] comfort_interval: Period of time between start, or last transmission, and the next client comfort transmission of data (1 - 900 sec, default = 10).
        :param pulumi.Input[str] fortinet_bar: Enable/disable Fortinet bar on HTML content. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] fortinet_bar_port: Port for use by Fortinet Bar (1 - 65535, default = 8011).
        :param pulumi.Input[str] http_policy: Enable/disable HTTP policy check. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] inspect_all: Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] options: One or more options that can be applied to the session. Valid values: `oversize`.
        :param pulumi.Input[int] oversize_limit: Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
        :param pulumi.Input[int] ports: Ports to scan for content (1 - 65535, default = 445).
        :param pulumi.Input[str] post_lang: ID codes for character sets to be used to convert to UTF-8 for banned words and DLP on HTTP posts (maximum of 5 character sets). Valid values: `jisx0201`, `jisx0208`, `jisx0212`, `gb2312`, `ksc5601-ex`, `euc-jp`, `sjis`, `iso2022-jp`, `iso2022-jp-1`, `iso2022-jp-2`, `euc-cn`, `ces-gbk`, `hz`, `ces-big5`, `euc-kr`, `iso2022-jp-3`, `iso8859-1`, `tis620`, `cp874`, `cp1252`, `cp1251`.
        :param pulumi.Input[str] proxy_after_tcp_handshake: Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] range_block: Enable/disable blocking of partial downloads. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] retry_count: Number of attempts to retry HTTP connection (0 - 100, default = 0).
        :param pulumi.Input[str] scan_bzip2: Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_offloaded: SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
        :param pulumi.Input[str] status: Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] stream_based_uncompressed_limit: Maximum stream-based uncompressed data size that will be scanned (MB, 0 = unlimited (default).  Stream-based uncompression used only under certain conditions.).
        :param pulumi.Input[str] streaming_content_bypass: Enable/disable bypassing of streaming content from buffering. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] strip_x_forwarded_for: Enable/disable stripping of HTTP X-Forwarded-For header. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] switching_protocols: Bypass from scanning, or block a connection that attempts to switch protocol. Valid values: `bypass`, `block`.
        :param pulumi.Input[int] tcp_window_maximum: Maximum dynamic TCP window size (default = 8MB).
        :param pulumi.Input[int] tcp_window_minimum: Minimum dynamic TCP window size (default = 128KB).
        :param pulumi.Input[int] tcp_window_size: Set TCP static window size (default = 256KB).
        :param pulumi.Input[str] tcp_window_type: Specify type of TCP window to use for this protocol.
        :param pulumi.Input[str] tunnel_non_http: Configure how to process non-HTTP traffic when a profile configured for HTTP traffic accepts a non-HTTP session. Can occur if an application sends non-HTTP traffic using an HTTP destination port. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] uncompressed_nest_limit: Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        :param pulumi.Input[int] uncompressed_oversize_limit: Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
        :param pulumi.Input[str] unknown_http_version: How to handle HTTP sessions that do not comply with HTTP 0.9, 1.0, or 1.1. Valid values: `reject`, `tunnel`, `best-effort`.
        """
        if block_page_status_code is not None:
            pulumi.set(__self__, "block_page_status_code", block_page_status_code)
        if comfort_amount is not None:
            pulumi.set(__self__, "comfort_amount", comfort_amount)
        if comfort_interval is not None:
            pulumi.set(__self__, "comfort_interval", comfort_interval)
        if fortinet_bar is not None:
            pulumi.set(__self__, "fortinet_bar", fortinet_bar)
        if fortinet_bar_port is not None:
            pulumi.set(__self__, "fortinet_bar_port", fortinet_bar_port)
        if http_policy is not None:
            pulumi.set(__self__, "http_policy", http_policy)
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if post_lang is not None:
            pulumi.set(__self__, "post_lang", post_lang)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if range_block is not None:
            pulumi.set(__self__, "range_block", range_block)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if ssl_offloaded is not None:
            pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if stream_based_uncompressed_limit is not None:
            pulumi.set(__self__, "stream_based_uncompressed_limit", stream_based_uncompressed_limit)
        if streaming_content_bypass is not None:
            pulumi.set(__self__, "streaming_content_bypass", streaming_content_bypass)
        if strip_x_forwarded_for is not None:
            pulumi.set(__self__, "strip_x_forwarded_for", strip_x_forwarded_for)
        if switching_protocols is not None:
            pulumi.set(__self__, "switching_protocols", switching_protocols)
        if tcp_window_maximum is not None:
            pulumi.set(__self__, "tcp_window_maximum", tcp_window_maximum)
        if tcp_window_minimum is not None:
            pulumi.set(__self__, "tcp_window_minimum", tcp_window_minimum)
        if tcp_window_size is not None:
            pulumi.set(__self__, "tcp_window_size", tcp_window_size)
        if tcp_window_type is not None:
            pulumi.set(__self__, "tcp_window_type", tcp_window_type)
        if tunnel_non_http is not None:
            pulumi.set(__self__, "tunnel_non_http", tunnel_non_http)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)
        if unknown_http_version is not None:
            pulumi.set(__self__, "unknown_http_version", unknown_http_version)

    @property
    @pulumi.getter(name="blockPageStatusCode")
    def block_page_status_code(self) -> Optional[pulumi.Input[int]]:
        """
        Code number returned for blocked HTTP pages (non-FortiGuard only) (100 - 599, default = 403).
        """
        return pulumi.get(self, "block_page_status_code")

    @block_page_status_code.setter
    def block_page_status_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_page_status_code", value)

    @property
    @pulumi.getter(name="comfortAmount")
    def comfort_amount(self) -> Optional[pulumi.Input[int]]:
        """
        Amount of data to send in a transmission for client comforting (1 - 65535 bytes, default = 1).
        """
        return pulumi.get(self, "comfort_amount")

    @comfort_amount.setter
    def comfort_amount(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "comfort_amount", value)

    @property
    @pulumi.getter(name="comfortInterval")
    def comfort_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Period of time between start, or last transmission, and the next client comfort transmission of data (1 - 900 sec, default = 10).
        """
        return pulumi.get(self, "comfort_interval")

    @comfort_interval.setter
    def comfort_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "comfort_interval", value)

    @property
    @pulumi.getter(name="fortinetBar")
    def fortinet_bar(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Fortinet bar on HTML content. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortinet_bar")

    @fortinet_bar.setter
    def fortinet_bar(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortinet_bar", value)

    @property
    @pulumi.getter(name="fortinetBarPort")
    def fortinet_bar_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port for use by Fortinet Bar (1 - 65535, default = 8011).
        """
        return pulumi.get(self, "fortinet_bar_port")

    @fortinet_bar_port.setter
    def fortinet_bar_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fortinet_bar_port", value)

    @property
    @pulumi.getter(name="httpPolicy")
    def http_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable HTTP policy check. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "http_policy")

    @http_policy.setter
    def http_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_policy", value)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "inspect_all")

    @inspect_all.setter
    def inspect_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspect_all", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        One or more options that can be applied to the session. Valid values: `oversize`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
        """
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        """
        Ports to scan for content (1 - 65535, default = 445).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="postLang")
    def post_lang(self) -> Optional[pulumi.Input[str]]:
        """
        ID codes for character sets to be used to convert to UTF-8 for banned words and DLP on HTTP posts (maximum of 5 character sets). Valid values: `jisx0201`, `jisx0208`, `jisx0212`, `gb2312`, `ksc5601-ex`, `euc-jp`, `sjis`, `iso2022-jp`, `iso2022-jp-1`, `iso2022-jp-2`, `euc-cn`, `ces-gbk`, `hz`, `ces-big5`, `euc-kr`, `iso2022-jp-3`, `iso8859-1`, `tis620`, `cp874`, `cp1252`, `cp1251`.
        """
        return pulumi.get(self, "post_lang")

    @post_lang.setter
    def post_lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_lang", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="rangeBlock")
    def range_block(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable blocking of partial downloads. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "range_block")

    @range_block.setter
    def range_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range_block", value)

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of attempts to retry HTTP connection (0 - 100, default = 0).
        """
        return pulumi.get(self, "retry_count")

    @retry_count.setter
    def retry_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_count", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> Optional[pulumi.Input[str]]:
        """
        SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
        """
        return pulumi.get(self, "ssl_offloaded")

    @ssl_offloaded.setter
    def ssl_offloaded(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_offloaded", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="streamBasedUncompressedLimit")
    def stream_based_uncompressed_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum stream-based uncompressed data size that will be scanned (MB, 0 = unlimited (default).  Stream-based uncompression used only under certain conditions.).
        """
        return pulumi.get(self, "stream_based_uncompressed_limit")

    @stream_based_uncompressed_limit.setter
    def stream_based_uncompressed_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stream_based_uncompressed_limit", value)

    @property
    @pulumi.getter(name="streamingContentBypass")
    def streaming_content_bypass(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable bypassing of streaming content from buffering. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "streaming_content_bypass")

    @streaming_content_bypass.setter
    def streaming_content_bypass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "streaming_content_bypass", value)

    @property
    @pulumi.getter(name="stripXForwardedFor")
    def strip_x_forwarded_for(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable stripping of HTTP X-Forwarded-For header. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "strip_x_forwarded_for")

    @strip_x_forwarded_for.setter
    def strip_x_forwarded_for(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strip_x_forwarded_for", value)

    @property
    @pulumi.getter(name="switchingProtocols")
    def switching_protocols(self) -> Optional[pulumi.Input[str]]:
        """
        Bypass from scanning, or block a connection that attempts to switch protocol. Valid values: `bypass`, `block`.
        """
        return pulumi.get(self, "switching_protocols")

    @switching_protocols.setter
    def switching_protocols(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switching_protocols", value)

    @property
    @pulumi.getter(name="tcpWindowMaximum")
    def tcp_window_maximum(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum dynamic TCP window size (default = 8MB).
        """
        return pulumi.get(self, "tcp_window_maximum")

    @tcp_window_maximum.setter
    def tcp_window_maximum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_maximum", value)

    @property
    @pulumi.getter(name="tcpWindowMinimum")
    def tcp_window_minimum(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum dynamic TCP window size (default = 128KB).
        """
        return pulumi.get(self, "tcp_window_minimum")

    @tcp_window_minimum.setter
    def tcp_window_minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_minimum", value)

    @property
    @pulumi.getter(name="tcpWindowSize")
    def tcp_window_size(self) -> Optional[pulumi.Input[int]]:
        """
        Set TCP static window size (default = 256KB).
        """
        return pulumi.get(self, "tcp_window_size")

    @tcp_window_size.setter
    def tcp_window_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_size", value)

    @property
    @pulumi.getter(name="tcpWindowType")
    def tcp_window_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specify type of TCP window to use for this protocol.
        """
        return pulumi.get(self, "tcp_window_type")

    @tcp_window_type.setter
    def tcp_window_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_window_type", value)

    @property
    @pulumi.getter(name="tunnelNonHttp")
    def tunnel_non_http(self) -> Optional[pulumi.Input[str]]:
        """
        Configure how to process non-HTTP traffic when a profile configured for HTTP traffic accepts a non-HTTP session. Can occur if an application sends non-HTTP traffic using an HTTP destination port. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tunnel_non_http")

    @tunnel_non_http.setter
    def tunnel_non_http(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_non_http", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        """
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
        """
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)

    @property
    @pulumi.getter(name="unknownHttpVersion")
    def unknown_http_version(self) -> Optional[pulumi.Input[str]]:
        """
        How to handle HTTP sessions that do not comply with HTTP 0.9, 1.0, or 1.1. Valid values: `reject`, `tunnel`, `best-effort`.
        """
        return pulumi.get(self, "unknown_http_version")

    @unknown_http_version.setter
    def unknown_http_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_http_version", value)


@pulumi.input_type
class FirewallProfileProtocolOptionsImapArgs:
    def __init__(__self__, *,
                 inspect_all: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 ssl_offloaded: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] inspect_all: Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] options: One or more options that can be applied to the session. Valid values: `oversize`.
        :param pulumi.Input[int] oversize_limit: Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
        :param pulumi.Input[int] ports: Ports to scan for content (1 - 65535, default = 445).
        :param pulumi.Input[str] proxy_after_tcp_handshake: Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] scan_bzip2: Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_offloaded: SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
        :param pulumi.Input[str] status: Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] uncompressed_nest_limit: Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        :param pulumi.Input[int] uncompressed_oversize_limit: Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
        """
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if ssl_offloaded is not None:
            pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "inspect_all")

    @inspect_all.setter
    def inspect_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspect_all", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        One or more options that can be applied to the session. Valid values: `oversize`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
        """
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        """
        Ports to scan for content (1 - 65535, default = 445).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> Optional[pulumi.Input[str]]:
        """
        SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
        """
        return pulumi.get(self, "ssl_offloaded")

    @ssl_offloaded.setter
    def ssl_offloaded(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_offloaded", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        """
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
        """
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)


@pulumi.input_type
class FirewallProfileProtocolOptionsMailSignatureArgs:
    def __init__(__self__, *,
                 signature: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] signature: Email signature to be added to outgoing email (if the signature contains spaces, enclose with quotation marks).
        :param pulumi.Input[str] status: Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
        """
        if signature is not None:
            pulumi.set(__self__, "signature", signature)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def signature(self) -> Optional[pulumi.Input[str]]:
        """
        Email signature to be added to outgoing email (if the signature contains spaces, enclose with quotation marks).
        """
        return pulumi.get(self, "signature")

    @signature.setter
    def signature(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signature", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class FirewallProfileProtocolOptionsMapiArgs:
    def __init__(__self__, *,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] options: One or more options that can be applied to the session. Valid values: `oversize`.
        :param pulumi.Input[int] oversize_limit: Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
        :param pulumi.Input[int] ports: Ports to scan for content (1 - 65535, default = 445).
        :param pulumi.Input[str] scan_bzip2: Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] uncompressed_nest_limit: Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        :param pulumi.Input[int] uncompressed_oversize_limit: Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
        """
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        One or more options that can be applied to the session. Valid values: `oversize`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
        """
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        """
        Ports to scan for content (1 - 65535, default = 445).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        """
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
        """
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)


@pulumi.input_type
class FirewallProfileProtocolOptionsNntpArgs:
    def __init__(__self__, *,
                 inspect_all: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] inspect_all: Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] options: One or more options that can be applied to the session. Valid values: `oversize`.
        :param pulumi.Input[int] oversize_limit: Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
        :param pulumi.Input[int] ports: Ports to scan for content (1 - 65535, default = 445).
        :param pulumi.Input[str] proxy_after_tcp_handshake: Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] scan_bzip2: Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] uncompressed_nest_limit: Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        :param pulumi.Input[int] uncompressed_oversize_limit: Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
        """
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "inspect_all")

    @inspect_all.setter
    def inspect_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspect_all", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        One or more options that can be applied to the session. Valid values: `oversize`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
        """
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        """
        Ports to scan for content (1 - 65535, default = 445).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        """
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
        """
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)


@pulumi.input_type
class FirewallProfileProtocolOptionsPop3Args:
    def __init__(__self__, *,
                 inspect_all: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 ssl_offloaded: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] inspect_all: Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] options: One or more options that can be applied to the session. Valid values: `oversize`.
        :param pulumi.Input[int] oversize_limit: Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
        :param pulumi.Input[int] ports: Ports to scan for content (1 - 65535, default = 445).
        :param pulumi.Input[str] proxy_after_tcp_handshake: Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] scan_bzip2: Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_offloaded: SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
        :param pulumi.Input[str] status: Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] uncompressed_nest_limit: Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        :param pulumi.Input[int] uncompressed_oversize_limit: Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
        """
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if ssl_offloaded is not None:
            pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "inspect_all")

    @inspect_all.setter
    def inspect_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspect_all", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        One or more options that can be applied to the session. Valid values: `oversize`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
        """
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        """
        Ports to scan for content (1 - 65535, default = 445).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> Optional[pulumi.Input[str]]:
        """
        SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
        """
        return pulumi.get(self, "ssl_offloaded")

    @ssl_offloaded.setter
    def ssl_offloaded(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_offloaded", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        """
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
        """
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)


@pulumi.input_type
class FirewallProfileProtocolOptionsSmtpArgs:
    def __init__(__self__, *,
                 inspect_all: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 server_busy: Optional[pulumi.Input[str]] = None,
                 ssl_offloaded: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] inspect_all: Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] options: One or more options that can be applied to the session. Valid values: `oversize`.
        :param pulumi.Input[int] oversize_limit: Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
        :param pulumi.Input[int] ports: Ports to scan for content (1 - 65535, default = 445).
        :param pulumi.Input[str] proxy_after_tcp_handshake: Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] scan_bzip2: Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] server_busy: Enable/disable SMTP server busy when server not available. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_offloaded: SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
        :param pulumi.Input[str] status: Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] uncompressed_nest_limit: Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        :param pulumi.Input[int] uncompressed_oversize_limit: Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
        """
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if server_busy is not None:
            pulumi.set(__self__, "server_busy", server_busy)
        if ssl_offloaded is not None:
            pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the inspection of all ports for the protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "inspect_all")

    @inspect_all.setter
    def inspect_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspect_all", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        One or more options that can be applied to the session. Valid values: `oversize`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
        """
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        """
        Ports to scan for content (1 - 65535, default = 445).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter(name="serverBusy")
    def server_busy(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SMTP server busy when server not available. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "server_busy")

    @server_busy.setter
    def server_busy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_busy", value)

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> Optional[pulumi.Input[str]]:
        """
        SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
        """
        return pulumi.get(self, "ssl_offloaded")

    @ssl_offloaded.setter
    def ssl_offloaded(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_offloaded", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable adding an email signature to SMTP email messages as they pass through the FortiGate. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        """
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
        """
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)


@pulumi.input_type
class FirewallProfileProtocolOptionsSshArgs:
    def __init__(__self__, *,
                 comfort_amount: Optional[pulumi.Input[int]] = None,
                 comfort_interval: Optional[pulumi.Input[int]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 oversize_limit: Optional[pulumi.Input[int]] = None,
                 scan_bzip2: Optional[pulumi.Input[str]] = None,
                 ssl_offloaded: Optional[pulumi.Input[str]] = None,
                 stream_based_uncompressed_limit: Optional[pulumi.Input[int]] = None,
                 tcp_window_maximum: Optional[pulumi.Input[int]] = None,
                 tcp_window_minimum: Optional[pulumi.Input[int]] = None,
                 tcp_window_size: Optional[pulumi.Input[int]] = None,
                 tcp_window_type: Optional[pulumi.Input[str]] = None,
                 uncompressed_nest_limit: Optional[pulumi.Input[int]] = None,
                 uncompressed_oversize_limit: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] comfort_amount: Amount of data to send in a transmission for client comforting (1 - 65535 bytes, default = 1).
        :param pulumi.Input[int] comfort_interval: Period of time between start, or last transmission, and the next client comfort transmission of data (1 - 900 sec, default = 10).
        :param pulumi.Input[str] options: One or more options that can be applied to the session. Valid values: `oversize`.
        :param pulumi.Input[int] oversize_limit: Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
        :param pulumi.Input[str] scan_bzip2: Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_offloaded: SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
        :param pulumi.Input[int] stream_based_uncompressed_limit: Maximum stream-based uncompressed data size that will be scanned (MB, 0 = unlimited (default).  Stream-based uncompression used only under certain conditions.).
        :param pulumi.Input[int] tcp_window_maximum: Maximum dynamic TCP window size (default = 8MB).
        :param pulumi.Input[int] tcp_window_minimum: Minimum dynamic TCP window size (default = 128KB).
        :param pulumi.Input[int] tcp_window_size: Set TCP static window size (default = 256KB).
        :param pulumi.Input[str] tcp_window_type: Specify type of TCP window to use for this protocol.
        :param pulumi.Input[int] uncompressed_nest_limit: Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        :param pulumi.Input[int] uncompressed_oversize_limit: Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
        """
        if comfort_amount is not None:
            pulumi.set(__self__, "comfort_amount", comfort_amount)
        if comfort_interval is not None:
            pulumi.set(__self__, "comfort_interval", comfort_interval)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if oversize_limit is not None:
            pulumi.set(__self__, "oversize_limit", oversize_limit)
        if scan_bzip2 is not None:
            pulumi.set(__self__, "scan_bzip2", scan_bzip2)
        if ssl_offloaded is not None:
            pulumi.set(__self__, "ssl_offloaded", ssl_offloaded)
        if stream_based_uncompressed_limit is not None:
            pulumi.set(__self__, "stream_based_uncompressed_limit", stream_based_uncompressed_limit)
        if tcp_window_maximum is not None:
            pulumi.set(__self__, "tcp_window_maximum", tcp_window_maximum)
        if tcp_window_minimum is not None:
            pulumi.set(__self__, "tcp_window_minimum", tcp_window_minimum)
        if tcp_window_size is not None:
            pulumi.set(__self__, "tcp_window_size", tcp_window_size)
        if tcp_window_type is not None:
            pulumi.set(__self__, "tcp_window_type", tcp_window_type)
        if uncompressed_nest_limit is not None:
            pulumi.set(__self__, "uncompressed_nest_limit", uncompressed_nest_limit)
        if uncompressed_oversize_limit is not None:
            pulumi.set(__self__, "uncompressed_oversize_limit", uncompressed_oversize_limit)

    @property
    @pulumi.getter(name="comfortAmount")
    def comfort_amount(self) -> Optional[pulumi.Input[int]]:
        """
        Amount of data to send in a transmission for client comforting (1 - 65535 bytes, default = 1).
        """
        return pulumi.get(self, "comfort_amount")

    @comfort_amount.setter
    def comfort_amount(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "comfort_amount", value)

    @property
    @pulumi.getter(name="comfortInterval")
    def comfort_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Period of time between start, or last transmission, and the next client comfort transmission of data (1 - 900 sec, default = 10).
        """
        return pulumi.get(self, "comfort_interval")

    @comfort_interval.setter
    def comfort_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "comfort_interval", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        One or more options that can be applied to the session. Valid values: `oversize`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="oversizeLimit")
    def oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory file size that can be scanned (1 - 383 MB, default = 10).
        """
        return pulumi.get(self, "oversize_limit")

    @oversize_limit.setter
    def oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "oversize_limit", value)

    @property
    @pulumi.getter(name="scanBzip2")
    def scan_bzip2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable scanning of BZip2 compressed files. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_bzip2")

    @scan_bzip2.setter
    def scan_bzip2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_bzip2", value)

    @property
    @pulumi.getter(name="sslOffloaded")
    def ssl_offloaded(self) -> Optional[pulumi.Input[str]]:
        """
        SSL decryption and encryption performed by an external device. Valid values: `no`, `yes`.
        """
        return pulumi.get(self, "ssl_offloaded")

    @ssl_offloaded.setter
    def ssl_offloaded(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_offloaded", value)

    @property
    @pulumi.getter(name="streamBasedUncompressedLimit")
    def stream_based_uncompressed_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum stream-based uncompressed data size that will be scanned (MB, 0 = unlimited (default).  Stream-based uncompression used only under certain conditions.).
        """
        return pulumi.get(self, "stream_based_uncompressed_limit")

    @stream_based_uncompressed_limit.setter
    def stream_based_uncompressed_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stream_based_uncompressed_limit", value)

    @property
    @pulumi.getter(name="tcpWindowMaximum")
    def tcp_window_maximum(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum dynamic TCP window size (default = 8MB).
        """
        return pulumi.get(self, "tcp_window_maximum")

    @tcp_window_maximum.setter
    def tcp_window_maximum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_maximum", value)

    @property
    @pulumi.getter(name="tcpWindowMinimum")
    def tcp_window_minimum(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum dynamic TCP window size (default = 128KB).
        """
        return pulumi.get(self, "tcp_window_minimum")

    @tcp_window_minimum.setter
    def tcp_window_minimum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_minimum", value)

    @property
    @pulumi.getter(name="tcpWindowSize")
    def tcp_window_size(self) -> Optional[pulumi.Input[int]]:
        """
        Set TCP static window size (default = 256KB).
        """
        return pulumi.get(self, "tcp_window_size")

    @tcp_window_size.setter
    def tcp_window_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_window_size", value)

    @property
    @pulumi.getter(name="tcpWindowType")
    def tcp_window_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specify type of TCP window to use for this protocol.
        """
        return pulumi.get(self, "tcp_window_type")

    @tcp_window_type.setter
    def tcp_window_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_window_type", value)

    @property
    @pulumi.getter(name="uncompressedNestLimit")
    def uncompressed_nest_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum nested levels of compression that can be uncompressed and scanned (2 - 100, default = 12).
        """
        return pulumi.get(self, "uncompressed_nest_limit")

    @uncompressed_nest_limit.setter
    def uncompressed_nest_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_nest_limit", value)

    @property
    @pulumi.getter(name="uncompressedOversizeLimit")
    def uncompressed_oversize_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum in-memory uncompressed file size that can be scanned (0 - 383 MB, 0 = unlimited, default = 10).
        """
        return pulumi.get(self, "uncompressed_oversize_limit")

    @uncompressed_oversize_limit.setter
    def uncompressed_oversize_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uncompressed_oversize_limit", value)


@pulumi.input_type
class FirewallProxyAddressCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallProxyAddressHeaderGroupArgs:
    def __init__(__self__, *,
                 case_sensitivity: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 header_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] case_sensitivity: Case sensitivity in pattern. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] header: HTTP header regular expression.
        :param pulumi.Input[str] header_name: HTTP header.
        :param pulumi.Input[int] id: ID.
        """
        if case_sensitivity is not None:
            pulumi.set(__self__, "case_sensitivity", case_sensitivity)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="caseSensitivity")
    def case_sensitivity(self) -> Optional[pulumi.Input[str]]:
        """
        Case sensitivity in pattern. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "case_sensitivity")

    @case_sensitivity.setter
    def case_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "case_sensitivity", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP header regular expression.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP header.
        """
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallProxyAddressTaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallProxyAddressTaggingTagArgs']]]] = None):
        """
        :param pulumi.Input[str] category: Tag category.
        :param pulumi.Input[str] name: Tag name.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallProxyAddressTaggingTagArgs']]] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallProxyAddressTaggingTagArgs']]]]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallProxyAddressTaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class FirewallProxyAddressTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyAddrgrpMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyAddrgrpTaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallProxyAddrgrpTaggingTagArgs']]]] = None):
        """
        :param pulumi.Input[str] category: Tag category.
        :param pulumi.Input[str] name: Tag name.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallProxyAddrgrpTaggingTagArgs']]] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallProxyAddrgrpTaggingTagArgs']]]]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallProxyAddrgrpTaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class FirewallProxyAddrgrpTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyAccessProxy6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyAccessProxyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyDstaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyDstintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyInternetServiceCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyInternetServiceCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyInternetServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyInternetServiceIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Internet Service ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Internet Service ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallProxyPolicyInternetServiceNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyPoolnameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicySrcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicySrcintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallProxyPolicyZtnaEmsTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallRegionCityArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: City ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        City ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallScheduleGroupMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Schedule name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyAppCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: URL category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL category ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallSecurityPolicyAppGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyApplicationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: URL category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL category ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallSecurityPolicyDstaddr4Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyDstaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyDstintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyFssoGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetServiceCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetServiceCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetServiceIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: URL category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL category ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetServiceNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetServiceSrcCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetServiceSrcCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetServiceSrcGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetServiceSrcIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: URL category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL category ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallSecurityPolicyInternetServiceSrcNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicySeqStatePolicyListArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policyid", value)


@pulumi.input_type
class FirewallSecurityPolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicySortStatePolicyListArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[str]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policyid", value)


@pulumi.input_type
class FirewallSecurityPolicySrcaddr4Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicySrcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicySrcintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSecurityPolicyUrlCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: URL category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL category ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallSecurityPolicyUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Names of FSSO groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of FSSO groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallServiceCustomAppCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Application id.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Application id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallServiceCustomApplicationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Application id.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Application id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallServiceGroupMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyAppCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: URL category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL category ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallShapingPolicyAppGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyApplicationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: URL category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL category ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallShapingPolicyDstaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyDstintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyInternetServiceCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyInternetServiceCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyInternetServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyInternetServiceIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: URL category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL category ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallShapingPolicyInternetServiceNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyInternetServiceSrcCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyInternetServiceSrcCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyInternetServiceSrcGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyInternetServiceSrcIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: URL category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL category ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallShapingPolicyInternetServiceSrcNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicySrcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicySrcintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingPolicyUrlCategoryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: URL category ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL category ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallShapingPolicyUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallShapingProfileShapingEntryArgs:
    def __init__(__self__, *,
                 burst_in_msec: Optional[pulumi.Input[int]] = None,
                 cburst_in_msec: Optional[pulumi.Input[int]] = None,
                 class_id: Optional[pulumi.Input[int]] = None,
                 guaranteed_bandwidth_percentage: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 max: Optional[pulumi.Input[int]] = None,
                 maximum_bandwidth_percentage: Optional[pulumi.Input[int]] = None,
                 min: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 red_probability: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] burst_in_msec: Number of bytes that can be burst at maximum-bandwidth speed. Formula: burst = maximum-bandwidth*burst-in-msec.
        :param pulumi.Input[int] cburst_in_msec: Number of bytes that can be burst as fast as the interface can transmit. Formula: cburst = maximum-bandwidth*cburst-in-msec.
        :param pulumi.Input[int] class_id: Class ID.
        :param pulumi.Input[int] guaranteed_bandwidth_percentage: Guaranteed bandwith in percentage.
        :param pulumi.Input[int] id: ID number.
        :param pulumi.Input[int] limit: Hard limit on the real queue size in packets.
        :param pulumi.Input[int] max: Average queue size in packets at which RED drop probability is maximal.
        :param pulumi.Input[int] maximum_bandwidth_percentage: Maximum bandwith in percentage.
        :param pulumi.Input[int] min: Average queue size in packets at which RED drop becomes a possibility.
        :param pulumi.Input[str] priority: Priority.
        :param pulumi.Input[int] red_probability: Maximum probability (in percentage) for RED marking.
        """
        if burst_in_msec is not None:
            pulumi.set(__self__, "burst_in_msec", burst_in_msec)
        if cburst_in_msec is not None:
            pulumi.set(__self__, "cburst_in_msec", cburst_in_msec)
        if class_id is not None:
            pulumi.set(__self__, "class_id", class_id)
        if guaranteed_bandwidth_percentage is not None:
            pulumi.set(__self__, "guaranteed_bandwidth_percentage", guaranteed_bandwidth_percentage)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if maximum_bandwidth_percentage is not None:
            pulumi.set(__self__, "maximum_bandwidth_percentage", maximum_bandwidth_percentage)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if red_probability is not None:
            pulumi.set(__self__, "red_probability", red_probability)

    @property
    @pulumi.getter(name="burstInMsec")
    def burst_in_msec(self) -> Optional[pulumi.Input[int]]:
        """
        Number of bytes that can be burst at maximum-bandwidth speed. Formula: burst = maximum-bandwidth*burst-in-msec.
        """
        return pulumi.get(self, "burst_in_msec")

    @burst_in_msec.setter
    def burst_in_msec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "burst_in_msec", value)

    @property
    @pulumi.getter(name="cburstInMsec")
    def cburst_in_msec(self) -> Optional[pulumi.Input[int]]:
        """
        Number of bytes that can be burst as fast as the interface can transmit. Formula: cburst = maximum-bandwidth*cburst-in-msec.
        """
        return pulumi.get(self, "cburst_in_msec")

    @cburst_in_msec.setter
    def cburst_in_msec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cburst_in_msec", value)

    @property
    @pulumi.getter(name="classId")
    def class_id(self) -> Optional[pulumi.Input[int]]:
        """
        Class ID.
        """
        return pulumi.get(self, "class_id")

    @class_id.setter
    def class_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "class_id", value)

    @property
    @pulumi.getter(name="guaranteedBandwidthPercentage")
    def guaranteed_bandwidth_percentage(self) -> Optional[pulumi.Input[int]]:
        """
        Guaranteed bandwith in percentage.
        """
        return pulumi.get(self, "guaranteed_bandwidth_percentage")

    @guaranteed_bandwidth_percentage.setter
    def guaranteed_bandwidth_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "guaranteed_bandwidth_percentage", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID number.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        Hard limit on the real queue size in packets.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[int]]:
        """
        Average queue size in packets at which RED drop probability is maximal.
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter(name="maximumBandwidthPercentage")
    def maximum_bandwidth_percentage(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum bandwith in percentage.
        """
        return pulumi.get(self, "maximum_bandwidth_percentage")

    @maximum_bandwidth_percentage.setter
    def maximum_bandwidth_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_bandwidth_percentage", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[int]]:
        """
        Average queue size in packets at which RED drop becomes a possibility.
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="redProbability")
    def red_probability(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum probability (in percentage) for RED marking.
        """
        return pulumi.get(self, "red_probability")

    @red_probability.setter
    def red_probability(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "red_probability", value)


@pulumi.input_type
class FirewallSnifferAnomalyArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 quarantine_expiry: Optional[pulumi.Input[str]] = None,
                 quarantine_log: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 threshold: Optional[pulumi.Input[int]] = None,
                 thresholddefault: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] action: Action taken when the threshold is reached.
        :param pulumi.Input[str] log: Enable/disable anomaly logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Anomaly name.
        :param pulumi.Input[str] quarantine: Quarantine method. Valid values: `none`, `attacker`.
        :param pulumi.Input[str] quarantine_expiry: Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
        :param pulumi.Input[str] quarantine_log: Enable/disable quarantine logging. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] status: Enable/disable this anomaly. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] threshold: Anomaly threshold. Number of detected instances per minute that triggers the anomaly action.
        :param pulumi.Input[int] thresholddefault: Number of detected instances per minute which triggers action (1 - 2147483647, default = 1000). Note that each anomaly has a different threshold value assigned to it.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if thresholddefault is not None:
            pulumi.set(__self__, "thresholddefault", thresholddefault)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action taken when the threshold is reached.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable anomaly logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Anomaly name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine method. Valid values: `none`, `attacker`.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[pulumi.Input[str]]:
        """
        Duration of quarantine. (Format ###d##h##m, minimum 1m, maximum 364d23h59m, default = 5m). Requires quarantine set to attacker.
        """
        return pulumi.get(self, "quarantine_expiry")

    @quarantine_expiry.setter
    def quarantine_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_expiry", value)

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable quarantine logging. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine_log")

    @quarantine_log.setter
    def quarantine_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_log", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this anomaly. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Anomaly threshold. Number of detected instances per minute that triggers the anomaly action.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter
    def thresholddefault(self) -> Optional[pulumi.Input[int]]:
        """
        Number of detected instances per minute which triggers action (1 - 2147483647, default = 1000). Note that each anomaly has a different threshold value assigned to it.
        """
        return pulumi.get(self, "thresholddefault")

    @thresholddefault.setter
    def thresholddefault(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "thresholddefault", value)


@pulumi.input_type
class FirewallSnifferIpThreatfeedArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Anomaly name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Anomaly name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallSslSshProfileDotArgs:
    def __init__(__self__, *,
                 cert_validation_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_timeout: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 expired_server_cert: Optional[pulumi.Input[str]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 revoked_server_cert: Optional[pulumi.Input[str]] = None,
                 sni_server_cert_check: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_cipher: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_negotiation: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_version: Optional[pulumi.Input[str]] = None,
                 untrusted_server_cert: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cert_validation_failure: Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] cert_validation_timeout: Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] client_certificate: Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] expired_server_cert: Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] proxy_after_tcp_handshake: Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] revoked_server_cert: Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] sni_server_cert_check: Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        :param pulumi.Input[str] status: Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        :param pulumi.Input[str] unsupported_ssl_cipher: Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_negotiation: Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_version: Action based on the SSL version used being unsupported.
        :param pulumi.Input[str] untrusted_server_cert: Action based on server certificate is not issued by a trusted CA. Valid values: `allow`, `block`, `ignore`.
        """
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_failure")

    @cert_validation_failure.setter
    def cert_validation_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_failure", value)

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_timeout")

    @cert_validation_timeout.setter
    def cert_validation_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_timeout", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "expired_server_cert")

    @expired_server_cert.setter
    def expired_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expired_server_cert", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "revoked_server_cert")

    @revoked_server_cert.setter
    def revoked_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revoked_server_cert", value)

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[pulumi.Input[str]]:
        """
        Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        """
        return pulumi.get(self, "sni_server_cert_check")

    @sni_server_cert_check.setter
    def sni_server_cert_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_server_cert_check", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_cipher")

    @unsupported_ssl_cipher.setter
    def unsupported_ssl_cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_cipher", value)

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @unsupported_ssl_negotiation.setter
    def unsupported_ssl_negotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_negotiation", value)

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL version used being unsupported.
        """
        return pulumi.get(self, "unsupported_ssl_version")

    @unsupported_ssl_version.setter
    def unsupported_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_version", value)

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is not issued by a trusted CA. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "untrusted_server_cert")

    @untrusted_server_cert.setter
    def untrusted_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "untrusted_server_cert", value)


@pulumi.input_type
class FirewallSslSshProfileFtpsArgs:
    def __init__(__self__, *,
                 cert_validation_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_timeout: Optional[pulumi.Input[str]] = None,
                 client_cert_request: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 expired_server_cert: Optional[pulumi.Input[str]] = None,
                 invalid_server_cert: Optional[pulumi.Input[str]] = None,
                 min_allowed_ssl_version: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 revoked_server_cert: Optional[pulumi.Input[str]] = None,
                 sni_server_cert_check: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_cipher: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_negotiation: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_version: Optional[pulumi.Input[str]] = None,
                 untrusted_server_cert: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cert_validation_failure: Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] cert_validation_timeout: Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] client_cert_request: Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] client_certificate: Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] expired_server_cert: Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] invalid_server_cert: Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
        :param pulumi.Input[str] min_allowed_ssl_version: Minimum SSL version to be allowed. Valid values: `ssl-3.0`, `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        :param pulumi.Input[str] ports: Ports to use for scanning (1 - 65535, default = 443).
        :param pulumi.Input[str] revoked_server_cert: Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] sni_server_cert_check: Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        :param pulumi.Input[str] status: Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        :param pulumi.Input[str] unsupported_ssl: Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] unsupported_ssl_cipher: Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_negotiation: Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_version: Action based on the SSL version used being unsupported.
        :param pulumi.Input[str] untrusted_server_cert: Action based on server certificate is not issued by a trusted CA. Valid values: `allow`, `block`, `ignore`.
        """
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_cert_request is not None:
            pulumi.set(__self__, "client_cert_request", client_cert_request)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if invalid_server_cert is not None:
            pulumi.set(__self__, "invalid_server_cert", invalid_server_cert)
        if min_allowed_ssl_version is not None:
            pulumi.set(__self__, "min_allowed_ssl_version", min_allowed_ssl_version)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_ssl is not None:
            pulumi.set(__self__, "unsupported_ssl", unsupported_ssl)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_failure")

    @cert_validation_failure.setter
    def cert_validation_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_failure", value)

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_timeout")

    @cert_validation_timeout.setter
    def cert_validation_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_timeout", value)

    @property
    @pulumi.getter(name="clientCertRequest")
    def client_cert_request(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_cert_request")

    @client_cert_request.setter
    def client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert_request", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "expired_server_cert")

    @expired_server_cert.setter
    def expired_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expired_server_cert", value)

    @property
    @pulumi.getter(name="invalidServerCert")
    def invalid_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "invalid_server_cert")

    @invalid_server_cert.setter
    def invalid_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_server_cert", value)

    @property
    @pulumi.getter(name="minAllowedSslVersion")
    def min_allowed_ssl_version(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum SSL version to be allowed. Valid values: `ssl-3.0`, `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "min_allowed_ssl_version")

    @min_allowed_ssl_version.setter
    def min_allowed_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_allowed_ssl_version", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        """
        Ports to use for scanning (1 - 65535, default = 443).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "revoked_server_cert")

    @revoked_server_cert.setter
    def revoked_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revoked_server_cert", value)

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[pulumi.Input[str]]:
        """
        Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        """
        return pulumi.get(self, "sni_server_cert_check")

    @sni_server_cert_check.setter
    def sni_server_cert_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_server_cert_check", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="unsupportedSsl")
    def unsupported_ssl(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl")

    @unsupported_ssl.setter
    def unsupported_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl", value)

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_cipher")

    @unsupported_ssl_cipher.setter
    def unsupported_ssl_cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_cipher", value)

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @unsupported_ssl_negotiation.setter
    def unsupported_ssl_negotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_negotiation", value)

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL version used being unsupported.
        """
        return pulumi.get(self, "unsupported_ssl_version")

    @unsupported_ssl_version.setter
    def unsupported_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_version", value)

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is not issued by a trusted CA. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "untrusted_server_cert")

    @untrusted_server_cert.setter
    def untrusted_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "untrusted_server_cert", value)


@pulumi.input_type
class FirewallSslSshProfileHttpsArgs:
    def __init__(__self__, *,
                 cert_probe_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_timeout: Optional[pulumi.Input[str]] = None,
                 client_cert_request: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 expired_server_cert: Optional[pulumi.Input[str]] = None,
                 invalid_server_cert: Optional[pulumi.Input[str]] = None,
                 min_allowed_ssl_version: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 revoked_server_cert: Optional[pulumi.Input[str]] = None,
                 sni_server_cert_check: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_cipher: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_negotiation: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_version: Optional[pulumi.Input[str]] = None,
                 untrusted_server_cert: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cert_probe_failure: Action based on certificate probe failure. Valid values: `allow`, `block`.
        :param pulumi.Input[str] cert_validation_failure: Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] cert_validation_timeout: Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] client_cert_request: Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] client_certificate: Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] expired_server_cert: Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] invalid_server_cert: Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
        :param pulumi.Input[str] min_allowed_ssl_version: Minimum SSL version to be allowed. Valid values: `ssl-3.0`, `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        :param pulumi.Input[str] ports: Ports to use for scanning (1 - 65535, default = 443).
        :param pulumi.Input[str] proxy_after_tcp_handshake: Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] revoked_server_cert: Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] sni_server_cert_check: Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        :param pulumi.Input[str] status: Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        :param pulumi.Input[str] unsupported_ssl: Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] unsupported_ssl_cipher: Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_negotiation: Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_version: Action based on the SSL version used being unsupported.
        :param pulumi.Input[str] untrusted_server_cert: Action based on server certificate is not issued by a trusted CA. Valid values: `allow`, `block`, `ignore`.
        """
        if cert_probe_failure is not None:
            pulumi.set(__self__, "cert_probe_failure", cert_probe_failure)
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_cert_request is not None:
            pulumi.set(__self__, "client_cert_request", client_cert_request)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if invalid_server_cert is not None:
            pulumi.set(__self__, "invalid_server_cert", invalid_server_cert)
        if min_allowed_ssl_version is not None:
            pulumi.set(__self__, "min_allowed_ssl_version", min_allowed_ssl_version)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_ssl is not None:
            pulumi.set(__self__, "unsupported_ssl", unsupported_ssl)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certProbeFailure")
    def cert_probe_failure(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate probe failure. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "cert_probe_failure")

    @cert_probe_failure.setter
    def cert_probe_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_probe_failure", value)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_failure")

    @cert_validation_failure.setter
    def cert_validation_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_failure", value)

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_timeout")

    @cert_validation_timeout.setter
    def cert_validation_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_timeout", value)

    @property
    @pulumi.getter(name="clientCertRequest")
    def client_cert_request(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_cert_request")

    @client_cert_request.setter
    def client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert_request", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "expired_server_cert")

    @expired_server_cert.setter
    def expired_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expired_server_cert", value)

    @property
    @pulumi.getter(name="invalidServerCert")
    def invalid_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "invalid_server_cert")

    @invalid_server_cert.setter
    def invalid_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_server_cert", value)

    @property
    @pulumi.getter(name="minAllowedSslVersion")
    def min_allowed_ssl_version(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum SSL version to be allowed. Valid values: `ssl-3.0`, `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "min_allowed_ssl_version")

    @min_allowed_ssl_version.setter
    def min_allowed_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_allowed_ssl_version", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        """
        Ports to use for scanning (1 - 65535, default = 443).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "revoked_server_cert")

    @revoked_server_cert.setter
    def revoked_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revoked_server_cert", value)

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[pulumi.Input[str]]:
        """
        Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        """
        return pulumi.get(self, "sni_server_cert_check")

    @sni_server_cert_check.setter
    def sni_server_cert_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_server_cert_check", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="unsupportedSsl")
    def unsupported_ssl(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl")

    @unsupported_ssl.setter
    def unsupported_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl", value)

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_cipher")

    @unsupported_ssl_cipher.setter
    def unsupported_ssl_cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_cipher", value)

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @unsupported_ssl_negotiation.setter
    def unsupported_ssl_negotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_negotiation", value)

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL version used being unsupported.
        """
        return pulumi.get(self, "unsupported_ssl_version")

    @unsupported_ssl_version.setter
    def unsupported_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_version", value)

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is not issued by a trusted CA. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "untrusted_server_cert")

    @untrusted_server_cert.setter
    def untrusted_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "untrusted_server_cert", value)


@pulumi.input_type
class FirewallSslSshProfileImapsArgs:
    def __init__(__self__, *,
                 cert_validation_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_timeout: Optional[pulumi.Input[str]] = None,
                 client_cert_request: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 expired_server_cert: Optional[pulumi.Input[str]] = None,
                 invalid_server_cert: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 revoked_server_cert: Optional[pulumi.Input[str]] = None,
                 sni_server_cert_check: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_cipher: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_negotiation: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_version: Optional[pulumi.Input[str]] = None,
                 untrusted_server_cert: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cert_validation_failure: Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] cert_validation_timeout: Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] client_cert_request: Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] client_certificate: Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] expired_server_cert: Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] invalid_server_cert: Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
        :param pulumi.Input[str] ports: Ports to use for scanning (1 - 65535, default = 443).
        :param pulumi.Input[str] proxy_after_tcp_handshake: Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] revoked_server_cert: Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] sni_server_cert_check: Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        :param pulumi.Input[str] status: Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        :param pulumi.Input[str] unsupported_ssl: Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] unsupported_ssl_cipher: Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_negotiation: Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_version: Action based on the SSL version used being unsupported.
        :param pulumi.Input[str] untrusted_server_cert: Action based on server certificate is not issued by a trusted CA. Valid values: `allow`, `block`, `ignore`.
        """
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_cert_request is not None:
            pulumi.set(__self__, "client_cert_request", client_cert_request)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if invalid_server_cert is not None:
            pulumi.set(__self__, "invalid_server_cert", invalid_server_cert)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_ssl is not None:
            pulumi.set(__self__, "unsupported_ssl", unsupported_ssl)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_failure")

    @cert_validation_failure.setter
    def cert_validation_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_failure", value)

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_timeout")

    @cert_validation_timeout.setter
    def cert_validation_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_timeout", value)

    @property
    @pulumi.getter(name="clientCertRequest")
    def client_cert_request(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_cert_request")

    @client_cert_request.setter
    def client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert_request", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "expired_server_cert")

    @expired_server_cert.setter
    def expired_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expired_server_cert", value)

    @property
    @pulumi.getter(name="invalidServerCert")
    def invalid_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "invalid_server_cert")

    @invalid_server_cert.setter
    def invalid_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_server_cert", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        """
        Ports to use for scanning (1 - 65535, default = 443).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "revoked_server_cert")

    @revoked_server_cert.setter
    def revoked_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revoked_server_cert", value)

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[pulumi.Input[str]]:
        """
        Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        """
        return pulumi.get(self, "sni_server_cert_check")

    @sni_server_cert_check.setter
    def sni_server_cert_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_server_cert_check", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="unsupportedSsl")
    def unsupported_ssl(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl")

    @unsupported_ssl.setter
    def unsupported_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl", value)

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_cipher")

    @unsupported_ssl_cipher.setter
    def unsupported_ssl_cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_cipher", value)

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @unsupported_ssl_negotiation.setter
    def unsupported_ssl_negotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_negotiation", value)

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL version used being unsupported.
        """
        return pulumi.get(self, "unsupported_ssl_version")

    @unsupported_ssl_version.setter
    def unsupported_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_version", value)

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is not issued by a trusted CA. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "untrusted_server_cert")

    @untrusted_server_cert.setter
    def untrusted_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "untrusted_server_cert", value)


@pulumi.input_type
class FirewallSslSshProfilePop3sArgs:
    def __init__(__self__, *,
                 cert_validation_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_timeout: Optional[pulumi.Input[str]] = None,
                 client_cert_request: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 expired_server_cert: Optional[pulumi.Input[str]] = None,
                 invalid_server_cert: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 revoked_server_cert: Optional[pulumi.Input[str]] = None,
                 sni_server_cert_check: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_cipher: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_negotiation: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_version: Optional[pulumi.Input[str]] = None,
                 untrusted_server_cert: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cert_validation_failure: Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] cert_validation_timeout: Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] client_cert_request: Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] client_certificate: Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] expired_server_cert: Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] invalid_server_cert: Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
        :param pulumi.Input[str] ports: Ports to use for scanning (1 - 65535, default = 443).
        :param pulumi.Input[str] proxy_after_tcp_handshake: Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] revoked_server_cert: Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] sni_server_cert_check: Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        :param pulumi.Input[str] status: Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        :param pulumi.Input[str] unsupported_ssl: Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] unsupported_ssl_cipher: Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_negotiation: Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_version: Action based on the SSL version used being unsupported.
        :param pulumi.Input[str] untrusted_server_cert: Action based on server certificate is not issued by a trusted CA. Valid values: `allow`, `block`, `ignore`.
        """
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_cert_request is not None:
            pulumi.set(__self__, "client_cert_request", client_cert_request)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if invalid_server_cert is not None:
            pulumi.set(__self__, "invalid_server_cert", invalid_server_cert)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_ssl is not None:
            pulumi.set(__self__, "unsupported_ssl", unsupported_ssl)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_failure")

    @cert_validation_failure.setter
    def cert_validation_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_failure", value)

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_timeout")

    @cert_validation_timeout.setter
    def cert_validation_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_timeout", value)

    @property
    @pulumi.getter(name="clientCertRequest")
    def client_cert_request(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_cert_request")

    @client_cert_request.setter
    def client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert_request", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "expired_server_cert")

    @expired_server_cert.setter
    def expired_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expired_server_cert", value)

    @property
    @pulumi.getter(name="invalidServerCert")
    def invalid_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "invalid_server_cert")

    @invalid_server_cert.setter
    def invalid_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_server_cert", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        """
        Ports to use for scanning (1 - 65535, default = 443).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "revoked_server_cert")

    @revoked_server_cert.setter
    def revoked_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revoked_server_cert", value)

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[pulumi.Input[str]]:
        """
        Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        """
        return pulumi.get(self, "sni_server_cert_check")

    @sni_server_cert_check.setter
    def sni_server_cert_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_server_cert_check", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="unsupportedSsl")
    def unsupported_ssl(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl")

    @unsupported_ssl.setter
    def unsupported_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl", value)

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_cipher")

    @unsupported_ssl_cipher.setter
    def unsupported_ssl_cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_cipher", value)

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @unsupported_ssl_negotiation.setter
    def unsupported_ssl_negotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_negotiation", value)

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL version used being unsupported.
        """
        return pulumi.get(self, "unsupported_ssl_version")

    @unsupported_ssl_version.setter
    def unsupported_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_version", value)

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is not issued by a trusted CA. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "untrusted_server_cert")

    @untrusted_server_cert.setter
    def untrusted_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "untrusted_server_cert", value)


@pulumi.input_type
class FirewallSslSshProfileSmtpsArgs:
    def __init__(__self__, *,
                 cert_validation_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_timeout: Optional[pulumi.Input[str]] = None,
                 client_cert_request: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 expired_server_cert: Optional[pulumi.Input[str]] = None,
                 invalid_server_cert: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 revoked_server_cert: Optional[pulumi.Input[str]] = None,
                 sni_server_cert_check: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_cipher: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_negotiation: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_version: Optional[pulumi.Input[str]] = None,
                 untrusted_server_cert: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cert_validation_failure: Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] cert_validation_timeout: Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] client_cert_request: Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] client_certificate: Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] expired_server_cert: Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] invalid_server_cert: Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
        :param pulumi.Input[str] ports: Ports to use for scanning (1 - 65535, default = 443).
        :param pulumi.Input[str] proxy_after_tcp_handshake: Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] revoked_server_cert: Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] sni_server_cert_check: Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        :param pulumi.Input[str] status: Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        :param pulumi.Input[str] unsupported_ssl: Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] unsupported_ssl_cipher: Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_negotiation: Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_version: Action based on the SSL version used being unsupported.
        :param pulumi.Input[str] untrusted_server_cert: Action based on server certificate is not issued by a trusted CA. Valid values: `allow`, `block`, `ignore`.
        """
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_cert_request is not None:
            pulumi.set(__self__, "client_cert_request", client_cert_request)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if invalid_server_cert is not None:
            pulumi.set(__self__, "invalid_server_cert", invalid_server_cert)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_ssl is not None:
            pulumi.set(__self__, "unsupported_ssl", unsupported_ssl)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_failure")

    @cert_validation_failure.setter
    def cert_validation_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_failure", value)

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_timeout")

    @cert_validation_timeout.setter
    def cert_validation_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_timeout", value)

    @property
    @pulumi.getter(name="clientCertRequest")
    def client_cert_request(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_cert_request")

    @client_cert_request.setter
    def client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert_request", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "expired_server_cert")

    @expired_server_cert.setter
    def expired_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expired_server_cert", value)

    @property
    @pulumi.getter(name="invalidServerCert")
    def invalid_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "invalid_server_cert")

    @invalid_server_cert.setter
    def invalid_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_server_cert", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        """
        Ports to use for scanning (1 - 65535, default = 443).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "revoked_server_cert")

    @revoked_server_cert.setter
    def revoked_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revoked_server_cert", value)

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[pulumi.Input[str]]:
        """
        Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        """
        return pulumi.get(self, "sni_server_cert_check")

    @sni_server_cert_check.setter
    def sni_server_cert_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_server_cert_check", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="unsupportedSsl")
    def unsupported_ssl(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl")

    @unsupported_ssl.setter
    def unsupported_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl", value)

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_cipher")

    @unsupported_ssl_cipher.setter
    def unsupported_ssl_cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_cipher", value)

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @unsupported_ssl_negotiation.setter
    def unsupported_ssl_negotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_negotiation", value)

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL version used being unsupported.
        """
        return pulumi.get(self, "unsupported_ssl_version")

    @unsupported_ssl_version.setter
    def unsupported_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_version", value)

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is not issued by a trusted CA. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "untrusted_server_cert")

    @untrusted_server_cert.setter
    def untrusted_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "untrusted_server_cert", value)


@pulumi.input_type
class FirewallSslSshProfileSshArgs:
    def __init__(__self__, *,
                 inspect_all: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 proxy_after_tcp_handshake: Optional[pulumi.Input[str]] = None,
                 ssh_algorithm: Optional[pulumi.Input[str]] = None,
                 ssh_policy_check: Optional[pulumi.Input[str]] = None,
                 ssh_tun_policy_check: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unsupported_version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] inspect_all: Level of SSL inspection. Valid values: `disable`, `deep-inspection`.
        :param pulumi.Input[str] ports: Ports to use for scanning (1 - 65535, default = 443).
        :param pulumi.Input[str] proxy_after_tcp_handshake: Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssh_algorithm: Relative strength of encryption algorithms accepted during negotiation. Valid values: `compatible`, `high-encryption`.
        :param pulumi.Input[str] ssh_policy_check: Enable/disable SSH policy check. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ssh_tun_policy_check: Enable/disable SSH tunnel policy check. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] status: Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        :param pulumi.Input[str] unsupported_version: Action based on SSH version being unsupported. Valid values: `bypass`, `block`.
        """
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proxy_after_tcp_handshake is not None:
            pulumi.set(__self__, "proxy_after_tcp_handshake", proxy_after_tcp_handshake)
        if ssh_algorithm is not None:
            pulumi.set(__self__, "ssh_algorithm", ssh_algorithm)
        if ssh_policy_check is not None:
            pulumi.set(__self__, "ssh_policy_check", ssh_policy_check)
        if ssh_tun_policy_check is not None:
            pulumi.set(__self__, "ssh_tun_policy_check", ssh_tun_policy_check)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unsupported_version is not None:
            pulumi.set(__self__, "unsupported_version", unsupported_version)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[pulumi.Input[str]]:
        """
        Level of SSL inspection. Valid values: `disable`, `deep-inspection`.
        """
        return pulumi.get(self, "inspect_all")

    @inspect_all.setter
    def inspect_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspect_all", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        """
        Ports to use for scanning (1 - 65535, default = 443).
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="proxyAfterTcpHandshake")
    def proxy_after_tcp_handshake(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy traffic after the TCP 3-way handshake has been established (not before). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "proxy_after_tcp_handshake")

    @proxy_after_tcp_handshake.setter
    def proxy_after_tcp_handshake(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_after_tcp_handshake", value)

    @property
    @pulumi.getter(name="sshAlgorithm")
    def ssh_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Relative strength of encryption algorithms accepted during negotiation. Valid values: `compatible`, `high-encryption`.
        """
        return pulumi.get(self, "ssh_algorithm")

    @ssh_algorithm.setter
    def ssh_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_algorithm", value)

    @property
    @pulumi.getter(name="sshPolicyCheck")
    def ssh_policy_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSH policy check. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssh_policy_check")

    @ssh_policy_check.setter
    def ssh_policy_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_policy_check", value)

    @property
    @pulumi.getter(name="sshTunPolicyCheck")
    def ssh_tun_policy_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSH tunnel policy check. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ssh_tun_policy_check")

    @ssh_tun_policy_check.setter
    def ssh_tun_policy_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssh_tun_policy_check", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Configure protocol inspection status. Valid values: `disable`, `deep-inspection`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="unsupportedVersion")
    def unsupported_version(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on SSH version being unsupported. Valid values: `bypass`, `block`.
        """
        return pulumi.get(self, "unsupported_version")

    @unsupported_version.setter
    def unsupported_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_version", value)


@pulumi.input_type
class FirewallSslSshProfileSslArgs:
    def __init__(__self__, *,
                 cert_probe_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_failure: Optional[pulumi.Input[str]] = None,
                 cert_validation_timeout: Optional[pulumi.Input[str]] = None,
                 client_cert_request: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 expired_server_cert: Optional[pulumi.Input[str]] = None,
                 inspect_all: Optional[pulumi.Input[str]] = None,
                 invalid_server_cert: Optional[pulumi.Input[str]] = None,
                 min_allowed_ssl_version: Optional[pulumi.Input[str]] = None,
                 revoked_server_cert: Optional[pulumi.Input[str]] = None,
                 sni_server_cert_check: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_cipher: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_negotiation: Optional[pulumi.Input[str]] = None,
                 unsupported_ssl_version: Optional[pulumi.Input[str]] = None,
                 untrusted_server_cert: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cert_probe_failure: Action based on certificate probe failure. Valid values: `allow`, `block`.
        :param pulumi.Input[str] cert_validation_failure: Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] cert_validation_timeout: Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] client_cert_request: Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] client_certificate: Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] expired_server_cert: Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] inspect_all: Level of SSL inspection. Valid values: `disable`, `deep-inspection`.
        :param pulumi.Input[str] invalid_server_cert: Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
        :param pulumi.Input[str] min_allowed_ssl_version: Minimum SSL version to be allowed. Valid values: `ssl-3.0`, `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        :param pulumi.Input[str] revoked_server_cert: Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        :param pulumi.Input[str] sni_server_cert_check: Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        :param pulumi.Input[str] unsupported_ssl: Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] unsupported_ssl_cipher: Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_negotiation: Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        :param pulumi.Input[str] unsupported_ssl_version: Action based on the SSL version used being unsupported.
        :param pulumi.Input[str] untrusted_server_cert: Action based on server certificate is not issued by a trusted CA. Valid values: `allow`, `block`, `ignore`.
        """
        if cert_probe_failure is not None:
            pulumi.set(__self__, "cert_probe_failure", cert_probe_failure)
        if cert_validation_failure is not None:
            pulumi.set(__self__, "cert_validation_failure", cert_validation_failure)
        if cert_validation_timeout is not None:
            pulumi.set(__self__, "cert_validation_timeout", cert_validation_timeout)
        if client_cert_request is not None:
            pulumi.set(__self__, "client_cert_request", client_cert_request)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if expired_server_cert is not None:
            pulumi.set(__self__, "expired_server_cert", expired_server_cert)
        if inspect_all is not None:
            pulumi.set(__self__, "inspect_all", inspect_all)
        if invalid_server_cert is not None:
            pulumi.set(__self__, "invalid_server_cert", invalid_server_cert)
        if min_allowed_ssl_version is not None:
            pulumi.set(__self__, "min_allowed_ssl_version", min_allowed_ssl_version)
        if revoked_server_cert is not None:
            pulumi.set(__self__, "revoked_server_cert", revoked_server_cert)
        if sni_server_cert_check is not None:
            pulumi.set(__self__, "sni_server_cert_check", sni_server_cert_check)
        if unsupported_ssl is not None:
            pulumi.set(__self__, "unsupported_ssl", unsupported_ssl)
        if unsupported_ssl_cipher is not None:
            pulumi.set(__self__, "unsupported_ssl_cipher", unsupported_ssl_cipher)
        if unsupported_ssl_negotiation is not None:
            pulumi.set(__self__, "unsupported_ssl_negotiation", unsupported_ssl_negotiation)
        if unsupported_ssl_version is not None:
            pulumi.set(__self__, "unsupported_ssl_version", unsupported_ssl_version)
        if untrusted_server_cert is not None:
            pulumi.set(__self__, "untrusted_server_cert", untrusted_server_cert)

    @property
    @pulumi.getter(name="certProbeFailure")
    def cert_probe_failure(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate probe failure. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "cert_probe_failure")

    @cert_probe_failure.setter
    def cert_probe_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_probe_failure", value)

    @property
    @pulumi.getter(name="certValidationFailure")
    def cert_validation_failure(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation failure. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_failure")

    @cert_validation_failure.setter
    def cert_validation_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_failure", value)

    @property
    @pulumi.getter(name="certValidationTimeout")
    def cert_validation_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on certificate validation timeout. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "cert_validation_timeout")

    @cert_validation_timeout.setter
    def cert_validation_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_validation_timeout", value)

    @property
    @pulumi.getter(name="clientCertRequest")
    def client_cert_request(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on client certificate request. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_cert_request")

    @client_cert_request.setter
    def client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert_request", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="expiredServerCert")
    def expired_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is expired. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "expired_server_cert")

    @expired_server_cert.setter
    def expired_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expired_server_cert", value)

    @property
    @pulumi.getter(name="inspectAll")
    def inspect_all(self) -> Optional[pulumi.Input[str]]:
        """
        Level of SSL inspection. Valid values: `disable`, `deep-inspection`.
        """
        return pulumi.get(self, "inspect_all")

    @inspect_all.setter
    def inspect_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inspect_all", value)

    @property
    @pulumi.getter(name="invalidServerCert")
    def invalid_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Allow or block the invalid SSL session server certificate. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "invalid_server_cert")

    @invalid_server_cert.setter
    def invalid_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invalid_server_cert", value)

    @property
    @pulumi.getter(name="minAllowedSslVersion")
    def min_allowed_ssl_version(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum SSL version to be allowed. Valid values: `ssl-3.0`, `tls-1.0`, `tls-1.1`, `tls-1.2`, `tls-1.3`.
        """
        return pulumi.get(self, "min_allowed_ssl_version")

    @min_allowed_ssl_version.setter
    def min_allowed_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_allowed_ssl_version", value)

    @property
    @pulumi.getter(name="revokedServerCert")
    def revoked_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is revoked. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "revoked_server_cert")

    @revoked_server_cert.setter
    def revoked_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revoked_server_cert", value)

    @property
    @pulumi.getter(name="sniServerCertCheck")
    def sni_server_cert_check(self) -> Optional[pulumi.Input[str]]:
        """
        Check the SNI in the client hello message with the CN or SAN fields in the returned server certificate. Valid values: `enable`, `strict`, `disable`.
        """
        return pulumi.get(self, "sni_server_cert_check")

    @sni_server_cert_check.setter
    def sni_server_cert_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_server_cert_check", value)

    @property
    @pulumi.getter(name="unsupportedSsl")
    def unsupported_ssl(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL encryption used being unsupported. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl")

    @unsupported_ssl.setter
    def unsupported_ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl", value)

    @property
    @pulumi.getter(name="unsupportedSslCipher")
    def unsupported_ssl_cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL cipher used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_cipher")

    @unsupported_ssl_cipher.setter
    def unsupported_ssl_cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_cipher", value)

    @property
    @pulumi.getter(name="unsupportedSslNegotiation")
    def unsupported_ssl_negotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL negotiation used being unsupported. Valid values: `allow`, `block`.
        """
        return pulumi.get(self, "unsupported_ssl_negotiation")

    @unsupported_ssl_negotiation.setter
    def unsupported_ssl_negotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_negotiation", value)

    @property
    @pulumi.getter(name="unsupportedSslVersion")
    def unsupported_ssl_version(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on the SSL version used being unsupported.
        """
        return pulumi.get(self, "unsupported_ssl_version")

    @unsupported_ssl_version.setter
    def unsupported_ssl_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsupported_ssl_version", value)

    @property
    @pulumi.getter(name="untrustedServerCert")
    def untrusted_server_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on server certificate is not issued by a trusted CA. Valid values: `allow`, `block`, `ignore`.
        """
        return pulumi.get(self, "untrusted_server_cert")

    @untrusted_server_cert.setter
    def untrusted_server_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "untrusted_server_cert", value)


@pulumi.input_type
class FirewallSslSshProfileSslExemptArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 address6: Optional[pulumi.Input[str]] = None,
                 fortiguard_category: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 regex: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 wildcard_fqdn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] address: IPv4 address object.
        :param pulumi.Input[str] address6: IPv6 address object.
        :param pulumi.Input[int] fortiguard_category: FortiGuard category ID.
        :param pulumi.Input[int] id: SSL server ID.
        :param pulumi.Input[str] regex: Exempt servers by regular expression.
        :param pulumi.Input[str] type: Type of address object (IPv4 or IPv6) or FortiGuard category. Valid values: `fortiguard-category`, `address`, `address6`, `wildcard-fqdn`, `regex`.
        :param pulumi.Input[str] wildcard_fqdn: Exempt servers by wildcard FQDN.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if address6 is not None:
            pulumi.set(__self__, "address6", address6)
        if fortiguard_category is not None:
            pulumi.set(__self__, "fortiguard_category", fortiguard_category)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if wildcard_fqdn is not None:
            pulumi.set(__self__, "wildcard_fqdn", wildcard_fqdn)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address object.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def address6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address object.
        """
        return pulumi.get(self, "address6")

    @address6.setter
    def address6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address6", value)

    @property
    @pulumi.getter(name="fortiguardCategory")
    def fortiguard_category(self) -> Optional[pulumi.Input[int]]:
        """
        FortiGuard category ID.
        """
        return pulumi.get(self, "fortiguard_category")

    @fortiguard_category.setter
    def fortiguard_category(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fortiguard_category", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        SSL server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        """
        Exempt servers by regular expression.
        """
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of address object (IPv4 or IPv6) or FortiGuard category. Valid values: `fortiguard-category`, `address`, `address6`, `wildcard-fqdn`, `regex`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="wildcardFqdn")
    def wildcard_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        Exempt servers by wildcard FQDN.
        """
        return pulumi.get(self, "wildcard_fqdn")

    @wildcard_fqdn.setter
    def wildcard_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wildcard_fqdn", value)


@pulumi.input_type
class FirewallSslSshProfileSslServerArgs:
    def __init__(__self__, *,
                 ftps_client_cert_request: Optional[pulumi.Input[str]] = None,
                 ftps_client_certificate: Optional[pulumi.Input[str]] = None,
                 https_client_cert_request: Optional[pulumi.Input[str]] = None,
                 https_client_certificate: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 imaps_client_cert_request: Optional[pulumi.Input[str]] = None,
                 imaps_client_certificate: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 pop3s_client_cert_request: Optional[pulumi.Input[str]] = None,
                 pop3s_client_certificate: Optional[pulumi.Input[str]] = None,
                 smtps_client_cert_request: Optional[pulumi.Input[str]] = None,
                 smtps_client_certificate: Optional[pulumi.Input[str]] = None,
                 ssl_other_client_cert_request: Optional[pulumi.Input[str]] = None,
                 ssl_other_client_certificate: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ftps_client_cert_request: Action based on client certificate request during the FTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] ftps_client_certificate: Action based on received client certificate during the FTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] https_client_cert_request: Action based on client certificate request during the HTTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] https_client_certificate: Action based on received client certificate during the HTTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[int] id: SSL server ID.
        :param pulumi.Input[str] imaps_client_cert_request: Action based on client certificate request during the IMAPS handshake. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] imaps_client_certificate: Action based on received client certificate during the IMAPS handshake. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] ip: IPv4 address of the SSL server.
        :param pulumi.Input[str] pop3s_client_cert_request: Action based on client certificate request during the POP3S handshake. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] pop3s_client_certificate: Action based on received client certificate during the POP3S handshake. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] smtps_client_cert_request: Action based on client certificate request during the SMTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] smtps_client_certificate: Action based on received client certificate during the SMTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] ssl_other_client_cert_request: Action based on client certificate request during an SSL protocol handshake. Valid values: `bypass`, `inspect`, `block`.
        :param pulumi.Input[str] ssl_other_client_certificate: Action based on received client certificate during an SSL protocol handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        if ftps_client_cert_request is not None:
            pulumi.set(__self__, "ftps_client_cert_request", ftps_client_cert_request)
        if ftps_client_certificate is not None:
            pulumi.set(__self__, "ftps_client_certificate", ftps_client_certificate)
        if https_client_cert_request is not None:
            pulumi.set(__self__, "https_client_cert_request", https_client_cert_request)
        if https_client_certificate is not None:
            pulumi.set(__self__, "https_client_certificate", https_client_certificate)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if imaps_client_cert_request is not None:
            pulumi.set(__self__, "imaps_client_cert_request", imaps_client_cert_request)
        if imaps_client_certificate is not None:
            pulumi.set(__self__, "imaps_client_certificate", imaps_client_certificate)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if pop3s_client_cert_request is not None:
            pulumi.set(__self__, "pop3s_client_cert_request", pop3s_client_cert_request)
        if pop3s_client_certificate is not None:
            pulumi.set(__self__, "pop3s_client_certificate", pop3s_client_certificate)
        if smtps_client_cert_request is not None:
            pulumi.set(__self__, "smtps_client_cert_request", smtps_client_cert_request)
        if smtps_client_certificate is not None:
            pulumi.set(__self__, "smtps_client_certificate", smtps_client_certificate)
        if ssl_other_client_cert_request is not None:
            pulumi.set(__self__, "ssl_other_client_cert_request", ssl_other_client_cert_request)
        if ssl_other_client_certificate is not None:
            pulumi.set(__self__, "ssl_other_client_certificate", ssl_other_client_certificate)

    @property
    @pulumi.getter(name="ftpsClientCertRequest")
    def ftps_client_cert_request(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on client certificate request during the FTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "ftps_client_cert_request")

    @ftps_client_cert_request.setter
    def ftps_client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftps_client_cert_request", value)

    @property
    @pulumi.getter(name="ftpsClientCertificate")
    def ftps_client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate during the FTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "ftps_client_certificate")

    @ftps_client_certificate.setter
    def ftps_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftps_client_certificate", value)

    @property
    @pulumi.getter(name="httpsClientCertRequest")
    def https_client_cert_request(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on client certificate request during the HTTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "https_client_cert_request")

    @https_client_cert_request.setter
    def https_client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_client_cert_request", value)

    @property
    @pulumi.getter(name="httpsClientCertificate")
    def https_client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate during the HTTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "https_client_certificate")

    @https_client_certificate.setter
    def https_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_client_certificate", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        SSL server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="imapsClientCertRequest")
    def imaps_client_cert_request(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on client certificate request during the IMAPS handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "imaps_client_cert_request")

    @imaps_client_cert_request.setter
    def imaps_client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "imaps_client_cert_request", value)

    @property
    @pulumi.getter(name="imapsClientCertificate")
    def imaps_client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate during the IMAPS handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "imaps_client_certificate")

    @imaps_client_certificate.setter
    def imaps_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "imaps_client_certificate", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of the SSL server.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="pop3sClientCertRequest")
    def pop3s_client_cert_request(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on client certificate request during the POP3S handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "pop3s_client_cert_request")

    @pop3s_client_cert_request.setter
    def pop3s_client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pop3s_client_cert_request", value)

    @property
    @pulumi.getter(name="pop3sClientCertificate")
    def pop3s_client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate during the POP3S handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "pop3s_client_certificate")

    @pop3s_client_certificate.setter
    def pop3s_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pop3s_client_certificate", value)

    @property
    @pulumi.getter(name="smtpsClientCertRequest")
    def smtps_client_cert_request(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on client certificate request during the SMTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "smtps_client_cert_request")

    @smtps_client_cert_request.setter
    def smtps_client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smtps_client_cert_request", value)

    @property
    @pulumi.getter(name="smtpsClientCertificate")
    def smtps_client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate during the SMTPS handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "smtps_client_certificate")

    @smtps_client_certificate.setter
    def smtps_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "smtps_client_certificate", value)

    @property
    @pulumi.getter(name="sslOtherClientCertRequest")
    def ssl_other_client_cert_request(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on client certificate request during an SSL protocol handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "ssl_other_client_cert_request")

    @ssl_other_client_cert_request.setter
    def ssl_other_client_cert_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_other_client_cert_request", value)

    @property
    @pulumi.getter(name="sslOtherClientCertificate")
    def ssl_other_client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Action based on received client certificate during an SSL protocol handshake. Valid values: `bypass`, `inspect`, `block`.
        """
        return pulumi.get(self, "ssl_other_client_certificate")

    @ssl_other_client_certificate.setter
    def ssl_other_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_other_client_certificate", value)


@pulumi.input_type
class FirewallTtlPolicyServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallTtlPolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallVip46MonitorArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Health monitor name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Health monitor name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallVip46RealserverArgs:
    def __init__(__self__, *,
                 client_ip: Optional[pulumi.Input[str]] = None,
                 healthcheck: Optional[pulumi.Input[str]] = None,
                 holddown_interval: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 max_connections: Optional[pulumi.Input[int]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] client_ip: Restrict server to a client IP in this range.
        :param pulumi.Input[str] healthcheck: Per server health check. Valid values: `disable`, `enable`, `vip`.
        :param pulumi.Input[int] holddown_interval: Hold down interval.
        :param pulumi.Input[int] id: Real server ID.
        :param pulumi.Input[str] ip: Mapped server IPv6.
        :param pulumi.Input[int] max_connections: Maximum number of connections allowed to server.
        :param pulumi.Input[str] monitor: Health monitors.
        :param pulumi.Input[int] port: Mapped server port.
        :param pulumi.Input[str] status: Server administrative status. Valid values: `active`, `standby`, `disable`.
        :param pulumi.Input[int] weight: weight
        """
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if healthcheck is not None:
            pulumi.set(__self__, "healthcheck", healthcheck)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if max_connections is not None:
            pulumi.set(__self__, "max_connections", max_connections)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Restrict server to a client IP in this range.
        """
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ip", value)

    @property
    @pulumi.getter
    def healthcheck(self) -> Optional[pulumi.Input[str]]:
        """
        Per server health check. Valid values: `disable`, `enable`, `vip`.
        """
        return pulumi.get(self, "healthcheck")

    @healthcheck.setter
    def healthcheck(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck", value)

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Hold down interval.
        """
        return pulumi.get(self, "holddown_interval")

    @holddown_interval.setter
    def holddown_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "holddown_interval", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Real server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Mapped server IPv6.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of connections allowed to server.
        """
        return pulumi.get(self, "max_connections")

    @max_connections.setter
    def max_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connections", value)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[str]]:
        """
        Health monitors.
        """
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Mapped server port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Server administrative status. Valid values: `active`, `standby`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class FirewallVip46SrcFilterArgs:
    def __init__(__self__, *,
                 range: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] range: Src-filter range.
        """
        if range is not None:
            pulumi.set(__self__, "range", range)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input[str]]:
        """
        Src-filter range.
        """
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range", value)


@pulumi.input_type
class FirewallVip46SrcintfFilterArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface_name: Interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class FirewallVip64MonitorArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Health monitor name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Health monitor name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallVip64RealserverArgs:
    def __init__(__self__, *,
                 client_ip: Optional[pulumi.Input[str]] = None,
                 healthcheck: Optional[pulumi.Input[str]] = None,
                 holddown_interval: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 max_connections: Optional[pulumi.Input[int]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] client_ip: Restrict server to a client IP in this range.
        :param pulumi.Input[str] healthcheck: Per server health check. Valid values: `disable`, `enable`, `vip`.
        :param pulumi.Input[int] holddown_interval: Hold down interval.
        :param pulumi.Input[int] id: Real server ID.
        :param pulumi.Input[str] ip: Mapped server IP.
        :param pulumi.Input[int] max_connections: Maximum number of connections allowed to server.
        :param pulumi.Input[str] monitor: Health monitors.
        :param pulumi.Input[int] port: Mapped server port.
        :param pulumi.Input[str] status: Server administrative status. Valid values: `active`, `standby`, `disable`.
        :param pulumi.Input[int] weight: weight
        """
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if healthcheck is not None:
            pulumi.set(__self__, "healthcheck", healthcheck)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if max_connections is not None:
            pulumi.set(__self__, "max_connections", max_connections)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Restrict server to a client IP in this range.
        """
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ip", value)

    @property
    @pulumi.getter
    def healthcheck(self) -> Optional[pulumi.Input[str]]:
        """
        Per server health check. Valid values: `disable`, `enable`, `vip`.
        """
        return pulumi.get(self, "healthcheck")

    @healthcheck.setter
    def healthcheck(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck", value)

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Hold down interval.
        """
        return pulumi.get(self, "holddown_interval")

    @holddown_interval.setter
    def holddown_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "holddown_interval", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Real server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Mapped server IP.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of connections allowed to server.
        """
        return pulumi.get(self, "max_connections")

    @max_connections.setter
    def max_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connections", value)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[str]]:
        """
        Health monitors.
        """
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Mapped server port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Server administrative status. Valid values: `active`, `standby`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        weight
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class FirewallVip64SrcFilterArgs:
    def __init__(__self__, *,
                 range: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] range: Src-filter range.
        """
        if range is not None:
            pulumi.set(__self__, "range", range)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input[str]]:
        """
        Src-filter range.
        """
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range", value)


@pulumi.input_type
class FirewallVip6MonitorArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Health monitor name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Health monitor name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallVip6RealserverArgs:
    def __init__(__self__, *,
                 client_ip: Optional[pulumi.Input[str]] = None,
                 healthcheck: Optional[pulumi.Input[str]] = None,
                 holddown_interval: Optional[pulumi.Input[int]] = None,
                 http_host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 max_connections: Optional[pulumi.Input[int]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] client_ip: Only clients in this IP range can connect to this real server.
        :param pulumi.Input[str] healthcheck: Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`, `vip`.
        :param pulumi.Input[int] holddown_interval: Time in seconds that the health check monitor continues to monitor an unresponsive server that should be active.
        :param pulumi.Input[str] http_host: HTTP server domain name in HTTP header.
        :param pulumi.Input[int] id: Real server ID.
        :param pulumi.Input[str] ip: IPv6 address of the real server.
        :param pulumi.Input[int] max_connections: Max number of active connections that can directed to the real server. When reached, sessions are sent to other real servers.
        :param pulumi.Input[str] monitor: Name of the health check monitor to use when polling to determine a virtual server's connectivity status.
        :param pulumi.Input[int] port: Port for communicating with the real server. Required if port forwarding is enabled.
        :param pulumi.Input[str] status: Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
        :param pulumi.Input[int] weight: Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
        """
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if healthcheck is not None:
            pulumi.set(__self__, "healthcheck", healthcheck)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if http_host is not None:
            pulumi.set(__self__, "http_host", http_host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if max_connections is not None:
            pulumi.set(__self__, "max_connections", max_connections)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Only clients in this IP range can connect to this real server.
        """
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ip", value)

    @property
    @pulumi.getter
    def healthcheck(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`, `vip`.
        """
        return pulumi.get(self, "healthcheck")

    @healthcheck.setter
    def healthcheck(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck", value)

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time in seconds that the health check monitor continues to monitor an unresponsive server that should be active.
        """
        return pulumi.get(self, "holddown_interval")

    @holddown_interval.setter
    def holddown_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "holddown_interval", value)

    @property
    @pulumi.getter(name="httpHost")
    def http_host(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP server domain name in HTTP header.
        """
        return pulumi.get(self, "http_host")

    @http_host.setter
    def http_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Real server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the real server.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[pulumi.Input[int]]:
        """
        Max number of active connections that can directed to the real server. When reached, sessions are sent to other real servers.
        """
        return pulumi.get(self, "max_connections")

    @max_connections.setter
    def max_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connections", value)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the health check monitor to use when polling to determine a virtual server's connectivity status.
        """
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port for communicating with the real server. Required if port forwarding is enabled.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class FirewallVip6SrcFilterArgs:
    def __init__(__self__, *,
                 range: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] range: Source-filter range.
        """
        if range is not None:
            pulumi.set(__self__, "range", range)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input[str]]:
        """
        Source-filter range.
        """
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range", value)


@pulumi.input_type
class FirewallVip6SslCipherSuiteArgs:
    def __init__(__self__, *,
                 cipher: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 versions: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cipher: Cipher suite name.
        :param pulumi.Input[int] priority: SSL/TLS cipher suites priority.
        :param pulumi.Input[str] versions: SSL/TLS versions that the cipher suite can be used with.
        """
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Cipher suite name.
        """
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        SSL/TLS cipher suites priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[str]]:
        """
        SSL/TLS versions that the cipher suite can be used with.
        """
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class FirewallVip6SslServerCipherSuiteArgs:
    def __init__(__self__, *,
                 cipher: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 versions: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cipher: Cipher suite name.
        :param pulumi.Input[int] priority: SSL/TLS cipher suites priority.
        :param pulumi.Input[str] versions: SSL/TLS versions that the cipher suite can be used with.
        """
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Cipher suite name.
        """
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        SSL/TLS cipher suites priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[str]]:
        """
        SSL/TLS versions that the cipher suite can be used with.
        """
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class FirewallVipExtaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Health monitor name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Health monitor name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallVipMappedipArgs:
    def __init__(__self__, *,
                 range: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] range: Mapped IP range.
        """
        if range is not None:
            pulumi.set(__self__, "range", range)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input[str]]:
        """
        Mapped IP range.
        """
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range", value)


@pulumi.input_type
class FirewallVipMonitorArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Health monitor name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Health monitor name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallVipRealserverArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 client_ip: Optional[pulumi.Input[str]] = None,
                 healthcheck: Optional[pulumi.Input[str]] = None,
                 holddown_interval: Optional[pulumi.Input[int]] = None,
                 http_host: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 max_connections: Optional[pulumi.Input[int]] = None,
                 monitor: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] address: Dynamic address of the real server.
        :param pulumi.Input[str] client_ip: Only clients in this IP range can connect to this real server.
        :param pulumi.Input[str] healthcheck: Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`, `vip`.
        :param pulumi.Input[int] holddown_interval: Time in seconds that the health check monitor continues to monitor and unresponsive server that should be active.
        :param pulumi.Input[str] http_host: HTTP server domain name in HTTP header.
        :param pulumi.Input[int] id: Real server ID.
        :param pulumi.Input[str] ip: IP address of the real server.
        :param pulumi.Input[int] max_connections: Max number of active connections that can be directed to the real server. When reached, sessions are sent to other real servers.
        :param pulumi.Input[str] monitor: Name of the health check monitor to use when polling to determine a virtual server's connectivity status.
        :param pulumi.Input[int] port: Port for communicating with the real server. Required if port forwarding is enabled.
        :param pulumi.Input[str] status: Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
        :param pulumi.Input[str] type: Type of address. Valid values: `ip`, `address`.
        :param pulumi.Input[int] weight: Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if healthcheck is not None:
            pulumi.set(__self__, "healthcheck", healthcheck)
        if holddown_interval is not None:
            pulumi.set(__self__, "holddown_interval", holddown_interval)
        if http_host is not None:
            pulumi.set(__self__, "http_host", http_host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if max_connections is not None:
            pulumi.set(__self__, "max_connections", max_connections)
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Dynamic address of the real server.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Only clients in this IP range can connect to this real server.
        """
        return pulumi.get(self, "client_ip")

    @client_ip.setter
    def client_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ip", value)

    @property
    @pulumi.getter
    def healthcheck(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to check the responsiveness of the real server before forwarding traffic. Valid values: `disable`, `enable`, `vip`.
        """
        return pulumi.get(self, "healthcheck")

    @healthcheck.setter
    def healthcheck(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthcheck", value)

    @property
    @pulumi.getter(name="holddownInterval")
    def holddown_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Time in seconds that the health check monitor continues to monitor and unresponsive server that should be active.
        """
        return pulumi.get(self, "holddown_interval")

    @holddown_interval.setter
    def holddown_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "holddown_interval", value)

    @property
    @pulumi.getter(name="httpHost")
    def http_host(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP server domain name in HTTP header.
        """
        return pulumi.get(self, "http_host")

    @http_host.setter
    def http_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_host", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Real server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the real server.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[pulumi.Input[int]]:
        """
        Max number of active connections that can be directed to the real server. When reached, sessions are sent to other real servers.
        """
        return pulumi.get(self, "max_connections")

    @max_connections.setter
    def max_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connections", value)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the health check monitor to use when polling to determine a virtual server's connectivity status.
        """
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port for communicating with the real server. Required if port forwarding is enabled.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Set the status of the real server to active so that it can accept traffic, or on standby or disabled so no traffic is sent. Valid values: `active`, `standby`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of address. Valid values: `ip`, `address`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight of the real server. If weighted load balancing is enabled, the server with the highest weight gets more connections.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class FirewallVipServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Health monitor name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Health monitor name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallVipSrcFilterArgs:
    def __init__(__self__, *,
                 range: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] range: Mapped IP range.
        """
        if range is not None:
            pulumi.set(__self__, "range", range)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input[str]]:
        """
        Mapped IP range.
        """
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range", value)


@pulumi.input_type
class FirewallVipSrcintfFilterArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface_name: Interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class FirewallVipSslCipherSuiteArgs:
    def __init__(__self__, *,
                 cipher: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 versions: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cipher: Cipher suite name.
        :param pulumi.Input[int] priority: SSL/TLS cipher suites priority.
        :param pulumi.Input[str] versions: SSL/TLS versions that the cipher suite can be used with.
        """
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Cipher suite name.
        """
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        SSL/TLS cipher suites priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[str]]:
        """
        SSL/TLS versions that the cipher suite can be used with.
        """
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class FirewallVipSslServerCipherSuiteArgs:
    def __init__(__self__, *,
                 cipher: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 versions: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cipher: Cipher suite name.
        :param pulumi.Input[int] priority: SSL/TLS cipher suites priority.
        :param pulumi.Input[str] versions: SSL/TLS versions that the cipher suite can be used with.
        """
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if versions is not None:
            pulumi.set(__self__, "versions", versions)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        """
        Cipher suite name.
        """
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        SSL/TLS cipher suites priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def versions(self) -> Optional[pulumi.Input[str]]:
        """
        SSL/TLS versions that the cipher suite can be used with.
        """
        return pulumi.get(self, "versions")

    @versions.setter
    def versions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "versions", value)


@pulumi.input_type
class FirewallVipgrp46MemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: VIP46 name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VIP46 name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallVipgrp64MemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: VIP64 name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VIP64 name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallVipgrp6MemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: IPv6 VIP name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 VIP name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallVipgrpMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: VIP name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VIP name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallWildcardFqdnGroupMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class IcapProfileIcapHeaderArgs:
    def __init__(__self__, *,
                 base64_encoding: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] base64_encoding: Enable/disable use of base64 encoding of HTTP content. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] content: HTTP header content.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] name: Address name.
        """
        if base64_encoding is not None:
            pulumi.set(__self__, "base64_encoding", base64_encoding)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="base64Encoding")
    def base64_encoding(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of base64 encoding of HTTP content. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "base64_encoding")

    @base64_encoding.setter
    def base64_encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base64_encoding", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP header content.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class IcapProfileRespmodForwardRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 header_groups: Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleHeaderGroupArgs']]]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 http_resp_status_codes: Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleHttpRespStatusCodeArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action to be taken for ICAP server. Valid values: `forward`, `bypass`.
        :param pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleHeaderGroupArgs']]] header_groups: HTTP header group. The structure of `header_group` block is documented below.
        :param pulumi.Input[str] host: Address object for the host.
        :param pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleHttpRespStatusCodeArgs']]] http_resp_status_codes: HTTP response status code. The structure of `http_resp_status_code` block is documented below.
        :param pulumi.Input[str] name: Address name.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if header_groups is not None:
            pulumi.set(__self__, "header_groups", header_groups)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http_resp_status_codes is not None:
            pulumi.set(__self__, "http_resp_status_codes", http_resp_status_codes)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to be taken for ICAP server. Valid values: `forward`, `bypass`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="headerGroups")
    def header_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleHeaderGroupArgs']]]]:
        """
        HTTP header group. The structure of `header_group` block is documented below.
        """
        return pulumi.get(self, "header_groups")

    @header_groups.setter
    def header_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleHeaderGroupArgs']]]]):
        pulumi.set(self, "header_groups", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Address object for the host.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="httpRespStatusCodes")
    def http_resp_status_codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleHttpRespStatusCodeArgs']]]]:
        """
        HTTP response status code. The structure of `http_resp_status_code` block is documented below.
        """
        return pulumi.get(self, "http_resp_status_codes")

    @http_resp_status_codes.setter
    def http_resp_status_codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleHttpRespStatusCodeArgs']]]]):
        pulumi.set(self, "http_resp_status_codes", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class IcapProfileRespmodForwardRuleHeaderGroupArgs:
    def __init__(__self__, *,
                 case_sensitivity: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 header_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] case_sensitivity: Enable/disable case sensitivity when matching header. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] header: HTTP header regular expression.
        :param pulumi.Input[str] header_name: HTTP header.
        :param pulumi.Input[int] id: ID.
        """
        if case_sensitivity is not None:
            pulumi.set(__self__, "case_sensitivity", case_sensitivity)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="caseSensitivity")
    def case_sensitivity(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable case sensitivity when matching header. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "case_sensitivity")

    @case_sensitivity.setter
    def case_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "case_sensitivity", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP header regular expression.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP header.
        """
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class IcapProfileRespmodForwardRuleHttpRespStatusCodeArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] code: HTTP response status code.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        """
        HTTP response status code.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)


@pulumi.input_type
class IpsDecoderParameterArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Parameter name.
        :param pulumi.Input[str] value: Parameter value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IpsGlobalTlsActiveProbeArgs:
    def __init__(__self__, *,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 source_ip6: Optional[pulumi.Input[str]] = None,
                 vdom: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] source_ip: Source IP address used for TLS active probe.
        :param pulumi.Input[str] source_ip6: Source IPv6 address used for TLS active probe.
        :param pulumi.Input[str] vdom: Virtual domain name for TLS active probe.
        """
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if source_ip6 is not None:
            pulumi.set(__self__, "source_ip6", source_ip6)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address used for TLS active probe.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="sourceIp6")
    def source_ip6(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv6 address used for TLS active probe.
        """
        return pulumi.get(self, "source_ip6")

    @source_ip6.setter
    def source_ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip6", value)

    @property
    @pulumi.getter
    def vdom(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual domain name for TLS active probe.
        """
        return pulumi.get(self, "vdom")

    @vdom.setter
    def vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom", value)


@pulumi.input_type
class IpsRuleMetadataArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 metaid: Optional[pulumi.Input[int]] = None,
                 valueid: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[int] metaid: Meta ID.
        :param pulumi.Input[int] valueid: Value ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metaid is not None:
            pulumi.set(__self__, "metaid", metaid)
        if valueid is not None:
            pulumi.set(__self__, "valueid", valueid)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def metaid(self) -> Optional[pulumi.Input[int]]:
        """
        Meta ID.
        """
        return pulumi.get(self, "metaid")

    @metaid.setter
    def metaid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metaid", value)

    @property
    @pulumi.getter
    def valueid(self) -> Optional[pulumi.Input[int]]:
        """
        Value ID.
        """
        return pulumi.get(self, "valueid")

    @valueid.setter
    def valueid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "valueid", value)


@pulumi.input_type
class IpsSensorEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 application: Optional[pulumi.Input[str]] = None,
                 cves: Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorEntryCfeArgs']]]] = None,
                 exempt_ips: Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorEntryExemptIpArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 log_attack_context: Optional[pulumi.Input[str]] = None,
                 log_packet: Optional[pulumi.Input[str]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 quarantine_expiry: Optional[pulumi.Input[str]] = None,
                 quarantine_log: Optional[pulumi.Input[str]] = None,
                 rate_count: Optional[pulumi.Input[int]] = None,
                 rate_duration: Optional[pulumi.Input[int]] = None,
                 rate_mode: Optional[pulumi.Input[str]] = None,
                 rate_track: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorEntryRuleArgs']]]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action of override rule. Valid values: `pass`, `block`, `reset`.
        :param pulumi.Input[str] application: Vulnerable application filter.
        :param pulumi.Input[Sequence[pulumi.Input['IpsSensorEntryCfeArgs']]] cves: List of CVE IDs of the signatures to add to the sensor The structure of `cve` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['IpsSensorEntryExemptIpArgs']]] exempt_ips: Exempted IP. The structure of `exempt_ip` block is documented below.
        :param pulumi.Input[int] id: Exempt IP ID.
        :param pulumi.Input[str] location: Vulnerability location filter.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] log_attack_context: Enable/disable logging of attack context: URL buffer, header buffer, body buffer, packet buffer. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] log_packet: Enable/disable packet logging. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] os: Vulnerable OS filter.
        :param pulumi.Input[str] protocol: Vulnerable protocol filter.
        :param pulumi.Input[str] quarantine: Quarantine IP or interface. Valid values: `none`, `attacker`.
        :param pulumi.Input[str] quarantine_expiry: Duration of quarantine in minute.
        :param pulumi.Input[str] quarantine_log: Enable/disable logging of selected quarantine. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] rate_count: Count of the rate.
        :param pulumi.Input[int] rate_duration: Duration (sec) of the rate.
        :param pulumi.Input[str] rate_mode: Rate limit mode. Valid values: `periodical`, `continuous`.
        :param pulumi.Input[str] rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`, `dhcp-client-mac`, `dns-domain`.
        :param pulumi.Input[Sequence[pulumi.Input['IpsSensorEntryRuleArgs']]] rules: Identifies the predefined or custom IPS signatures to add to the sensor. The structure of `rule` block is documented below.
        :param pulumi.Input[str] severity: Vulnerability severity filter.
        :param pulumi.Input[str] status: Enable/disable status of override rule. Valid values: `disable`, `enable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if cves is not None:
            pulumi.set(__self__, "cves", cves)
        if exempt_ips is not None:
            pulumi.set(__self__, "exempt_ips", exempt_ips)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_attack_context is not None:
            pulumi.set(__self__, "log_attack_context", log_attack_context)
        if log_packet is not None:
            pulumi.set(__self__, "log_packet", log_packet)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if rate_count is not None:
            pulumi.set(__self__, "rate_count", rate_count)
        if rate_duration is not None:
            pulumi.set(__self__, "rate_duration", rate_duration)
        if rate_mode is not None:
            pulumi.set(__self__, "rate_mode", rate_mode)
        if rate_track is not None:
            pulumi.set(__self__, "rate_track", rate_track)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action of override rule. Valid values: `pass`, `block`, `reset`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def application(self) -> Optional[pulumi.Input[str]]:
        """
        Vulnerable application filter.
        """
        return pulumi.get(self, "application")

    @application.setter
    def application(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application", value)

    @property
    @pulumi.getter
    def cves(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorEntryCfeArgs']]]]:
        """
        List of CVE IDs of the signatures to add to the sensor The structure of `cve` block is documented below.
        """
        return pulumi.get(self, "cves")

    @cves.setter
    def cves(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorEntryCfeArgs']]]]):
        pulumi.set(self, "cves", value)

    @property
    @pulumi.getter(name="exemptIps")
    def exempt_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorEntryExemptIpArgs']]]]:
        """
        Exempted IP. The structure of `exempt_ip` block is documented below.
        """
        return pulumi.get(self, "exempt_ips")

    @exempt_ips.setter
    def exempt_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorEntryExemptIpArgs']]]]):
        pulumi.set(self, "exempt_ips", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Exempt IP ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Vulnerability location filter.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logAttackContext")
    def log_attack_context(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of attack context: URL buffer, header buffer, body buffer, packet buffer. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_attack_context")

    @log_attack_context.setter
    def log_attack_context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_attack_context", value)

    @property
    @pulumi.getter(name="logPacket")
    def log_packet(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable packet logging. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_packet")

    @log_packet.setter
    def log_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_packet", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[str]]:
        """
        Vulnerable OS filter.
        """
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Vulnerable protocol filter.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine IP or interface. Valid values: `none`, `attacker`.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[pulumi.Input[str]]:
        """
        Duration of quarantine in minute.
        """
        return pulumi.get(self, "quarantine_expiry")

    @quarantine_expiry.setter
    def quarantine_expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_expiry", value)

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of selected quarantine. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine_log")

    @quarantine_log.setter
    def quarantine_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_log", value)

    @property
    @pulumi.getter(name="rateCount")
    def rate_count(self) -> Optional[pulumi.Input[int]]:
        """
        Count of the rate.
        """
        return pulumi.get(self, "rate_count")

    @rate_count.setter
    def rate_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rate_count", value)

    @property
    @pulumi.getter(name="rateDuration")
    def rate_duration(self) -> Optional[pulumi.Input[int]]:
        """
        Duration (sec) of the rate.
        """
        return pulumi.get(self, "rate_duration")

    @rate_duration.setter
    def rate_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rate_duration", value)

    @property
    @pulumi.getter(name="rateMode")
    def rate_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Rate limit mode. Valid values: `periodical`, `continuous`.
        """
        return pulumi.get(self, "rate_mode")

    @rate_mode.setter
    def rate_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_mode", value)

    @property
    @pulumi.getter(name="rateTrack")
    def rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`, `dhcp-client-mac`, `dns-domain`.
        """
        return pulumi.get(self, "rate_track")

    @rate_track.setter
    def rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_track", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorEntryRuleArgs']]]]:
        """
        Identifies the predefined or custom IPS signatures to add to the sensor. The structure of `rule` block is documented below.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorEntryRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Vulnerability severity filter.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable status of override rule. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class IpsSensorEntryCfeArgs:
    def __init__(__self__, *,
                 cve_entry: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cve_entry: CVE IDs or CVE wildcards.
        """
        if cve_entry is not None:
            pulumi.set(__self__, "cve_entry", cve_entry)

    @property
    @pulumi.getter(name="cveEntry")
    def cve_entry(self) -> Optional[pulumi.Input[str]]:
        """
        CVE IDs or CVE wildcards.
        """
        return pulumi.get(self, "cve_entry")

    @cve_entry.setter
    def cve_entry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cve_entry", value)


@pulumi.input_type
class IpsSensorEntryExemptIpArgs:
    def __init__(__self__, *,
                 dst_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 src_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] dst_ip: Destination IP address and netmask.
        :param pulumi.Input[int] id: Exempt IP ID.
        :param pulumi.Input[str] src_ip: Source IP address and netmask.
        """
        if dst_ip is not None:
            pulumi.set(__self__, "dst_ip", dst_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if src_ip is not None:
            pulumi.set(__self__, "src_ip", src_ip)

    @property
    @pulumi.getter(name="dstIp")
    def dst_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Destination IP address and netmask.
        """
        return pulumi.get(self, "dst_ip")

    @dst_ip.setter
    def dst_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Exempt IP ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address and netmask.
        """
        return pulumi.get(self, "src_ip")

    @src_ip.setter
    def src_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_ip", value)


@pulumi.input_type
class IpsSensorEntryRuleArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Exempt IP ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Exempt IP ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class IpsSensorFilterArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 application: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 log_packet: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 quarantine_expiry: Optional[pulumi.Input[int]] = None,
                 quarantine_log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action of override rule. Valid values: `pass`, `block`, `reset`.
        :param pulumi.Input[str] application: Vulnerable application filter.
        :param pulumi.Input[str] location: Vulnerability location filter.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] log_packet: Enable/disable packet logging. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] name: Filter name.
        :param pulumi.Input[str] os: Vulnerable OS filter.
        :param pulumi.Input[str] protocol: Vulnerable protocol filter.
        :param pulumi.Input[str] quarantine: Quarantine IP or interface. Valid values: `none`, `attacker`.
        :param pulumi.Input[int] quarantine_expiry: Duration of quarantine in minute.
        :param pulumi.Input[str] quarantine_log: Enable/disable logging of selected quarantine. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] severity: Vulnerability severity filter.
        :param pulumi.Input[str] status: Enable/disable status of override rule. Valid values: `disable`, `enable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if application is not None:
            pulumi.set(__self__, "application", application)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_packet is not None:
            pulumi.set(__self__, "log_packet", log_packet)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action of override rule. Valid values: `pass`, `block`, `reset`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def application(self) -> Optional[pulumi.Input[str]]:
        """
        Vulnerable application filter.
        """
        return pulumi.get(self, "application")

    @application.setter
    def application(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Vulnerability location filter.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logPacket")
    def log_packet(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable packet logging. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_packet")

    @log_packet.setter
    def log_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_packet", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Filter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[str]]:
        """
        Vulnerable OS filter.
        """
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Vulnerable protocol filter.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine IP or interface. Valid values: `none`, `attacker`.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[pulumi.Input[int]]:
        """
        Duration of quarantine in minute.
        """
        return pulumi.get(self, "quarantine_expiry")

    @quarantine_expiry.setter
    def quarantine_expiry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quarantine_expiry", value)

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of selected quarantine. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine_log")

    @quarantine_log.setter
    def quarantine_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Vulnerability severity filter.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable status of override rule. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class IpsSensorOverrideArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 exempt_ips: Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorOverrideExemptIpArgs']]]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 log_packet: Optional[pulumi.Input[str]] = None,
                 quarantine: Optional[pulumi.Input[str]] = None,
                 quarantine_expiry: Optional[pulumi.Input[int]] = None,
                 quarantine_log: Optional[pulumi.Input[str]] = None,
                 rule_id: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action of override rule. Valid values: `pass`, `block`, `reset`.
        :param pulumi.Input[Sequence[pulumi.Input['IpsSensorOverrideExemptIpArgs']]] exempt_ips: Exempted IP. The structure of `exempt_ip` block is documented below.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] log_packet: Enable/disable packet logging. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] quarantine: Quarantine IP or interface. Valid values: `none`, `attacker`.
        :param pulumi.Input[int] quarantine_expiry: Duration of quarantine in minute.
        :param pulumi.Input[str] quarantine_log: Enable/disable logging of selected quarantine. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] rule_id: Override rule ID.
        :param pulumi.Input[str] status: Enable/disable status of override rule. Valid values: `disable`, `enable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if exempt_ips is not None:
            pulumi.set(__self__, "exempt_ips", exempt_ips)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_packet is not None:
            pulumi.set(__self__, "log_packet", log_packet)
        if quarantine is not None:
            pulumi.set(__self__, "quarantine", quarantine)
        if quarantine_expiry is not None:
            pulumi.set(__self__, "quarantine_expiry", quarantine_expiry)
        if quarantine_log is not None:
            pulumi.set(__self__, "quarantine_log", quarantine_log)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action of override rule. Valid values: `pass`, `block`, `reset`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="exemptIps")
    def exempt_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorOverrideExemptIpArgs']]]]:
        """
        Exempted IP. The structure of `exempt_ip` block is documented below.
        """
        return pulumi.get(self, "exempt_ips")

    @exempt_ips.setter
    def exempt_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpsSensorOverrideExemptIpArgs']]]]):
        pulumi.set(self, "exempt_ips", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logPacket")
    def log_packet(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable packet logging. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_packet")

    @log_packet.setter
    def log_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_packet", value)

    @property
    @pulumi.getter
    def quarantine(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine IP or interface. Valid values: `none`, `attacker`.
        """
        return pulumi.get(self, "quarantine")

    @quarantine.setter
    def quarantine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine", value)

    @property
    @pulumi.getter(name="quarantineExpiry")
    def quarantine_expiry(self) -> Optional[pulumi.Input[int]]:
        """
        Duration of quarantine in minute.
        """
        return pulumi.get(self, "quarantine_expiry")

    @quarantine_expiry.setter
    def quarantine_expiry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quarantine_expiry", value)

    @property
    @pulumi.getter(name="quarantineLog")
    def quarantine_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of selected quarantine. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "quarantine_log")

    @quarantine_log.setter
    def quarantine_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quarantine_log", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[int]]:
        """
        Override rule ID.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable status of override rule. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class IpsSensorOverrideExemptIpArgs:
    def __init__(__self__, *,
                 dst_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 src_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] dst_ip: Destination IP address and netmask.
        :param pulumi.Input[int] id: Exempt IP ID.
        :param pulumi.Input[str] src_ip: Source IP address and netmask.
        """
        if dst_ip is not None:
            pulumi.set(__self__, "dst_ip", dst_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if src_ip is not None:
            pulumi.set(__self__, "src_ip", src_ip)

    @property
    @pulumi.getter(name="dstIp")
    def dst_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Destination IP address and netmask.
        """
        return pulumi.get(self, "dst_ip")

    @dst_ip.setter
    def dst_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Exempt IP ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address and netmask.
        """
        return pulumi.get(self, "src_ip")

    @src_ip.setter
    def src_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_ip", value)


@pulumi.input_type
class LogDiskFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] category: Log category.
        :param pulumi.Input[str] filter: Free style filter string.
        :param pulumi.Input[str] filter_type: Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        :param pulumi.Input[int] id: Entry ID.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Log category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Free style filter string.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogFortianalyzer2FilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] category: Log category.
        :param pulumi.Input[str] filter: Free style filter string.
        :param pulumi.Input[str] filter_type: Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        :param pulumi.Input[int] id: Entry ID.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Log category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Free style filter string.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogFortianalyzer2OverrideFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] category: Log category.
        :param pulumi.Input[str] filter: Free style filter string.
        :param pulumi.Input[str] filter_type: Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        :param pulumi.Input[int] id: Entry ID.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Log category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Free style filter string.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogFortianalyzer2OverrideSettingSerialArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Serial Number.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Serial Number.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogFortianalyzer2SettingSerialArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Serial Number.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Serial Number.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogFortianalyzer3FilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] category: Log category.
        :param pulumi.Input[str] filter: Free style filter string.
        :param pulumi.Input[str] filter_type: Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        :param pulumi.Input[int] id: Entry ID.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Log category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Free style filter string.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogFortianalyzer3OverrideFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] category: Log category.
        :param pulumi.Input[str] filter: Free style filter string.
        :param pulumi.Input[str] filter_type: Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        :param pulumi.Input[int] id: Entry ID.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Log category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Free style filter string.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogFortianalyzer3OverrideSettingSerialArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Serial Number.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Serial Number.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogFortianalyzer3SettingSerialArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Serial Number.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Serial Number.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogFortianalyzerCloudFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] category: Log category.
        :param pulumi.Input[str] filter: Free style filter string.
        :param pulumi.Input[str] filter_type: Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        :param pulumi.Input[int] id: Entry ID.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Log category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Free style filter string.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogFortianalyzerCloudOverrideFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] category: Log category.
        :param pulumi.Input[str] filter: Free style filter string.
        :param pulumi.Input[str] filter_type: Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        :param pulumi.Input[int] id: Entry ID.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Log category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Free style filter string.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogFortianalyzerCloudSettingSerialArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Serial Number.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Serial Number.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogFortianalyzerFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] category: Log category.
        :param pulumi.Input[str] filter: Free style filter string.
        :param pulumi.Input[str] filter_type: Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        :param pulumi.Input[int] id: Entry ID.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Log category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Free style filter string.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogFortianalyzerOverrideFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] category: Log category.
        :param pulumi.Input[str] filter: Free style filter string.
        :param pulumi.Input[str] filter_type: Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        :param pulumi.Input[int] id: Entry ID.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Log category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Free style filter string.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogFortianalyzerOverrideSettingSerialArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Serial Number.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Serial Number.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogFortianalyzerSettingSerialArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Serial Number.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Serial Number.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogFortiguardFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] category: Log category.
        :param pulumi.Input[str] filter: Free style filter string.
        :param pulumi.Input[str] filter_type: Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        :param pulumi.Input[int] id: Entry ID.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Log category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Free style filter string.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogFortiguardOverrideFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] category: Log category.
        :param pulumi.Input[str] filter: Free style filter string.
        :param pulumi.Input[str] filter_type: Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        :param pulumi.Input[int] id: Entry ID.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Log category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Free style filter string.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogMemoryFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] category: Log category.
        :param pulumi.Input[str] filter: Free style filter string.
        :param pulumi.Input[str] filter_type: Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        :param pulumi.Input[int] id: Entry ID.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Log category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Free style filter string.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogNullDeviceFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] category: Log category.
        :param pulumi.Input[str] filter: Free style filter string.
        :param pulumi.Input[str] filter_type: Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        :param pulumi.Input[int] id: Entry ID.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Log category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Free style filter string.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogSettingCustomLogFieldArgs:
    def __init__(__self__, *,
                 field_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] field_id: Custom log field.
        """
        if field_id is not None:
            pulumi.set(__self__, "field_id", field_id)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[str]]:
        """
        Custom log field.
        """
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_id", value)


@pulumi.input_type
class LogSyslogd2FilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] category: Log category.
        :param pulumi.Input[str] filter: Free style filter string.
        :param pulumi.Input[str] filter_type: Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        :param pulumi.Input[int] id: Entry ID.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Log category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Free style filter string.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogSyslogd2OverrideFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] category: Log category.
        :param pulumi.Input[str] filter: Free style filter string.
        :param pulumi.Input[str] filter_type: Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        :param pulumi.Input[int] id: Entry ID.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Log category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Free style filter string.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogSyslogd2OverrideSettingCustomFieldNameArgs:
    def __init__(__self__, *,
                 custom: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] custom: Field custom name.
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[str] name: Field name.
        """
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def custom(self) -> Optional[pulumi.Input[str]]:
        """
        Field custom name.
        """
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Field name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogSyslogd2SettingCustomFieldNameArgs:
    def __init__(__self__, *,
                 custom: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] custom: Field custom name.
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[str] name: Field name.
        """
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def custom(self) -> Optional[pulumi.Input[str]]:
        """
        Field custom name.
        """
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Field name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogSyslogd3FilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] category: Log category.
        :param pulumi.Input[str] filter: Free style filter string.
        :param pulumi.Input[str] filter_type: Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        :param pulumi.Input[int] id: Entry ID.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Log category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Free style filter string.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogSyslogd3OverrideFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] category: Log category.
        :param pulumi.Input[str] filter: Free style filter string.
        :param pulumi.Input[str] filter_type: Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        :param pulumi.Input[int] id: Entry ID.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Log category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Free style filter string.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogSyslogd3OverrideSettingCustomFieldNameArgs:
    def __init__(__self__, *,
                 custom: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] custom: Field custom name.
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[str] name: Field name.
        """
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def custom(self) -> Optional[pulumi.Input[str]]:
        """
        Field custom name.
        """
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Field name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogSyslogd3SettingCustomFieldNameArgs:
    def __init__(__self__, *,
                 custom: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] custom: Field custom name.
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[str] name: Field name.
        """
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def custom(self) -> Optional[pulumi.Input[str]]:
        """
        Field custom name.
        """
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Field name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogSyslogd4FilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] category: Log category.
        :param pulumi.Input[str] filter: Free style filter string.
        :param pulumi.Input[str] filter_type: Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        :param pulumi.Input[int] id: Entry ID.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Log category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Free style filter string.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogSyslogd4OverrideFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] category: Log category.
        :param pulumi.Input[str] filter: Free style filter string.
        :param pulumi.Input[str] filter_type: Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        :param pulumi.Input[int] id: Entry ID.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Log category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Free style filter string.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogSyslogd4OverrideSettingCustomFieldNameArgs:
    def __init__(__self__, *,
                 custom: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] custom: Field custom name.
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[str] name: Field name.
        """
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def custom(self) -> Optional[pulumi.Input[str]]:
        """
        Field custom name.
        """
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Field name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogSyslogd4SettingCustomFieldNameArgs:
    def __init__(__self__, *,
                 custom: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] custom: Field custom name.
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[str] name: Field name.
        """
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def custom(self) -> Optional[pulumi.Input[str]]:
        """
        Field custom name.
        """
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Field name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogSyslogdFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] category: Log category.
        :param pulumi.Input[str] filter: Free style filter string.
        :param pulumi.Input[str] filter_type: Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        :param pulumi.Input[int] id: Entry ID.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Log category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Free style filter string.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogSyslogdOverrideFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] category: Log category.
        :param pulumi.Input[str] filter: Free style filter string.
        :param pulumi.Input[str] filter_type: Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        :param pulumi.Input[int] id: Entry ID.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Log category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Free style filter string.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class LogSyslogdOverrideSettingCustomFieldNameArgs:
    def __init__(__self__, *,
                 custom: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] custom: Field custom name.
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[str] name: Field name.
        """
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def custom(self) -> Optional[pulumi.Input[str]]:
        """
        Field custom name.
        """
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Field name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogSyslogdSettingCustomFieldNameArgs:
    def __init__(__self__, *,
                 custom: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] custom: Field custom name.
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[str] name: Field name.
        """
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def custom(self) -> Optional[pulumi.Input[str]]:
        """
        Field custom name.
        """
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Field name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogThreatWeightApplicationArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 level: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] category: Application category.
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[str] level: Threat weight score for Application events. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[int]]:
        """
        Application category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for Application events. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)


@pulumi.input_type
class LogThreatWeightGeolocationArgs:
    def __init__(__self__, *,
                 country: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 level: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] country: Country code.
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[str] level: Threat weight score for Application events. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        if country is not None:
            pulumi.set(__self__, "country", country)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        """
        Country code.
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for Application events. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)


@pulumi.input_type
class LogThreatWeightIpsArgs:
    def __init__(__self__, *,
                 critical_severity: Optional[pulumi.Input[str]] = None,
                 high_severity: Optional[pulumi.Input[str]] = None,
                 info_severity: Optional[pulumi.Input[str]] = None,
                 low_severity: Optional[pulumi.Input[str]] = None,
                 medium_severity: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] critical_severity: Threat weight score for IPS critical severity events. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] high_severity: Threat weight score for IPS high severity events. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] info_severity: Threat weight score for IPS info severity events. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] low_severity: Threat weight score for IPS low severity events. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] medium_severity: Threat weight score for IPS medium severity events. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        if critical_severity is not None:
            pulumi.set(__self__, "critical_severity", critical_severity)
        if high_severity is not None:
            pulumi.set(__self__, "high_severity", high_severity)
        if info_severity is not None:
            pulumi.set(__self__, "info_severity", info_severity)
        if low_severity is not None:
            pulumi.set(__self__, "low_severity", low_severity)
        if medium_severity is not None:
            pulumi.set(__self__, "medium_severity", medium_severity)

    @property
    @pulumi.getter(name="criticalSeverity")
    def critical_severity(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for IPS critical severity events. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "critical_severity")

    @critical_severity.setter
    def critical_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "critical_severity", value)

    @property
    @pulumi.getter(name="highSeverity")
    def high_severity(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for IPS high severity events. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "high_severity")

    @high_severity.setter
    def high_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "high_severity", value)

    @property
    @pulumi.getter(name="infoSeverity")
    def info_severity(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for IPS info severity events. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "info_severity")

    @info_severity.setter
    def info_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "info_severity", value)

    @property
    @pulumi.getter(name="lowSeverity")
    def low_severity(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for IPS low severity events. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "low_severity")

    @low_severity.setter
    def low_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "low_severity", value)

    @property
    @pulumi.getter(name="mediumSeverity")
    def medium_severity(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for IPS medium severity events. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "medium_severity")

    @medium_severity.setter
    def medium_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "medium_severity", value)


@pulumi.input_type
class LogThreatWeightLevelArgs:
    def __init__(__self__, *,
                 critical: Optional[pulumi.Input[int]] = None,
                 high: Optional[pulumi.Input[int]] = None,
                 low: Optional[pulumi.Input[int]] = None,
                 medium: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] critical: Critical level score value (1 - 100).
        :param pulumi.Input[int] high: High level score value (1 - 100).
        :param pulumi.Input[int] low: Low level score value (1 - 100).
        :param pulumi.Input[int] medium: Medium level score value (1 - 100).
        """
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if high is not None:
            pulumi.set(__self__, "high", high)
        if low is not None:
            pulumi.set(__self__, "low", low)
        if medium is not None:
            pulumi.set(__self__, "medium", medium)

    @property
    @pulumi.getter
    def critical(self) -> Optional[pulumi.Input[int]]:
        """
        Critical level score value (1 - 100).
        """
        return pulumi.get(self, "critical")

    @critical.setter
    def critical(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "critical", value)

    @property
    @pulumi.getter
    def high(self) -> Optional[pulumi.Input[int]]:
        """
        High level score value (1 - 100).
        """
        return pulumi.get(self, "high")

    @high.setter
    def high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "high", value)

    @property
    @pulumi.getter
    def low(self) -> Optional[pulumi.Input[int]]:
        """
        Low level score value (1 - 100).
        """
        return pulumi.get(self, "low")

    @low.setter
    def low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "low", value)

    @property
    @pulumi.getter
    def medium(self) -> Optional[pulumi.Input[int]]:
        """
        Medium level score value (1 - 100).
        """
        return pulumi.get(self, "medium")

    @medium.setter
    def medium(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "medium", value)


@pulumi.input_type
class LogThreatWeightMalwareArgs:
    def __init__(__self__, *,
                 botnet_connection: Optional[pulumi.Input[str]] = None,
                 command_blocked: Optional[pulumi.Input[str]] = None,
                 content_disarm: Optional[pulumi.Input[str]] = None,
                 ems_threat_feed: Optional[pulumi.Input[str]] = None,
                 file_blocked: Optional[pulumi.Input[str]] = None,
                 fortiai: Optional[pulumi.Input[str]] = None,
                 fsa_high_risk: Optional[pulumi.Input[str]] = None,
                 fsa_malicious: Optional[pulumi.Input[str]] = None,
                 fsa_medium_risk: Optional[pulumi.Input[str]] = None,
                 malware_list: Optional[pulumi.Input[str]] = None,
                 mimefragmented: Optional[pulumi.Input[str]] = None,
                 oversized: Optional[pulumi.Input[str]] = None,
                 switch_proto: Optional[pulumi.Input[str]] = None,
                 virus_file_type_executable: Optional[pulumi.Input[str]] = None,
                 virus_infected: Optional[pulumi.Input[str]] = None,
                 virus_outbreak_prevention: Optional[pulumi.Input[str]] = None,
                 virus_scan_error: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] botnet_connection: Threat weight score for detected botnet connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] command_blocked: Threat weight score for blocked command detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] content_disarm: Threat weight score for virus (content disarm) detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] ems_threat_feed: Threat weight score for virus (EMS threat feed) detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] file_blocked: Threat weight score for blocked file detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] fortiai: Threat weight score for FortiAI-detected virus. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] fsa_high_risk: Threat weight score for FortiSandbox high risk malware detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] fsa_malicious: Threat weight score for FortiSandbox malicious malware detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] fsa_medium_risk: Threat weight score for FortiSandbox medium risk malware detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] malware_list: Threat weight score for virus (malware list) detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] mimefragmented: Threat weight score for mimefragmented detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] oversized: Threat weight score for oversized file detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] switch_proto: Threat weight score for switch proto detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] virus_file_type_executable: Threat weight score for virus (filetype executable) detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] virus_infected: Threat weight score for virus (infected) detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] virus_outbreak_prevention: Threat weight score for virus (outbreak prevention) event. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] virus_scan_error: Threat weight score for virus (scan error) detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        if botnet_connection is not None:
            pulumi.set(__self__, "botnet_connection", botnet_connection)
        if command_blocked is not None:
            pulumi.set(__self__, "command_blocked", command_blocked)
        if content_disarm is not None:
            pulumi.set(__self__, "content_disarm", content_disarm)
        if ems_threat_feed is not None:
            pulumi.set(__self__, "ems_threat_feed", ems_threat_feed)
        if file_blocked is not None:
            pulumi.set(__self__, "file_blocked", file_blocked)
        if fortiai is not None:
            pulumi.set(__self__, "fortiai", fortiai)
        if fsa_high_risk is not None:
            pulumi.set(__self__, "fsa_high_risk", fsa_high_risk)
        if fsa_malicious is not None:
            pulumi.set(__self__, "fsa_malicious", fsa_malicious)
        if fsa_medium_risk is not None:
            pulumi.set(__self__, "fsa_medium_risk", fsa_medium_risk)
        if malware_list is not None:
            pulumi.set(__self__, "malware_list", malware_list)
        if mimefragmented is not None:
            pulumi.set(__self__, "mimefragmented", mimefragmented)
        if oversized is not None:
            pulumi.set(__self__, "oversized", oversized)
        if switch_proto is not None:
            pulumi.set(__self__, "switch_proto", switch_proto)
        if virus_file_type_executable is not None:
            pulumi.set(__self__, "virus_file_type_executable", virus_file_type_executable)
        if virus_infected is not None:
            pulumi.set(__self__, "virus_infected", virus_infected)
        if virus_outbreak_prevention is not None:
            pulumi.set(__self__, "virus_outbreak_prevention", virus_outbreak_prevention)
        if virus_scan_error is not None:
            pulumi.set(__self__, "virus_scan_error", virus_scan_error)

    @property
    @pulumi.getter(name="botnetConnection")
    def botnet_connection(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for detected botnet connections. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "botnet_connection")

    @botnet_connection.setter
    def botnet_connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "botnet_connection", value)

    @property
    @pulumi.getter(name="commandBlocked")
    def command_blocked(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for blocked command detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "command_blocked")

    @command_blocked.setter
    def command_blocked(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_blocked", value)

    @property
    @pulumi.getter(name="contentDisarm")
    def content_disarm(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for virus (content disarm) detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "content_disarm")

    @content_disarm.setter
    def content_disarm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_disarm", value)

    @property
    @pulumi.getter(name="emsThreatFeed")
    def ems_threat_feed(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for virus (EMS threat feed) detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "ems_threat_feed")

    @ems_threat_feed.setter
    def ems_threat_feed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ems_threat_feed", value)

    @property
    @pulumi.getter(name="fileBlocked")
    def file_blocked(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for blocked file detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "file_blocked")

    @file_blocked.setter
    def file_blocked(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_blocked", value)

    @property
    @pulumi.getter
    def fortiai(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for FortiAI-detected virus. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "fortiai")

    @fortiai.setter
    def fortiai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiai", value)

    @property
    @pulumi.getter(name="fsaHighRisk")
    def fsa_high_risk(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for FortiSandbox high risk malware detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "fsa_high_risk")

    @fsa_high_risk.setter
    def fsa_high_risk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsa_high_risk", value)

    @property
    @pulumi.getter(name="fsaMalicious")
    def fsa_malicious(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for FortiSandbox malicious malware detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "fsa_malicious")

    @fsa_malicious.setter
    def fsa_malicious(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsa_malicious", value)

    @property
    @pulumi.getter(name="fsaMediumRisk")
    def fsa_medium_risk(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for FortiSandbox medium risk malware detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "fsa_medium_risk")

    @fsa_medium_risk.setter
    def fsa_medium_risk(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fsa_medium_risk", value)

    @property
    @pulumi.getter(name="malwareList")
    def malware_list(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for virus (malware list) detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "malware_list")

    @malware_list.setter
    def malware_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malware_list", value)

    @property
    @pulumi.getter
    def mimefragmented(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for mimefragmented detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "mimefragmented")

    @mimefragmented.setter
    def mimefragmented(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mimefragmented", value)

    @property
    @pulumi.getter
    def oversized(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for oversized file detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "oversized")

    @oversized.setter
    def oversized(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oversized", value)

    @property
    @pulumi.getter(name="switchProto")
    def switch_proto(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for switch proto detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "switch_proto")

    @switch_proto.setter
    def switch_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_proto", value)

    @property
    @pulumi.getter(name="virusFileTypeExecutable")
    def virus_file_type_executable(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for virus (filetype executable) detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "virus_file_type_executable")

    @virus_file_type_executable.setter
    def virus_file_type_executable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virus_file_type_executable", value)

    @property
    @pulumi.getter(name="virusInfected")
    def virus_infected(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for virus (infected) detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "virus_infected")

    @virus_infected.setter
    def virus_infected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virus_infected", value)

    @property
    @pulumi.getter(name="virusOutbreakPrevention")
    def virus_outbreak_prevention(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for virus (outbreak prevention) event. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "virus_outbreak_prevention")

    @virus_outbreak_prevention.setter
    def virus_outbreak_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virus_outbreak_prevention", value)

    @property
    @pulumi.getter(name="virusScanError")
    def virus_scan_error(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for virus (scan error) detected. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "virus_scan_error")

    @virus_scan_error.setter
    def virus_scan_error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virus_scan_error", value)


@pulumi.input_type
class LogThreatWeightWebArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 level: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] category: Application category.
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[str] level: Threat weight score for Application events. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[int]]:
        """
        Application category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Threat weight score for Application events. Valid values: `disable`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)


@pulumi.input_type
class LogWebtrendsFilterFreeStyleArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] category: Log category.
        :param pulumi.Input[str] filter: Free style filter string.
        :param pulumi.Input[str] filter_type: Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        :param pulumi.Input[int] id: Entry ID.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Log category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Free style filter string.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        """
        Include/exclude logs that match the filter. Valid values: `include`, `exclude`.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class NsxtServiceChainServiceIndexArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 reverse_index: Optional[pulumi.Input[int]] = None,
                 vd: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Service index.
        :param pulumi.Input[str] name: Index name.
        :param pulumi.Input[int] reverse_index: Reverse service index.
        :param pulumi.Input[str] vd: VDOM name.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if reverse_index is not None:
            pulumi.set(__self__, "reverse_index", reverse_index)
        if vd is not None:
            pulumi.set(__self__, "vd", vd)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Service index.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Index name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="reverseIndex")
    def reverse_index(self) -> Optional[pulumi.Input[int]]:
        """
        Reverse service index.
        """
        return pulumi.get(self, "reverse_index")

    @reverse_index.setter
    def reverse_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reverse_index", value)

    @property
    @pulumi.getter
    def vd(self) -> Optional[pulumi.Input[str]]:
        """
        VDOM name.
        """
        return pulumi.get(self, "vd")

    @vd.setter
    def vd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vd", value)


@pulumi.input_type
class ReportChartCategorySeriesArgs:
    def __init__(__self__, *,
                 databind: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] databind: Value series value expression.
        :param pulumi.Input[int] font_size: Font size of category-series title.
        """
        if databind is not None:
            pulumi.set(__self__, "databind", databind)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)

    @property
    @pulumi.getter
    def databind(self) -> Optional[pulumi.Input[str]]:
        """
        Value series value expression.
        """
        return pulumi.get(self, "databind")

    @databind.setter
    def databind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "databind", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input[int]]:
        """
        Font size of category-series title.
        """
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "font_size", value)


@pulumi.input_type
class ReportChartColumnArgs:
    def __init__(__self__, *,
                 detail_unit: Optional[pulumi.Input[str]] = None,
                 detail_value: Optional[pulumi.Input[str]] = None,
                 footer_unit: Optional[pulumi.Input[str]] = None,
                 footer_value: Optional[pulumi.Input[str]] = None,
                 header_value: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 mappings: Optional[pulumi.Input[Sequence[pulumi.Input['ReportChartColumnMappingArgs']]]] = None):
        """
        :param pulumi.Input[str] detail_unit: Detail unit of column.
        :param pulumi.Input[str] detail_value: Detail value of column.
        :param pulumi.Input[str] footer_unit: Footer unit of column.
        :param pulumi.Input[str] footer_value: Footer value of column.
        :param pulumi.Input[str] header_value: Display name of table header.
        :param pulumi.Input[int] id: id
        :param pulumi.Input[Sequence[pulumi.Input['ReportChartColumnMappingArgs']]] mappings: Show detail in certain display value for certain condition. The structure of `mapping` block is documented below.
        """
        if detail_unit is not None:
            pulumi.set(__self__, "detail_unit", detail_unit)
        if detail_value is not None:
            pulumi.set(__self__, "detail_value", detail_value)
        if footer_unit is not None:
            pulumi.set(__self__, "footer_unit", footer_unit)
        if footer_value is not None:
            pulumi.set(__self__, "footer_value", footer_value)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mappings is not None:
            pulumi.set(__self__, "mappings", mappings)

    @property
    @pulumi.getter(name="detailUnit")
    def detail_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Detail unit of column.
        """
        return pulumi.get(self, "detail_unit")

    @detail_unit.setter
    def detail_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detail_unit", value)

    @property
    @pulumi.getter(name="detailValue")
    def detail_value(self) -> Optional[pulumi.Input[str]]:
        """
        Detail value of column.
        """
        return pulumi.get(self, "detail_value")

    @detail_value.setter
    def detail_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detail_value", value)

    @property
    @pulumi.getter(name="footerUnit")
    def footer_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Footer unit of column.
        """
        return pulumi.get(self, "footer_unit")

    @footer_unit.setter
    def footer_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "footer_unit", value)

    @property
    @pulumi.getter(name="footerValue")
    def footer_value(self) -> Optional[pulumi.Input[str]]:
        """
        Footer value of column.
        """
        return pulumi.get(self, "footer_value")

    @footer_value.setter
    def footer_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "footer_value", value)

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[pulumi.Input[str]]:
        """
        Display name of table header.
        """
        return pulumi.get(self, "header_value")

    @header_value.setter
    def header_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReportChartColumnMappingArgs']]]]:
        """
        Show detail in certain display value for certain condition. The structure of `mapping` block is documented below.
        """
        return pulumi.get(self, "mappings")

    @mappings.setter
    def mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReportChartColumnMappingArgs']]]]):
        pulumi.set(self, "mappings", value)


@pulumi.input_type
class ReportChartColumnMappingArgs:
    def __init__(__self__, *,
                 displayname: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 op: Optional[pulumi.Input[str]] = None,
                 value1: Optional[pulumi.Input[str]] = None,
                 value2: Optional[pulumi.Input[str]] = None,
                 value_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] displayname: Display name.
        :param pulumi.Input[int] id: id
        :param pulumi.Input[str] op: Comparision operater. Valid values: `none`, `greater`, `greater-equal`, `less`, `less-equal`, `equal`, `between`.
        :param pulumi.Input[str] value1: Value 1.
        :param pulumi.Input[str] value2: Value 2.
        :param pulumi.Input[str] value_type: Value type. Valid values: `integer`, `string`.
        """
        if displayname is not None:
            pulumi.set(__self__, "displayname", displayname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if op is not None:
            pulumi.set(__self__, "op", op)
        if value1 is not None:
            pulumi.set(__self__, "value1", value1)
        if value2 is not None:
            pulumi.set(__self__, "value2", value2)
        if value_type is not None:
            pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter
    def displayname(self) -> Optional[pulumi.Input[str]]:
        """
        Display name.
        """
        return pulumi.get(self, "displayname")

    @displayname.setter
    def displayname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "displayname", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def op(self) -> Optional[pulumi.Input[str]]:
        """
        Comparision operater. Valid values: `none`, `greater`, `greater-equal`, `less`, `less-equal`, `equal`, `between`.
        """
        return pulumi.get(self, "op")

    @op.setter
    def op(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "op", value)

    @property
    @pulumi.getter
    def value1(self) -> Optional[pulumi.Input[str]]:
        """
        Value 1.
        """
        return pulumi.get(self, "value1")

    @value1.setter
    def value1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value1", value)

    @property
    @pulumi.getter
    def value2(self) -> Optional[pulumi.Input[str]]:
        """
        Value 2.
        """
        return pulumi.get(self, "value2")

    @value2.setter
    def value2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value2", value)

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional[pulumi.Input[str]]:
        """
        Value type. Valid values: `integer`, `string`.
        """
        return pulumi.get(self, "value_type")

    @value_type.setter
    def value_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_type", value)


@pulumi.input_type
class ReportChartDrillDownChartArgs:
    def __init__(__self__, *,
                 chart_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] chart_name: Drill down chart name.
        :param pulumi.Input[int] id: id
        :param pulumi.Input[str] status: Enable/disable this drill down chart. Valid values: `enable`, `disable`.
        """
        if chart_name is not None:
            pulumi.set(__self__, "chart_name", chart_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="chartName")
    def chart_name(self) -> Optional[pulumi.Input[str]]:
        """
        Drill down chart name.
        """
        return pulumi.get(self, "chart_name")

    @chart_name.setter
    def chart_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this drill down chart. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class ReportChartValueSeriesArgs:
    def __init__(__self__, *,
                 databind: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] databind: Value series value expression.
        """
        if databind is not None:
            pulumi.set(__self__, "databind", databind)

    @property
    @pulumi.getter
    def databind(self) -> Optional[pulumi.Input[str]]:
        """
        Value series value expression.
        """
        return pulumi.get(self, "databind")

    @databind.setter
    def databind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "databind", value)


@pulumi.input_type
class ReportChartXSeriesArgs:
    def __init__(__self__, *,
                 caption: Optional[pulumi.Input[str]] = None,
                 caption_font_size: Optional[pulumi.Input[int]] = None,
                 databind: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[int]] = None,
                 is_category: Optional[pulumi.Input[str]] = None,
                 label_angle: Optional[pulumi.Input[str]] = None,
                 scale_direction: Optional[pulumi.Input[str]] = None,
                 scale_format: Optional[pulumi.Input[str]] = None,
                 scale_step: Optional[pulumi.Input[int]] = None,
                 scale_unit: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] caption: Y-series caption.
        :param pulumi.Input[int] caption_font_size: Y-series caption font size.
        :param pulumi.Input[str] databind: Value series value expression.
        :param pulumi.Input[int] font_size: Font size of category-series title.
        :param pulumi.Input[str] is_category: X-series represent category or not. Valid values: `yes`, `no`.
        :param pulumi.Input[str] label_angle: Y-series label angle. Valid values: `45-degree`, `vertical`, `horizontal`.
        :param pulumi.Input[str] scale_direction: Scale increase or decrease. Valid values: `decrease`, `increase`.
        :param pulumi.Input[str] scale_format: Date/time format. Valid values: `YYYY-MM-DD-HH-MM`, `YYYY-MM-DD HH`, `YYYY-MM-DD`, `YYYY-MM`, `YYYY`, `HH-MM`, `MM-DD`.
        :param pulumi.Input[int] scale_step: Scale step.
        :param pulumi.Input[str] scale_unit: Scale unit. Valid values: `minute`, `hour`, `day`, `month`, `year`.
        :param pulumi.Input[str] unit: Y-series unit.
        """
        if caption is not None:
            pulumi.set(__self__, "caption", caption)
        if caption_font_size is not None:
            pulumi.set(__self__, "caption_font_size", caption_font_size)
        if databind is not None:
            pulumi.set(__self__, "databind", databind)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if is_category is not None:
            pulumi.set(__self__, "is_category", is_category)
        if label_angle is not None:
            pulumi.set(__self__, "label_angle", label_angle)
        if scale_direction is not None:
            pulumi.set(__self__, "scale_direction", scale_direction)
        if scale_format is not None:
            pulumi.set(__self__, "scale_format", scale_format)
        if scale_step is not None:
            pulumi.set(__self__, "scale_step", scale_step)
        if scale_unit is not None:
            pulumi.set(__self__, "scale_unit", scale_unit)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def caption(self) -> Optional[pulumi.Input[str]]:
        """
        Y-series caption.
        """
        return pulumi.get(self, "caption")

    @caption.setter
    def caption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caption", value)

    @property
    @pulumi.getter(name="captionFontSize")
    def caption_font_size(self) -> Optional[pulumi.Input[int]]:
        """
        Y-series caption font size.
        """
        return pulumi.get(self, "caption_font_size")

    @caption_font_size.setter
    def caption_font_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "caption_font_size", value)

    @property
    @pulumi.getter
    def databind(self) -> Optional[pulumi.Input[str]]:
        """
        Value series value expression.
        """
        return pulumi.get(self, "databind")

    @databind.setter
    def databind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "databind", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input[int]]:
        """
        Font size of category-series title.
        """
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter(name="isCategory")
    def is_category(self) -> Optional[pulumi.Input[str]]:
        """
        X-series represent category or not. Valid values: `yes`, `no`.
        """
        return pulumi.get(self, "is_category")

    @is_category.setter
    def is_category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_category", value)

    @property
    @pulumi.getter(name="labelAngle")
    def label_angle(self) -> Optional[pulumi.Input[str]]:
        """
        Y-series label angle. Valid values: `45-degree`, `vertical`, `horizontal`.
        """
        return pulumi.get(self, "label_angle")

    @label_angle.setter
    def label_angle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label_angle", value)

    @property
    @pulumi.getter(name="scaleDirection")
    def scale_direction(self) -> Optional[pulumi.Input[str]]:
        """
        Scale increase or decrease. Valid values: `decrease`, `increase`.
        """
        return pulumi.get(self, "scale_direction")

    @scale_direction.setter
    def scale_direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale_direction", value)

    @property
    @pulumi.getter(name="scaleFormat")
    def scale_format(self) -> Optional[pulumi.Input[str]]:
        """
        Date/time format. Valid values: `YYYY-MM-DD-HH-MM`, `YYYY-MM-DD HH`, `YYYY-MM-DD`, `YYYY-MM`, `YYYY`, `HH-MM`, `MM-DD`.
        """
        return pulumi.get(self, "scale_format")

    @scale_format.setter
    def scale_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale_format", value)

    @property
    @pulumi.getter(name="scaleStep")
    def scale_step(self) -> Optional[pulumi.Input[int]]:
        """
        Scale step.
        """
        return pulumi.get(self, "scale_step")

    @scale_step.setter
    def scale_step(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scale_step", value)

    @property
    @pulumi.getter(name="scaleUnit")
    def scale_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Scale unit. Valid values: `minute`, `hour`, `day`, `month`, `year`.
        """
        return pulumi.get(self, "scale_unit")

    @scale_unit.setter
    def scale_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale_unit", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        Y-series unit.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class ReportChartYSeriesArgs:
    def __init__(__self__, *,
                 caption: Optional[pulumi.Input[str]] = None,
                 caption_font_size: Optional[pulumi.Input[int]] = None,
                 databind: Optional[pulumi.Input[str]] = None,
                 extra_databind: Optional[pulumi.Input[str]] = None,
                 extra_y: Optional[pulumi.Input[str]] = None,
                 extra_y_legend: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[int]] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 label_angle: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None,
                 y_legend: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] caption: Y-series caption.
        :param pulumi.Input[int] caption_font_size: Y-series caption font size.
        :param pulumi.Input[str] databind: Value series value expression.
        :param pulumi.Input[str] extra_databind: Extra Y-series value.
        :param pulumi.Input[str] extra_y: Allow another Y-series value Valid values: `enable`, `disable`.
        :param pulumi.Input[str] extra_y_legend: Extra Y-series legend type/name.
        :param pulumi.Input[int] font_size: Font size of category-series title.
        :param pulumi.Input[str] group: Y-series group option.
        :param pulumi.Input[str] label_angle: Y-series label angle. Valid values: `45-degree`, `vertical`, `horizontal`.
        :param pulumi.Input[str] unit: Y-series unit.
        :param pulumi.Input[str] y_legend: First Y-series legend type/name.
        """
        if caption is not None:
            pulumi.set(__self__, "caption", caption)
        if caption_font_size is not None:
            pulumi.set(__self__, "caption_font_size", caption_font_size)
        if databind is not None:
            pulumi.set(__self__, "databind", databind)
        if extra_databind is not None:
            pulumi.set(__self__, "extra_databind", extra_databind)
        if extra_y is not None:
            pulumi.set(__self__, "extra_y", extra_y)
        if extra_y_legend is not None:
            pulumi.set(__self__, "extra_y_legend", extra_y_legend)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if label_angle is not None:
            pulumi.set(__self__, "label_angle", label_angle)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if y_legend is not None:
            pulumi.set(__self__, "y_legend", y_legend)

    @property
    @pulumi.getter
    def caption(self) -> Optional[pulumi.Input[str]]:
        """
        Y-series caption.
        """
        return pulumi.get(self, "caption")

    @caption.setter
    def caption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "caption", value)

    @property
    @pulumi.getter(name="captionFontSize")
    def caption_font_size(self) -> Optional[pulumi.Input[int]]:
        """
        Y-series caption font size.
        """
        return pulumi.get(self, "caption_font_size")

    @caption_font_size.setter
    def caption_font_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "caption_font_size", value)

    @property
    @pulumi.getter
    def databind(self) -> Optional[pulumi.Input[str]]:
        """
        Value series value expression.
        """
        return pulumi.get(self, "databind")

    @databind.setter
    def databind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "databind", value)

    @property
    @pulumi.getter(name="extraDatabind")
    def extra_databind(self) -> Optional[pulumi.Input[str]]:
        """
        Extra Y-series value.
        """
        return pulumi.get(self, "extra_databind")

    @extra_databind.setter
    def extra_databind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_databind", value)

    @property
    @pulumi.getter(name="extraY")
    def extra_y(self) -> Optional[pulumi.Input[str]]:
        """
        Allow another Y-series value Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "extra_y")

    @extra_y.setter
    def extra_y(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_y", value)

    @property
    @pulumi.getter(name="extraYLegend")
    def extra_y_legend(self) -> Optional[pulumi.Input[str]]:
        """
        Extra Y-series legend type/name.
        """
        return pulumi.get(self, "extra_y_legend")

    @extra_y_legend.setter
    def extra_y_legend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_y_legend", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input[int]]:
        """
        Font size of category-series title.
        """
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Y-series group option.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="labelAngle")
    def label_angle(self) -> Optional[pulumi.Input[str]]:
        """
        Y-series label angle. Valid values: `45-degree`, `vertical`, `horizontal`.
        """
        return pulumi.get(self, "label_angle")

    @label_angle.setter
    def label_angle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label_angle", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        Y-series unit.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter(name="yLegend")
    def y_legend(self) -> Optional[pulumi.Input[str]]:
        """
        First Y-series legend type/name.
        """
        return pulumi.get(self, "y_legend")

    @y_legend.setter
    def y_legend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_legend", value)


@pulumi.input_type
class ReportDatasetFieldArgs:
    def __init__(__self__, *,
                 displayname: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] displayname: Display name.
        :param pulumi.Input[int] id: Parameter ID (1 to number of columns in SQL result).
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] type: Field type. Valid values: `text`, `integer`, `double`.
        """
        if displayname is not None:
            pulumi.set(__self__, "displayname", displayname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def displayname(self) -> Optional[pulumi.Input[str]]:
        """
        Display name.
        """
        return pulumi.get(self, "displayname")

    @displayname.setter
    def displayname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "displayname", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Parameter ID (1 to number of columns in SQL result).
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Field type. Valid values: `text`, `integer`, `double`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ReportDatasetParameterArgs:
    def __init__(__self__, *,
                 data_type: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 field: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] data_type: Data type. Valid values: `text`, `integer`, `double`, `long-integer`, `date-time`.
        :param pulumi.Input[str] display_name: Display name.
        :param pulumi.Input[str] field: SQL field name.
        :param pulumi.Input[int] id: Parameter ID (1 to number of columns in SQL result).
        """
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[pulumi.Input[str]]:
        """
        Data type. Valid values: `text`, `integer`, `double`, `long-integer`, `date-time`.
        """
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_type", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input[str]]:
        """
        SQL field name.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Parameter ID (1 to number of columns in SQL result).
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ReportLayoutBodyItemArgs:
    def __init__(__self__, *,
                 chart: Optional[pulumi.Input[str]] = None,
                 chart_options: Optional[pulumi.Input[str]] = None,
                 column: Optional[pulumi.Input[int]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 drill_down_items: Optional[pulumi.Input[str]] = None,
                 drill_down_types: Optional[pulumi.Input[str]] = None,
                 hide: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 img_src: Optional[pulumi.Input[str]] = None,
                 list_component: Optional[pulumi.Input[str]] = None,
                 lists: Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutBodyItemListArgs']]]] = None,
                 misc_component: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutBodyItemParameterArgs']]]] = None,
                 style: Optional[pulumi.Input[str]] = None,
                 table_caption_style: Optional[pulumi.Input[str]] = None,
                 table_column_widths: Optional[pulumi.Input[str]] = None,
                 table_even_row_style: Optional[pulumi.Input[str]] = None,
                 table_head_style: Optional[pulumi.Input[str]] = None,
                 table_odd_row_style: Optional[pulumi.Input[str]] = None,
                 text_component: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 top_n: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] chart: Report item chart name.
        :param pulumi.Input[str] chart_options: Report chart options. Valid values: `include-no-data`, `hide-title`, `show-caption`.
        :param pulumi.Input[int] column: Report section column number.
        :param pulumi.Input[str] content: List entry content.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] drill_down_items: Control how drill down charts are shown.
        :param pulumi.Input[str] drill_down_types: Control whether keys from the parent being combined or not.
        :param pulumi.Input[str] hide: Enable/disable hide item in report. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] id: List entry ID.
        :param pulumi.Input[str] img_src: Report item image file name.
        :param pulumi.Input[str] list_component: Report item list component. Valid values: `bullet`, `numbered`.
        :param pulumi.Input[Sequence[pulumi.Input['ReportLayoutBodyItemListArgs']]] lists: Configure report list item. The structure of `list` block is documented below.
        :param pulumi.Input[str] misc_component: Report item miscellaneous component. Valid values: `hline`, `page-break`, `column-break`, `section-start`.
        :param pulumi.Input[Sequence[pulumi.Input['ReportLayoutBodyItemParameterArgs']]] parameters: Parameters. The structure of `parameters` block is documented below.
        :param pulumi.Input[str] style: Report item style.
        :param pulumi.Input[str] table_caption_style: Table chart caption style.
        :param pulumi.Input[str] table_column_widths: Report item table column widths.
        :param pulumi.Input[str] table_even_row_style: Table chart even row style.
        :param pulumi.Input[str] table_head_style: Table chart head style.
        :param pulumi.Input[str] table_odd_row_style: Table chart odd row style.
        :param pulumi.Input[str] text_component: Report item text component. Valid values: `text`, `heading1`, `heading2`, `heading3`.
        :param pulumi.Input[str] title: Report section title.
        :param pulumi.Input[int] top_n: Value of top.
        :param pulumi.Input[str] type: Report item type. Valid values: `text`, `image`, `chart`, `misc`.
        """
        if chart is not None:
            pulumi.set(__self__, "chart", chart)
        if chart_options is not None:
            pulumi.set(__self__, "chart_options", chart_options)
        if column is not None:
            pulumi.set(__self__, "column", column)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if drill_down_items is not None:
            pulumi.set(__self__, "drill_down_items", drill_down_items)
        if drill_down_types is not None:
            pulumi.set(__self__, "drill_down_types", drill_down_types)
        if hide is not None:
            pulumi.set(__self__, "hide", hide)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if img_src is not None:
            pulumi.set(__self__, "img_src", img_src)
        if list_component is not None:
            pulumi.set(__self__, "list_component", list_component)
        if lists is not None:
            pulumi.set(__self__, "lists", lists)
        if misc_component is not None:
            pulumi.set(__self__, "misc_component", misc_component)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if table_caption_style is not None:
            pulumi.set(__self__, "table_caption_style", table_caption_style)
        if table_column_widths is not None:
            pulumi.set(__self__, "table_column_widths", table_column_widths)
        if table_even_row_style is not None:
            pulumi.set(__self__, "table_even_row_style", table_even_row_style)
        if table_head_style is not None:
            pulumi.set(__self__, "table_head_style", table_head_style)
        if table_odd_row_style is not None:
            pulumi.set(__self__, "table_odd_row_style", table_odd_row_style)
        if text_component is not None:
            pulumi.set(__self__, "text_component", text_component)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if top_n is not None:
            pulumi.set(__self__, "top_n", top_n)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def chart(self) -> Optional[pulumi.Input[str]]:
        """
        Report item chart name.
        """
        return pulumi.get(self, "chart")

    @chart.setter
    def chart(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart", value)

    @property
    @pulumi.getter(name="chartOptions")
    def chart_options(self) -> Optional[pulumi.Input[str]]:
        """
        Report chart options. Valid values: `include-no-data`, `hide-title`, `show-caption`.
        """
        return pulumi.get(self, "chart_options")

    @chart_options.setter
    def chart_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart_options", value)

    @property
    @pulumi.getter
    def column(self) -> Optional[pulumi.Input[int]]:
        """
        Report section column number.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        List entry content.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="drillDownItems")
    def drill_down_items(self) -> Optional[pulumi.Input[str]]:
        """
        Control how drill down charts are shown.
        """
        return pulumi.get(self, "drill_down_items")

    @drill_down_items.setter
    def drill_down_items(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drill_down_items", value)

    @property
    @pulumi.getter(name="drillDownTypes")
    def drill_down_types(self) -> Optional[pulumi.Input[str]]:
        """
        Control whether keys from the parent being combined or not.
        """
        return pulumi.get(self, "drill_down_types")

    @drill_down_types.setter
    def drill_down_types(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drill_down_types", value)

    @property
    @pulumi.getter
    def hide(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable hide item in report. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "hide")

    @hide.setter
    def hide(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hide", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        List entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="imgSrc")
    def img_src(self) -> Optional[pulumi.Input[str]]:
        """
        Report item image file name.
        """
        return pulumi.get(self, "img_src")

    @img_src.setter
    def img_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "img_src", value)

    @property
    @pulumi.getter(name="listComponent")
    def list_component(self) -> Optional[pulumi.Input[str]]:
        """
        Report item list component. Valid values: `bullet`, `numbered`.
        """
        return pulumi.get(self, "list_component")

    @list_component.setter
    def list_component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "list_component", value)

    @property
    @pulumi.getter
    def lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutBodyItemListArgs']]]]:
        """
        Configure report list item. The structure of `list` block is documented below.
        """
        return pulumi.get(self, "lists")

    @lists.setter
    def lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutBodyItemListArgs']]]]):
        pulumi.set(self, "lists", value)

    @property
    @pulumi.getter(name="miscComponent")
    def misc_component(self) -> Optional[pulumi.Input[str]]:
        """
        Report item miscellaneous component. Valid values: `hline`, `page-break`, `column-break`, `section-start`.
        """
        return pulumi.get(self, "misc_component")

    @misc_component.setter
    def misc_component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "misc_component", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutBodyItemParameterArgs']]]]:
        """
        Parameters. The structure of `parameters` block is documented below.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutBodyItemParameterArgs']]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input[str]]:
        """
        Report item style.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter(name="tableCaptionStyle")
    def table_caption_style(self) -> Optional[pulumi.Input[str]]:
        """
        Table chart caption style.
        """
        return pulumi.get(self, "table_caption_style")

    @table_caption_style.setter
    def table_caption_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_caption_style", value)

    @property
    @pulumi.getter(name="tableColumnWidths")
    def table_column_widths(self) -> Optional[pulumi.Input[str]]:
        """
        Report item table column widths.
        """
        return pulumi.get(self, "table_column_widths")

    @table_column_widths.setter
    def table_column_widths(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_column_widths", value)

    @property
    @pulumi.getter(name="tableEvenRowStyle")
    def table_even_row_style(self) -> Optional[pulumi.Input[str]]:
        """
        Table chart even row style.
        """
        return pulumi.get(self, "table_even_row_style")

    @table_even_row_style.setter
    def table_even_row_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_even_row_style", value)

    @property
    @pulumi.getter(name="tableHeadStyle")
    def table_head_style(self) -> Optional[pulumi.Input[str]]:
        """
        Table chart head style.
        """
        return pulumi.get(self, "table_head_style")

    @table_head_style.setter
    def table_head_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_head_style", value)

    @property
    @pulumi.getter(name="tableOddRowStyle")
    def table_odd_row_style(self) -> Optional[pulumi.Input[str]]:
        """
        Table chart odd row style.
        """
        return pulumi.get(self, "table_odd_row_style")

    @table_odd_row_style.setter
    def table_odd_row_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_odd_row_style", value)

    @property
    @pulumi.getter(name="textComponent")
    def text_component(self) -> Optional[pulumi.Input[str]]:
        """
        Report item text component. Valid values: `text`, `heading1`, `heading2`, `heading3`.
        """
        return pulumi.get(self, "text_component")

    @text_component.setter
    def text_component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_component", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Report section title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="topN")
    def top_n(self) -> Optional[pulumi.Input[int]]:
        """
        Value of top.
        """
        return pulumi.get(self, "top_n")

    @top_n.setter
    def top_n(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "top_n", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Report item type. Valid values: `text`, `image`, `chart`, `misc`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ReportLayoutBodyItemListArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] content: List entry content.
        :param pulumi.Input[int] id: List entry ID.
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        List entry content.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        List entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ReportLayoutBodyItemParameterArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: List entry ID.
        :param pulumi.Input[str] name: Field name that match field of parameters defined in dataset.
        :param pulumi.Input[str] value: Value to replace corresponding field of parameters defined in dataset.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        List entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Field name that match field of parameters defined in dataset.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value to replace corresponding field of parameters defined in dataset.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ReportLayoutPageArgs:
    def __init__(__self__, *,
                 column_break_before: Optional[pulumi.Input[str]] = None,
                 footer: Optional[pulumi.Input['ReportLayoutPageFooterArgs']] = None,
                 header: Optional[pulumi.Input['ReportLayoutPageHeaderArgs']] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 page_break_before: Optional[pulumi.Input[str]] = None,
                 paper: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] column_break_before: Report page auto column break before heading. Valid values: `heading1`, `heading2`, `heading3`.
        :param pulumi.Input['ReportLayoutPageFooterArgs'] footer: Configure report page footer. The structure of `footer` block is documented below.
        :param pulumi.Input['ReportLayoutPageHeaderArgs'] header: Configure report page header. The structure of `header` block is documented below.
        :param pulumi.Input[str] options: Report page options. Valid values: `header-on-first-page`, `footer-on-first-page`.
        :param pulumi.Input[str] page_break_before: Report page auto page break before heading. Valid values: `heading1`, `heading2`, `heading3`.
        :param pulumi.Input[str] paper: Report page paper. Valid values: `a4`, `letter`.
        """
        if column_break_before is not None:
            pulumi.set(__self__, "column_break_before", column_break_before)
        if footer is not None:
            pulumi.set(__self__, "footer", footer)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if page_break_before is not None:
            pulumi.set(__self__, "page_break_before", page_break_before)
        if paper is not None:
            pulumi.set(__self__, "paper", paper)

    @property
    @pulumi.getter(name="columnBreakBefore")
    def column_break_before(self) -> Optional[pulumi.Input[str]]:
        """
        Report page auto column break before heading. Valid values: `heading1`, `heading2`, `heading3`.
        """
        return pulumi.get(self, "column_break_before")

    @column_break_before.setter
    def column_break_before(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_break_before", value)

    @property
    @pulumi.getter
    def footer(self) -> Optional[pulumi.Input['ReportLayoutPageFooterArgs']]:
        """
        Configure report page footer. The structure of `footer` block is documented below.
        """
        return pulumi.get(self, "footer")

    @footer.setter
    def footer(self, value: Optional[pulumi.Input['ReportLayoutPageFooterArgs']]):
        pulumi.set(self, "footer", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input['ReportLayoutPageHeaderArgs']]:
        """
        Configure report page header. The structure of `header` block is documented below.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input['ReportLayoutPageHeaderArgs']]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        Report page options. Valid values: `header-on-first-page`, `footer-on-first-page`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="pageBreakBefore")
    def page_break_before(self) -> Optional[pulumi.Input[str]]:
        """
        Report page auto page break before heading. Valid values: `heading1`, `heading2`, `heading3`.
        """
        return pulumi.get(self, "page_break_before")

    @page_break_before.setter
    def page_break_before(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "page_break_before", value)

    @property
    @pulumi.getter
    def paper(self) -> Optional[pulumi.Input[str]]:
        """
        Report page paper. Valid values: `a4`, `letter`.
        """
        return pulumi.get(self, "paper")

    @paper.setter
    def paper(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "paper", value)


@pulumi.input_type
class ReportLayoutPageFooterArgs:
    def __init__(__self__, *,
                 footer_items: Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutPageFooterFooterItemArgs']]]] = None,
                 style: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ReportLayoutPageFooterFooterItemArgs']]] footer_items: Configure report footer item. The structure of `footer_item` block is documented below.
        :param pulumi.Input[str] style: Report item style.
        """
        if footer_items is not None:
            pulumi.set(__self__, "footer_items", footer_items)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="footerItems")
    def footer_items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutPageFooterFooterItemArgs']]]]:
        """
        Configure report footer item. The structure of `footer_item` block is documented below.
        """
        return pulumi.get(self, "footer_items")

    @footer_items.setter
    def footer_items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutPageFooterFooterItemArgs']]]]):
        pulumi.set(self, "footer_items", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input[str]]:
        """
        Report item style.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class ReportLayoutPageFooterFooterItemArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 img_src: Optional[pulumi.Input[str]] = None,
                 style: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] content: List entry content.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[int] id: List entry ID.
        :param pulumi.Input[str] img_src: Report item image file name.
        :param pulumi.Input[str] style: Report item style.
        :param pulumi.Input[str] type: Report item type. Valid values: `text`, `image`, `chart`, `misc`.
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if img_src is not None:
            pulumi.set(__self__, "img_src", img_src)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        List entry content.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        List entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="imgSrc")
    def img_src(self) -> Optional[pulumi.Input[str]]:
        """
        Report item image file name.
        """
        return pulumi.get(self, "img_src")

    @img_src.setter
    def img_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "img_src", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input[str]]:
        """
        Report item style.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Report item type. Valid values: `text`, `image`, `chart`, `misc`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ReportLayoutPageHeaderArgs:
    def __init__(__self__, *,
                 header_items: Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutPageHeaderHeaderItemArgs']]]] = None,
                 style: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ReportLayoutPageHeaderHeaderItemArgs']]] header_items: Configure report header item. The structure of `header_item` block is documented below.
        :param pulumi.Input[str] style: Report item style.
        """
        if header_items is not None:
            pulumi.set(__self__, "header_items", header_items)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="headerItems")
    def header_items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutPageHeaderHeaderItemArgs']]]]:
        """
        Configure report header item. The structure of `header_item` block is documented below.
        """
        return pulumi.get(self, "header_items")

    @header_items.setter
    def header_items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReportLayoutPageHeaderHeaderItemArgs']]]]):
        pulumi.set(self, "header_items", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input[str]]:
        """
        Report item style.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class ReportLayoutPageHeaderHeaderItemArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 img_src: Optional[pulumi.Input[str]] = None,
                 style: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] content: List entry content.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[int] id: List entry ID.
        :param pulumi.Input[str] img_src: Report item image file name.
        :param pulumi.Input[str] style: Report item style.
        :param pulumi.Input[str] type: Report item type. Valid values: `text`, `image`, `chart`, `misc`.
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if img_src is not None:
            pulumi.set(__self__, "img_src", img_src)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        List entry content.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        List entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="imgSrc")
    def img_src(self) -> Optional[pulumi.Input[str]]:
        """
        Report item image file name.
        """
        return pulumi.get(self, "img_src")

    @img_src.setter
    def img_src(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "img_src", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input[str]]:
        """
        Report item style.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Report item type. Valid values: `text`, `image`, `chart`, `misc`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class RouterAccessList6RuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 exact_match: Optional[pulumi.Input[str]] = None,
                 flags: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix6: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Permit or deny this IP address and netmask prefix. Valid values: `permit`, `deny`.
        :param pulumi.Input[str] exact_match: Enable/disable exact prefix match. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] flags: Flags.
        :param pulumi.Input[int] id: Rule ID.
        :param pulumi.Input[str] prefix6: IPv6 prefix to define regular filter criteria, such as "any" or subnets.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Permit or deny this IP address and netmask prefix. Valid values: `permit`, `deny`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable exact prefix match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "exact_match")

    @exact_match.setter
    def exact_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exact_match", value)

    @property
    @pulumi.getter
    def flags(self) -> Optional[pulumi.Input[int]]:
        """
        Flags.
        """
        return pulumi.get(self, "flags")

    @flags.setter
    def flags(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flags", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Rule ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 prefix to define regular filter criteria, such as "any" or subnets.
        """
        return pulumi.get(self, "prefix6")

    @prefix6.setter
    def prefix6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix6", value)


@pulumi.input_type
class RouterAccessListRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 exact_match: Optional[pulumi.Input[str]] = None,
                 flags: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 wildcard: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Permit or deny this IP address and netmask prefix.
        :param pulumi.Input[str] exact_match: Enable/disable exact match.
        :param pulumi.Input[int] flags: Flags.
        :param pulumi.Input[int] id: Rule ID.
        :param pulumi.Input[str] prefix: IPv4 prefix to define regular filter criteria, such as "any" or subnets.
        :param pulumi.Input[str] wildcard: Wildcard to define Cisco-style wildcard filter criteria.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if wildcard is not None:
            pulumi.set(__self__, "wildcard", wildcard)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Permit or deny this IP address and netmask prefix.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable exact match.
        """
        return pulumi.get(self, "exact_match")

    @exact_match.setter
    def exact_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exact_match", value)

    @property
    @pulumi.getter
    def flags(self) -> Optional[pulumi.Input[int]]:
        """
        Flags.
        """
        return pulumi.get(self, "flags")

    @flags.setter
    def flags(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flags", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Rule ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 prefix to define regular filter criteria, such as "any" or subnets.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def wildcard(self) -> Optional[pulumi.Input[str]]:
        """
        Wildcard to define Cisco-style wildcard filter criteria.
        """
        return pulumi.get(self, "wildcard")

    @wildcard.setter
    def wildcard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wildcard", value)


@pulumi.input_type
class RouterAspathListRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 regexp: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Permit or deny route-based operations, based on the route's AS_PATH attribute. Valid values: `deny`, `permit`.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] regexp: Regular-expression to match the Border Gateway Protocol (BGP) AS paths.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if regexp is not None:
            pulumi.set(__self__, "regexp", regexp)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Permit or deny route-based operations, based on the route's AS_PATH attribute. Valid values: `deny`, `permit`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def regexp(self) -> Optional[pulumi.Input[str]]:
        """
        Regular-expression to match the Border Gateway Protocol (BGP) AS paths.
        """
        return pulumi.get(self, "regexp")

    @regexp.setter
    def regexp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regexp", value)


@pulumi.input_type
class RouterBfd6NeighborArgs:
    def __init__(__self__, *,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip6_address: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface: Interface to the BFD neighbor.
        :param pulumi.Input[str] ip6_address: IPv6 address of the BFD neighbor.
        """
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip6_address is not None:
            pulumi.set(__self__, "ip6_address", ip6_address)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface to the BFD neighbor.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ip6Address")
    def ip6_address(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the BFD neighbor.
        """
        return pulumi.get(self, "ip6_address")

    @ip6_address.setter
    def ip6_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_address", value)


@pulumi.input_type
class RouterBfdNeighborArgs:
    def __init__(__self__, *,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[str] ip: IPv4 address of the BFD neighbor.
        """
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of the BFD neighbor.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class RouterBgpAdminDistanceArgs:
    def __init__(__self__, *,
                 distance: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 neighbour_prefix: Optional[pulumi.Input[str]] = None,
                 route_list: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] distance: Administrative distance to apply (1 - 255).
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] neighbour_prefix: Neighbor address prefix.
        :param pulumi.Input[str] route_list: Access list of routes to apply new distance to.
        """
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if neighbour_prefix is not None:
            pulumi.set(__self__, "neighbour_prefix", neighbour_prefix)
        if route_list is not None:
            pulumi.set(__self__, "route_list", route_list)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[int]]:
        """
        Administrative distance to apply (1 - 255).
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="neighbourPrefix")
    def neighbour_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Neighbor address prefix.
        """
        return pulumi.get(self, "neighbour_prefix")

    @neighbour_prefix.setter
    def neighbour_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "neighbour_prefix", value)

    @property
    @pulumi.getter(name="routeList")
    def route_list(self) -> Optional[pulumi.Input[str]]:
        """
        Access list of routes to apply new distance to.
        """
        return pulumi.get(self, "route_list")

    @route_list.setter
    def route_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_list", value)


@pulumi.input_type
class RouterBgpAggregateAddress6Args:
    def __init__(__self__, *,
                 as_set: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix6: Optional[pulumi.Input[str]] = None,
                 summary_only: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] as_set: Enable/disable generate AS set path information. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] prefix6: Network IPv6 prefix.
        :param pulumi.Input[str] summary_only: Enable/disable filter more specific routes from updates. Valid values: `enable`, `disable`.
        """
        if as_set is not None:
            pulumi.set(__self__, "as_set", as_set)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)
        if summary_only is not None:
            pulumi.set(__self__, "summary_only", summary_only)

    @property
    @pulumi.getter(name="asSet")
    def as_set(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable generate AS set path information. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "as_set")

    @as_set.setter
    def as_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "as_set", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[pulumi.Input[str]]:
        """
        Network IPv6 prefix.
        """
        return pulumi.get(self, "prefix6")

    @prefix6.setter
    def prefix6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix6", value)

    @property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable filter more specific routes from updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "summary_only")

    @summary_only.setter
    def summary_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summary_only", value)


@pulumi.input_type
class RouterBgpAggregateAddressArgs:
    def __init__(__self__, *,
                 as_set: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 summary_only: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] as_set: Enable/disable generate AS set path information. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] prefix: Network prefix.
        :param pulumi.Input[str] summary_only: Enable/disable filter more specific routes from updates. Valid values: `enable`, `disable`.
        """
        if as_set is not None:
            pulumi.set(__self__, "as_set", as_set)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if summary_only is not None:
            pulumi.set(__self__, "summary_only", summary_only)

    @property
    @pulumi.getter(name="asSet")
    def as_set(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable generate AS set path information. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "as_set")

    @as_set.setter
    def as_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "as_set", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Network prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="summaryOnly")
    def summary_only(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable filter more specific routes from updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "summary_only")

    @summary_only.setter
    def summary_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summary_only", value)


@pulumi.input_type
class RouterBgpConfederationPeerArgs:
    def __init__(__self__, *,
                 peer: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] peer: Peer ID.
        """
        if peer is not None:
            pulumi.set(__self__, "peer", peer)

    @property
    @pulumi.getter
    def peer(self) -> Optional[pulumi.Input[str]]:
        """
        Peer ID.
        """
        return pulumi.get(self, "peer")

    @peer.setter
    def peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer", value)


@pulumi.input_type
class RouterBgpNeighborArgs:
    def __init__(__self__, *,
                 activate: Optional[pulumi.Input[str]] = None,
                 activate6: Optional[pulumi.Input[str]] = None,
                 additional_path: Optional[pulumi.Input[str]] = None,
                 additional_path6: Optional[pulumi.Input[str]] = None,
                 adv_additional_path: Optional[pulumi.Input[int]] = None,
                 adv_additional_path6: Optional[pulumi.Input[int]] = None,
                 advertisement_interval: Optional[pulumi.Input[int]] = None,
                 allowas_in: Optional[pulumi.Input[int]] = None,
                 allowas_in6: Optional[pulumi.Input[int]] = None,
                 allowas_in_enable: Optional[pulumi.Input[str]] = None,
                 allowas_in_enable6: Optional[pulumi.Input[str]] = None,
                 as_override: Optional[pulumi.Input[str]] = None,
                 as_override6: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged6: Optional[pulumi.Input[str]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 capability_default_originate: Optional[pulumi.Input[str]] = None,
                 capability_default_originate6: Optional[pulumi.Input[str]] = None,
                 capability_dynamic: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart6: Optional[pulumi.Input[str]] = None,
                 capability_orf: Optional[pulumi.Input[str]] = None,
                 capability_orf6: Optional[pulumi.Input[str]] = None,
                 capability_route_refresh: Optional[pulumi.Input[str]] = None,
                 conditional_advertise6s: Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpNeighborConditionalAdvertise6Args']]]] = None,
                 conditional_advertises: Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpNeighborConditionalAdvertiseArgs']]]] = None,
                 connect_timer: Optional[pulumi.Input[int]] = None,
                 default_originate_routemap: Optional[pulumi.Input[str]] = None,
                 default_originate_routemap6: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 distribute_list_in: Optional[pulumi.Input[str]] = None,
                 distribute_list_in6: Optional[pulumi.Input[str]] = None,
                 distribute_list_out: Optional[pulumi.Input[str]] = None,
                 distribute_list_out6: Optional[pulumi.Input[str]] = None,
                 dont_capability_negotiate: Optional[pulumi.Input[str]] = None,
                 ebgp_enforce_multihop: Optional[pulumi.Input[str]] = None,
                 ebgp_multihop_ttl: Optional[pulumi.Input[int]] = None,
                 filter_list_in: Optional[pulumi.Input[str]] = None,
                 filter_list_in6: Optional[pulumi.Input[str]] = None,
                 filter_list_out: Optional[pulumi.Input[str]] = None,
                 filter_list_out6: Optional[pulumi.Input[str]] = None,
                 holdtime_timer: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 keep_alive_timer: Optional[pulumi.Input[int]] = None,
                 link_down_failover: Optional[pulumi.Input[str]] = None,
                 local_as: Optional[pulumi.Input[int]] = None,
                 local_as_no_prepend: Optional[pulumi.Input[str]] = None,
                 local_as_replace_as: Optional[pulumi.Input[str]] = None,
                 maximum_prefix: Optional[pulumi.Input[int]] = None,
                 maximum_prefix6: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold6: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_warning_only: Optional[pulumi.Input[str]] = None,
                 maximum_prefix_warning_only6: Optional[pulumi.Input[str]] = None,
                 next_hop_self: Optional[pulumi.Input[str]] = None,
                 next_hop_self6: Optional[pulumi.Input[str]] = None,
                 next_hop_self_rr: Optional[pulumi.Input[str]] = None,
                 next_hop_self_rr6: Optional[pulumi.Input[str]] = None,
                 override_capability: Optional[pulumi.Input[str]] = None,
                 passive: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 prefix_list_in: Optional[pulumi.Input[str]] = None,
                 prefix_list_in6: Optional[pulumi.Input[str]] = None,
                 prefix_list_out: Optional[pulumi.Input[str]] = None,
                 prefix_list_out6: Optional[pulumi.Input[str]] = None,
                 remote_as: Optional[pulumi.Input[int]] = None,
                 remove_private_as: Optional[pulumi.Input[str]] = None,
                 remove_private_as6: Optional[pulumi.Input[str]] = None,
                 restart_time: Optional[pulumi.Input[int]] = None,
                 retain_stale_time: Optional[pulumi.Input[int]] = None,
                 route_map_in: Optional[pulumi.Input[str]] = None,
                 route_map_in6: Optional[pulumi.Input[str]] = None,
                 route_map_out: Optional[pulumi.Input[str]] = None,
                 route_map_out6: Optional[pulumi.Input[str]] = None,
                 route_map_out6_preferable: Optional[pulumi.Input[str]] = None,
                 route_map_out_preferable: Optional[pulumi.Input[str]] = None,
                 route_reflector_client: Optional[pulumi.Input[str]] = None,
                 route_reflector_client6: Optional[pulumi.Input[str]] = None,
                 route_server_client: Optional[pulumi.Input[str]] = None,
                 route_server_client6: Optional[pulumi.Input[str]] = None,
                 send_community: Optional[pulumi.Input[str]] = None,
                 send_community6: Optional[pulumi.Input[str]] = None,
                 shutdown: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration6: Optional[pulumi.Input[str]] = None,
                 stale_route: Optional[pulumi.Input[str]] = None,
                 strict_capability_match: Optional[pulumi.Input[str]] = None,
                 unsuppress_map: Optional[pulumi.Input[str]] = None,
                 unsuppress_map6: Optional[pulumi.Input[str]] = None,
                 update_source: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] activate: Enable/disable address family IPv4 for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] activate6: Enable/disable address family IPv6 for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] additional_path: Enable/disable IPv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param pulumi.Input[str] additional_path6: Enable/disable IPv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param pulumi.Input[int] adv_additional_path: Number of IPv4 additional paths that can be advertised to this neighbor.
        :param pulumi.Input[int] adv_additional_path6: Number of IPv6 additional paths that can be advertised to this neighbor.
        :param pulumi.Input[int] advertisement_interval: Minimum interval (sec) between sending updates.
        :param pulumi.Input[int] allowas_in: IPv4 The maximum number of occurrence of my AS number allowed.
        :param pulumi.Input[int] allowas_in6: IPv6 The maximum number of occurrence of my AS number allowed.
        :param pulumi.Input[str] allowas_in_enable: Enable/disable IPv4 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allowas_in_enable6: Enable/disable IPv6 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] as_override: Enable/disable replace peer AS with own AS for IPv4. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] as_override6: Enable/disable replace peer AS with own AS for IPv6. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] attribute_unchanged: IPv4 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        :param pulumi.Input[str] attribute_unchanged6: IPv6 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        :param pulumi.Input[str] bfd: Enable/disable BFD for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_default_originate: Enable/disable advertise default IPv4 route to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_default_originate6: Enable/disable advertise default IPv6 route to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_dynamic: Enable/disable advertise dynamic capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_graceful_restart: Enable/disable advertise IPv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_graceful_restart6: Enable/disable advertise IPv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_orf: Accept/Send IPv4 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        :param pulumi.Input[str] capability_orf6: Accept/Send IPv6 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        :param pulumi.Input[str] capability_route_refresh: Enable/disable advertise route refresh capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['RouterBgpNeighborConditionalAdvertise6Args']]] conditional_advertise6s: IPv6 conditional advertisement. The structure of `conditional_advertise6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['RouterBgpNeighborConditionalAdvertiseArgs']]] conditional_advertises: Conditional advertisement. The structure of `conditional_advertise` block is documented below.
        :param pulumi.Input[int] connect_timer: Interval (sec) for connect timer.
        :param pulumi.Input[str] default_originate_routemap: Route map to specify criteria to originate IPv4 default.
        :param pulumi.Input[str] default_originate_routemap6: Route map to specify criteria to originate IPv6 default.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] distribute_list_in: Filter for IPv4 updates from this neighbor.
        :param pulumi.Input[str] distribute_list_in6: Filter for IPv6 updates from this neighbor.
        :param pulumi.Input[str] distribute_list_out: Filter for IPv4 updates to this neighbor.
        :param pulumi.Input[str] distribute_list_out6: Filter for IPv6 updates to this neighbor.
        :param pulumi.Input[str] dont_capability_negotiate: Don't negotiate capabilities with this neighbor Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ebgp_enforce_multihop: Enable/disable allow multi-hop EBGP neighbors. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ebgp_multihop_ttl: EBGP multihop TTL for this peer.
        :param pulumi.Input[str] filter_list_in: BGP filter for IPv4 inbound routes.
        :param pulumi.Input[str] filter_list_in6: BGP filter for IPv6 inbound routes.
        :param pulumi.Input[str] filter_list_out: BGP filter for IPv4 outbound routes.
        :param pulumi.Input[str] filter_list_out6: BGP filter for IPv6 outbound routes.
        :param pulumi.Input[int] holdtime_timer: Interval (sec) before peer considered dead.
        :param pulumi.Input[str] interface: Interface which is used to leak routes to target VRF.
        :param pulumi.Input[str] ip: IP/IPv6 address of neighbor.
        :param pulumi.Input[int] keep_alive_timer: Keep alive timer interval (sec).
        :param pulumi.Input[str] link_down_failover: Enable/disable failover upon link down. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] local_as: Local AS number of neighbor.
        :param pulumi.Input[str] local_as_no_prepend: Do not prepend local-as to incoming updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] local_as_replace_as: Replace real AS with local-as in outgoing updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] maximum_prefix: Maximum number of IPv4 prefixes to accept from this peer.
        :param pulumi.Input[int] maximum_prefix6: Maximum number of IPv6 prefixes to accept from this peer.
        :param pulumi.Input[int] maximum_prefix_threshold: Maximum IPv4 prefix threshold value (1 - 100 percent).
        :param pulumi.Input[int] maximum_prefix_threshold6: Maximum IPv6 prefix threshold value (1 - 100 percent).
        :param pulumi.Input[str] maximum_prefix_warning_only: Enable/disable IPv4 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] maximum_prefix_warning_only6: Enable/disable IPv6 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self: Enable/disable IPv4 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self6: Enable/disable IPv6 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self_rr: Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self_rr6: Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_capability: Enable/disable override result of capability negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] passive: Enable/disable sending of open messages to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] password: Password used in MD5 authentication.
        :param pulumi.Input[str] prefix_list_in: IPv4 Inbound filter for updates from this neighbor.
        :param pulumi.Input[str] prefix_list_in6: IPv6 Inbound filter for updates from this neighbor.
        :param pulumi.Input[str] prefix_list_out: IPv4 Outbound filter for updates to this neighbor.
        :param pulumi.Input[str] prefix_list_out6: IPv6 Outbound filter for updates to this neighbor.
        :param pulumi.Input[int] remote_as: AS number of neighbor.
        :param pulumi.Input[str] remove_private_as: Enable/disable remove private AS number from IPv4 outbound updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remove_private_as6: Enable/disable remove private AS number from IPv6 outbound updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] restart_time: Graceful restart delay time (sec, 0 = global default).
        :param pulumi.Input[int] retain_stale_time: Time to retain stale routes.
        :param pulumi.Input[str] route_map_in: IPv4 Inbound route map filter.
        :param pulumi.Input[str] route_map_in6: IPv6 Inbound route map filter.
        :param pulumi.Input[str] route_map_out: IPv4 Outbound route map filter.
        :param pulumi.Input[str] route_map_out6: IPv6 Outbound route map filter.
        :param pulumi.Input[str] route_map_out6_preferable: IPv6 outbound route map filter if the peer is preferred.
        :param pulumi.Input[str] route_map_out_preferable: IPv4 outbound route map filter if the peer is preferred.
        :param pulumi.Input[str] route_reflector_client: Enable/disable IPv4 AS route reflector client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_reflector_client6: Enable/disable IPv6 AS route reflector client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_server_client: Enable/disable IPv4 AS route server client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_server_client6: Enable/disable IPv6 AS route server client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] send_community: IPv4 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        :param pulumi.Input[str] send_community6: IPv6 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        :param pulumi.Input[str] shutdown: Enable/disable shutdown this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] soft_reconfiguration: Enable/disable allow IPv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] soft_reconfiguration6: Enable/disable allow IPv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] stale_route: Enable/disable stale route after neighbor down. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] strict_capability_match: Enable/disable strict capability matching. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] unsuppress_map: IPv4 Route map to selectively unsuppress suppressed routes.
        :param pulumi.Input[str] unsuppress_map6: IPv6 Route map to selectively unsuppress suppressed routes.
        :param pulumi.Input[str] update_source: Interface to use as source IP/IPv6 address of TCP connections.
        :param pulumi.Input[int] weight: Neighbor weight.
        """
        if activate is not None:
            pulumi.set(__self__, "activate", activate)
        if activate6 is not None:
            pulumi.set(__self__, "activate6", activate6)
        if additional_path is not None:
            pulumi.set(__self__, "additional_path", additional_path)
        if additional_path6 is not None:
            pulumi.set(__self__, "additional_path6", additional_path6)
        if adv_additional_path is not None:
            pulumi.set(__self__, "adv_additional_path", adv_additional_path)
        if adv_additional_path6 is not None:
            pulumi.set(__self__, "adv_additional_path6", adv_additional_path6)
        if advertisement_interval is not None:
            pulumi.set(__self__, "advertisement_interval", advertisement_interval)
        if allowas_in is not None:
            pulumi.set(__self__, "allowas_in", allowas_in)
        if allowas_in6 is not None:
            pulumi.set(__self__, "allowas_in6", allowas_in6)
        if allowas_in_enable is not None:
            pulumi.set(__self__, "allowas_in_enable", allowas_in_enable)
        if allowas_in_enable6 is not None:
            pulumi.set(__self__, "allowas_in_enable6", allowas_in_enable6)
        if as_override is not None:
            pulumi.set(__self__, "as_override", as_override)
        if as_override6 is not None:
            pulumi.set(__self__, "as_override6", as_override6)
        if attribute_unchanged is not None:
            pulumi.set(__self__, "attribute_unchanged", attribute_unchanged)
        if attribute_unchanged6 is not None:
            pulumi.set(__self__, "attribute_unchanged6", attribute_unchanged6)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if capability_default_originate is not None:
            pulumi.set(__self__, "capability_default_originate", capability_default_originate)
        if capability_default_originate6 is not None:
            pulumi.set(__self__, "capability_default_originate6", capability_default_originate6)
        if capability_dynamic is not None:
            pulumi.set(__self__, "capability_dynamic", capability_dynamic)
        if capability_graceful_restart is not None:
            pulumi.set(__self__, "capability_graceful_restart", capability_graceful_restart)
        if capability_graceful_restart6 is not None:
            pulumi.set(__self__, "capability_graceful_restart6", capability_graceful_restart6)
        if capability_orf is not None:
            pulumi.set(__self__, "capability_orf", capability_orf)
        if capability_orf6 is not None:
            pulumi.set(__self__, "capability_orf6", capability_orf6)
        if capability_route_refresh is not None:
            pulumi.set(__self__, "capability_route_refresh", capability_route_refresh)
        if conditional_advertise6s is not None:
            pulumi.set(__self__, "conditional_advertise6s", conditional_advertise6s)
        if conditional_advertises is not None:
            pulumi.set(__self__, "conditional_advertises", conditional_advertises)
        if connect_timer is not None:
            pulumi.set(__self__, "connect_timer", connect_timer)
        if default_originate_routemap is not None:
            pulumi.set(__self__, "default_originate_routemap", default_originate_routemap)
        if default_originate_routemap6 is not None:
            pulumi.set(__self__, "default_originate_routemap6", default_originate_routemap6)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if distribute_list_in is not None:
            pulumi.set(__self__, "distribute_list_in", distribute_list_in)
        if distribute_list_in6 is not None:
            pulumi.set(__self__, "distribute_list_in6", distribute_list_in6)
        if distribute_list_out is not None:
            pulumi.set(__self__, "distribute_list_out", distribute_list_out)
        if distribute_list_out6 is not None:
            pulumi.set(__self__, "distribute_list_out6", distribute_list_out6)
        if dont_capability_negotiate is not None:
            pulumi.set(__self__, "dont_capability_negotiate", dont_capability_negotiate)
        if ebgp_enforce_multihop is not None:
            pulumi.set(__self__, "ebgp_enforce_multihop", ebgp_enforce_multihop)
        if ebgp_multihop_ttl is not None:
            pulumi.set(__self__, "ebgp_multihop_ttl", ebgp_multihop_ttl)
        if filter_list_in is not None:
            pulumi.set(__self__, "filter_list_in", filter_list_in)
        if filter_list_in6 is not None:
            pulumi.set(__self__, "filter_list_in6", filter_list_in6)
        if filter_list_out is not None:
            pulumi.set(__self__, "filter_list_out", filter_list_out)
        if filter_list_out6 is not None:
            pulumi.set(__self__, "filter_list_out6", filter_list_out6)
        if holdtime_timer is not None:
            pulumi.set(__self__, "holdtime_timer", holdtime_timer)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if keep_alive_timer is not None:
            pulumi.set(__self__, "keep_alive_timer", keep_alive_timer)
        if link_down_failover is not None:
            pulumi.set(__self__, "link_down_failover", link_down_failover)
        if local_as is not None:
            pulumi.set(__self__, "local_as", local_as)
        if local_as_no_prepend is not None:
            pulumi.set(__self__, "local_as_no_prepend", local_as_no_prepend)
        if local_as_replace_as is not None:
            pulumi.set(__self__, "local_as_replace_as", local_as_replace_as)
        if maximum_prefix is not None:
            pulumi.set(__self__, "maximum_prefix", maximum_prefix)
        if maximum_prefix6 is not None:
            pulumi.set(__self__, "maximum_prefix6", maximum_prefix6)
        if maximum_prefix_threshold is not None:
            pulumi.set(__self__, "maximum_prefix_threshold", maximum_prefix_threshold)
        if maximum_prefix_threshold6 is not None:
            pulumi.set(__self__, "maximum_prefix_threshold6", maximum_prefix_threshold6)
        if maximum_prefix_warning_only is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only", maximum_prefix_warning_only)
        if maximum_prefix_warning_only6 is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only6", maximum_prefix_warning_only6)
        if next_hop_self is not None:
            pulumi.set(__self__, "next_hop_self", next_hop_self)
        if next_hop_self6 is not None:
            pulumi.set(__self__, "next_hop_self6", next_hop_self6)
        if next_hop_self_rr is not None:
            pulumi.set(__self__, "next_hop_self_rr", next_hop_self_rr)
        if next_hop_self_rr6 is not None:
            pulumi.set(__self__, "next_hop_self_rr6", next_hop_self_rr6)
        if override_capability is not None:
            pulumi.set(__self__, "override_capability", override_capability)
        if passive is not None:
            pulumi.set(__self__, "passive", passive)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if prefix_list_in is not None:
            pulumi.set(__self__, "prefix_list_in", prefix_list_in)
        if prefix_list_in6 is not None:
            pulumi.set(__self__, "prefix_list_in6", prefix_list_in6)
        if prefix_list_out is not None:
            pulumi.set(__self__, "prefix_list_out", prefix_list_out)
        if prefix_list_out6 is not None:
            pulumi.set(__self__, "prefix_list_out6", prefix_list_out6)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if remove_private_as is not None:
            pulumi.set(__self__, "remove_private_as", remove_private_as)
        if remove_private_as6 is not None:
            pulumi.set(__self__, "remove_private_as6", remove_private_as6)
        if restart_time is not None:
            pulumi.set(__self__, "restart_time", restart_time)
        if retain_stale_time is not None:
            pulumi.set(__self__, "retain_stale_time", retain_stale_time)
        if route_map_in is not None:
            pulumi.set(__self__, "route_map_in", route_map_in)
        if route_map_in6 is not None:
            pulumi.set(__self__, "route_map_in6", route_map_in6)
        if route_map_out is not None:
            pulumi.set(__self__, "route_map_out", route_map_out)
        if route_map_out6 is not None:
            pulumi.set(__self__, "route_map_out6", route_map_out6)
        if route_map_out6_preferable is not None:
            pulumi.set(__self__, "route_map_out6_preferable", route_map_out6_preferable)
        if route_map_out_preferable is not None:
            pulumi.set(__self__, "route_map_out_preferable", route_map_out_preferable)
        if route_reflector_client is not None:
            pulumi.set(__self__, "route_reflector_client", route_reflector_client)
        if route_reflector_client6 is not None:
            pulumi.set(__self__, "route_reflector_client6", route_reflector_client6)
        if route_server_client is not None:
            pulumi.set(__self__, "route_server_client", route_server_client)
        if route_server_client6 is not None:
            pulumi.set(__self__, "route_server_client6", route_server_client6)
        if send_community is not None:
            pulumi.set(__self__, "send_community", send_community)
        if send_community6 is not None:
            pulumi.set(__self__, "send_community6", send_community6)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if soft_reconfiguration is not None:
            pulumi.set(__self__, "soft_reconfiguration", soft_reconfiguration)
        if soft_reconfiguration6 is not None:
            pulumi.set(__self__, "soft_reconfiguration6", soft_reconfiguration6)
        if stale_route is not None:
            pulumi.set(__self__, "stale_route", stale_route)
        if strict_capability_match is not None:
            pulumi.set(__self__, "strict_capability_match", strict_capability_match)
        if unsuppress_map is not None:
            pulumi.set(__self__, "unsuppress_map", unsuppress_map)
        if unsuppress_map6 is not None:
            pulumi.set(__self__, "unsuppress_map6", unsuppress_map6)
        if update_source is not None:
            pulumi.set(__self__, "update_source", update_source)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def activate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable address family IPv4 for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate")

    @activate.setter
    def activate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activate", value)

    @property
    @pulumi.getter
    def activate6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable address family IPv6 for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate6")

    @activate6.setter
    def activate6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activate6", value)

    @property
    @pulumi.getter(name="additionalPath")
    def additional_path(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        """
        return pulumi.get(self, "additional_path")

    @additional_path.setter
    def additional_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path", value)

    @property
    @pulumi.getter(name="additionalPath6")
    def additional_path6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        """
        return pulumi.get(self, "additional_path6")

    @additional_path6.setter
    def additional_path6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path6", value)

    @property
    @pulumi.getter(name="advAdditionalPath")
    def adv_additional_path(self) -> Optional[pulumi.Input[int]]:
        """
        Number of IPv4 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path")

    @adv_additional_path.setter
    def adv_additional_path(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adv_additional_path", value)

    @property
    @pulumi.getter(name="advAdditionalPath6")
    def adv_additional_path6(self) -> Optional[pulumi.Input[int]]:
        """
        Number of IPv6 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path6")

    @adv_additional_path6.setter
    def adv_additional_path6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adv_additional_path6", value)

    @property
    @pulumi.getter(name="advertisementInterval")
    def advertisement_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum interval (sec) between sending updates.
        """
        return pulumi.get(self, "advertisement_interval")

    @advertisement_interval.setter
    def advertisement_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "advertisement_interval", value)

    @property
    @pulumi.getter(name="allowasIn")
    def allowas_in(self) -> Optional[pulumi.Input[int]]:
        """
        IPv4 The maximum number of occurrence of my AS number allowed.
        """
        return pulumi.get(self, "allowas_in")

    @allowas_in.setter
    def allowas_in(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowas_in", value)

    @property
    @pulumi.getter(name="allowasIn6")
    def allowas_in6(self) -> Optional[pulumi.Input[int]]:
        """
        IPv6 The maximum number of occurrence of my AS number allowed.
        """
        return pulumi.get(self, "allowas_in6")

    @allowas_in6.setter
    def allowas_in6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowas_in6", value)

    @property
    @pulumi.getter(name="allowasInEnable")
    def allowas_in_enable(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable")

    @allowas_in_enable.setter
    def allowas_in_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowas_in_enable", value)

    @property
    @pulumi.getter(name="allowasInEnable6")
    def allowas_in_enable6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable6")

    @allowas_in_enable6.setter
    def allowas_in_enable6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowas_in_enable6", value)

    @property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable replace peer AS with own AS for IPv4. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "as_override")

    @as_override.setter
    def as_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "as_override", value)

    @property
    @pulumi.getter(name="asOverride6")
    def as_override6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable replace peer AS with own AS for IPv6. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "as_override6")

    @as_override6.setter
    def as_override6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "as_override6", value)

    @property
    @pulumi.getter(name="attributeUnchanged")
    def attribute_unchanged(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        """
        return pulumi.get(self, "attribute_unchanged")

    @attribute_unchanged.setter
    def attribute_unchanged(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_unchanged", value)

    @property
    @pulumi.getter(name="attributeUnchanged6")
    def attribute_unchanged6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        """
        return pulumi.get(self, "attribute_unchanged6")

    @attribute_unchanged6.setter
    def attribute_unchanged6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_unchanged6", value)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable BFD for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter(name="capabilityDefaultOriginate")
    def capability_default_originate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise default IPv4 route to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_default_originate")

    @capability_default_originate.setter
    def capability_default_originate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_default_originate", value)

    @property
    @pulumi.getter(name="capabilityDefaultOriginate6")
    def capability_default_originate6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise default IPv6 route to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_default_originate6")

    @capability_default_originate6.setter
    def capability_default_originate6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_default_originate6", value)

    @property
    @pulumi.getter(name="capabilityDynamic")
    def capability_dynamic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise dynamic capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_dynamic")

    @capability_dynamic.setter
    def capability_dynamic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_dynamic", value)

    @property
    @pulumi.getter(name="capabilityGracefulRestart")
    def capability_graceful_restart(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise IPv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart")

    @capability_graceful_restart.setter
    def capability_graceful_restart(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_graceful_restart", value)

    @property
    @pulumi.getter(name="capabilityGracefulRestart6")
    def capability_graceful_restart6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise IPv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart6")

    @capability_graceful_restart6.setter
    def capability_graceful_restart6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_graceful_restart6", value)

    @property
    @pulumi.getter(name="capabilityOrf")
    def capability_orf(self) -> Optional[pulumi.Input[str]]:
        """
        Accept/Send IPv4 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        """
        return pulumi.get(self, "capability_orf")

    @capability_orf.setter
    def capability_orf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_orf", value)

    @property
    @pulumi.getter(name="capabilityOrf6")
    def capability_orf6(self) -> Optional[pulumi.Input[str]]:
        """
        Accept/Send IPv6 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        """
        return pulumi.get(self, "capability_orf6")

    @capability_orf6.setter
    def capability_orf6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_orf6", value)

    @property
    @pulumi.getter(name="capabilityRouteRefresh")
    def capability_route_refresh(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise route refresh capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_route_refresh")

    @capability_route_refresh.setter
    def capability_route_refresh(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_route_refresh", value)

    @property
    @pulumi.getter(name="conditionalAdvertise6s")
    def conditional_advertise6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpNeighborConditionalAdvertise6Args']]]]:
        """
        IPv6 conditional advertisement. The structure of `conditional_advertise6` block is documented below.
        """
        return pulumi.get(self, "conditional_advertise6s")

    @conditional_advertise6s.setter
    def conditional_advertise6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpNeighborConditionalAdvertise6Args']]]]):
        pulumi.set(self, "conditional_advertise6s", value)

    @property
    @pulumi.getter(name="conditionalAdvertises")
    def conditional_advertises(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpNeighborConditionalAdvertiseArgs']]]]:
        """
        Conditional advertisement. The structure of `conditional_advertise` block is documented below.
        """
        return pulumi.get(self, "conditional_advertises")

    @conditional_advertises.setter
    def conditional_advertises(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpNeighborConditionalAdvertiseArgs']]]]):
        pulumi.set(self, "conditional_advertises", value)

    @property
    @pulumi.getter(name="connectTimer")
    def connect_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Interval (sec) for connect timer.
        """
        return pulumi.get(self, "connect_timer")

    @connect_timer.setter
    def connect_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connect_timer", value)

    @property
    @pulumi.getter(name="defaultOriginateRoutemap")
    def default_originate_routemap(self) -> Optional[pulumi.Input[str]]:
        """
        Route map to specify criteria to originate IPv4 default.
        """
        return pulumi.get(self, "default_originate_routemap")

    @default_originate_routemap.setter
    def default_originate_routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_originate_routemap", value)

    @property
    @pulumi.getter(name="defaultOriginateRoutemap6")
    def default_originate_routemap6(self) -> Optional[pulumi.Input[str]]:
        """
        Route map to specify criteria to originate IPv6 default.
        """
        return pulumi.get(self, "default_originate_routemap6")

    @default_originate_routemap6.setter
    def default_originate_routemap6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_originate_routemap6", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="distributeListIn")
    def distribute_list_in(self) -> Optional[pulumi.Input[str]]:
        """
        Filter for IPv4 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in")

    @distribute_list_in.setter
    def distribute_list_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_in", value)

    @property
    @pulumi.getter(name="distributeListIn6")
    def distribute_list_in6(self) -> Optional[pulumi.Input[str]]:
        """
        Filter for IPv6 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in6")

    @distribute_list_in6.setter
    def distribute_list_in6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_in6", value)

    @property
    @pulumi.getter(name="distributeListOut")
    def distribute_list_out(self) -> Optional[pulumi.Input[str]]:
        """
        Filter for IPv4 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out")

    @distribute_list_out.setter
    def distribute_list_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_out", value)

    @property
    @pulumi.getter(name="distributeListOut6")
    def distribute_list_out6(self) -> Optional[pulumi.Input[str]]:
        """
        Filter for IPv6 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out6")

    @distribute_list_out6.setter
    def distribute_list_out6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_out6", value)

    @property
    @pulumi.getter(name="dontCapabilityNegotiate")
    def dont_capability_negotiate(self) -> Optional[pulumi.Input[str]]:
        """
        Don't negotiate capabilities with this neighbor Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dont_capability_negotiate")

    @dont_capability_negotiate.setter
    def dont_capability_negotiate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dont_capability_negotiate", value)

    @property
    @pulumi.getter(name="ebgpEnforceMultihop")
    def ebgp_enforce_multihop(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allow multi-hop EBGP neighbors. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ebgp_enforce_multihop")

    @ebgp_enforce_multihop.setter
    def ebgp_enforce_multihop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ebgp_enforce_multihop", value)

    @property
    @pulumi.getter(name="ebgpMultihopTtl")
    def ebgp_multihop_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        EBGP multihop TTL for this peer.
        """
        return pulumi.get(self, "ebgp_multihop_ttl")

    @ebgp_multihop_ttl.setter
    def ebgp_multihop_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ebgp_multihop_ttl", value)

    @property
    @pulumi.getter(name="filterListIn")
    def filter_list_in(self) -> Optional[pulumi.Input[str]]:
        """
        BGP filter for IPv4 inbound routes.
        """
        return pulumi.get(self, "filter_list_in")

    @filter_list_in.setter
    def filter_list_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_in", value)

    @property
    @pulumi.getter(name="filterListIn6")
    def filter_list_in6(self) -> Optional[pulumi.Input[str]]:
        """
        BGP filter for IPv6 inbound routes.
        """
        return pulumi.get(self, "filter_list_in6")

    @filter_list_in6.setter
    def filter_list_in6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_in6", value)

    @property
    @pulumi.getter(name="filterListOut")
    def filter_list_out(self) -> Optional[pulumi.Input[str]]:
        """
        BGP filter for IPv4 outbound routes.
        """
        return pulumi.get(self, "filter_list_out")

    @filter_list_out.setter
    def filter_list_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_out", value)

    @property
    @pulumi.getter(name="filterListOut6")
    def filter_list_out6(self) -> Optional[pulumi.Input[str]]:
        """
        BGP filter for IPv6 outbound routes.
        """
        return pulumi.get(self, "filter_list_out6")

    @filter_list_out6.setter
    def filter_list_out6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_out6", value)

    @property
    @pulumi.getter(name="holdtimeTimer")
    def holdtime_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Interval (sec) before peer considered dead.
        """
        return pulumi.get(self, "holdtime_timer")

    @holdtime_timer.setter
    def holdtime_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "holdtime_timer", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface which is used to leak routes to target VRF.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP/IPv6 address of neighbor.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="keepAliveTimer")
    def keep_alive_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Keep alive timer interval (sec).
        """
        return pulumi.get(self, "keep_alive_timer")

    @keep_alive_timer.setter
    def keep_alive_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keep_alive_timer", value)

    @property
    @pulumi.getter(name="linkDownFailover")
    def link_down_failover(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable failover upon link down. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "link_down_failover")

    @link_down_failover.setter
    def link_down_failover(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_down_failover", value)

    @property
    @pulumi.getter(name="localAs")
    def local_as(self) -> Optional[pulumi.Input[int]]:
        """
        Local AS number of neighbor.
        """
        return pulumi.get(self, "local_as")

    @local_as.setter
    def local_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "local_as", value)

    @property
    @pulumi.getter(name="localAsNoPrepend")
    def local_as_no_prepend(self) -> Optional[pulumi.Input[str]]:
        """
        Do not prepend local-as to incoming updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_as_no_prepend")

    @local_as_no_prepend.setter
    def local_as_no_prepend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_as_no_prepend", value)

    @property
    @pulumi.getter(name="localAsReplaceAs")
    def local_as_replace_as(self) -> Optional[pulumi.Input[str]]:
        """
        Replace real AS with local-as in outgoing updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_as_replace_as")

    @local_as_replace_as.setter
    def local_as_replace_as(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_as_replace_as", value)

    @property
    @pulumi.getter(name="maximumPrefix")
    def maximum_prefix(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of IPv4 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix")

    @maximum_prefix.setter
    def maximum_prefix(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix", value)

    @property
    @pulumi.getter(name="maximumPrefix6")
    def maximum_prefix6(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of IPv6 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix6")

    @maximum_prefix6.setter
    def maximum_prefix6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix6", value)

    @property
    @pulumi.getter(name="maximumPrefixThreshold")
    def maximum_prefix_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum IPv4 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold")

    @maximum_prefix_threshold.setter
    def maximum_prefix_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_threshold", value)

    @property
    @pulumi.getter(name="maximumPrefixThreshold6")
    def maximum_prefix_threshold6(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum IPv6 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold6")

    @maximum_prefix_threshold6.setter
    def maximum_prefix_threshold6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_threshold6", value)

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly")
    def maximum_prefix_warning_only(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only")

    @maximum_prefix_warning_only.setter
    def maximum_prefix_warning_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_prefix_warning_only", value)

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly6")
    def maximum_prefix_warning_only6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only6")

    @maximum_prefix_warning_only6.setter
    def maximum_prefix_warning_only6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_prefix_warning_only6", value)

    @property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self")

    @next_hop_self.setter
    def next_hop_self(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self", value)

    @property
    @pulumi.getter(name="nextHopSelf6")
    def next_hop_self6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self6")

    @next_hop_self6.setter
    def next_hop_self6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self6", value)

    @property
    @pulumi.getter(name="nextHopSelfRr")
    def next_hop_self_rr(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self_rr")

    @next_hop_self_rr.setter
    def next_hop_self_rr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self_rr", value)

    @property
    @pulumi.getter(name="nextHopSelfRr6")
    def next_hop_self_rr6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self_rr6")

    @next_hop_self_rr6.setter
    def next_hop_self_rr6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self_rr6", value)

    @property
    @pulumi.getter(name="overrideCapability")
    def override_capability(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable override result of capability negotiation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_capability")

    @override_capability.setter
    def override_capability(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_capability", value)

    @property
    @pulumi.getter
    def passive(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending of open messages to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "passive")

    @passive.setter
    def passive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passive", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password used in MD5 authentication.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="prefixListIn")
    def prefix_list_in(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Inbound filter for updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in")

    @prefix_list_in.setter
    def prefix_list_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_in", value)

    @property
    @pulumi.getter(name="prefixListIn6")
    def prefix_list_in6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Inbound filter for updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in6")

    @prefix_list_in6.setter
    def prefix_list_in6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_in6", value)

    @property
    @pulumi.getter(name="prefixListOut")
    def prefix_list_out(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Outbound filter for updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out")

    @prefix_list_out.setter
    def prefix_list_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_out", value)

    @property
    @pulumi.getter(name="prefixListOut6")
    def prefix_list_out6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Outbound filter for updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out6")

    @prefix_list_out6.setter
    def prefix_list_out6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_out6", value)

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[pulumi.Input[int]]:
        """
        AS number of neighbor.
        """
        return pulumi.get(self, "remote_as")

    @remote_as.setter
    def remote_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remote_as", value)

    @property
    @pulumi.getter(name="removePrivateAs")
    def remove_private_as(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable remove private AS number from IPv4 outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as")

    @remove_private_as.setter
    def remove_private_as(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_private_as", value)

    @property
    @pulumi.getter(name="removePrivateAs6")
    def remove_private_as6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable remove private AS number from IPv6 outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as6")

    @remove_private_as6.setter
    def remove_private_as6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_private_as6", value)

    @property
    @pulumi.getter(name="restartTime")
    def restart_time(self) -> Optional[pulumi.Input[int]]:
        """
        Graceful restart delay time (sec, 0 = global default).
        """
        return pulumi.get(self, "restart_time")

    @restart_time.setter
    def restart_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "restart_time", value)

    @property
    @pulumi.getter(name="retainStaleTime")
    def retain_stale_time(self) -> Optional[pulumi.Input[int]]:
        """
        Time to retain stale routes.
        """
        return pulumi.get(self, "retain_stale_time")

    @retain_stale_time.setter
    def retain_stale_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retain_stale_time", value)

    @property
    @pulumi.getter(name="routeMapIn")
    def route_map_in(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Inbound route map filter.
        """
        return pulumi.get(self, "route_map_in")

    @route_map_in.setter
    def route_map_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_in", value)

    @property
    @pulumi.getter(name="routeMapIn6")
    def route_map_in6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Inbound route map filter.
        """
        return pulumi.get(self, "route_map_in6")

    @route_map_in6.setter
    def route_map_in6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_in6", value)

    @property
    @pulumi.getter(name="routeMapOut")
    def route_map_out(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Outbound route map filter.
        """
        return pulumi.get(self, "route_map_out")

    @route_map_out.setter
    def route_map_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out", value)

    @property
    @pulumi.getter(name="routeMapOut6")
    def route_map_out6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Outbound route map filter.
        """
        return pulumi.get(self, "route_map_out6")

    @route_map_out6.setter
    def route_map_out6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out6", value)

    @property
    @pulumi.getter(name="routeMapOut6Preferable")
    def route_map_out6_preferable(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out6_preferable")

    @route_map_out6_preferable.setter
    def route_map_out6_preferable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out6_preferable", value)

    @property
    @pulumi.getter(name="routeMapOutPreferable")
    def route_map_out_preferable(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out_preferable")

    @route_map_out_preferable.setter
    def route_map_out_preferable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out_preferable", value)

    @property
    @pulumi.getter(name="routeReflectorClient")
    def route_reflector_client(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 AS route reflector client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client")

    @route_reflector_client.setter
    def route_reflector_client(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_reflector_client", value)

    @property
    @pulumi.getter(name="routeReflectorClient6")
    def route_reflector_client6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 AS route reflector client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client6")

    @route_reflector_client6.setter
    def route_reflector_client6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_reflector_client6", value)

    @property
    @pulumi.getter(name="routeServerClient")
    def route_server_client(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 AS route server client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client")

    @route_server_client.setter
    def route_server_client(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_server_client", value)

    @property
    @pulumi.getter(name="routeServerClient6")
    def route_server_client6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 AS route server client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client6")

    @route_server_client6.setter
    def route_server_client6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_server_client6", value)

    @property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community")

    @send_community.setter
    def send_community(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_community", value)

    @property
    @pulumi.getter(name="sendCommunity6")
    def send_community6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community6")

    @send_community6.setter
    def send_community6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_community6", value)

    @property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable shutdown this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shutdown", value)

    @property
    @pulumi.getter(name="softReconfiguration")
    def soft_reconfiguration(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allow IPv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration")

    @soft_reconfiguration.setter
    def soft_reconfiguration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "soft_reconfiguration", value)

    @property
    @pulumi.getter(name="softReconfiguration6")
    def soft_reconfiguration6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allow IPv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration6")

    @soft_reconfiguration6.setter
    def soft_reconfiguration6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "soft_reconfiguration6", value)

    @property
    @pulumi.getter(name="staleRoute")
    def stale_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable stale route after neighbor down. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "stale_route")

    @stale_route.setter
    def stale_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stale_route", value)

    @property
    @pulumi.getter(name="strictCapabilityMatch")
    def strict_capability_match(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable strict capability matching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "strict_capability_match")

    @strict_capability_match.setter
    def strict_capability_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strict_capability_match", value)

    @property
    @pulumi.getter(name="unsuppressMap")
    def unsuppress_map(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Route map to selectively unsuppress suppressed routes.
        """
        return pulumi.get(self, "unsuppress_map")

    @unsuppress_map.setter
    def unsuppress_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsuppress_map", value)

    @property
    @pulumi.getter(name="unsuppressMap6")
    def unsuppress_map6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Route map to selectively unsuppress suppressed routes.
        """
        return pulumi.get(self, "unsuppress_map6")

    @unsuppress_map6.setter
    def unsuppress_map6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsuppress_map6", value)

    @property
    @pulumi.getter(name="updateSource")
    def update_source(self) -> Optional[pulumi.Input[str]]:
        """
        Interface to use as source IP/IPv6 address of TCP connections.
        """
        return pulumi.get(self, "update_source")

    @update_source.setter
    def update_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_source", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Neighbor weight.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class RouterBgpNeighborConditionalAdvertise6Args:
    def __init__(__self__, *,
                 advertise_routemap: Optional[pulumi.Input[str]] = None,
                 condition_routemap: Optional[pulumi.Input[str]] = None,
                 condition_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] advertise_routemap: Name of advertising route map.
        :param pulumi.Input[str] condition_routemap: Name of condition route map.
        :param pulumi.Input[str] condition_type: Type of condition. Valid values: `exist`, `non-exist`.
        """
        if advertise_routemap is not None:
            pulumi.set(__self__, "advertise_routemap", advertise_routemap)
        if condition_routemap is not None:
            pulumi.set(__self__, "condition_routemap", condition_routemap)
        if condition_type is not None:
            pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="advertiseRoutemap")
    def advertise_routemap(self) -> Optional[pulumi.Input[str]]:
        """
        Name of advertising route map.
        """
        return pulumi.get(self, "advertise_routemap")

    @advertise_routemap.setter
    def advertise_routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advertise_routemap", value)

    @property
    @pulumi.getter(name="conditionRoutemap")
    def condition_routemap(self) -> Optional[pulumi.Input[str]]:
        """
        Name of condition route map.
        """
        return pulumi.get(self, "condition_routemap")

    @condition_routemap.setter
    def condition_routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition_routemap", value)

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of condition. Valid values: `exist`, `non-exist`.
        """
        return pulumi.get(self, "condition_type")

    @condition_type.setter
    def condition_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition_type", value)


@pulumi.input_type
class RouterBgpNeighborConditionalAdvertiseArgs:
    def __init__(__self__, *,
                 advertise_routemap: Optional[pulumi.Input[str]] = None,
                 condition_routemap: Optional[pulumi.Input[str]] = None,
                 condition_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] advertise_routemap: Name of advertising route map.
        :param pulumi.Input[str] condition_routemap: Name of condition route map.
        :param pulumi.Input[str] condition_type: Type of condition. Valid values: `exist`, `non-exist`.
        """
        if advertise_routemap is not None:
            pulumi.set(__self__, "advertise_routemap", advertise_routemap)
        if condition_routemap is not None:
            pulumi.set(__self__, "condition_routemap", condition_routemap)
        if condition_type is not None:
            pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="advertiseRoutemap")
    def advertise_routemap(self) -> Optional[pulumi.Input[str]]:
        """
        Name of advertising route map.
        """
        return pulumi.get(self, "advertise_routemap")

    @advertise_routemap.setter
    def advertise_routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advertise_routemap", value)

    @property
    @pulumi.getter(name="conditionRoutemap")
    def condition_routemap(self) -> Optional[pulumi.Input[str]]:
        """
        Name of condition route map.
        """
        return pulumi.get(self, "condition_routemap")

    @condition_routemap.setter
    def condition_routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition_routemap", value)

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of condition. Valid values: `exist`, `non-exist`.
        """
        return pulumi.get(self, "condition_type")

    @condition_type.setter
    def condition_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition_type", value)


@pulumi.input_type
class RouterBgpNeighborGroupArgs:
    def __init__(__self__, *,
                 activate: Optional[pulumi.Input[str]] = None,
                 activate6: Optional[pulumi.Input[str]] = None,
                 additional_path: Optional[pulumi.Input[str]] = None,
                 additional_path6: Optional[pulumi.Input[str]] = None,
                 adv_additional_path: Optional[pulumi.Input[int]] = None,
                 adv_additional_path6: Optional[pulumi.Input[int]] = None,
                 advertisement_interval: Optional[pulumi.Input[int]] = None,
                 allowas_in: Optional[pulumi.Input[int]] = None,
                 allowas_in6: Optional[pulumi.Input[int]] = None,
                 allowas_in_enable: Optional[pulumi.Input[str]] = None,
                 allowas_in_enable6: Optional[pulumi.Input[str]] = None,
                 as_override: Optional[pulumi.Input[str]] = None,
                 as_override6: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged: Optional[pulumi.Input[str]] = None,
                 attribute_unchanged6: Optional[pulumi.Input[str]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 capability_default_originate: Optional[pulumi.Input[str]] = None,
                 capability_default_originate6: Optional[pulumi.Input[str]] = None,
                 capability_dynamic: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart: Optional[pulumi.Input[str]] = None,
                 capability_graceful_restart6: Optional[pulumi.Input[str]] = None,
                 capability_orf: Optional[pulumi.Input[str]] = None,
                 capability_orf6: Optional[pulumi.Input[str]] = None,
                 capability_route_refresh: Optional[pulumi.Input[str]] = None,
                 connect_timer: Optional[pulumi.Input[int]] = None,
                 default_originate_routemap: Optional[pulumi.Input[str]] = None,
                 default_originate_routemap6: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 distribute_list_in: Optional[pulumi.Input[str]] = None,
                 distribute_list_in6: Optional[pulumi.Input[str]] = None,
                 distribute_list_out: Optional[pulumi.Input[str]] = None,
                 distribute_list_out6: Optional[pulumi.Input[str]] = None,
                 dont_capability_negotiate: Optional[pulumi.Input[str]] = None,
                 ebgp_enforce_multihop: Optional[pulumi.Input[str]] = None,
                 ebgp_multihop_ttl: Optional[pulumi.Input[int]] = None,
                 filter_list_in: Optional[pulumi.Input[str]] = None,
                 filter_list_in6: Optional[pulumi.Input[str]] = None,
                 filter_list_out: Optional[pulumi.Input[str]] = None,
                 filter_list_out6: Optional[pulumi.Input[str]] = None,
                 holdtime_timer: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 keep_alive_timer: Optional[pulumi.Input[int]] = None,
                 link_down_failover: Optional[pulumi.Input[str]] = None,
                 local_as: Optional[pulumi.Input[int]] = None,
                 local_as_no_prepend: Optional[pulumi.Input[str]] = None,
                 local_as_replace_as: Optional[pulumi.Input[str]] = None,
                 maximum_prefix: Optional[pulumi.Input[int]] = None,
                 maximum_prefix6: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_threshold6: Optional[pulumi.Input[int]] = None,
                 maximum_prefix_warning_only: Optional[pulumi.Input[str]] = None,
                 maximum_prefix_warning_only6: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 next_hop_self: Optional[pulumi.Input[str]] = None,
                 next_hop_self6: Optional[pulumi.Input[str]] = None,
                 next_hop_self_rr: Optional[pulumi.Input[str]] = None,
                 next_hop_self_rr6: Optional[pulumi.Input[str]] = None,
                 override_capability: Optional[pulumi.Input[str]] = None,
                 passive: Optional[pulumi.Input[str]] = None,
                 prefix_list_in: Optional[pulumi.Input[str]] = None,
                 prefix_list_in6: Optional[pulumi.Input[str]] = None,
                 prefix_list_out: Optional[pulumi.Input[str]] = None,
                 prefix_list_out6: Optional[pulumi.Input[str]] = None,
                 remote_as: Optional[pulumi.Input[int]] = None,
                 remove_private_as: Optional[pulumi.Input[str]] = None,
                 remove_private_as6: Optional[pulumi.Input[str]] = None,
                 restart_time: Optional[pulumi.Input[int]] = None,
                 retain_stale_time: Optional[pulumi.Input[int]] = None,
                 route_map_in: Optional[pulumi.Input[str]] = None,
                 route_map_in6: Optional[pulumi.Input[str]] = None,
                 route_map_out: Optional[pulumi.Input[str]] = None,
                 route_map_out6: Optional[pulumi.Input[str]] = None,
                 route_map_out6_preferable: Optional[pulumi.Input[str]] = None,
                 route_map_out_preferable: Optional[pulumi.Input[str]] = None,
                 route_reflector_client: Optional[pulumi.Input[str]] = None,
                 route_reflector_client6: Optional[pulumi.Input[str]] = None,
                 route_server_client: Optional[pulumi.Input[str]] = None,
                 route_server_client6: Optional[pulumi.Input[str]] = None,
                 send_community: Optional[pulumi.Input[str]] = None,
                 send_community6: Optional[pulumi.Input[str]] = None,
                 shutdown: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration: Optional[pulumi.Input[str]] = None,
                 soft_reconfiguration6: Optional[pulumi.Input[str]] = None,
                 stale_route: Optional[pulumi.Input[str]] = None,
                 strict_capability_match: Optional[pulumi.Input[str]] = None,
                 unsuppress_map: Optional[pulumi.Input[str]] = None,
                 unsuppress_map6: Optional[pulumi.Input[str]] = None,
                 update_source: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] activate: Enable/disable address family IPv4 for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] activate6: Enable/disable address family IPv6 for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] additional_path: Enable/disable IPv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param pulumi.Input[str] additional_path6: Enable/disable IPv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        :param pulumi.Input[int] adv_additional_path: Number of IPv4 additional paths that can be advertised to this neighbor.
        :param pulumi.Input[int] adv_additional_path6: Number of IPv6 additional paths that can be advertised to this neighbor.
        :param pulumi.Input[int] advertisement_interval: Minimum interval (sec) between sending updates.
        :param pulumi.Input[int] allowas_in: IPv4 The maximum number of occurrence of my AS number allowed.
        :param pulumi.Input[int] allowas_in6: IPv6 The maximum number of occurrence of my AS number allowed.
        :param pulumi.Input[str] allowas_in_enable: Enable/disable IPv4 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] allowas_in_enable6: Enable/disable IPv6 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] as_override: Enable/disable replace peer AS with own AS for IPv4. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] as_override6: Enable/disable replace peer AS with own AS for IPv6. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] attribute_unchanged: IPv4 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        :param pulumi.Input[str] attribute_unchanged6: IPv6 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        :param pulumi.Input[str] bfd: Enable/disable BFD for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_default_originate: Enable/disable advertise default IPv4 route to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_default_originate6: Enable/disable advertise default IPv6 route to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_dynamic: Enable/disable advertise dynamic capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_graceful_restart: Enable/disable advertise IPv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_graceful_restart6: Enable/disable advertise IPv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] capability_orf: Accept/Send IPv4 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        :param pulumi.Input[str] capability_orf6: Accept/Send IPv6 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        :param pulumi.Input[str] capability_route_refresh: Enable/disable advertise route refresh capability to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] connect_timer: Interval (sec) for connect timer.
        :param pulumi.Input[str] default_originate_routemap: Route map to specify criteria to originate IPv4 default.
        :param pulumi.Input[str] default_originate_routemap6: Route map to specify criteria to originate IPv6 default.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] distribute_list_in: Filter for IPv4 updates from this neighbor.
        :param pulumi.Input[str] distribute_list_in6: Filter for IPv6 updates from this neighbor.
        :param pulumi.Input[str] distribute_list_out: Filter for IPv4 updates to this neighbor.
        :param pulumi.Input[str] distribute_list_out6: Filter for IPv6 updates to this neighbor.
        :param pulumi.Input[str] dont_capability_negotiate: Don't negotiate capabilities with this neighbor Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ebgp_enforce_multihop: Enable/disable allow multi-hop EBGP neighbors. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ebgp_multihop_ttl: EBGP multihop TTL for this peer.
        :param pulumi.Input[str] filter_list_in: BGP filter for IPv4 inbound routes.
        :param pulumi.Input[str] filter_list_in6: BGP filter for IPv6 inbound routes.
        :param pulumi.Input[str] filter_list_out: BGP filter for IPv4 outbound routes.
        :param pulumi.Input[str] filter_list_out6: BGP filter for IPv6 outbound routes.
        :param pulumi.Input[int] holdtime_timer: Interval (sec) before peer considered dead.
        :param pulumi.Input[str] interface: Interface which is used to leak routes to target VRF.
        :param pulumi.Input[int] keep_alive_timer: Keep alive timer interval (sec).
        :param pulumi.Input[str] link_down_failover: Enable/disable failover upon link down. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] local_as: Local AS number of neighbor.
        :param pulumi.Input[str] local_as_no_prepend: Do not prepend local-as to incoming updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] local_as_replace_as: Replace real AS with local-as in outgoing updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] maximum_prefix: Maximum number of IPv4 prefixes to accept from this peer.
        :param pulumi.Input[int] maximum_prefix6: Maximum number of IPv6 prefixes to accept from this peer.
        :param pulumi.Input[int] maximum_prefix_threshold: Maximum IPv4 prefix threshold value (1 - 100 percent).
        :param pulumi.Input[int] maximum_prefix_threshold6: Maximum IPv6 prefix threshold value (1 - 100 percent).
        :param pulumi.Input[str] maximum_prefix_warning_only: Enable/disable IPv4 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] maximum_prefix_warning_only6: Enable/disable IPv6 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Distribute list entry name.
        :param pulumi.Input[str] next_hop_self: Enable/disable IPv4 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self6: Enable/disable IPv6 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self_rr: Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] next_hop_self_rr6: Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_capability: Enable/disable override result of capability negotiation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] passive: Enable/disable sending of open messages to this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] prefix_list_in: IPv4 Inbound filter for updates from this neighbor.
        :param pulumi.Input[str] prefix_list_in6: IPv6 Inbound filter for updates from this neighbor.
        :param pulumi.Input[str] prefix_list_out: IPv4 Outbound filter for updates to this neighbor.
        :param pulumi.Input[str] prefix_list_out6: IPv6 Outbound filter for updates to this neighbor.
        :param pulumi.Input[int] remote_as: AS number of neighbor.
        :param pulumi.Input[str] remove_private_as: Enable/disable remove private AS number from IPv4 outbound updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] remove_private_as6: Enable/disable remove private AS number from IPv6 outbound updates. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] restart_time: Graceful restart delay time (sec, 0 = global default).
        :param pulumi.Input[int] retain_stale_time: Time to retain stale routes.
        :param pulumi.Input[str] route_map_in: IPv4 Inbound route map filter.
        :param pulumi.Input[str] route_map_in6: IPv6 Inbound route map filter.
        :param pulumi.Input[str] route_map_out: IPv4 Outbound route map filter.
        :param pulumi.Input[str] route_map_out6: IPv6 Outbound route map filter.
        :param pulumi.Input[str] route_map_out6_preferable: IPv6 outbound route map filter if the peer is preferred.
        :param pulumi.Input[str] route_map_out_preferable: IPv4 outbound route map filter if the peer is preferred.
        :param pulumi.Input[str] route_reflector_client: Enable/disable IPv4 AS route reflector client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_reflector_client6: Enable/disable IPv6 AS route reflector client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_server_client: Enable/disable IPv4 AS route server client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] route_server_client6: Enable/disable IPv6 AS route server client. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] send_community: IPv4 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        :param pulumi.Input[str] send_community6: IPv6 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        :param pulumi.Input[str] shutdown: Enable/disable shutdown this neighbor. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] soft_reconfiguration: Enable/disable allow IPv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] soft_reconfiguration6: Enable/disable allow IPv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] stale_route: Enable/disable stale route after neighbor down. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] strict_capability_match: Enable/disable strict capability matching. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] unsuppress_map: IPv4 Route map to selectively unsuppress suppressed routes.
        :param pulumi.Input[str] unsuppress_map6: IPv6 Route map to selectively unsuppress suppressed routes.
        :param pulumi.Input[str] update_source: Interface to use as source IP/IPv6 address of TCP connections.
        :param pulumi.Input[int] weight: Neighbor weight.
        """
        if activate is not None:
            pulumi.set(__self__, "activate", activate)
        if activate6 is not None:
            pulumi.set(__self__, "activate6", activate6)
        if additional_path is not None:
            pulumi.set(__self__, "additional_path", additional_path)
        if additional_path6 is not None:
            pulumi.set(__self__, "additional_path6", additional_path6)
        if adv_additional_path is not None:
            pulumi.set(__self__, "adv_additional_path", adv_additional_path)
        if adv_additional_path6 is not None:
            pulumi.set(__self__, "adv_additional_path6", adv_additional_path6)
        if advertisement_interval is not None:
            pulumi.set(__self__, "advertisement_interval", advertisement_interval)
        if allowas_in is not None:
            pulumi.set(__self__, "allowas_in", allowas_in)
        if allowas_in6 is not None:
            pulumi.set(__self__, "allowas_in6", allowas_in6)
        if allowas_in_enable is not None:
            pulumi.set(__self__, "allowas_in_enable", allowas_in_enable)
        if allowas_in_enable6 is not None:
            pulumi.set(__self__, "allowas_in_enable6", allowas_in_enable6)
        if as_override is not None:
            pulumi.set(__self__, "as_override", as_override)
        if as_override6 is not None:
            pulumi.set(__self__, "as_override6", as_override6)
        if attribute_unchanged is not None:
            pulumi.set(__self__, "attribute_unchanged", attribute_unchanged)
        if attribute_unchanged6 is not None:
            pulumi.set(__self__, "attribute_unchanged6", attribute_unchanged6)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if capability_default_originate is not None:
            pulumi.set(__self__, "capability_default_originate", capability_default_originate)
        if capability_default_originate6 is not None:
            pulumi.set(__self__, "capability_default_originate6", capability_default_originate6)
        if capability_dynamic is not None:
            pulumi.set(__self__, "capability_dynamic", capability_dynamic)
        if capability_graceful_restart is not None:
            pulumi.set(__self__, "capability_graceful_restart", capability_graceful_restart)
        if capability_graceful_restart6 is not None:
            pulumi.set(__self__, "capability_graceful_restart6", capability_graceful_restart6)
        if capability_orf is not None:
            pulumi.set(__self__, "capability_orf", capability_orf)
        if capability_orf6 is not None:
            pulumi.set(__self__, "capability_orf6", capability_orf6)
        if capability_route_refresh is not None:
            pulumi.set(__self__, "capability_route_refresh", capability_route_refresh)
        if connect_timer is not None:
            pulumi.set(__self__, "connect_timer", connect_timer)
        if default_originate_routemap is not None:
            pulumi.set(__self__, "default_originate_routemap", default_originate_routemap)
        if default_originate_routemap6 is not None:
            pulumi.set(__self__, "default_originate_routemap6", default_originate_routemap6)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if distribute_list_in is not None:
            pulumi.set(__self__, "distribute_list_in", distribute_list_in)
        if distribute_list_in6 is not None:
            pulumi.set(__self__, "distribute_list_in6", distribute_list_in6)
        if distribute_list_out is not None:
            pulumi.set(__self__, "distribute_list_out", distribute_list_out)
        if distribute_list_out6 is not None:
            pulumi.set(__self__, "distribute_list_out6", distribute_list_out6)
        if dont_capability_negotiate is not None:
            pulumi.set(__self__, "dont_capability_negotiate", dont_capability_negotiate)
        if ebgp_enforce_multihop is not None:
            pulumi.set(__self__, "ebgp_enforce_multihop", ebgp_enforce_multihop)
        if ebgp_multihop_ttl is not None:
            pulumi.set(__self__, "ebgp_multihop_ttl", ebgp_multihop_ttl)
        if filter_list_in is not None:
            pulumi.set(__self__, "filter_list_in", filter_list_in)
        if filter_list_in6 is not None:
            pulumi.set(__self__, "filter_list_in6", filter_list_in6)
        if filter_list_out is not None:
            pulumi.set(__self__, "filter_list_out", filter_list_out)
        if filter_list_out6 is not None:
            pulumi.set(__self__, "filter_list_out6", filter_list_out6)
        if holdtime_timer is not None:
            pulumi.set(__self__, "holdtime_timer", holdtime_timer)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if keep_alive_timer is not None:
            pulumi.set(__self__, "keep_alive_timer", keep_alive_timer)
        if link_down_failover is not None:
            pulumi.set(__self__, "link_down_failover", link_down_failover)
        if local_as is not None:
            pulumi.set(__self__, "local_as", local_as)
        if local_as_no_prepend is not None:
            pulumi.set(__self__, "local_as_no_prepend", local_as_no_prepend)
        if local_as_replace_as is not None:
            pulumi.set(__self__, "local_as_replace_as", local_as_replace_as)
        if maximum_prefix is not None:
            pulumi.set(__self__, "maximum_prefix", maximum_prefix)
        if maximum_prefix6 is not None:
            pulumi.set(__self__, "maximum_prefix6", maximum_prefix6)
        if maximum_prefix_threshold is not None:
            pulumi.set(__self__, "maximum_prefix_threshold", maximum_prefix_threshold)
        if maximum_prefix_threshold6 is not None:
            pulumi.set(__self__, "maximum_prefix_threshold6", maximum_prefix_threshold6)
        if maximum_prefix_warning_only is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only", maximum_prefix_warning_only)
        if maximum_prefix_warning_only6 is not None:
            pulumi.set(__self__, "maximum_prefix_warning_only6", maximum_prefix_warning_only6)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_hop_self is not None:
            pulumi.set(__self__, "next_hop_self", next_hop_self)
        if next_hop_self6 is not None:
            pulumi.set(__self__, "next_hop_self6", next_hop_self6)
        if next_hop_self_rr is not None:
            pulumi.set(__self__, "next_hop_self_rr", next_hop_self_rr)
        if next_hop_self_rr6 is not None:
            pulumi.set(__self__, "next_hop_self_rr6", next_hop_self_rr6)
        if override_capability is not None:
            pulumi.set(__self__, "override_capability", override_capability)
        if passive is not None:
            pulumi.set(__self__, "passive", passive)
        if prefix_list_in is not None:
            pulumi.set(__self__, "prefix_list_in", prefix_list_in)
        if prefix_list_in6 is not None:
            pulumi.set(__self__, "prefix_list_in6", prefix_list_in6)
        if prefix_list_out is not None:
            pulumi.set(__self__, "prefix_list_out", prefix_list_out)
        if prefix_list_out6 is not None:
            pulumi.set(__self__, "prefix_list_out6", prefix_list_out6)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if remove_private_as is not None:
            pulumi.set(__self__, "remove_private_as", remove_private_as)
        if remove_private_as6 is not None:
            pulumi.set(__self__, "remove_private_as6", remove_private_as6)
        if restart_time is not None:
            pulumi.set(__self__, "restart_time", restart_time)
        if retain_stale_time is not None:
            pulumi.set(__self__, "retain_stale_time", retain_stale_time)
        if route_map_in is not None:
            pulumi.set(__self__, "route_map_in", route_map_in)
        if route_map_in6 is not None:
            pulumi.set(__self__, "route_map_in6", route_map_in6)
        if route_map_out is not None:
            pulumi.set(__self__, "route_map_out", route_map_out)
        if route_map_out6 is not None:
            pulumi.set(__self__, "route_map_out6", route_map_out6)
        if route_map_out6_preferable is not None:
            pulumi.set(__self__, "route_map_out6_preferable", route_map_out6_preferable)
        if route_map_out_preferable is not None:
            pulumi.set(__self__, "route_map_out_preferable", route_map_out_preferable)
        if route_reflector_client is not None:
            pulumi.set(__self__, "route_reflector_client", route_reflector_client)
        if route_reflector_client6 is not None:
            pulumi.set(__self__, "route_reflector_client6", route_reflector_client6)
        if route_server_client is not None:
            pulumi.set(__self__, "route_server_client", route_server_client)
        if route_server_client6 is not None:
            pulumi.set(__self__, "route_server_client6", route_server_client6)
        if send_community is not None:
            pulumi.set(__self__, "send_community", send_community)
        if send_community6 is not None:
            pulumi.set(__self__, "send_community6", send_community6)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if soft_reconfiguration is not None:
            pulumi.set(__self__, "soft_reconfiguration", soft_reconfiguration)
        if soft_reconfiguration6 is not None:
            pulumi.set(__self__, "soft_reconfiguration6", soft_reconfiguration6)
        if stale_route is not None:
            pulumi.set(__self__, "stale_route", stale_route)
        if strict_capability_match is not None:
            pulumi.set(__self__, "strict_capability_match", strict_capability_match)
        if unsuppress_map is not None:
            pulumi.set(__self__, "unsuppress_map", unsuppress_map)
        if unsuppress_map6 is not None:
            pulumi.set(__self__, "unsuppress_map6", unsuppress_map6)
        if update_source is not None:
            pulumi.set(__self__, "update_source", update_source)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def activate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable address family IPv4 for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate")

    @activate.setter
    def activate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activate", value)

    @property
    @pulumi.getter
    def activate6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable address family IPv6 for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "activate6")

    @activate6.setter
    def activate6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activate6", value)

    @property
    @pulumi.getter(name="additionalPath")
    def additional_path(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        """
        return pulumi.get(self, "additional_path")

    @additional_path.setter
    def additional_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path", value)

    @property
    @pulumi.getter(name="additionalPath6")
    def additional_path6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 additional-path capability. Valid values: `send`, `receive`, `both`, `disable`.
        """
        return pulumi.get(self, "additional_path6")

    @additional_path6.setter
    def additional_path6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_path6", value)

    @property
    @pulumi.getter(name="advAdditionalPath")
    def adv_additional_path(self) -> Optional[pulumi.Input[int]]:
        """
        Number of IPv4 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path")

    @adv_additional_path.setter
    def adv_additional_path(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adv_additional_path", value)

    @property
    @pulumi.getter(name="advAdditionalPath6")
    def adv_additional_path6(self) -> Optional[pulumi.Input[int]]:
        """
        Number of IPv6 additional paths that can be advertised to this neighbor.
        """
        return pulumi.get(self, "adv_additional_path6")

    @adv_additional_path6.setter
    def adv_additional_path6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adv_additional_path6", value)

    @property
    @pulumi.getter(name="advertisementInterval")
    def advertisement_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum interval (sec) between sending updates.
        """
        return pulumi.get(self, "advertisement_interval")

    @advertisement_interval.setter
    def advertisement_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "advertisement_interval", value)

    @property
    @pulumi.getter(name="allowasIn")
    def allowas_in(self) -> Optional[pulumi.Input[int]]:
        """
        IPv4 The maximum number of occurrence of my AS number allowed.
        """
        return pulumi.get(self, "allowas_in")

    @allowas_in.setter
    def allowas_in(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowas_in", value)

    @property
    @pulumi.getter(name="allowasIn6")
    def allowas_in6(self) -> Optional[pulumi.Input[int]]:
        """
        IPv6 The maximum number of occurrence of my AS number allowed.
        """
        return pulumi.get(self, "allowas_in6")

    @allowas_in6.setter
    def allowas_in6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allowas_in6", value)

    @property
    @pulumi.getter(name="allowasInEnable")
    def allowas_in_enable(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable")

    @allowas_in_enable.setter
    def allowas_in_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowas_in_enable", value)

    @property
    @pulumi.getter(name="allowasInEnable6")
    def allowas_in_enable6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 Enable to allow my AS in AS path. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowas_in_enable6")

    @allowas_in_enable6.setter
    def allowas_in_enable6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowas_in_enable6", value)

    @property
    @pulumi.getter(name="asOverride")
    def as_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable replace peer AS with own AS for IPv4. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "as_override")

    @as_override.setter
    def as_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "as_override", value)

    @property
    @pulumi.getter(name="asOverride6")
    def as_override6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable replace peer AS with own AS for IPv6. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "as_override6")

    @as_override6.setter
    def as_override6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "as_override6", value)

    @property
    @pulumi.getter(name="attributeUnchanged")
    def attribute_unchanged(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        """
        return pulumi.get(self, "attribute_unchanged")

    @attribute_unchanged.setter
    def attribute_unchanged(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_unchanged", value)

    @property
    @pulumi.getter(name="attributeUnchanged6")
    def attribute_unchanged6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 List of attributes that should be unchanged. Valid values: `as-path`, `med`, `next-hop`.
        """
        return pulumi.get(self, "attribute_unchanged6")

    @attribute_unchanged6.setter
    def attribute_unchanged6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_unchanged6", value)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable BFD for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter(name="capabilityDefaultOriginate")
    def capability_default_originate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise default IPv4 route to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_default_originate")

    @capability_default_originate.setter
    def capability_default_originate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_default_originate", value)

    @property
    @pulumi.getter(name="capabilityDefaultOriginate6")
    def capability_default_originate6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise default IPv6 route to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_default_originate6")

    @capability_default_originate6.setter
    def capability_default_originate6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_default_originate6", value)

    @property
    @pulumi.getter(name="capabilityDynamic")
    def capability_dynamic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise dynamic capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_dynamic")

    @capability_dynamic.setter
    def capability_dynamic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_dynamic", value)

    @property
    @pulumi.getter(name="capabilityGracefulRestart")
    def capability_graceful_restart(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise IPv4 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart")

    @capability_graceful_restart.setter
    def capability_graceful_restart(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_graceful_restart", value)

    @property
    @pulumi.getter(name="capabilityGracefulRestart6")
    def capability_graceful_restart6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise IPv6 graceful restart capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_graceful_restart6")

    @capability_graceful_restart6.setter
    def capability_graceful_restart6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_graceful_restart6", value)

    @property
    @pulumi.getter(name="capabilityOrf")
    def capability_orf(self) -> Optional[pulumi.Input[str]]:
        """
        Accept/Send IPv4 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        """
        return pulumi.get(self, "capability_orf")

    @capability_orf.setter
    def capability_orf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_orf", value)

    @property
    @pulumi.getter(name="capabilityOrf6")
    def capability_orf6(self) -> Optional[pulumi.Input[str]]:
        """
        Accept/Send IPv6 ORF lists to/from this neighbor. Valid values: `none`, `receive`, `send`, `both`.
        """
        return pulumi.get(self, "capability_orf6")

    @capability_orf6.setter
    def capability_orf6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_orf6", value)

    @property
    @pulumi.getter(name="capabilityRouteRefresh")
    def capability_route_refresh(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise route refresh capability to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "capability_route_refresh")

    @capability_route_refresh.setter
    def capability_route_refresh(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capability_route_refresh", value)

    @property
    @pulumi.getter(name="connectTimer")
    def connect_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Interval (sec) for connect timer.
        """
        return pulumi.get(self, "connect_timer")

    @connect_timer.setter
    def connect_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connect_timer", value)

    @property
    @pulumi.getter(name="defaultOriginateRoutemap")
    def default_originate_routemap(self) -> Optional[pulumi.Input[str]]:
        """
        Route map to specify criteria to originate IPv4 default.
        """
        return pulumi.get(self, "default_originate_routemap")

    @default_originate_routemap.setter
    def default_originate_routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_originate_routemap", value)

    @property
    @pulumi.getter(name="defaultOriginateRoutemap6")
    def default_originate_routemap6(self) -> Optional[pulumi.Input[str]]:
        """
        Route map to specify criteria to originate IPv6 default.
        """
        return pulumi.get(self, "default_originate_routemap6")

    @default_originate_routemap6.setter
    def default_originate_routemap6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_originate_routemap6", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="distributeListIn")
    def distribute_list_in(self) -> Optional[pulumi.Input[str]]:
        """
        Filter for IPv4 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in")

    @distribute_list_in.setter
    def distribute_list_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_in", value)

    @property
    @pulumi.getter(name="distributeListIn6")
    def distribute_list_in6(self) -> Optional[pulumi.Input[str]]:
        """
        Filter for IPv6 updates from this neighbor.
        """
        return pulumi.get(self, "distribute_list_in6")

    @distribute_list_in6.setter
    def distribute_list_in6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_in6", value)

    @property
    @pulumi.getter(name="distributeListOut")
    def distribute_list_out(self) -> Optional[pulumi.Input[str]]:
        """
        Filter for IPv4 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out")

    @distribute_list_out.setter
    def distribute_list_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_out", value)

    @property
    @pulumi.getter(name="distributeListOut6")
    def distribute_list_out6(self) -> Optional[pulumi.Input[str]]:
        """
        Filter for IPv6 updates to this neighbor.
        """
        return pulumi.get(self, "distribute_list_out6")

    @distribute_list_out6.setter
    def distribute_list_out6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribute_list_out6", value)

    @property
    @pulumi.getter(name="dontCapabilityNegotiate")
    def dont_capability_negotiate(self) -> Optional[pulumi.Input[str]]:
        """
        Don't negotiate capabilities with this neighbor Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dont_capability_negotiate")

    @dont_capability_negotiate.setter
    def dont_capability_negotiate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dont_capability_negotiate", value)

    @property
    @pulumi.getter(name="ebgpEnforceMultihop")
    def ebgp_enforce_multihop(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allow multi-hop EBGP neighbors. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ebgp_enforce_multihop")

    @ebgp_enforce_multihop.setter
    def ebgp_enforce_multihop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ebgp_enforce_multihop", value)

    @property
    @pulumi.getter(name="ebgpMultihopTtl")
    def ebgp_multihop_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        EBGP multihop TTL for this peer.
        """
        return pulumi.get(self, "ebgp_multihop_ttl")

    @ebgp_multihop_ttl.setter
    def ebgp_multihop_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ebgp_multihop_ttl", value)

    @property
    @pulumi.getter(name="filterListIn")
    def filter_list_in(self) -> Optional[pulumi.Input[str]]:
        """
        BGP filter for IPv4 inbound routes.
        """
        return pulumi.get(self, "filter_list_in")

    @filter_list_in.setter
    def filter_list_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_in", value)

    @property
    @pulumi.getter(name="filterListIn6")
    def filter_list_in6(self) -> Optional[pulumi.Input[str]]:
        """
        BGP filter for IPv6 inbound routes.
        """
        return pulumi.get(self, "filter_list_in6")

    @filter_list_in6.setter
    def filter_list_in6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_in6", value)

    @property
    @pulumi.getter(name="filterListOut")
    def filter_list_out(self) -> Optional[pulumi.Input[str]]:
        """
        BGP filter for IPv4 outbound routes.
        """
        return pulumi.get(self, "filter_list_out")

    @filter_list_out.setter
    def filter_list_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_out", value)

    @property
    @pulumi.getter(name="filterListOut6")
    def filter_list_out6(self) -> Optional[pulumi.Input[str]]:
        """
        BGP filter for IPv6 outbound routes.
        """
        return pulumi.get(self, "filter_list_out6")

    @filter_list_out6.setter
    def filter_list_out6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_list_out6", value)

    @property
    @pulumi.getter(name="holdtimeTimer")
    def holdtime_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Interval (sec) before peer considered dead.
        """
        return pulumi.get(self, "holdtime_timer")

    @holdtime_timer.setter
    def holdtime_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "holdtime_timer", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface which is used to leak routes to target VRF.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="keepAliveTimer")
    def keep_alive_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Keep alive timer interval (sec).
        """
        return pulumi.get(self, "keep_alive_timer")

    @keep_alive_timer.setter
    def keep_alive_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keep_alive_timer", value)

    @property
    @pulumi.getter(name="linkDownFailover")
    def link_down_failover(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable failover upon link down. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "link_down_failover")

    @link_down_failover.setter
    def link_down_failover(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_down_failover", value)

    @property
    @pulumi.getter(name="localAs")
    def local_as(self) -> Optional[pulumi.Input[int]]:
        """
        Local AS number of neighbor.
        """
        return pulumi.get(self, "local_as")

    @local_as.setter
    def local_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "local_as", value)

    @property
    @pulumi.getter(name="localAsNoPrepend")
    def local_as_no_prepend(self) -> Optional[pulumi.Input[str]]:
        """
        Do not prepend local-as to incoming updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_as_no_prepend")

    @local_as_no_prepend.setter
    def local_as_no_prepend(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_as_no_prepend", value)

    @property
    @pulumi.getter(name="localAsReplaceAs")
    def local_as_replace_as(self) -> Optional[pulumi.Input[str]]:
        """
        Replace real AS with local-as in outgoing updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_as_replace_as")

    @local_as_replace_as.setter
    def local_as_replace_as(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_as_replace_as", value)

    @property
    @pulumi.getter(name="maximumPrefix")
    def maximum_prefix(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of IPv4 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix")

    @maximum_prefix.setter
    def maximum_prefix(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix", value)

    @property
    @pulumi.getter(name="maximumPrefix6")
    def maximum_prefix6(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of IPv6 prefixes to accept from this peer.
        """
        return pulumi.get(self, "maximum_prefix6")

    @maximum_prefix6.setter
    def maximum_prefix6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix6", value)

    @property
    @pulumi.getter(name="maximumPrefixThreshold")
    def maximum_prefix_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum IPv4 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold")

    @maximum_prefix_threshold.setter
    def maximum_prefix_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_threshold", value)

    @property
    @pulumi.getter(name="maximumPrefixThreshold6")
    def maximum_prefix_threshold6(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum IPv6 prefix threshold value (1 - 100 percent).
        """
        return pulumi.get(self, "maximum_prefix_threshold6")

    @maximum_prefix_threshold6.setter
    def maximum_prefix_threshold6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_prefix_threshold6", value)

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly")
    def maximum_prefix_warning_only(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only")

    @maximum_prefix_warning_only.setter
    def maximum_prefix_warning_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_prefix_warning_only", value)

    @property
    @pulumi.getter(name="maximumPrefixWarningOnly6")
    def maximum_prefix_warning_only6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 Only give warning message when limit is exceeded. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "maximum_prefix_warning_only6")

    @maximum_prefix_warning_only6.setter
    def maximum_prefix_warning_only6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_prefix_warning_only6", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Distribute list entry name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nextHopSelf")
    def next_hop_self(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self")

    @next_hop_self.setter
    def next_hop_self(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self", value)

    @property
    @pulumi.getter(name="nextHopSelf6")
    def next_hop_self6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 next-hop calculation for this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self6")

    @next_hop_self6.setter
    def next_hop_self6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self6", value)

    @property
    @pulumi.getter(name="nextHopSelfRr")
    def next_hop_self_rr(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable setting nexthop's address to interface's IPv4 address for route-reflector routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self_rr")

    @next_hop_self_rr.setter
    def next_hop_self_rr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self_rr", value)

    @property
    @pulumi.getter(name="nextHopSelfRr6")
    def next_hop_self_rr6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable setting nexthop's address to interface's IPv6 address for route-reflector routes. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "next_hop_self_rr6")

    @next_hop_self_rr6.setter
    def next_hop_self_rr6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop_self_rr6", value)

    @property
    @pulumi.getter(name="overrideCapability")
    def override_capability(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable override result of capability negotiation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_capability")

    @override_capability.setter
    def override_capability(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_capability", value)

    @property
    @pulumi.getter
    def passive(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending of open messages to this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "passive")

    @passive.setter
    def passive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passive", value)

    @property
    @pulumi.getter(name="prefixListIn")
    def prefix_list_in(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Inbound filter for updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in")

    @prefix_list_in.setter
    def prefix_list_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_in", value)

    @property
    @pulumi.getter(name="prefixListIn6")
    def prefix_list_in6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Inbound filter for updates from this neighbor.
        """
        return pulumi.get(self, "prefix_list_in6")

    @prefix_list_in6.setter
    def prefix_list_in6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_in6", value)

    @property
    @pulumi.getter(name="prefixListOut")
    def prefix_list_out(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Outbound filter for updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out")

    @prefix_list_out.setter
    def prefix_list_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_out", value)

    @property
    @pulumi.getter(name="prefixListOut6")
    def prefix_list_out6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Outbound filter for updates to this neighbor.
        """
        return pulumi.get(self, "prefix_list_out6")

    @prefix_list_out6.setter
    def prefix_list_out6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_list_out6", value)

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[pulumi.Input[int]]:
        """
        AS number of neighbor.
        """
        return pulumi.get(self, "remote_as")

    @remote_as.setter
    def remote_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remote_as", value)

    @property
    @pulumi.getter(name="removePrivateAs")
    def remove_private_as(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable remove private AS number from IPv4 outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as")

    @remove_private_as.setter
    def remove_private_as(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_private_as", value)

    @property
    @pulumi.getter(name="removePrivateAs6")
    def remove_private_as6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable remove private AS number from IPv6 outbound updates. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "remove_private_as6")

    @remove_private_as6.setter
    def remove_private_as6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_private_as6", value)

    @property
    @pulumi.getter(name="restartTime")
    def restart_time(self) -> Optional[pulumi.Input[int]]:
        """
        Graceful restart delay time (sec, 0 = global default).
        """
        return pulumi.get(self, "restart_time")

    @restart_time.setter
    def restart_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "restart_time", value)

    @property
    @pulumi.getter(name="retainStaleTime")
    def retain_stale_time(self) -> Optional[pulumi.Input[int]]:
        """
        Time to retain stale routes.
        """
        return pulumi.get(self, "retain_stale_time")

    @retain_stale_time.setter
    def retain_stale_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retain_stale_time", value)

    @property
    @pulumi.getter(name="routeMapIn")
    def route_map_in(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Inbound route map filter.
        """
        return pulumi.get(self, "route_map_in")

    @route_map_in.setter
    def route_map_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_in", value)

    @property
    @pulumi.getter(name="routeMapIn6")
    def route_map_in6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Inbound route map filter.
        """
        return pulumi.get(self, "route_map_in6")

    @route_map_in6.setter
    def route_map_in6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_in6", value)

    @property
    @pulumi.getter(name="routeMapOut")
    def route_map_out(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Outbound route map filter.
        """
        return pulumi.get(self, "route_map_out")

    @route_map_out.setter
    def route_map_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out", value)

    @property
    @pulumi.getter(name="routeMapOut6")
    def route_map_out6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Outbound route map filter.
        """
        return pulumi.get(self, "route_map_out6")

    @route_map_out6.setter
    def route_map_out6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out6", value)

    @property
    @pulumi.getter(name="routeMapOut6Preferable")
    def route_map_out6_preferable(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out6_preferable")

    @route_map_out6_preferable.setter
    def route_map_out6_preferable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out6_preferable", value)

    @property
    @pulumi.getter(name="routeMapOutPreferable")
    def route_map_out_preferable(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 outbound route map filter if the peer is preferred.
        """
        return pulumi.get(self, "route_map_out_preferable")

    @route_map_out_preferable.setter
    def route_map_out_preferable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map_out_preferable", value)

    @property
    @pulumi.getter(name="routeReflectorClient")
    def route_reflector_client(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 AS route reflector client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client")

    @route_reflector_client.setter
    def route_reflector_client(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_reflector_client", value)

    @property
    @pulumi.getter(name="routeReflectorClient6")
    def route_reflector_client6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 AS route reflector client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_reflector_client6")

    @route_reflector_client6.setter
    def route_reflector_client6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_reflector_client6", value)

    @property
    @pulumi.getter(name="routeServerClient")
    def route_server_client(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv4 AS route server client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client")

    @route_server_client.setter
    def route_server_client(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_server_client", value)

    @property
    @pulumi.getter(name="routeServerClient6")
    def route_server_client6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 AS route server client. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "route_server_client6")

    @route_server_client6.setter
    def route_server_client6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_server_client6", value)

    @property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community")

    @send_community.setter
    def send_community(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_community", value)

    @property
    @pulumi.getter(name="sendCommunity6")
    def send_community6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Send community attribute to neighbor. Valid values: `standard`, `extended`, `both`, `disable`.
        """
        return pulumi.get(self, "send_community6")

    @send_community6.setter
    def send_community6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_community6", value)

    @property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable shutdown this neighbor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shutdown", value)

    @property
    @pulumi.getter(name="softReconfiguration")
    def soft_reconfiguration(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allow IPv4 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration")

    @soft_reconfiguration.setter
    def soft_reconfiguration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "soft_reconfiguration", value)

    @property
    @pulumi.getter(name="softReconfiguration6")
    def soft_reconfiguration6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allow IPv6 inbound soft reconfiguration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "soft_reconfiguration6")

    @soft_reconfiguration6.setter
    def soft_reconfiguration6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "soft_reconfiguration6", value)

    @property
    @pulumi.getter(name="staleRoute")
    def stale_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable stale route after neighbor down. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "stale_route")

    @stale_route.setter
    def stale_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stale_route", value)

    @property
    @pulumi.getter(name="strictCapabilityMatch")
    def strict_capability_match(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable strict capability matching. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "strict_capability_match")

    @strict_capability_match.setter
    def strict_capability_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strict_capability_match", value)

    @property
    @pulumi.getter(name="unsuppressMap")
    def unsuppress_map(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 Route map to selectively unsuppress suppressed routes.
        """
        return pulumi.get(self, "unsuppress_map")

    @unsuppress_map.setter
    def unsuppress_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsuppress_map", value)

    @property
    @pulumi.getter(name="unsuppressMap6")
    def unsuppress_map6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 Route map to selectively unsuppress suppressed routes.
        """
        return pulumi.get(self, "unsuppress_map6")

    @unsuppress_map6.setter
    def unsuppress_map6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unsuppress_map6", value)

    @property
    @pulumi.getter(name="updateSource")
    def update_source(self) -> Optional[pulumi.Input[str]]:
        """
        Interface to use as source IP/IPv6 address of TCP connections.
        """
        return pulumi.get(self, "update_source")

    @update_source.setter
    def update_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_source", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Neighbor weight.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class RouterBgpNeighborRange6Args:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 max_neighbor_num: Optional[pulumi.Input[int]] = None,
                 neighbor_group: Optional[pulumi.Input[str]] = None,
                 prefix6: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[int] max_neighbor_num: Maximum number of neighbors.
        :param pulumi.Input[str] neighbor_group: Neighbor group name.
        :param pulumi.Input[str] prefix6: Network IPv6 prefix.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if max_neighbor_num is not None:
            pulumi.set(__self__, "max_neighbor_num", max_neighbor_num)
        if neighbor_group is not None:
            pulumi.set(__self__, "neighbor_group", neighbor_group)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="maxNeighborNum")
    def max_neighbor_num(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of neighbors.
        """
        return pulumi.get(self, "max_neighbor_num")

    @max_neighbor_num.setter
    def max_neighbor_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_neighbor_num", value)

    @property
    @pulumi.getter(name="neighborGroup")
    def neighbor_group(self) -> Optional[pulumi.Input[str]]:
        """
        Neighbor group name.
        """
        return pulumi.get(self, "neighbor_group")

    @neighbor_group.setter
    def neighbor_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "neighbor_group", value)

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[pulumi.Input[str]]:
        """
        Network IPv6 prefix.
        """
        return pulumi.get(self, "prefix6")

    @prefix6.setter
    def prefix6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix6", value)


@pulumi.input_type
class RouterBgpNeighborRangeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 max_neighbor_num: Optional[pulumi.Input[int]] = None,
                 neighbor_group: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[int] max_neighbor_num: Maximum number of neighbors.
        :param pulumi.Input[str] neighbor_group: Neighbor group name.
        :param pulumi.Input[str] prefix: Network prefix.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if max_neighbor_num is not None:
            pulumi.set(__self__, "max_neighbor_num", max_neighbor_num)
        if neighbor_group is not None:
            pulumi.set(__self__, "neighbor_group", neighbor_group)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="maxNeighborNum")
    def max_neighbor_num(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of neighbors.
        """
        return pulumi.get(self, "max_neighbor_num")

    @max_neighbor_num.setter
    def max_neighbor_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_neighbor_num", value)

    @property
    @pulumi.getter(name="neighborGroup")
    def neighbor_group(self) -> Optional[pulumi.Input[str]]:
        """
        Neighbor group name.
        """
        return pulumi.get(self, "neighbor_group")

    @neighbor_group.setter
    def neighbor_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "neighbor_group", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Network prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class RouterBgpNetwork6Args:
    def __init__(__self__, *,
                 backdoor: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 network_import_check: Optional[pulumi.Input[str]] = None,
                 prefix6: Optional[pulumi.Input[str]] = None,
                 route_map: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] backdoor: Enable/disable route as backdoor. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] network_import_check: Configure insurance of BGP network route existence in IGP. Valid values: `global`, `enable`, `disable`.
        :param pulumi.Input[str] prefix6: Network IPv6 prefix.
        :param pulumi.Input[str] route_map: Route map of VRF leaking.
        """
        if backdoor is not None:
            pulumi.set(__self__, "backdoor", backdoor)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if network_import_check is not None:
            pulumi.set(__self__, "network_import_check", network_import_check)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def backdoor(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable route as backdoor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "backdoor")

    @backdoor.setter
    def backdoor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backdoor", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="networkImportCheck")
    def network_import_check(self) -> Optional[pulumi.Input[str]]:
        """
        Configure insurance of BGP network route existence in IGP. Valid values: `global`, `enable`, `disable`.
        """
        return pulumi.get(self, "network_import_check")

    @network_import_check.setter
    def network_import_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_import_check", value)

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[pulumi.Input[str]]:
        """
        Network IPv6 prefix.
        """
        return pulumi.get(self, "prefix6")

    @prefix6.setter
    def prefix6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix6", value)

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[pulumi.Input[str]]:
        """
        Route map of VRF leaking.
        """
        return pulumi.get(self, "route_map")

    @route_map.setter
    def route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map", value)


@pulumi.input_type
class RouterBgpNetworkArgs:
    def __init__(__self__, *,
                 backdoor: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 network_import_check: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 route_map: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] backdoor: Enable/disable route as backdoor. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] network_import_check: Configure insurance of BGP network route existence in IGP. Valid values: `global`, `enable`, `disable`.
        :param pulumi.Input[str] prefix: Network prefix.
        :param pulumi.Input[str] route_map: Route map of VRF leaking.
        """
        if backdoor is not None:
            pulumi.set(__self__, "backdoor", backdoor)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if network_import_check is not None:
            pulumi.set(__self__, "network_import_check", network_import_check)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def backdoor(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable route as backdoor. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "backdoor")

    @backdoor.setter
    def backdoor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backdoor", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="networkImportCheck")
    def network_import_check(self) -> Optional[pulumi.Input[str]]:
        """
        Configure insurance of BGP network route existence in IGP. Valid values: `global`, `enable`, `disable`.
        """
        return pulumi.get(self, "network_import_check")

    @network_import_check.setter
    def network_import_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_import_check", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Network prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[pulumi.Input[str]]:
        """
        Route map of VRF leaking.
        """
        return pulumi.get(self, "route_map")

    @route_map.setter
    def route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map", value)


@pulumi.input_type
class RouterBgpRedistribute6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 route_map: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Distribute list entry name.
        :param pulumi.Input[str] route_map: Route map of VRF leaking.
        :param pulumi.Input[str] status: Status Valid values: `enable`, `disable`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Distribute list entry name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[pulumi.Input[str]]:
        """
        Route map of VRF leaking.
        """
        return pulumi.get(self, "route_map")

    @route_map.setter
    def route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class RouterBgpRedistributeArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 route_map: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Distribute list entry name.
        :param pulumi.Input[str] route_map: Route map of VRF leaking.
        :param pulumi.Input[str] status: Status Valid values: `enable`, `disable`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Distribute list entry name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[pulumi.Input[str]]:
        """
        Route map of VRF leaking.
        """
        return pulumi.get(self, "route_map")

    @route_map.setter
    def route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class RouterBgpVrfLeak6Args:
    def __init__(__self__, *,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpVrfLeak6TargetArgs']]]] = None,
                 vrf: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['RouterBgpVrfLeak6TargetArgs']]] targets: Target VRF table. The structure of `target` block is documented below.
        :param pulumi.Input[str] vrf: Target VRF ID <0 - 31>.
        """
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpVrfLeak6TargetArgs']]]]:
        """
        Target VRF table. The structure of `target` block is documented below.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpVrfLeak6TargetArgs']]]]):
        pulumi.set(self, "targets", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        """
        Target VRF ID <0 - 31>.
        """
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


@pulumi.input_type
class RouterBgpVrfLeak6TargetArgs:
    def __init__(__self__, *,
                 interface: Optional[pulumi.Input[str]] = None,
                 route_map: Optional[pulumi.Input[str]] = None,
                 vrf: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface: Interface which is used to leak routes to target VRF.
        :param pulumi.Input[str] route_map: Route map of VRF leaking.
        :param pulumi.Input[str] vrf: Target VRF ID <0 - 31>.
        """
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface which is used to leak routes to target VRF.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[pulumi.Input[str]]:
        """
        Route map of VRF leaking.
        """
        return pulumi.get(self, "route_map")

    @route_map.setter
    def route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        """
        Target VRF ID <0 - 31>.
        """
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


@pulumi.input_type
class RouterBgpVrfLeakArgs:
    def __init__(__self__, *,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpVrfLeakTargetArgs']]]] = None,
                 vrf: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['RouterBgpVrfLeakTargetArgs']]] targets: Target VRF table. The structure of `target` block is documented below.
        :param pulumi.Input[str] vrf: Target VRF ID <0 - 31>.
        """
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpVrfLeakTargetArgs']]]]:
        """
        Target VRF table. The structure of `target` block is documented below.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterBgpVrfLeakTargetArgs']]]]):
        pulumi.set(self, "targets", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        """
        Target VRF ID <0 - 31>.
        """
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


@pulumi.input_type
class RouterBgpVrfLeakTargetArgs:
    def __init__(__self__, *,
                 interface: Optional[pulumi.Input[str]] = None,
                 route_map: Optional[pulumi.Input[str]] = None,
                 vrf: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface: Interface which is used to leak routes to target VRF.
        :param pulumi.Input[str] route_map: Route map of VRF leaking.
        :param pulumi.Input[str] vrf: Target VRF ID <0 - 31>.
        """
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface which is used to leak routes to target VRF.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[pulumi.Input[str]]:
        """
        Route map of VRF leaking.
        """
        return pulumi.get(self, "route_map")

    @route_map.setter
    def route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        """
        Target VRF ID <0 - 31>.
        """
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


@pulumi.input_type
class RouterCommunityListRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 regexp: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Permit or deny route-based operations, based on the route's COMMUNITY attribute. Valid values: `deny`, `permit`.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] match: Community specifications for matching a reserved community.
        :param pulumi.Input[str] regexp: Ordered list of COMMUNITY attributes as a regular expression.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if regexp is not None:
            pulumi.set(__self__, "regexp", regexp)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Permit or deny route-based operations, based on the route's COMMUNITY attribute. Valid values: `deny`, `permit`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        """
        Community specifications for matching a reserved community.
        """
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def regexp(self) -> Optional[pulumi.Input[str]]:
        """
        Ordered list of COMMUNITY attributes as a regular expression.
        """
        return pulumi.get(self, "regexp")

    @regexp.setter
    def regexp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regexp", value)


@pulumi.input_type
class RouterIsisIsisInterfaceArgs:
    def __init__(__self__, *,
                 auth_keychain_l1: Optional[pulumi.Input[str]] = None,
                 auth_keychain_l2: Optional[pulumi.Input[str]] = None,
                 auth_mode_l1: Optional[pulumi.Input[str]] = None,
                 auth_mode_l2: Optional[pulumi.Input[str]] = None,
                 auth_password_l1: Optional[pulumi.Input[str]] = None,
                 auth_password_l2: Optional[pulumi.Input[str]] = None,
                 auth_send_only_l1: Optional[pulumi.Input[str]] = None,
                 auth_send_only_l2: Optional[pulumi.Input[str]] = None,
                 circuit_type: Optional[pulumi.Input[str]] = None,
                 csnp_interval_l1: Optional[pulumi.Input[int]] = None,
                 csnp_interval_l2: Optional[pulumi.Input[int]] = None,
                 hello_interval_l1: Optional[pulumi.Input[int]] = None,
                 hello_interval_l2: Optional[pulumi.Input[int]] = None,
                 hello_multiplier_l1: Optional[pulumi.Input[int]] = None,
                 hello_multiplier_l2: Optional[pulumi.Input[int]] = None,
                 hello_padding: Optional[pulumi.Input[str]] = None,
                 lsp_interval: Optional[pulumi.Input[int]] = None,
                 lsp_retransmit_interval: Optional[pulumi.Input[int]] = None,
                 mesh_group: Optional[pulumi.Input[str]] = None,
                 mesh_group_id: Optional[pulumi.Input[int]] = None,
                 metric_l1: Optional[pulumi.Input[int]] = None,
                 metric_l2: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 priority_l1: Optional[pulumi.Input[int]] = None,
                 priority_l2: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 status6: Optional[pulumi.Input[str]] = None,
                 wide_metric_l1: Optional[pulumi.Input[int]] = None,
                 wide_metric_l2: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] auth_keychain_l1: Authentication key-chain for level 1 PDUs.
        :param pulumi.Input[str] auth_keychain_l2: Authentication key-chain for level 2 PDUs.
        :param pulumi.Input[str] auth_mode_l1: Level 1 authentication mode. Valid values: `md5`, `password`.
        :param pulumi.Input[str] auth_mode_l2: Level 2 authentication mode. Valid values: `md5`, `password`.
        :param pulumi.Input[str] auth_password_l1: Authentication password for level 1 PDUs.
        :param pulumi.Input[str] auth_password_l2: Authentication password for level 2 PDUs.
        :param pulumi.Input[str] auth_send_only_l1: Enable/disable authentication send-only for level 1 PDUs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] auth_send_only_l2: Enable/disable authentication send-only for level 2 PDUs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] circuit_type: IS-IS interface's circuit type Valid values: `level-1-2`, `level-1`, `level-2`.
        :param pulumi.Input[int] csnp_interval_l1: Level 1 CSNP interval.
        :param pulumi.Input[int] csnp_interval_l2: Level 2 CSNP interval.
        :param pulumi.Input[int] hello_interval_l1: Level 1 hello interval.
        :param pulumi.Input[int] hello_interval_l2: Level 2 hello interval.
        :param pulumi.Input[int] hello_multiplier_l1: Level 1 multiplier for Hello holding time.
        :param pulumi.Input[int] hello_multiplier_l2: Level 2 multiplier for Hello holding time.
        :param pulumi.Input[str] hello_padding: Enable/disable padding to IS-IS hello packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] lsp_interval: LSP transmission interval (milliseconds).
        :param pulumi.Input[int] lsp_retransmit_interval: LSP retransmission interval (sec).
        :param pulumi.Input[str] mesh_group: Enable/disable IS-IS mesh group. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] mesh_group_id: Mesh group ID <0-4294967295>, 0: mesh-group blocked.
        :param pulumi.Input[int] metric_l1: Level 1 metric for interface.
        :param pulumi.Input[int] metric_l2: Level 2 metric for interface.
        :param pulumi.Input[str] name: IS-IS interface name.
        :param pulumi.Input[str] network_type: IS-IS interface's network type Valid values: `broadcast`, `point-to-point`, `loopback`.
        :param pulumi.Input[int] priority_l1: Level 1 priority.
        :param pulumi.Input[int] priority_l2: Level 2 priority.
        :param pulumi.Input[str] status: Enable/disable redistribution. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status6: Enable/disable IPv6 interface for IS-IS. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] wide_metric_l1: Level 1 wide metric for interface.
        :param pulumi.Input[int] wide_metric_l2: Level 2 wide metric for interface.
        """
        if auth_keychain_l1 is not None:
            pulumi.set(__self__, "auth_keychain_l1", auth_keychain_l1)
        if auth_keychain_l2 is not None:
            pulumi.set(__self__, "auth_keychain_l2", auth_keychain_l2)
        if auth_mode_l1 is not None:
            pulumi.set(__self__, "auth_mode_l1", auth_mode_l1)
        if auth_mode_l2 is not None:
            pulumi.set(__self__, "auth_mode_l2", auth_mode_l2)
        if auth_password_l1 is not None:
            pulumi.set(__self__, "auth_password_l1", auth_password_l1)
        if auth_password_l2 is not None:
            pulumi.set(__self__, "auth_password_l2", auth_password_l2)
        if auth_send_only_l1 is not None:
            pulumi.set(__self__, "auth_send_only_l1", auth_send_only_l1)
        if auth_send_only_l2 is not None:
            pulumi.set(__self__, "auth_send_only_l2", auth_send_only_l2)
        if circuit_type is not None:
            pulumi.set(__self__, "circuit_type", circuit_type)
        if csnp_interval_l1 is not None:
            pulumi.set(__self__, "csnp_interval_l1", csnp_interval_l1)
        if csnp_interval_l2 is not None:
            pulumi.set(__self__, "csnp_interval_l2", csnp_interval_l2)
        if hello_interval_l1 is not None:
            pulumi.set(__self__, "hello_interval_l1", hello_interval_l1)
        if hello_interval_l2 is not None:
            pulumi.set(__self__, "hello_interval_l2", hello_interval_l2)
        if hello_multiplier_l1 is not None:
            pulumi.set(__self__, "hello_multiplier_l1", hello_multiplier_l1)
        if hello_multiplier_l2 is not None:
            pulumi.set(__self__, "hello_multiplier_l2", hello_multiplier_l2)
        if hello_padding is not None:
            pulumi.set(__self__, "hello_padding", hello_padding)
        if lsp_interval is not None:
            pulumi.set(__self__, "lsp_interval", lsp_interval)
        if lsp_retransmit_interval is not None:
            pulumi.set(__self__, "lsp_retransmit_interval", lsp_retransmit_interval)
        if mesh_group is not None:
            pulumi.set(__self__, "mesh_group", mesh_group)
        if mesh_group_id is not None:
            pulumi.set(__self__, "mesh_group_id", mesh_group_id)
        if metric_l1 is not None:
            pulumi.set(__self__, "metric_l1", metric_l1)
        if metric_l2 is not None:
            pulumi.set(__self__, "metric_l2", metric_l2)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if priority_l1 is not None:
            pulumi.set(__self__, "priority_l1", priority_l1)
        if priority_l2 is not None:
            pulumi.set(__self__, "priority_l2", priority_l2)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status6 is not None:
            pulumi.set(__self__, "status6", status6)
        if wide_metric_l1 is not None:
            pulumi.set(__self__, "wide_metric_l1", wide_metric_l1)
        if wide_metric_l2 is not None:
            pulumi.set(__self__, "wide_metric_l2", wide_metric_l2)

    @property
    @pulumi.getter(name="authKeychainL1")
    def auth_keychain_l1(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication key-chain for level 1 PDUs.
        """
        return pulumi.get(self, "auth_keychain_l1")

    @auth_keychain_l1.setter
    def auth_keychain_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_keychain_l1", value)

    @property
    @pulumi.getter(name="authKeychainL2")
    def auth_keychain_l2(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication key-chain for level 2 PDUs.
        """
        return pulumi.get(self, "auth_keychain_l2")

    @auth_keychain_l2.setter
    def auth_keychain_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_keychain_l2", value)

    @property
    @pulumi.getter(name="authModeL1")
    def auth_mode_l1(self) -> Optional[pulumi.Input[str]]:
        """
        Level 1 authentication mode. Valid values: `md5`, `password`.
        """
        return pulumi.get(self, "auth_mode_l1")

    @auth_mode_l1.setter
    def auth_mode_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_mode_l1", value)

    @property
    @pulumi.getter(name="authModeL2")
    def auth_mode_l2(self) -> Optional[pulumi.Input[str]]:
        """
        Level 2 authentication mode. Valid values: `md5`, `password`.
        """
        return pulumi.get(self, "auth_mode_l2")

    @auth_mode_l2.setter
    def auth_mode_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_mode_l2", value)

    @property
    @pulumi.getter(name="authPasswordL1")
    def auth_password_l1(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication password for level 1 PDUs.
        """
        return pulumi.get(self, "auth_password_l1")

    @auth_password_l1.setter
    def auth_password_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_password_l1", value)

    @property
    @pulumi.getter(name="authPasswordL2")
    def auth_password_l2(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication password for level 2 PDUs.
        """
        return pulumi.get(self, "auth_password_l2")

    @auth_password_l2.setter
    def auth_password_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_password_l2", value)

    @property
    @pulumi.getter(name="authSendOnlyL1")
    def auth_send_only_l1(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable authentication send-only for level 1 PDUs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_send_only_l1")

    @auth_send_only_l1.setter
    def auth_send_only_l1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_send_only_l1", value)

    @property
    @pulumi.getter(name="authSendOnlyL2")
    def auth_send_only_l2(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable authentication send-only for level 2 PDUs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auth_send_only_l2")

    @auth_send_only_l2.setter
    def auth_send_only_l2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_send_only_l2", value)

    @property
    @pulumi.getter(name="circuitType")
    def circuit_type(self) -> Optional[pulumi.Input[str]]:
        """
        IS-IS interface's circuit type Valid values: `level-1-2`, `level-1`, `level-2`.
        """
        return pulumi.get(self, "circuit_type")

    @circuit_type.setter
    def circuit_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "circuit_type", value)

    @property
    @pulumi.getter(name="csnpIntervalL1")
    def csnp_interval_l1(self) -> Optional[pulumi.Input[int]]:
        """
        Level 1 CSNP interval.
        """
        return pulumi.get(self, "csnp_interval_l1")

    @csnp_interval_l1.setter
    def csnp_interval_l1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "csnp_interval_l1", value)

    @property
    @pulumi.getter(name="csnpIntervalL2")
    def csnp_interval_l2(self) -> Optional[pulumi.Input[int]]:
        """
        Level 2 CSNP interval.
        """
        return pulumi.get(self, "csnp_interval_l2")

    @csnp_interval_l2.setter
    def csnp_interval_l2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "csnp_interval_l2", value)

    @property
    @pulumi.getter(name="helloIntervalL1")
    def hello_interval_l1(self) -> Optional[pulumi.Input[int]]:
        """
        Level 1 hello interval.
        """
        return pulumi.get(self, "hello_interval_l1")

    @hello_interval_l1.setter
    def hello_interval_l1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval_l1", value)

    @property
    @pulumi.getter(name="helloIntervalL2")
    def hello_interval_l2(self) -> Optional[pulumi.Input[int]]:
        """
        Level 2 hello interval.
        """
        return pulumi.get(self, "hello_interval_l2")

    @hello_interval_l2.setter
    def hello_interval_l2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval_l2", value)

    @property
    @pulumi.getter(name="helloMultiplierL1")
    def hello_multiplier_l1(self) -> Optional[pulumi.Input[int]]:
        """
        Level 1 multiplier for Hello holding time.
        """
        return pulumi.get(self, "hello_multiplier_l1")

    @hello_multiplier_l1.setter
    def hello_multiplier_l1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_multiplier_l1", value)

    @property
    @pulumi.getter(name="helloMultiplierL2")
    def hello_multiplier_l2(self) -> Optional[pulumi.Input[int]]:
        """
        Level 2 multiplier for Hello holding time.
        """
        return pulumi.get(self, "hello_multiplier_l2")

    @hello_multiplier_l2.setter
    def hello_multiplier_l2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_multiplier_l2", value)

    @property
    @pulumi.getter(name="helloPadding")
    def hello_padding(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable padding to IS-IS hello packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "hello_padding")

    @hello_padding.setter
    def hello_padding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hello_padding", value)

    @property
    @pulumi.getter(name="lspInterval")
    def lsp_interval(self) -> Optional[pulumi.Input[int]]:
        """
        LSP transmission interval (milliseconds).
        """
        return pulumi.get(self, "lsp_interval")

    @lsp_interval.setter
    def lsp_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lsp_interval", value)

    @property
    @pulumi.getter(name="lspRetransmitInterval")
    def lsp_retransmit_interval(self) -> Optional[pulumi.Input[int]]:
        """
        LSP retransmission interval (sec).
        """
        return pulumi.get(self, "lsp_retransmit_interval")

    @lsp_retransmit_interval.setter
    def lsp_retransmit_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lsp_retransmit_interval", value)

    @property
    @pulumi.getter(name="meshGroup")
    def mesh_group(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IS-IS mesh group. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "mesh_group")

    @mesh_group.setter
    def mesh_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mesh_group", value)

    @property
    @pulumi.getter(name="meshGroupId")
    def mesh_group_id(self) -> Optional[pulumi.Input[int]]:
        """
        Mesh group ID <0-4294967295>, 0: mesh-group blocked.
        """
        return pulumi.get(self, "mesh_group_id")

    @mesh_group_id.setter
    def mesh_group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mesh_group_id", value)

    @property
    @pulumi.getter(name="metricL1")
    def metric_l1(self) -> Optional[pulumi.Input[int]]:
        """
        Level 1 metric for interface.
        """
        return pulumi.get(self, "metric_l1")

    @metric_l1.setter
    def metric_l1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric_l1", value)

    @property
    @pulumi.getter(name="metricL2")
    def metric_l2(self) -> Optional[pulumi.Input[int]]:
        """
        Level 2 metric for interface.
        """
        return pulumi.get(self, "metric_l2")

    @metric_l2.setter
    def metric_l2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric_l2", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IS-IS interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        """
        IS-IS interface's network type Valid values: `broadcast`, `point-to-point`, `loopback`.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter(name="priorityL1")
    def priority_l1(self) -> Optional[pulumi.Input[int]]:
        """
        Level 1 priority.
        """
        return pulumi.get(self, "priority_l1")

    @priority_l1.setter
    def priority_l1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority_l1", value)

    @property
    @pulumi.getter(name="priorityL2")
    def priority_l2(self) -> Optional[pulumi.Input[int]]:
        """
        Level 2 priority.
        """
        return pulumi.get(self, "priority_l2")

    @priority_l2.setter
    def priority_l2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority_l2", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable redistribution. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def status6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IPv6 interface for IS-IS. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status6")

    @status6.setter
    def status6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status6", value)

    @property
    @pulumi.getter(name="wideMetricL1")
    def wide_metric_l1(self) -> Optional[pulumi.Input[int]]:
        """
        Level 1 wide metric for interface.
        """
        return pulumi.get(self, "wide_metric_l1")

    @wide_metric_l1.setter
    def wide_metric_l1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wide_metric_l1", value)

    @property
    @pulumi.getter(name="wideMetricL2")
    def wide_metric_l2(self) -> Optional[pulumi.Input[int]]:
        """
        Level 2 wide metric for interface.
        """
        return pulumi.get(self, "wide_metric_l2")

    @wide_metric_l2.setter
    def wide_metric_l2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wide_metric_l2", value)


@pulumi.input_type
class RouterIsisIsisNetArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 net: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Prefix entry ID.
        :param pulumi.Input[str] net: IS-IS net xx.xxxx. ... .xxxx.xx.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if net is not None:
            pulumi.set(__self__, "net", net)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Prefix entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def net(self) -> Optional[pulumi.Input[str]]:
        """
        IS-IS net xx.xxxx. ... .xxxx.xx.
        """
        return pulumi.get(self, "net")

    @net.setter
    def net(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net", value)


@pulumi.input_type
class RouterIsisRedistribute6Args:
    def __init__(__self__, *,
                 level: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[int]] = None,
                 metric_type: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 routemap: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] level: Level. Valid values: `level-1-2`, `level-1`, `level-2`.
        :param pulumi.Input[int] metric: Metric.
        :param pulumi.Input[str] metric_type: Metric type. Valid values: `external`, `internal`.
        :param pulumi.Input[str] protocol: Protocol name.
        :param pulumi.Input[str] routemap: Route map name.
        :param pulumi.Input[str] status: Enable/disable redistribution. Valid values: `enable`, `disable`.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if routemap is not None:
            pulumi.set(__self__, "routemap", routemap)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level. Valid values: `level-1-2`, `level-1`, `level-2`.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[int]]:
        """
        Metric.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[pulumi.Input[str]]:
        """
        Metric type. Valid values: `external`, `internal`.
        """
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_type", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol name.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def routemap(self) -> Optional[pulumi.Input[str]]:
        """
        Route map name.
        """
        return pulumi.get(self, "routemap")

    @routemap.setter
    def routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routemap", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable redistribution. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class RouterIsisRedistributeArgs:
    def __init__(__self__, *,
                 level: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[int]] = None,
                 metric_type: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 routemap: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] level: Level. Valid values: `level-1-2`, `level-1`, `level-2`.
        :param pulumi.Input[int] metric: Metric.
        :param pulumi.Input[str] metric_type: Metric type. Valid values: `external`, `internal`.
        :param pulumi.Input[str] protocol: Protocol name.
        :param pulumi.Input[str] routemap: Route map name.
        :param pulumi.Input[str] status: Enable/disable redistribution. Valid values: `enable`, `disable`.
        """
        if level is not None:
            pulumi.set(__self__, "level", level)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if routemap is not None:
            pulumi.set(__self__, "routemap", routemap)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level. Valid values: `level-1-2`, `level-1`, `level-2`.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[int]]:
        """
        Metric.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[pulumi.Input[str]]:
        """
        Metric type. Valid values: `external`, `internal`.
        """
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_type", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol name.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def routemap(self) -> Optional[pulumi.Input[str]]:
        """
        Route map name.
        """
        return pulumi.get(self, "routemap")

    @routemap.setter
    def routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routemap", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable redistribution. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class RouterIsisSummaryAddress6Args:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 prefix6: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Prefix entry ID.
        :param pulumi.Input[str] level: Level. Valid values: `level-1-2`, `level-1`, `level-2`.
        :param pulumi.Input[str] prefix6: IPv6 prefix.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Prefix entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level. Valid values: `level-1-2`, `level-1`, `level-2`.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 prefix.
        """
        return pulumi.get(self, "prefix6")

    @prefix6.setter
    def prefix6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix6", value)


@pulumi.input_type
class RouterIsisSummaryAddressArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Prefix entry ID.
        :param pulumi.Input[str] level: Level. Valid values: `level-1-2`, `level-1`, `level-2`.
        :param pulumi.Input[str] prefix: Prefix.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Prefix entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        """
        Level. Valid values: `level-1-2`, `level-1`, `level-2`.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class RouterKeyChainKeyArgs:
    def __init__(__self__, *,
                 accept_lifetime: Optional[pulumi.Input[str]] = None,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 key_string: Optional[pulumi.Input[str]] = None,
                 send_lifetime: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] accept_lifetime: Lifetime of received authentication key (format: hh:mm:ss day month year).
        :param pulumi.Input[str] algorithm: Cryptographic algorithm. Valid values: `md5`, `hmac-sha1`, `hmac-sha256`, `hmac-sha384`, `hmac-sha512`.
        :param pulumi.Input[int] id: Key ID (0 - 2147483647).
        :param pulumi.Input[str] key_string: Password for the key (max. = 35 characters).
        :param pulumi.Input[str] send_lifetime: Lifetime of sent authentication key (format: hh:mm:ss day month year).
        """
        if accept_lifetime is not None:
            pulumi.set(__self__, "accept_lifetime", accept_lifetime)
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)
        if send_lifetime is not None:
            pulumi.set(__self__, "send_lifetime", send_lifetime)

    @property
    @pulumi.getter(name="acceptLifetime")
    def accept_lifetime(self) -> Optional[pulumi.Input[str]]:
        """
        Lifetime of received authentication key (format: hh:mm:ss day month year).
        """
        return pulumi.get(self, "accept_lifetime")

    @accept_lifetime.setter
    def accept_lifetime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accept_lifetime", value)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Cryptographic algorithm. Valid values: `md5`, `hmac-sha1`, `hmac-sha256`, `hmac-sha384`, `hmac-sha512`.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Key ID (0 - 2147483647).
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[pulumi.Input[str]]:
        """
        Password for the key (max. = 35 characters).
        """
        return pulumi.get(self, "key_string")

    @key_string.setter
    def key_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_string", value)

    @property
    @pulumi.getter(name="sendLifetime")
    def send_lifetime(self) -> Optional[pulumi.Input[str]]:
        """
        Lifetime of sent authentication key (format: hh:mm:ss day month year).
        """
        return pulumi.get(self, "send_lifetime")

    @send_lifetime.setter
    def send_lifetime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_lifetime", value)


@pulumi.input_type
class RouterMulticast6InterfaceArgs:
    def __init__(__self__, *,
                 hello_holdtime: Optional[pulumi.Input[int]] = None,
                 hello_interval: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] hello_holdtime: Time before old neighbour information expires (1 - 65535 sec, default = 105).
        :param pulumi.Input[int] hello_interval: Interval between sending PIM hello messages  (1 - 65535 sec, default = 30)..
        :param pulumi.Input[str] name: Interface name.
        """
        if hello_holdtime is not None:
            pulumi.set(__self__, "hello_holdtime", hello_holdtime)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="helloHoldtime")
    def hello_holdtime(self) -> Optional[pulumi.Input[int]]:
        """
        Time before old neighbour information expires (1 - 65535 sec, default = 105).
        """
        return pulumi.get(self, "hello_holdtime")

    @hello_holdtime.setter
    def hello_holdtime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_holdtime", value)

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval between sending PIM hello messages  (1 - 65535 sec, default = 30)..
        """
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RouterMulticast6PimSmGlobalArgs:
    def __init__(__self__, *,
                 register_rate_limit: Optional[pulumi.Input[int]] = None,
                 rp_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['RouterMulticast6PimSmGlobalRpAddressArgs']]]] = None):
        """
        :param pulumi.Input[int] register_rate_limit: Limit of packets/sec per source registered through this RP (0 means unlimited).
        :param pulumi.Input[Sequence[pulumi.Input['RouterMulticast6PimSmGlobalRpAddressArgs']]] rp_addresses: Statically configured RP addresses. The structure of `rp_address` block is documented below.
        """
        if register_rate_limit is not None:
            pulumi.set(__self__, "register_rate_limit", register_rate_limit)
        if rp_addresses is not None:
            pulumi.set(__self__, "rp_addresses", rp_addresses)

    @property
    @pulumi.getter(name="registerRateLimit")
    def register_rate_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Limit of packets/sec per source registered through this RP (0 means unlimited).
        """
        return pulumi.get(self, "register_rate_limit")

    @register_rate_limit.setter
    def register_rate_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "register_rate_limit", value)

    @property
    @pulumi.getter(name="rpAddresses")
    def rp_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterMulticast6PimSmGlobalRpAddressArgs']]]]:
        """
        Statically configured RP addresses. The structure of `rp_address` block is documented below.
        """
        return pulumi.get(self, "rp_addresses")

    @rp_addresses.setter
    def rp_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterMulticast6PimSmGlobalRpAddressArgs']]]]):
        pulumi.set(self, "rp_addresses", value)


@pulumi.input_type
class RouterMulticast6PimSmGlobalRpAddressArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 ip6_address: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: ID of the entry.
        :param pulumi.Input[str] ip6_address: RP router IPv6 address.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip6_address is not None:
            pulumi.set(__self__, "ip6_address", ip6_address)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the entry.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ip6Address")
    def ip6_address(self) -> Optional[pulumi.Input[str]]:
        """
        RP router IPv6 address.
        """
        return pulumi.get(self, "ip6_address")

    @ip6_address.setter
    def ip6_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_address", value)


@pulumi.input_type
class RouterMulticastFlowFlowArgs:
    def __init__(__self__, *,
                 group_addr: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 source_addr: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] group_addr: Multicast group IP address.
        :param pulumi.Input[int] id: Flow ID.
        :param pulumi.Input[str] source_addr: Multicast source IP address.
        """
        if group_addr is not None:
            pulumi.set(__self__, "group_addr", group_addr)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if source_addr is not None:
            pulumi.set(__self__, "source_addr", source_addr)

    @property
    @pulumi.getter(name="groupAddr")
    def group_addr(self) -> Optional[pulumi.Input[str]]:
        """
        Multicast group IP address.
        """
        return pulumi.get(self, "group_addr")

    @group_addr.setter
    def group_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_addr", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Flow ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="sourceAddr")
    def source_addr(self) -> Optional[pulumi.Input[str]]:
        """
        Multicast source IP address.
        """
        return pulumi.get(self, "source_addr")

    @source_addr.setter
    def source_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_addr", value)


@pulumi.input_type
class RouterMulticastInterfaceArgs:
    def __init__(__self__, *,
                 bfd: Optional[pulumi.Input[str]] = None,
                 cisco_exclude_genid: Optional[pulumi.Input[str]] = None,
                 dr_priority: Optional[pulumi.Input[int]] = None,
                 hello_holdtime: Optional[pulumi.Input[int]] = None,
                 hello_interval: Optional[pulumi.Input[int]] = None,
                 igmp: Optional[pulumi.Input['RouterMulticastInterfaceIgmpArgs']] = None,
                 join_groups: Optional[pulumi.Input[Sequence[pulumi.Input['RouterMulticastInterfaceJoinGroupArgs']]]] = None,
                 multicast_flow: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 neighbour_filter: Optional[pulumi.Input[str]] = None,
                 passive: Optional[pulumi.Input[str]] = None,
                 pim_mode: Optional[pulumi.Input[str]] = None,
                 propagation_delay: Optional[pulumi.Input[int]] = None,
                 rp_candidate: Optional[pulumi.Input[str]] = None,
                 rp_candidate_group: Optional[pulumi.Input[str]] = None,
                 rp_candidate_interval: Optional[pulumi.Input[int]] = None,
                 rp_candidate_priority: Optional[pulumi.Input[int]] = None,
                 rpf_nbr_fail_back: Optional[pulumi.Input[str]] = None,
                 rpf_nbr_fail_back_filter: Optional[pulumi.Input[str]] = None,
                 state_refresh_interval: Optional[pulumi.Input[int]] = None,
                 static_group: Optional[pulumi.Input[str]] = None,
                 ttl_threshold: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] bfd: Enable/disable Protocol Independent Multicast (PIM) Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cisco_exclude_genid: Exclude GenID from hello packets (compatibility with old Cisco IOS). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] dr_priority: DR election priority.
        :param pulumi.Input[int] hello_holdtime: Time before old neighbor information expires (0 - 65535 sec, default = 105).
        :param pulumi.Input[int] hello_interval: Interval between sending PIM hello messages (0 - 65535 sec, default = 30).
        :param pulumi.Input['RouterMulticastInterfaceIgmpArgs'] igmp: IGMP configuration options. The structure of `igmp` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['RouterMulticastInterfaceJoinGroupArgs']]] join_groups: Join multicast groups. The structure of `join_group` block is documented below.
        :param pulumi.Input[str] multicast_flow: Acceptable source for multicast group.
        :param pulumi.Input[str] name: Interface name.
        :param pulumi.Input[str] neighbour_filter: Routers acknowledged as neighbor routers.
        :param pulumi.Input[str] passive: Enable/disable listening to IGMP but not participating in PIM. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pim_mode: PIM operation mode. Valid values: `sparse-mode`, `dense-mode`.
        :param pulumi.Input[int] propagation_delay: Delay flooding packets on this interface (100 - 5000 msec, default = 500).
        :param pulumi.Input[str] rp_candidate: Enable/disable compete to become RP in elections. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] rp_candidate_group: Multicast groups managed by this RP.
        :param pulumi.Input[int] rp_candidate_interval: RP candidate advertisement interval (1 - 16383 sec, default = 60).
        :param pulumi.Input[int] rp_candidate_priority: Router's priority as RP.
        :param pulumi.Input[str] rpf_nbr_fail_back: Enable/disable fail back for RPF neighbor query. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] rpf_nbr_fail_back_filter: Filter for fail back RPF neighbors.
        :param pulumi.Input[int] state_refresh_interval: Interval between sending state-refresh packets (1 - 100 sec, default = 60).
        :param pulumi.Input[str] static_group: Statically set multicast groups to forward out.
        :param pulumi.Input[int] ttl_threshold: Minimum TTL of multicast packets that will be forwarded (applied only to new multicast routes) (1 - 255, default = 1).
        """
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if cisco_exclude_genid is not None:
            pulumi.set(__self__, "cisco_exclude_genid", cisco_exclude_genid)
        if dr_priority is not None:
            pulumi.set(__self__, "dr_priority", dr_priority)
        if hello_holdtime is not None:
            pulumi.set(__self__, "hello_holdtime", hello_holdtime)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if igmp is not None:
            pulumi.set(__self__, "igmp", igmp)
        if join_groups is not None:
            pulumi.set(__self__, "join_groups", join_groups)
        if multicast_flow is not None:
            pulumi.set(__self__, "multicast_flow", multicast_flow)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if neighbour_filter is not None:
            pulumi.set(__self__, "neighbour_filter", neighbour_filter)
        if passive is not None:
            pulumi.set(__self__, "passive", passive)
        if pim_mode is not None:
            pulumi.set(__self__, "pim_mode", pim_mode)
        if propagation_delay is not None:
            pulumi.set(__self__, "propagation_delay", propagation_delay)
        if rp_candidate is not None:
            pulumi.set(__self__, "rp_candidate", rp_candidate)
        if rp_candidate_group is not None:
            pulumi.set(__self__, "rp_candidate_group", rp_candidate_group)
        if rp_candidate_interval is not None:
            pulumi.set(__self__, "rp_candidate_interval", rp_candidate_interval)
        if rp_candidate_priority is not None:
            pulumi.set(__self__, "rp_candidate_priority", rp_candidate_priority)
        if rpf_nbr_fail_back is not None:
            pulumi.set(__self__, "rpf_nbr_fail_back", rpf_nbr_fail_back)
        if rpf_nbr_fail_back_filter is not None:
            pulumi.set(__self__, "rpf_nbr_fail_back_filter", rpf_nbr_fail_back_filter)
        if state_refresh_interval is not None:
            pulumi.set(__self__, "state_refresh_interval", state_refresh_interval)
        if static_group is not None:
            pulumi.set(__self__, "static_group", static_group)
        if ttl_threshold is not None:
            pulumi.set(__self__, "ttl_threshold", ttl_threshold)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Protocol Independent Multicast (PIM) Bidirectional Forwarding Detection (BFD). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter(name="ciscoExcludeGenid")
    def cisco_exclude_genid(self) -> Optional[pulumi.Input[str]]:
        """
        Exclude GenID from hello packets (compatibility with old Cisco IOS). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cisco_exclude_genid")

    @cisco_exclude_genid.setter
    def cisco_exclude_genid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cisco_exclude_genid", value)

    @property
    @pulumi.getter(name="drPriority")
    def dr_priority(self) -> Optional[pulumi.Input[int]]:
        """
        DR election priority.
        """
        return pulumi.get(self, "dr_priority")

    @dr_priority.setter
    def dr_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dr_priority", value)

    @property
    @pulumi.getter(name="helloHoldtime")
    def hello_holdtime(self) -> Optional[pulumi.Input[int]]:
        """
        Time before old neighbor information expires (0 - 65535 sec, default = 105).
        """
        return pulumi.get(self, "hello_holdtime")

    @hello_holdtime.setter
    def hello_holdtime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_holdtime", value)

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval between sending PIM hello messages (0 - 65535 sec, default = 30).
        """
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval", value)

    @property
    @pulumi.getter
    def igmp(self) -> Optional[pulumi.Input['RouterMulticastInterfaceIgmpArgs']]:
        """
        IGMP configuration options. The structure of `igmp` block is documented below.
        """
        return pulumi.get(self, "igmp")

    @igmp.setter
    def igmp(self, value: Optional[pulumi.Input['RouterMulticastInterfaceIgmpArgs']]):
        pulumi.set(self, "igmp", value)

    @property
    @pulumi.getter(name="joinGroups")
    def join_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterMulticastInterfaceJoinGroupArgs']]]]:
        """
        Join multicast groups. The structure of `join_group` block is documented below.
        """
        return pulumi.get(self, "join_groups")

    @join_groups.setter
    def join_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterMulticastInterfaceJoinGroupArgs']]]]):
        pulumi.set(self, "join_groups", value)

    @property
    @pulumi.getter(name="multicastFlow")
    def multicast_flow(self) -> Optional[pulumi.Input[str]]:
        """
        Acceptable source for multicast group.
        """
        return pulumi.get(self, "multicast_flow")

    @multicast_flow.setter
    def multicast_flow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_flow", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="neighbourFilter")
    def neighbour_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Routers acknowledged as neighbor routers.
        """
        return pulumi.get(self, "neighbour_filter")

    @neighbour_filter.setter
    def neighbour_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "neighbour_filter", value)

    @property
    @pulumi.getter
    def passive(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable listening to IGMP but not participating in PIM. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "passive")

    @passive.setter
    def passive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passive", value)

    @property
    @pulumi.getter(name="pimMode")
    def pim_mode(self) -> Optional[pulumi.Input[str]]:
        """
        PIM operation mode. Valid values: `sparse-mode`, `dense-mode`.
        """
        return pulumi.get(self, "pim_mode")

    @pim_mode.setter
    def pim_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pim_mode", value)

    @property
    @pulumi.getter(name="propagationDelay")
    def propagation_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Delay flooding packets on this interface (100 - 5000 msec, default = 500).
        """
        return pulumi.get(self, "propagation_delay")

    @propagation_delay.setter
    def propagation_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "propagation_delay", value)

    @property
    @pulumi.getter(name="rpCandidate")
    def rp_candidate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable compete to become RP in elections. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "rp_candidate")

    @rp_candidate.setter
    def rp_candidate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rp_candidate", value)

    @property
    @pulumi.getter(name="rpCandidateGroup")
    def rp_candidate_group(self) -> Optional[pulumi.Input[str]]:
        """
        Multicast groups managed by this RP.
        """
        return pulumi.get(self, "rp_candidate_group")

    @rp_candidate_group.setter
    def rp_candidate_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rp_candidate_group", value)

    @property
    @pulumi.getter(name="rpCandidateInterval")
    def rp_candidate_interval(self) -> Optional[pulumi.Input[int]]:
        """
        RP candidate advertisement interval (1 - 16383 sec, default = 60).
        """
        return pulumi.get(self, "rp_candidate_interval")

    @rp_candidate_interval.setter
    def rp_candidate_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rp_candidate_interval", value)

    @property
    @pulumi.getter(name="rpCandidatePriority")
    def rp_candidate_priority(self) -> Optional[pulumi.Input[int]]:
        """
        Router's priority as RP.
        """
        return pulumi.get(self, "rp_candidate_priority")

    @rp_candidate_priority.setter
    def rp_candidate_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rp_candidate_priority", value)

    @property
    @pulumi.getter(name="rpfNbrFailBack")
    def rpf_nbr_fail_back(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable fail back for RPF neighbor query. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "rpf_nbr_fail_back")

    @rpf_nbr_fail_back.setter
    def rpf_nbr_fail_back(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rpf_nbr_fail_back", value)

    @property
    @pulumi.getter(name="rpfNbrFailBackFilter")
    def rpf_nbr_fail_back_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Filter for fail back RPF neighbors.
        """
        return pulumi.get(self, "rpf_nbr_fail_back_filter")

    @rpf_nbr_fail_back_filter.setter
    def rpf_nbr_fail_back_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rpf_nbr_fail_back_filter", value)

    @property
    @pulumi.getter(name="stateRefreshInterval")
    def state_refresh_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval between sending state-refresh packets (1 - 100 sec, default = 60).
        """
        return pulumi.get(self, "state_refresh_interval")

    @state_refresh_interval.setter
    def state_refresh_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "state_refresh_interval", value)

    @property
    @pulumi.getter(name="staticGroup")
    def static_group(self) -> Optional[pulumi.Input[str]]:
        """
        Statically set multicast groups to forward out.
        """
        return pulumi.get(self, "static_group")

    @static_group.setter
    def static_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "static_group", value)

    @property
    @pulumi.getter(name="ttlThreshold")
    def ttl_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum TTL of multicast packets that will be forwarded (applied only to new multicast routes) (1 - 255, default = 1).
        """
        return pulumi.get(self, "ttl_threshold")

    @ttl_threshold.setter
    def ttl_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl_threshold", value)


@pulumi.input_type
class RouterMulticastInterfaceIgmpArgs:
    def __init__(__self__, *,
                 access_group: Optional[pulumi.Input[str]] = None,
                 immediate_leave_group: Optional[pulumi.Input[str]] = None,
                 last_member_query_count: Optional[pulumi.Input[int]] = None,
                 last_member_query_interval: Optional[pulumi.Input[int]] = None,
                 query_interval: Optional[pulumi.Input[int]] = None,
                 query_max_response_time: Optional[pulumi.Input[int]] = None,
                 query_timeout: Optional[pulumi.Input[int]] = None,
                 router_alert_check: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_group: Groups IGMP hosts are allowed to join.
        :param pulumi.Input[str] immediate_leave_group: Groups to drop membership for immediately after receiving IGMPv2 leave.
        :param pulumi.Input[int] last_member_query_count: Number of group specific queries before removing group (2 - 7, default = 2).
        :param pulumi.Input[int] last_member_query_interval: Timeout between IGMPv2 leave and removing group (1 - 65535 msec, default = 1000).
        :param pulumi.Input[int] query_interval: Interval between queries to IGMP hosts (1 - 65535 sec, default = 125).
        :param pulumi.Input[int] query_max_response_time: Maximum time to wait for a IGMP query response (1 - 25 sec, default = 10).
        :param pulumi.Input[int] query_timeout: Timeout between queries before becoming querier for network (60 - 900, default = 255).
        :param pulumi.Input[str] router_alert_check: Enable/disable require IGMP packets contain router alert option. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] version: Maximum version of IGMP to support. Valid values: `3`, `2`, `1`.
        """
        if access_group is not None:
            pulumi.set(__self__, "access_group", access_group)
        if immediate_leave_group is not None:
            pulumi.set(__self__, "immediate_leave_group", immediate_leave_group)
        if last_member_query_count is not None:
            pulumi.set(__self__, "last_member_query_count", last_member_query_count)
        if last_member_query_interval is not None:
            pulumi.set(__self__, "last_member_query_interval", last_member_query_interval)
        if query_interval is not None:
            pulumi.set(__self__, "query_interval", query_interval)
        if query_max_response_time is not None:
            pulumi.set(__self__, "query_max_response_time", query_max_response_time)
        if query_timeout is not None:
            pulumi.set(__self__, "query_timeout", query_timeout)
        if router_alert_check is not None:
            pulumi.set(__self__, "router_alert_check", router_alert_check)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="accessGroup")
    def access_group(self) -> Optional[pulumi.Input[str]]:
        """
        Groups IGMP hosts are allowed to join.
        """
        return pulumi.get(self, "access_group")

    @access_group.setter
    def access_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_group", value)

    @property
    @pulumi.getter(name="immediateLeaveGroup")
    def immediate_leave_group(self) -> Optional[pulumi.Input[str]]:
        """
        Groups to drop membership for immediately after receiving IGMPv2 leave.
        """
        return pulumi.get(self, "immediate_leave_group")

    @immediate_leave_group.setter
    def immediate_leave_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "immediate_leave_group", value)

    @property
    @pulumi.getter(name="lastMemberQueryCount")
    def last_member_query_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of group specific queries before removing group (2 - 7, default = 2).
        """
        return pulumi.get(self, "last_member_query_count")

    @last_member_query_count.setter
    def last_member_query_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_member_query_count", value)

    @property
    @pulumi.getter(name="lastMemberQueryInterval")
    def last_member_query_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout between IGMPv2 leave and removing group (1 - 65535 msec, default = 1000).
        """
        return pulumi.get(self, "last_member_query_interval")

    @last_member_query_interval.setter
    def last_member_query_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_member_query_interval", value)

    @property
    @pulumi.getter(name="queryInterval")
    def query_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval between queries to IGMP hosts (1 - 65535 sec, default = 125).
        """
        return pulumi.get(self, "query_interval")

    @query_interval.setter
    def query_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_interval", value)

    @property
    @pulumi.getter(name="queryMaxResponseTime")
    def query_max_response_time(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum time to wait for a IGMP query response (1 - 25 sec, default = 10).
        """
        return pulumi.get(self, "query_max_response_time")

    @query_max_response_time.setter
    def query_max_response_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_max_response_time", value)

    @property
    @pulumi.getter(name="queryTimeout")
    def query_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout between queries before becoming querier for network (60 - 900, default = 255).
        """
        return pulumi.get(self, "query_timeout")

    @query_timeout.setter
    def query_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_timeout", value)

    @property
    @pulumi.getter(name="routerAlertCheck")
    def router_alert_check(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable require IGMP packets contain router alert option. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "router_alert_check")

    @router_alert_check.setter
    def router_alert_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "router_alert_check", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum version of IGMP to support. Valid values: `3`, `2`, `1`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class RouterMulticastInterfaceJoinGroupArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] address: Multicast group IP address.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Multicast group IP address.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)


@pulumi.input_type
class RouterMulticastPimSmGlobalArgs:
    def __init__(__self__, *,
                 accept_register_list: Optional[pulumi.Input[str]] = None,
                 accept_source_list: Optional[pulumi.Input[str]] = None,
                 bsr_allow_quick_refresh: Optional[pulumi.Input[str]] = None,
                 bsr_candidate: Optional[pulumi.Input[str]] = None,
                 bsr_hash: Optional[pulumi.Input[int]] = None,
                 bsr_interface: Optional[pulumi.Input[str]] = None,
                 bsr_priority: Optional[pulumi.Input[int]] = None,
                 cisco_crp_prefix: Optional[pulumi.Input[str]] = None,
                 cisco_ignore_rp_set_priority: Optional[pulumi.Input[str]] = None,
                 cisco_register_checksum: Optional[pulumi.Input[str]] = None,
                 cisco_register_checksum_group: Optional[pulumi.Input[str]] = None,
                 join_prune_holdtime: Optional[pulumi.Input[int]] = None,
                 message_interval: Optional[pulumi.Input[int]] = None,
                 null_register_retries: Optional[pulumi.Input[int]] = None,
                 register_rate_limit: Optional[pulumi.Input[int]] = None,
                 register_rp_reachability: Optional[pulumi.Input[str]] = None,
                 register_source: Optional[pulumi.Input[str]] = None,
                 register_source_interface: Optional[pulumi.Input[str]] = None,
                 register_source_ip: Optional[pulumi.Input[str]] = None,
                 register_supression: Optional[pulumi.Input[int]] = None,
                 rp_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['RouterMulticastPimSmGlobalRpAddressArgs']]]] = None,
                 rp_register_keepalive: Optional[pulumi.Input[int]] = None,
                 spt_threshold: Optional[pulumi.Input[str]] = None,
                 spt_threshold_group: Optional[pulumi.Input[str]] = None,
                 ssm: Optional[pulumi.Input[str]] = None,
                 ssm_range: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] accept_register_list: Sources allowed to register packets with this Rendezvous Point (RP).
        :param pulumi.Input[str] accept_source_list: Sources allowed to send multicast traffic.
        :param pulumi.Input[str] bsr_allow_quick_refresh: Enable/disable accept BSR quick refresh packets from neighbors. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bsr_candidate: Enable/disable allowing this router to become a bootstrap router (BSR). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] bsr_hash: BSR hash length (0 - 32, default = 10).
        :param pulumi.Input[str] bsr_interface: Interface to advertise as candidate BSR.
        :param pulumi.Input[int] bsr_priority: BSR priority (0 - 255, default = 0).
        :param pulumi.Input[str] cisco_crp_prefix: Enable/disable making candidate RP compatible with old Cisco IOS. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cisco_ignore_rp_set_priority: Use only hash for RP selection (compatibility with old Cisco IOS). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cisco_register_checksum: Checksum entire register packet(for old Cisco IOS compatibility). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] cisco_register_checksum_group: Cisco register checksum only these groups.
        :param pulumi.Input[int] join_prune_holdtime: Join/prune holdtime (1 - 65535, default = 210).
        :param pulumi.Input[int] message_interval: Period of time between sending periodic PIM join/prune messages in seconds (1 - 65535, default = 60).
        :param pulumi.Input[int] null_register_retries: Maximum retries of null register (1 - 20, default = 1).
        :param pulumi.Input[int] register_rate_limit: Limit of packets/sec per source registered through this RP (0 - 65535, default = 0 which means unlimited).
        :param pulumi.Input[str] register_rp_reachability: Enable/disable check RP is reachable before registering packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] register_source: Override source address in register packets. Valid values: `disable`, `interface`, `ip-address`.
        :param pulumi.Input[str] register_source_interface: Override with primary interface address.
        :param pulumi.Input[str] register_source_ip: Override with local IP address.
        :param pulumi.Input[int] register_supression: Period of time to honor register-stop message (1 - 65535 sec, default = 60).
        :param pulumi.Input[Sequence[pulumi.Input['RouterMulticastPimSmGlobalRpAddressArgs']]] rp_addresses: Statically configure RP addresses. The structure of `rp_address` block is documented below.
        :param pulumi.Input[int] rp_register_keepalive: Timeout for RP receiving data on (S,G) tree (1 - 65535 sec, default = 185).
        :param pulumi.Input[str] spt_threshold: Enable/disable switching to source specific trees. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] spt_threshold_group: Groups allowed to switch to source tree.
        :param pulumi.Input[str] ssm: Enable/disable source specific multicast. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssm_range: Groups allowed to source specific multicast.
        """
        if accept_register_list is not None:
            pulumi.set(__self__, "accept_register_list", accept_register_list)
        if accept_source_list is not None:
            pulumi.set(__self__, "accept_source_list", accept_source_list)
        if bsr_allow_quick_refresh is not None:
            pulumi.set(__self__, "bsr_allow_quick_refresh", bsr_allow_quick_refresh)
        if bsr_candidate is not None:
            pulumi.set(__self__, "bsr_candidate", bsr_candidate)
        if bsr_hash is not None:
            pulumi.set(__self__, "bsr_hash", bsr_hash)
        if bsr_interface is not None:
            pulumi.set(__self__, "bsr_interface", bsr_interface)
        if bsr_priority is not None:
            pulumi.set(__self__, "bsr_priority", bsr_priority)
        if cisco_crp_prefix is not None:
            pulumi.set(__self__, "cisco_crp_prefix", cisco_crp_prefix)
        if cisco_ignore_rp_set_priority is not None:
            pulumi.set(__self__, "cisco_ignore_rp_set_priority", cisco_ignore_rp_set_priority)
        if cisco_register_checksum is not None:
            pulumi.set(__self__, "cisco_register_checksum", cisco_register_checksum)
        if cisco_register_checksum_group is not None:
            pulumi.set(__self__, "cisco_register_checksum_group", cisco_register_checksum_group)
        if join_prune_holdtime is not None:
            pulumi.set(__self__, "join_prune_holdtime", join_prune_holdtime)
        if message_interval is not None:
            pulumi.set(__self__, "message_interval", message_interval)
        if null_register_retries is not None:
            pulumi.set(__self__, "null_register_retries", null_register_retries)
        if register_rate_limit is not None:
            pulumi.set(__self__, "register_rate_limit", register_rate_limit)
        if register_rp_reachability is not None:
            pulumi.set(__self__, "register_rp_reachability", register_rp_reachability)
        if register_source is not None:
            pulumi.set(__self__, "register_source", register_source)
        if register_source_interface is not None:
            pulumi.set(__self__, "register_source_interface", register_source_interface)
        if register_source_ip is not None:
            pulumi.set(__self__, "register_source_ip", register_source_ip)
        if register_supression is not None:
            pulumi.set(__self__, "register_supression", register_supression)
        if rp_addresses is not None:
            pulumi.set(__self__, "rp_addresses", rp_addresses)
        if rp_register_keepalive is not None:
            pulumi.set(__self__, "rp_register_keepalive", rp_register_keepalive)
        if spt_threshold is not None:
            pulumi.set(__self__, "spt_threshold", spt_threshold)
        if spt_threshold_group is not None:
            pulumi.set(__self__, "spt_threshold_group", spt_threshold_group)
        if ssm is not None:
            pulumi.set(__self__, "ssm", ssm)
        if ssm_range is not None:
            pulumi.set(__self__, "ssm_range", ssm_range)

    @property
    @pulumi.getter(name="acceptRegisterList")
    def accept_register_list(self) -> Optional[pulumi.Input[str]]:
        """
        Sources allowed to register packets with this Rendezvous Point (RP).
        """
        return pulumi.get(self, "accept_register_list")

    @accept_register_list.setter
    def accept_register_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accept_register_list", value)

    @property
    @pulumi.getter(name="acceptSourceList")
    def accept_source_list(self) -> Optional[pulumi.Input[str]]:
        """
        Sources allowed to send multicast traffic.
        """
        return pulumi.get(self, "accept_source_list")

    @accept_source_list.setter
    def accept_source_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accept_source_list", value)

    @property
    @pulumi.getter(name="bsrAllowQuickRefresh")
    def bsr_allow_quick_refresh(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable accept BSR quick refresh packets from neighbors. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bsr_allow_quick_refresh")

    @bsr_allow_quick_refresh.setter
    def bsr_allow_quick_refresh(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bsr_allow_quick_refresh", value)

    @property
    @pulumi.getter(name="bsrCandidate")
    def bsr_candidate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing this router to become a bootstrap router (BSR). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bsr_candidate")

    @bsr_candidate.setter
    def bsr_candidate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bsr_candidate", value)

    @property
    @pulumi.getter(name="bsrHash")
    def bsr_hash(self) -> Optional[pulumi.Input[int]]:
        """
        BSR hash length (0 - 32, default = 10).
        """
        return pulumi.get(self, "bsr_hash")

    @bsr_hash.setter
    def bsr_hash(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bsr_hash", value)

    @property
    @pulumi.getter(name="bsrInterface")
    def bsr_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface to advertise as candidate BSR.
        """
        return pulumi.get(self, "bsr_interface")

    @bsr_interface.setter
    def bsr_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bsr_interface", value)

    @property
    @pulumi.getter(name="bsrPriority")
    def bsr_priority(self) -> Optional[pulumi.Input[int]]:
        """
        BSR priority (0 - 255, default = 0).
        """
        return pulumi.get(self, "bsr_priority")

    @bsr_priority.setter
    def bsr_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bsr_priority", value)

    @property
    @pulumi.getter(name="ciscoCrpPrefix")
    def cisco_crp_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable making candidate RP compatible with old Cisco IOS. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cisco_crp_prefix")

    @cisco_crp_prefix.setter
    def cisco_crp_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cisco_crp_prefix", value)

    @property
    @pulumi.getter(name="ciscoIgnoreRpSetPriority")
    def cisco_ignore_rp_set_priority(self) -> Optional[pulumi.Input[str]]:
        """
        Use only hash for RP selection (compatibility with old Cisco IOS). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cisco_ignore_rp_set_priority")

    @cisco_ignore_rp_set_priority.setter
    def cisco_ignore_rp_set_priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cisco_ignore_rp_set_priority", value)

    @property
    @pulumi.getter(name="ciscoRegisterChecksum")
    def cisco_register_checksum(self) -> Optional[pulumi.Input[str]]:
        """
        Checksum entire register packet(for old Cisco IOS compatibility). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "cisco_register_checksum")

    @cisco_register_checksum.setter
    def cisco_register_checksum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cisco_register_checksum", value)

    @property
    @pulumi.getter(name="ciscoRegisterChecksumGroup")
    def cisco_register_checksum_group(self) -> Optional[pulumi.Input[str]]:
        """
        Cisco register checksum only these groups.
        """
        return pulumi.get(self, "cisco_register_checksum_group")

    @cisco_register_checksum_group.setter
    def cisco_register_checksum_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cisco_register_checksum_group", value)

    @property
    @pulumi.getter(name="joinPruneHoldtime")
    def join_prune_holdtime(self) -> Optional[pulumi.Input[int]]:
        """
        Join/prune holdtime (1 - 65535, default = 210).
        """
        return pulumi.get(self, "join_prune_holdtime")

    @join_prune_holdtime.setter
    def join_prune_holdtime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "join_prune_holdtime", value)

    @property
    @pulumi.getter(name="messageInterval")
    def message_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Period of time between sending periodic PIM join/prune messages in seconds (1 - 65535, default = 60).
        """
        return pulumi.get(self, "message_interval")

    @message_interval.setter
    def message_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "message_interval", value)

    @property
    @pulumi.getter(name="nullRegisterRetries")
    def null_register_retries(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum retries of null register (1 - 20, default = 1).
        """
        return pulumi.get(self, "null_register_retries")

    @null_register_retries.setter
    def null_register_retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "null_register_retries", value)

    @property
    @pulumi.getter(name="registerRateLimit")
    def register_rate_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Limit of packets/sec per source registered through this RP (0 - 65535, default = 0 which means unlimited).
        """
        return pulumi.get(self, "register_rate_limit")

    @register_rate_limit.setter
    def register_rate_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "register_rate_limit", value)

    @property
    @pulumi.getter(name="registerRpReachability")
    def register_rp_reachability(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable check RP is reachable before registering packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "register_rp_reachability")

    @register_rp_reachability.setter
    def register_rp_reachability(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "register_rp_reachability", value)

    @property
    @pulumi.getter(name="registerSource")
    def register_source(self) -> Optional[pulumi.Input[str]]:
        """
        Override source address in register packets. Valid values: `disable`, `interface`, `ip-address`.
        """
        return pulumi.get(self, "register_source")

    @register_source.setter
    def register_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "register_source", value)

    @property
    @pulumi.getter(name="registerSourceInterface")
    def register_source_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Override with primary interface address.
        """
        return pulumi.get(self, "register_source_interface")

    @register_source_interface.setter
    def register_source_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "register_source_interface", value)

    @property
    @pulumi.getter(name="registerSourceIp")
    def register_source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Override with local IP address.
        """
        return pulumi.get(self, "register_source_ip")

    @register_source_ip.setter
    def register_source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "register_source_ip", value)

    @property
    @pulumi.getter(name="registerSupression")
    def register_supression(self) -> Optional[pulumi.Input[int]]:
        """
        Period of time to honor register-stop message (1 - 65535 sec, default = 60).
        """
        return pulumi.get(self, "register_supression")

    @register_supression.setter
    def register_supression(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "register_supression", value)

    @property
    @pulumi.getter(name="rpAddresses")
    def rp_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterMulticastPimSmGlobalRpAddressArgs']]]]:
        """
        Statically configure RP addresses. The structure of `rp_address` block is documented below.
        """
        return pulumi.get(self, "rp_addresses")

    @rp_addresses.setter
    def rp_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterMulticastPimSmGlobalRpAddressArgs']]]]):
        pulumi.set(self, "rp_addresses", value)

    @property
    @pulumi.getter(name="rpRegisterKeepalive")
    def rp_register_keepalive(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout for RP receiving data on (S,G) tree (1 - 65535 sec, default = 185).
        """
        return pulumi.get(self, "rp_register_keepalive")

    @rp_register_keepalive.setter
    def rp_register_keepalive(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rp_register_keepalive", value)

    @property
    @pulumi.getter(name="sptThreshold")
    def spt_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable switching to source specific trees. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "spt_threshold")

    @spt_threshold.setter
    def spt_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spt_threshold", value)

    @property
    @pulumi.getter(name="sptThresholdGroup")
    def spt_threshold_group(self) -> Optional[pulumi.Input[str]]:
        """
        Groups allowed to switch to source tree.
        """
        return pulumi.get(self, "spt_threshold_group")

    @spt_threshold_group.setter
    def spt_threshold_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spt_threshold_group", value)

    @property
    @pulumi.getter
    def ssm(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable source specific multicast. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssm")

    @ssm.setter
    def ssm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssm", value)

    @property
    @pulumi.getter(name="ssmRange")
    def ssm_range(self) -> Optional[pulumi.Input[str]]:
        """
        Groups allowed to source specific multicast.
        """
        return pulumi.get(self, "ssm_range")

    @ssm_range.setter
    def ssm_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssm_range", value)


@pulumi.input_type
class RouterMulticastPimSmGlobalRpAddressArgs:
    def __init__(__self__, *,
                 group: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] group: Groups to use this RP.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] ip_address: RP router address.
        """
        if group is not None:
            pulumi.set(__self__, "group", group)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Groups to use this RP.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        RP router address.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)


@pulumi.input_type
class RouterOspf6AreaArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 default_cost: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 ipsec_auth_alg: Optional[pulumi.Input[str]] = None,
                 ipsec_enc_alg: Optional[pulumi.Input[str]] = None,
                 ipsec_keys: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaIpsecKeyArgs']]]] = None,
                 key_rollover_interval: Optional[pulumi.Input[int]] = None,
                 nssa_default_information_originate: Optional[pulumi.Input[str]] = None,
                 nssa_default_information_originate_metric: Optional[pulumi.Input[int]] = None,
                 nssa_default_information_originate_metric_type: Optional[pulumi.Input[str]] = None,
                 nssa_redistribution: Optional[pulumi.Input[str]] = None,
                 nssa_translator_role: Optional[pulumi.Input[str]] = None,
                 ranges: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaRangeArgs']]]] = None,
                 stub_type: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 virtual_links: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaVirtualLinkArgs']]]] = None):
        """
        :param pulumi.Input[str] authentication: Authentication mode. Valid values: `none`, `ah`, `esp`, `area`.
        :param pulumi.Input[int] default_cost: Summary default cost of stub or NSSA area.
        :param pulumi.Input[str] id: Summary address entry ID.
        :param pulumi.Input[str] ipsec_auth_alg: Authentication algorithm. Valid values: `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
        :param pulumi.Input[str] ipsec_enc_alg: Encryption algorithm. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`.
        :param pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaIpsecKeyArgs']]] ipsec_keys: IPsec authentication and encryption keys. The structure of `ipsec_keys` block is documented below.
        :param pulumi.Input[int] key_rollover_interval: Key roll-over interval.
        :param pulumi.Input[str] nssa_default_information_originate: Enable/disable originate type 7 default into NSSA area. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] nssa_default_information_originate_metric: OSPFv3 default metric.
        :param pulumi.Input[str] nssa_default_information_originate_metric_type: OSPFv3 metric type for default routes. Valid values: `1`, `2`.
        :param pulumi.Input[str] nssa_redistribution: Enable/disable redistribute into NSSA area. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nssa_translator_role: NSSA translator role type. Valid values: `candidate`, `never`, `always`.
        :param pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaRangeArgs']]] ranges: OSPF6 area range configuration. The structure of `range` block is documented below.
        :param pulumi.Input[str] stub_type: Stub summary setting. Valid values: `no-summary`, `summary`.
        :param pulumi.Input[str] type: Area type setting. Valid values: `regular`, `nssa`, `stub`.
        :param pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaVirtualLinkArgs']]] virtual_links: OSPF6 virtual link configuration. The structure of `virtual_link` block is documented below.
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if default_cost is not None:
            pulumi.set(__self__, "default_cost", default_cost)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ipsec_auth_alg is not None:
            pulumi.set(__self__, "ipsec_auth_alg", ipsec_auth_alg)
        if ipsec_enc_alg is not None:
            pulumi.set(__self__, "ipsec_enc_alg", ipsec_enc_alg)
        if ipsec_keys is not None:
            pulumi.set(__self__, "ipsec_keys", ipsec_keys)
        if key_rollover_interval is not None:
            pulumi.set(__self__, "key_rollover_interval", key_rollover_interval)
        if nssa_default_information_originate is not None:
            pulumi.set(__self__, "nssa_default_information_originate", nssa_default_information_originate)
        if nssa_default_information_originate_metric is not None:
            pulumi.set(__self__, "nssa_default_information_originate_metric", nssa_default_information_originate_metric)
        if nssa_default_information_originate_metric_type is not None:
            pulumi.set(__self__, "nssa_default_information_originate_metric_type", nssa_default_information_originate_metric_type)
        if nssa_redistribution is not None:
            pulumi.set(__self__, "nssa_redistribution", nssa_redistribution)
        if nssa_translator_role is not None:
            pulumi.set(__self__, "nssa_translator_role", nssa_translator_role)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)
        if stub_type is not None:
            pulumi.set(__self__, "stub_type", stub_type)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_links is not None:
            pulumi.set(__self__, "virtual_links", virtual_links)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication mode. Valid values: `none`, `ah`, `esp`, `area`.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="defaultCost")
    def default_cost(self) -> Optional[pulumi.Input[int]]:
        """
        Summary default cost of stub or NSSA area.
        """
        return pulumi.get(self, "default_cost")

    @default_cost.setter
    def default_cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_cost", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Summary address entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ipsecAuthAlg")
    def ipsec_auth_alg(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication algorithm. Valid values: `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
        """
        return pulumi.get(self, "ipsec_auth_alg")

    @ipsec_auth_alg.setter
    def ipsec_auth_alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_auth_alg", value)

    @property
    @pulumi.getter(name="ipsecEncAlg")
    def ipsec_enc_alg(self) -> Optional[pulumi.Input[str]]:
        """
        Encryption algorithm. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`.
        """
        return pulumi.get(self, "ipsec_enc_alg")

    @ipsec_enc_alg.setter
    def ipsec_enc_alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_enc_alg", value)

    @property
    @pulumi.getter(name="ipsecKeys")
    def ipsec_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaIpsecKeyArgs']]]]:
        """
        IPsec authentication and encryption keys. The structure of `ipsec_keys` block is documented below.
        """
        return pulumi.get(self, "ipsec_keys")

    @ipsec_keys.setter
    def ipsec_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaIpsecKeyArgs']]]]):
        pulumi.set(self, "ipsec_keys", value)

    @property
    @pulumi.getter(name="keyRolloverInterval")
    def key_rollover_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Key roll-over interval.
        """
        return pulumi.get(self, "key_rollover_interval")

    @key_rollover_interval.setter
    def key_rollover_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_rollover_interval", value)

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginate")
    def nssa_default_information_originate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable originate type 7 default into NSSA area. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nssa_default_information_originate")

    @nssa_default_information_originate.setter
    def nssa_default_information_originate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nssa_default_information_originate", value)

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetric")
    def nssa_default_information_originate_metric(self) -> Optional[pulumi.Input[int]]:
        """
        OSPFv3 default metric.
        """
        return pulumi.get(self, "nssa_default_information_originate_metric")

    @nssa_default_information_originate_metric.setter
    def nssa_default_information_originate_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nssa_default_information_originate_metric", value)

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetricType")
    def nssa_default_information_originate_metric_type(self) -> Optional[pulumi.Input[str]]:
        """
        OSPFv3 metric type for default routes. Valid values: `1`, `2`.
        """
        return pulumi.get(self, "nssa_default_information_originate_metric_type")

    @nssa_default_information_originate_metric_type.setter
    def nssa_default_information_originate_metric_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nssa_default_information_originate_metric_type", value)

    @property
    @pulumi.getter(name="nssaRedistribution")
    def nssa_redistribution(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable redistribute into NSSA area. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nssa_redistribution")

    @nssa_redistribution.setter
    def nssa_redistribution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nssa_redistribution", value)

    @property
    @pulumi.getter(name="nssaTranslatorRole")
    def nssa_translator_role(self) -> Optional[pulumi.Input[str]]:
        """
        NSSA translator role type. Valid values: `candidate`, `never`, `always`.
        """
        return pulumi.get(self, "nssa_translator_role")

    @nssa_translator_role.setter
    def nssa_translator_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nssa_translator_role", value)

    @property
    @pulumi.getter
    def ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaRangeArgs']]]]:
        """
        OSPF6 area range configuration. The structure of `range` block is documented below.
        """
        return pulumi.get(self, "ranges")

    @ranges.setter
    def ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaRangeArgs']]]]):
        pulumi.set(self, "ranges", value)

    @property
    @pulumi.getter(name="stubType")
    def stub_type(self) -> Optional[pulumi.Input[str]]:
        """
        Stub summary setting. Valid values: `no-summary`, `summary`.
        """
        return pulumi.get(self, "stub_type")

    @stub_type.setter
    def stub_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stub_type", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Area type setting. Valid values: `regular`, `nssa`, `stub`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="virtualLinks")
    def virtual_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaVirtualLinkArgs']]]]:
        """
        OSPF6 virtual link configuration. The structure of `virtual_link` block is documented below.
        """
        return pulumi.get(self, "virtual_links")

    @virtual_links.setter
    def virtual_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaVirtualLinkArgs']]]]):
        pulumi.set(self, "virtual_links", value)


@pulumi.input_type
class RouterOspf6AreaIpsecKeyArgs:
    def __init__(__self__, *,
                 auth_key: Optional[pulumi.Input[str]] = None,
                 enc_key: Optional[pulumi.Input[str]] = None,
                 spi: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] auth_key: Authentication key.
        :param pulumi.Input[str] enc_key: Encryption key.
        :param pulumi.Input[int] spi: Security Parameters Index.
        """
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if enc_key is not None:
            pulumi.set(__self__, "enc_key", enc_key)
        if spi is not None:
            pulumi.set(__self__, "spi", spi)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication key.
        """
        return pulumi.get(self, "auth_key")

    @auth_key.setter
    def auth_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_key", value)

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> Optional[pulumi.Input[str]]:
        """
        Encryption key.
        """
        return pulumi.get(self, "enc_key")

    @enc_key.setter
    def enc_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enc_key", value)

    @property
    @pulumi.getter
    def spi(self) -> Optional[pulumi.Input[int]]:
        """
        Security Parameters Index.
        """
        return pulumi.get(self, "spi")

    @spi.setter
    def spi(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spi", value)


@pulumi.input_type
class RouterOspf6AreaRangeArgs:
    def __init__(__self__, *,
                 advertise: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix6: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] advertise: Enable/disable advertise status. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] id: Summary address entry ID.
        :param pulumi.Input[str] prefix6: IPv6 prefix.
        """
        if advertise is not None:
            pulumi.set(__self__, "advertise", advertise)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def advertise(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "advertise")

    @advertise.setter
    def advertise(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advertise", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Summary address entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 prefix.
        """
        return pulumi.get(self, "prefix6")

    @prefix6.setter
    def prefix6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix6", value)


@pulumi.input_type
class RouterOspf6AreaVirtualLinkArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 dead_interval: Optional[pulumi.Input[int]] = None,
                 hello_interval: Optional[pulumi.Input[int]] = None,
                 ipsec_auth_alg: Optional[pulumi.Input[str]] = None,
                 ipsec_enc_alg: Optional[pulumi.Input[str]] = None,
                 ipsec_keys: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaVirtualLinkIpsecKeyArgs']]]] = None,
                 key_rollover_interval: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 peer: Optional[pulumi.Input[str]] = None,
                 retransmit_interval: Optional[pulumi.Input[int]] = None,
                 transmit_delay: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] authentication: Authentication mode. Valid values: `none`, `ah`, `esp`, `area`.
        :param pulumi.Input[int] dead_interval: Dead interval.
        :param pulumi.Input[int] hello_interval: Hello interval.
        :param pulumi.Input[str] ipsec_auth_alg: Authentication algorithm. Valid values: `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
        :param pulumi.Input[str] ipsec_enc_alg: Encryption algorithm. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`.
        :param pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaVirtualLinkIpsecKeyArgs']]] ipsec_keys: IPsec authentication and encryption keys. The structure of `ipsec_keys` block is documented below.
        :param pulumi.Input[int] key_rollover_interval: Key roll-over interval.
        :param pulumi.Input[str] name: Passive interface name.
        :param pulumi.Input[str] peer: A.B.C.D, peer router ID.
        :param pulumi.Input[int] retransmit_interval: Retransmit interval.
        :param pulumi.Input[int] transmit_delay: Transmit delay.
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if ipsec_auth_alg is not None:
            pulumi.set(__self__, "ipsec_auth_alg", ipsec_auth_alg)
        if ipsec_enc_alg is not None:
            pulumi.set(__self__, "ipsec_enc_alg", ipsec_enc_alg)
        if ipsec_keys is not None:
            pulumi.set(__self__, "ipsec_keys", ipsec_keys)
        if key_rollover_interval is not None:
            pulumi.set(__self__, "key_rollover_interval", key_rollover_interval)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peer is not None:
            pulumi.set(__self__, "peer", peer)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if transmit_delay is not None:
            pulumi.set(__self__, "transmit_delay", transmit_delay)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication mode. Valid values: `none`, `ah`, `esp`, `area`.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Dead interval.
        """
        return pulumi.get(self, "dead_interval")

    @dead_interval.setter
    def dead_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dead_interval", value)

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Hello interval.
        """
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval", value)

    @property
    @pulumi.getter(name="ipsecAuthAlg")
    def ipsec_auth_alg(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication algorithm. Valid values: `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
        """
        return pulumi.get(self, "ipsec_auth_alg")

    @ipsec_auth_alg.setter
    def ipsec_auth_alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_auth_alg", value)

    @property
    @pulumi.getter(name="ipsecEncAlg")
    def ipsec_enc_alg(self) -> Optional[pulumi.Input[str]]:
        """
        Encryption algorithm. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`.
        """
        return pulumi.get(self, "ipsec_enc_alg")

    @ipsec_enc_alg.setter
    def ipsec_enc_alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_enc_alg", value)

    @property
    @pulumi.getter(name="ipsecKeys")
    def ipsec_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaVirtualLinkIpsecKeyArgs']]]]:
        """
        IPsec authentication and encryption keys. The structure of `ipsec_keys` block is documented below.
        """
        return pulumi.get(self, "ipsec_keys")

    @ipsec_keys.setter
    def ipsec_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6AreaVirtualLinkIpsecKeyArgs']]]]):
        pulumi.set(self, "ipsec_keys", value)

    @property
    @pulumi.getter(name="keyRolloverInterval")
    def key_rollover_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Key roll-over interval.
        """
        return pulumi.get(self, "key_rollover_interval")

    @key_rollover_interval.setter
    def key_rollover_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_rollover_interval", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Passive interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def peer(self) -> Optional[pulumi.Input[str]]:
        """
        A.B.C.D, peer router ID.
        """
        return pulumi.get(self, "peer")

    @peer.setter
    def peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer", value)

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Retransmit interval.
        """
        return pulumi.get(self, "retransmit_interval")

    @retransmit_interval.setter
    def retransmit_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retransmit_interval", value)

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Transmit delay.
        """
        return pulumi.get(self, "transmit_delay")

    @transmit_delay.setter
    def transmit_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "transmit_delay", value)


@pulumi.input_type
class RouterOspf6AreaVirtualLinkIpsecKeyArgs:
    def __init__(__self__, *,
                 auth_key: Optional[pulumi.Input[str]] = None,
                 enc_key: Optional[pulumi.Input[str]] = None,
                 spi: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] auth_key: Authentication key.
        :param pulumi.Input[str] enc_key: Encryption key.
        :param pulumi.Input[int] spi: Security Parameters Index.
        """
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if enc_key is not None:
            pulumi.set(__self__, "enc_key", enc_key)
        if spi is not None:
            pulumi.set(__self__, "spi", spi)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication key.
        """
        return pulumi.get(self, "auth_key")

    @auth_key.setter
    def auth_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_key", value)

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> Optional[pulumi.Input[str]]:
        """
        Encryption key.
        """
        return pulumi.get(self, "enc_key")

    @enc_key.setter
    def enc_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enc_key", value)

    @property
    @pulumi.getter
    def spi(self) -> Optional[pulumi.Input[int]]:
        """
        Security Parameters Index.
        """
        return pulumi.get(self, "spi")

    @spi.setter
    def spi(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spi", value)


@pulumi.input_type
class RouterOspf6Ospf6InterfaceArgs:
    def __init__(__self__, *,
                 area_id: Optional[pulumi.Input[str]] = None,
                 authentication: Optional[pulumi.Input[str]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 dead_interval: Optional[pulumi.Input[int]] = None,
                 hello_interval: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ipsec_auth_alg: Optional[pulumi.Input[str]] = None,
                 ipsec_enc_alg: Optional[pulumi.Input[str]] = None,
                 ipsec_keys: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6Ospf6InterfaceIpsecKeyArgs']]]] = None,
                 key_rollover_interval: Optional[pulumi.Input[int]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 mtu_ignore: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 neighbors: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6Ospf6InterfaceNeighborArgs']]]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 retransmit_interval: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 transmit_delay: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] area_id: A.B.C.D, in IPv4 address format.
        :param pulumi.Input[str] authentication: Authentication mode. Valid values: `none`, `ah`, `esp`, `area`.
        :param pulumi.Input[str] bfd: Enable/disable Bidirectional Forwarding Detection (BFD). Valid values: `global`, `enable`, `disable`.
        :param pulumi.Input[int] cost: Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        :param pulumi.Input[int] dead_interval: Dead interval.
        :param pulumi.Input[int] hello_interval: Hello interval.
        :param pulumi.Input[str] interface: Configuration interface name.
        :param pulumi.Input[str] ipsec_auth_alg: Authentication algorithm. Valid values: `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
        :param pulumi.Input[str] ipsec_enc_alg: Encryption algorithm. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`.
        :param pulumi.Input[Sequence[pulumi.Input['RouterOspf6Ospf6InterfaceIpsecKeyArgs']]] ipsec_keys: IPsec authentication and encryption keys. The structure of `ipsec_keys` block is documented below.
        :param pulumi.Input[int] key_rollover_interval: Key roll-over interval.
        :param pulumi.Input[int] mtu: MTU for OSPFv3 packets.
        :param pulumi.Input[str] mtu_ignore: Enable/disable ignoring MTU field in DBD packets. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Passive interface name.
        :param pulumi.Input[Sequence[pulumi.Input['RouterOspf6Ospf6InterfaceNeighborArgs']]] neighbors: OSPFv3 neighbors are used when OSPFv3 runs on non-broadcast media The structure of `neighbor` block is documented below.
        :param pulumi.Input[str] network_type: Network type. Valid values: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`, `point-to-multipoint-non-broadcast`.
        :param pulumi.Input[int] priority: priority
        :param pulumi.Input[int] retransmit_interval: Retransmit interval.
        :param pulumi.Input[str] status: status Valid values: `enable`, `disable`.
        :param pulumi.Input[int] transmit_delay: Transmit delay.
        """
        if area_id is not None:
            pulumi.set(__self__, "area_id", area_id)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ipsec_auth_alg is not None:
            pulumi.set(__self__, "ipsec_auth_alg", ipsec_auth_alg)
        if ipsec_enc_alg is not None:
            pulumi.set(__self__, "ipsec_enc_alg", ipsec_enc_alg)
        if ipsec_keys is not None:
            pulumi.set(__self__, "ipsec_keys", ipsec_keys)
        if key_rollover_interval is not None:
            pulumi.set(__self__, "key_rollover_interval", key_rollover_interval)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if mtu_ignore is not None:
            pulumi.set(__self__, "mtu_ignore", mtu_ignore)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if neighbors is not None:
            pulumi.set(__self__, "neighbors", neighbors)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if transmit_delay is not None:
            pulumi.set(__self__, "transmit_delay", transmit_delay)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> Optional[pulumi.Input[str]]:
        """
        A.B.C.D, in IPv4 address format.
        """
        return pulumi.get(self, "area_id")

    @area_id.setter
    def area_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area_id", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication mode. Valid values: `none`, `ah`, `esp`, `area`.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Bidirectional Forwarding Detection (BFD). Valid values: `global`, `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        """
        Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Dead interval.
        """
        return pulumi.get(self, "dead_interval")

    @dead_interval.setter
    def dead_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dead_interval", value)

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Hello interval.
        """
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration interface name.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ipsecAuthAlg")
    def ipsec_auth_alg(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication algorithm. Valid values: `md5`, `sha1`, `sha256`, `sha384`, `sha512`.
        """
        return pulumi.get(self, "ipsec_auth_alg")

    @ipsec_auth_alg.setter
    def ipsec_auth_alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_auth_alg", value)

    @property
    @pulumi.getter(name="ipsecEncAlg")
    def ipsec_enc_alg(self) -> Optional[pulumi.Input[str]]:
        """
        Encryption algorithm. Valid values: `null`, `des`, `3des`, `aes128`, `aes192`, `aes256`.
        """
        return pulumi.get(self, "ipsec_enc_alg")

    @ipsec_enc_alg.setter
    def ipsec_enc_alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipsec_enc_alg", value)

    @property
    @pulumi.getter(name="ipsecKeys")
    def ipsec_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6Ospf6InterfaceIpsecKeyArgs']]]]:
        """
        IPsec authentication and encryption keys. The structure of `ipsec_keys` block is documented below.
        """
        return pulumi.get(self, "ipsec_keys")

    @ipsec_keys.setter
    def ipsec_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6Ospf6InterfaceIpsecKeyArgs']]]]):
        pulumi.set(self, "ipsec_keys", value)

    @property
    @pulumi.getter(name="keyRolloverInterval")
    def key_rollover_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Key roll-over interval.
        """
        return pulumi.get(self, "key_rollover_interval")

    @key_rollover_interval.setter
    def key_rollover_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_rollover_interval", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        MTU for OSPFv3 packets.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="mtuIgnore")
    def mtu_ignore(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ignoring MTU field in DBD packets. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "mtu_ignore")

    @mtu_ignore.setter
    def mtu_ignore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mtu_ignore", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Passive interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def neighbors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6Ospf6InterfaceNeighborArgs']]]]:
        """
        OSPFv3 neighbors are used when OSPFv3 runs on non-broadcast media The structure of `neighbor` block is documented below.
        """
        return pulumi.get(self, "neighbors")

    @neighbors.setter
    def neighbors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspf6Ospf6InterfaceNeighborArgs']]]]):
        pulumi.set(self, "neighbors", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        """
        Network type. Valid values: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`, `point-to-multipoint-non-broadcast`.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        priority
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Retransmit interval.
        """
        return pulumi.get(self, "retransmit_interval")

    @retransmit_interval.setter
    def retransmit_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retransmit_interval", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Transmit delay.
        """
        return pulumi.get(self, "transmit_delay")

    @transmit_delay.setter
    def transmit_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "transmit_delay", value)


@pulumi.input_type
class RouterOspf6Ospf6InterfaceIpsecKeyArgs:
    def __init__(__self__, *,
                 auth_key: Optional[pulumi.Input[str]] = None,
                 enc_key: Optional[pulumi.Input[str]] = None,
                 spi: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] auth_key: Authentication key.
        :param pulumi.Input[str] enc_key: Encryption key.
        :param pulumi.Input[int] spi: Security Parameters Index.
        """
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if enc_key is not None:
            pulumi.set(__self__, "enc_key", enc_key)
        if spi is not None:
            pulumi.set(__self__, "spi", spi)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication key.
        """
        return pulumi.get(self, "auth_key")

    @auth_key.setter
    def auth_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_key", value)

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> Optional[pulumi.Input[str]]:
        """
        Encryption key.
        """
        return pulumi.get(self, "enc_key")

    @enc_key.setter
    def enc_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enc_key", value)

    @property
    @pulumi.getter
    def spi(self) -> Optional[pulumi.Input[int]]:
        """
        Security Parameters Index.
        """
        return pulumi.get(self, "spi")

    @spi.setter
    def spi(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spi", value)


@pulumi.input_type
class RouterOspf6Ospf6InterfaceNeighborArgs:
    def __init__(__self__, *,
                 cost: Optional[pulumi.Input[int]] = None,
                 ip6: Optional[pulumi.Input[str]] = None,
                 poll_interval: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] cost: Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        :param pulumi.Input[str] ip6: IPv6 link local address of the neighbor.
        :param pulumi.Input[int] poll_interval: Poll interval time in seconds.
        :param pulumi.Input[int] priority: priority
        """
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)
        if poll_interval is not None:
            pulumi.set(__self__, "poll_interval", poll_interval)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        """
        Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter
    def ip6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 link local address of the neighbor.
        """
        return pulumi.get(self, "ip6")

    @ip6.setter
    def ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6", value)

    @property
    @pulumi.getter(name="pollInterval")
    def poll_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Poll interval time in seconds.
        """
        return pulumi.get(self, "poll_interval")

    @poll_interval.setter
    def poll_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "poll_interval", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        priority
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class RouterOspf6PassiveInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Passive interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Passive interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RouterOspf6RedistributeArgs:
    def __init__(__self__, *,
                 metric: Optional[pulumi.Input[int]] = None,
                 metric_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 routemap: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] metric: Redistribute metric setting.
        :param pulumi.Input[str] metric_type: Metric type. Valid values: `1`, `2`.
        :param pulumi.Input[str] name: Passive interface name.
        :param pulumi.Input[str] routemap: Route map name.
        :param pulumi.Input[str] status: status Valid values: `enable`, `disable`.
        """
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if routemap is not None:
            pulumi.set(__self__, "routemap", routemap)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[int]]:
        """
        Redistribute metric setting.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[pulumi.Input[str]]:
        """
        Metric type. Valid values: `1`, `2`.
        """
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Passive interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def routemap(self) -> Optional[pulumi.Input[str]]:
        """
        Route map name.
        """
        return pulumi.get(self, "routemap")

    @routemap.setter
    def routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routemap", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class RouterOspf6SummaryAddressArgs:
    def __init__(__self__, *,
                 advertise: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix6: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] advertise: Enable/disable advertise status. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] id: Summary address entry ID.
        :param pulumi.Input[str] prefix6: IPv6 prefix.
        :param pulumi.Input[int] tag: Tag value.
        """
        if advertise is not None:
            pulumi.set(__self__, "advertise", advertise)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def advertise(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "advertise")

    @advertise.setter
    def advertise(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advertise", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Summary address entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 prefix.
        """
        return pulumi.get(self, "prefix6")

    @prefix6.setter
    def prefix6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix6", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[int]]:
        """
        Tag value.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class RouterOspfAreaArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 default_cost: Optional[pulumi.Input[int]] = None,
                 filter_lists: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaFilterListArgs']]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 nssa_default_information_originate: Optional[pulumi.Input[str]] = None,
                 nssa_default_information_originate_metric: Optional[pulumi.Input[int]] = None,
                 nssa_default_information_originate_metric_type: Optional[pulumi.Input[str]] = None,
                 nssa_redistribution: Optional[pulumi.Input[str]] = None,
                 nssa_translator_role: Optional[pulumi.Input[str]] = None,
                 ranges: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaRangeArgs']]]] = None,
                 shortcut: Optional[pulumi.Input[str]] = None,
                 stub_type: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 virtual_links: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaVirtualLinkArgs']]]] = None):
        """
        :param pulumi.Input[str] authentication: Authentication type.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[int] default_cost: Summary default cost of stub or NSSA area.
        :param pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaFilterListArgs']]] filter_lists: OSPF area filter-list configuration. The structure of `filter_list` block is documented below.
        :param pulumi.Input[str] id: Distribute list entry ID.
        :param pulumi.Input[str] nssa_default_information_originate: Redistribute, advertise, or do not originate Type-7 default route into NSSA area. Valid values: `enable`, `always`, `disable`.
        :param pulumi.Input[int] nssa_default_information_originate_metric: OSPF default metric.
        :param pulumi.Input[str] nssa_default_information_originate_metric_type: OSPF metric type for default routes. Valid values: `1`, `2`.
        :param pulumi.Input[str] nssa_redistribution: Enable/disable redistribute into NSSA area. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] nssa_translator_role: NSSA translator role type. Valid values: `candidate`, `never`, `always`.
        :param pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaRangeArgs']]] ranges: OSPF area range configuration. The structure of `range` block is documented below.
        :param pulumi.Input[str] shortcut: Enable/disable shortcut option. Valid values: `disable`, `enable`, `default`.
        :param pulumi.Input[str] stub_type: Stub summary setting. Valid values: `no-summary`, `summary`.
        :param pulumi.Input[str] type: Area type setting. Valid values: `regular`, `nssa`, `stub`.
        :param pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaVirtualLinkArgs']]] virtual_links: OSPF virtual link configuration. The structure of `virtual_link` block is documented below.
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if default_cost is not None:
            pulumi.set(__self__, "default_cost", default_cost)
        if filter_lists is not None:
            pulumi.set(__self__, "filter_lists", filter_lists)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if nssa_default_information_originate is not None:
            pulumi.set(__self__, "nssa_default_information_originate", nssa_default_information_originate)
        if nssa_default_information_originate_metric is not None:
            pulumi.set(__self__, "nssa_default_information_originate_metric", nssa_default_information_originate_metric)
        if nssa_default_information_originate_metric_type is not None:
            pulumi.set(__self__, "nssa_default_information_originate_metric_type", nssa_default_information_originate_metric_type)
        if nssa_redistribution is not None:
            pulumi.set(__self__, "nssa_redistribution", nssa_redistribution)
        if nssa_translator_role is not None:
            pulumi.set(__self__, "nssa_translator_role", nssa_translator_role)
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)
        if shortcut is not None:
            pulumi.set(__self__, "shortcut", shortcut)
        if stub_type is not None:
            pulumi.set(__self__, "stub_type", stub_type)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_links is not None:
            pulumi.set(__self__, "virtual_links", virtual_links)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication type.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="defaultCost")
    def default_cost(self) -> Optional[pulumi.Input[int]]:
        """
        Summary default cost of stub or NSSA area.
        """
        return pulumi.get(self, "default_cost")

    @default_cost.setter
    def default_cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_cost", value)

    @property
    @pulumi.getter(name="filterLists")
    def filter_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaFilterListArgs']]]]:
        """
        OSPF area filter-list configuration. The structure of `filter_list` block is documented below.
        """
        return pulumi.get(self, "filter_lists")

    @filter_lists.setter
    def filter_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaFilterListArgs']]]]):
        pulumi.set(self, "filter_lists", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Distribute list entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginate")
    def nssa_default_information_originate(self) -> Optional[pulumi.Input[str]]:
        """
        Redistribute, advertise, or do not originate Type-7 default route into NSSA area. Valid values: `enable`, `always`, `disable`.
        """
        return pulumi.get(self, "nssa_default_information_originate")

    @nssa_default_information_originate.setter
    def nssa_default_information_originate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nssa_default_information_originate", value)

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetric")
    def nssa_default_information_originate_metric(self) -> Optional[pulumi.Input[int]]:
        """
        OSPF default metric.
        """
        return pulumi.get(self, "nssa_default_information_originate_metric")

    @nssa_default_information_originate_metric.setter
    def nssa_default_information_originate_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nssa_default_information_originate_metric", value)

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetricType")
    def nssa_default_information_originate_metric_type(self) -> Optional[pulumi.Input[str]]:
        """
        OSPF metric type for default routes. Valid values: `1`, `2`.
        """
        return pulumi.get(self, "nssa_default_information_originate_metric_type")

    @nssa_default_information_originate_metric_type.setter
    def nssa_default_information_originate_metric_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nssa_default_information_originate_metric_type", value)

    @property
    @pulumi.getter(name="nssaRedistribution")
    def nssa_redistribution(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable redistribute into NSSA area. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "nssa_redistribution")

    @nssa_redistribution.setter
    def nssa_redistribution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nssa_redistribution", value)

    @property
    @pulumi.getter(name="nssaTranslatorRole")
    def nssa_translator_role(self) -> Optional[pulumi.Input[str]]:
        """
        NSSA translator role type. Valid values: `candidate`, `never`, `always`.
        """
        return pulumi.get(self, "nssa_translator_role")

    @nssa_translator_role.setter
    def nssa_translator_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nssa_translator_role", value)

    @property
    @pulumi.getter
    def ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaRangeArgs']]]]:
        """
        OSPF area range configuration. The structure of `range` block is documented below.
        """
        return pulumi.get(self, "ranges")

    @ranges.setter
    def ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaRangeArgs']]]]):
        pulumi.set(self, "ranges", value)

    @property
    @pulumi.getter
    def shortcut(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable shortcut option. Valid values: `disable`, `enable`, `default`.
        """
        return pulumi.get(self, "shortcut")

    @shortcut.setter
    def shortcut(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shortcut", value)

    @property
    @pulumi.getter(name="stubType")
    def stub_type(self) -> Optional[pulumi.Input[str]]:
        """
        Stub summary setting. Valid values: `no-summary`, `summary`.
        """
        return pulumi.get(self, "stub_type")

    @stub_type.setter
    def stub_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stub_type", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Area type setting. Valid values: `regular`, `nssa`, `stub`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="virtualLinks")
    def virtual_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaVirtualLinkArgs']]]]:
        """
        OSPF virtual link configuration. The structure of `virtual_link` block is documented below.
        """
        return pulumi.get(self, "virtual_links")

    @virtual_links.setter
    def virtual_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaVirtualLinkArgs']]]]):
        pulumi.set(self, "virtual_links", value)


@pulumi.input_type
class RouterOspfAreaFilterListArgs:
    def __init__(__self__, *,
                 direction: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 list: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] direction: Direction. Valid values: `in`, `out`.
        :param pulumi.Input[int] id: Distribute list entry ID.
        :param pulumi.Input[str] list: Access-list or prefix-list name.
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if list is not None:
            pulumi.set(__self__, "list", list)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        """
        Direction. Valid values: `in`, `out`.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Distribute list entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def list(self) -> Optional[pulumi.Input[str]]:
        """
        Access-list or prefix-list name.
        """
        return pulumi.get(self, "list")

    @list.setter
    def list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "list", value)


@pulumi.input_type
class RouterOspfAreaRangeArgs:
    def __init__(__self__, *,
                 advertise: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 substitute: Optional[pulumi.Input[str]] = None,
                 substitute_status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] advertise: Enable/disable advertise status. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] id: Distribute list entry ID.
        :param pulumi.Input[str] prefix: Prefix.
        :param pulumi.Input[str] substitute: Substitute prefix.
        :param pulumi.Input[str] substitute_status: Enable/disable substitute status. Valid values: `enable`, `disable`.
        """
        if advertise is not None:
            pulumi.set(__self__, "advertise", advertise)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if substitute is not None:
            pulumi.set(__self__, "substitute", substitute)
        if substitute_status is not None:
            pulumi.set(__self__, "substitute_status", substitute_status)

    @property
    @pulumi.getter
    def advertise(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "advertise")

    @advertise.setter
    def advertise(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advertise", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Distribute list entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def substitute(self) -> Optional[pulumi.Input[str]]:
        """
        Substitute prefix.
        """
        return pulumi.get(self, "substitute")

    @substitute.setter
    def substitute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "substitute", value)

    @property
    @pulumi.getter(name="substituteStatus")
    def substitute_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable substitute status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "substitute_status")

    @substitute_status.setter
    def substitute_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "substitute_status", value)


@pulumi.input_type
class RouterOspfAreaVirtualLinkArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 authentication_key: Optional[pulumi.Input[str]] = None,
                 dead_interval: Optional[pulumi.Input[int]] = None,
                 hello_interval: Optional[pulumi.Input[int]] = None,
                 keychain: Optional[pulumi.Input[str]] = None,
                 md5_key: Optional[pulumi.Input[str]] = None,
                 md5_keychain: Optional[pulumi.Input[str]] = None,
                 md5_keys: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaVirtualLinkMd5KeyArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 peer: Optional[pulumi.Input[str]] = None,
                 retransmit_interval: Optional[pulumi.Input[int]] = None,
                 transmit_delay: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] authentication: Authentication type.
        :param pulumi.Input[str] authentication_key: Authentication key.
        :param pulumi.Input[int] dead_interval: Dead interval.
        :param pulumi.Input[int] hello_interval: Hello interval.
        :param pulumi.Input[str] keychain: Message-digest key-chain name.
        :param pulumi.Input[str] md5_key: MD5 key.
        :param pulumi.Input[str] md5_keychain: Authentication MD5 key-chain name.
        :param pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaVirtualLinkMd5KeyArgs']]] md5_keys: MD5 key. The structure of `md5_keys` block is documented below.
        :param pulumi.Input[str] name: Redistribute name.
        :param pulumi.Input[str] peer: Peer IP.
        :param pulumi.Input[int] retransmit_interval: Retransmit interval.
        :param pulumi.Input[int] transmit_delay: Transmit delay.
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if keychain is not None:
            pulumi.set(__self__, "keychain", keychain)
        if md5_key is not None:
            pulumi.set(__self__, "md5_key", md5_key)
        if md5_keychain is not None:
            pulumi.set(__self__, "md5_keychain", md5_keychain)
        if md5_keys is not None:
            pulumi.set(__self__, "md5_keys", md5_keys)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peer is not None:
            pulumi.set(__self__, "peer", peer)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if transmit_delay is not None:
            pulumi.set(__self__, "transmit_delay", transmit_delay)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication type.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication key.
        """
        return pulumi.get(self, "authentication_key")

    @authentication_key.setter
    def authentication_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_key", value)

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Dead interval.
        """
        return pulumi.get(self, "dead_interval")

    @dead_interval.setter
    def dead_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dead_interval", value)

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Hello interval.
        """
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval", value)

    @property
    @pulumi.getter
    def keychain(self) -> Optional[pulumi.Input[str]]:
        """
        Message-digest key-chain name.
        """
        return pulumi.get(self, "keychain")

    @keychain.setter
    def keychain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keychain", value)

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> Optional[pulumi.Input[str]]:
        """
        MD5 key.
        """
        return pulumi.get(self, "md5_key")

    @md5_key.setter
    def md5_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "md5_key", value)

    @property
    @pulumi.getter(name="md5Keychain")
    def md5_keychain(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication MD5 key-chain name.
        """
        return pulumi.get(self, "md5_keychain")

    @md5_keychain.setter
    def md5_keychain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "md5_keychain", value)

    @property
    @pulumi.getter(name="md5Keys")
    def md5_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaVirtualLinkMd5KeyArgs']]]]:
        """
        MD5 key. The structure of `md5_keys` block is documented below.
        """
        return pulumi.get(self, "md5_keys")

    @md5_keys.setter
    def md5_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfAreaVirtualLinkMd5KeyArgs']]]]):
        pulumi.set(self, "md5_keys", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Redistribute name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def peer(self) -> Optional[pulumi.Input[str]]:
        """
        Peer IP.
        """
        return pulumi.get(self, "peer")

    @peer.setter
    def peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer", value)

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Retransmit interval.
        """
        return pulumi.get(self, "retransmit_interval")

    @retransmit_interval.setter
    def retransmit_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retransmit_interval", value)

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Transmit delay.
        """
        return pulumi.get(self, "transmit_delay")

    @transmit_delay.setter
    def transmit_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "transmit_delay", value)


@pulumi.input_type
class RouterOspfAreaVirtualLinkMd5KeyArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 key_string: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Distribute list entry ID.
        :param pulumi.Input[str] key_string: Password for the key.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Distribute list entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[pulumi.Input[str]]:
        """
        Password for the key.
        """
        return pulumi.get(self, "key_string")

    @key_string.setter
    def key_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_string", value)


@pulumi.input_type
class RouterOspfDistributeListArgs:
    def __init__(__self__, *,
                 access_list: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_list: Access list name.
        :param pulumi.Input[int] id: Distribute list entry ID.
        :param pulumi.Input[str] protocol: Protocol type. Valid values: `connected`, `static`, `rip`.
        """
        if access_list is not None:
            pulumi.set(__self__, "access_list", access_list)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> Optional[pulumi.Input[str]]:
        """
        Access list name.
        """
        return pulumi.get(self, "access_list")

    @access_list.setter
    def access_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_list", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Distribute list entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol type. Valid values: `connected`, `static`, `rip`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class RouterOspfNeighborArgs:
    def __init__(__self__, *,
                 cost: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 poll_interval: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] cost: Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        :param pulumi.Input[int] id: Distribute list entry ID.
        :param pulumi.Input[str] ip: Interface IP address of the neighbor.
        :param pulumi.Input[int] poll_interval: Poll interval time in seconds.
        :param pulumi.Input[int] priority: Priority.
        """
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if poll_interval is not None:
            pulumi.set(__self__, "poll_interval", poll_interval)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        """
        Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Distribute list entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Interface IP address of the neighbor.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="pollInterval")
    def poll_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Poll interval time in seconds.
        """
        return pulumi.get(self, "poll_interval")

    @poll_interval.setter
    def poll_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "poll_interval", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class RouterOspfNetworkArgs:
    def __init__(__self__, *,
                 area: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] area: Attach the network to area.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[int] id: Distribute list entry ID.
        :param pulumi.Input[str] prefix: Prefix.
        """
        if area is not None:
            pulumi.set(__self__, "area", area)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def area(self) -> Optional[pulumi.Input[str]]:
        """
        Attach the network to area.
        """
        return pulumi.get(self, "area")

    @area.setter
    def area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Distribute list entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class RouterOspfOspfInterfaceArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 authentication_key: Optional[pulumi.Input[str]] = None,
                 bfd: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 database_filter_out: Optional[pulumi.Input[str]] = None,
                 dead_interval: Optional[pulumi.Input[int]] = None,
                 hello_interval: Optional[pulumi.Input[int]] = None,
                 hello_multiplier: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 keychain: Optional[pulumi.Input[str]] = None,
                 md5_key: Optional[pulumi.Input[str]] = None,
                 md5_keychain: Optional[pulumi.Input[str]] = None,
                 md5_keys: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfOspfInterfaceMd5KeyArgs']]]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 mtu_ignore: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 prefix_length: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 resync_timeout: Optional[pulumi.Input[int]] = None,
                 retransmit_interval: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 transmit_delay: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] authentication: Authentication type.
        :param pulumi.Input[str] authentication_key: Authentication key.
        :param pulumi.Input[str] bfd: Bidirectional Forwarding Detection (BFD). Valid values: `global`, `enable`, `disable`.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[int] cost: Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        :param pulumi.Input[str] database_filter_out: Enable/disable control of flooding out LSAs. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] dead_interval: Dead interval.
        :param pulumi.Input[int] hello_interval: Hello interval.
        :param pulumi.Input[int] hello_multiplier: Number of hello packets within dead interval.
        :param pulumi.Input[str] interface: Configuration interface name.
        :param pulumi.Input[str] ip: Interface IP address of the neighbor.
        :param pulumi.Input[str] keychain: Message-digest key-chain name.
        :param pulumi.Input[str] md5_key: MD5 key.
        :param pulumi.Input[str] md5_keychain: Authentication MD5 key-chain name.
        :param pulumi.Input[Sequence[pulumi.Input['RouterOspfOspfInterfaceMd5KeyArgs']]] md5_keys: MD5 key. The structure of `md5_keys` block is documented below.
        :param pulumi.Input[int] mtu: MTU for database description packets.
        :param pulumi.Input[str] mtu_ignore: Enable/disable ignore MTU. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Redistribute name.
        :param pulumi.Input[str] network_type: Network type. Valid values: `broadcast`, `non-broadcast`, `point-to-point`, `point-to-multipoint`, `point-to-multipoint-non-broadcast`.
        :param pulumi.Input[int] prefix_length: Prefix length.
        :param pulumi.Input[int] priority: Priority.
        :param pulumi.Input[int] resync_timeout: Graceful restart neighbor resynchronization timeout.
        :param pulumi.Input[int] retransmit_interval: Retransmit interval.
        :param pulumi.Input[str] status: status Valid values: `enable`, `disable`.
        :param pulumi.Input[int] transmit_delay: Transmit delay.
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if authentication_key is not None:
            pulumi.set(__self__, "authentication_key", authentication_key)
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if database_filter_out is not None:
            pulumi.set(__self__, "database_filter_out", database_filter_out)
        if dead_interval is not None:
            pulumi.set(__self__, "dead_interval", dead_interval)
        if hello_interval is not None:
            pulumi.set(__self__, "hello_interval", hello_interval)
        if hello_multiplier is not None:
            pulumi.set(__self__, "hello_multiplier", hello_multiplier)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if keychain is not None:
            pulumi.set(__self__, "keychain", keychain)
        if md5_key is not None:
            pulumi.set(__self__, "md5_key", md5_key)
        if md5_keychain is not None:
            pulumi.set(__self__, "md5_keychain", md5_keychain)
        if md5_keys is not None:
            pulumi.set(__self__, "md5_keys", md5_keys)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if mtu_ignore is not None:
            pulumi.set(__self__, "mtu_ignore", mtu_ignore)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if resync_timeout is not None:
            pulumi.set(__self__, "resync_timeout", resync_timeout)
        if retransmit_interval is not None:
            pulumi.set(__self__, "retransmit_interval", retransmit_interval)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if transmit_delay is not None:
            pulumi.set(__self__, "transmit_delay", transmit_delay)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication type.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="authenticationKey")
    def authentication_key(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication key.
        """
        return pulumi.get(self, "authentication_key")

    @authentication_key.setter
    def authentication_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_key", value)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        """
        Bidirectional Forwarding Detection (BFD). Valid values: `global`, `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        """
        Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter(name="databaseFilterOut")
    def database_filter_out(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable control of flooding out LSAs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "database_filter_out")

    @database_filter_out.setter
    def database_filter_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_filter_out", value)

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Dead interval.
        """
        return pulumi.get(self, "dead_interval")

    @dead_interval.setter
    def dead_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dead_interval", value)

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Hello interval.
        """
        return pulumi.get(self, "hello_interval")

    @hello_interval.setter
    def hello_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_interval", value)

    @property
    @pulumi.getter(name="helloMultiplier")
    def hello_multiplier(self) -> Optional[pulumi.Input[int]]:
        """
        Number of hello packets within dead interval.
        """
        return pulumi.get(self, "hello_multiplier")

    @hello_multiplier.setter
    def hello_multiplier(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_multiplier", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration interface name.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Interface IP address of the neighbor.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def keychain(self) -> Optional[pulumi.Input[str]]:
        """
        Message-digest key-chain name.
        """
        return pulumi.get(self, "keychain")

    @keychain.setter
    def keychain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keychain", value)

    @property
    @pulumi.getter(name="md5Key")
    def md5_key(self) -> Optional[pulumi.Input[str]]:
        """
        MD5 key.
        """
        return pulumi.get(self, "md5_key")

    @md5_key.setter
    def md5_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "md5_key", value)

    @property
    @pulumi.getter(name="md5Keychain")
    def md5_keychain(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication MD5 key-chain name.
        """
        return pulumi.get(self, "md5_keychain")

    @md5_keychain.setter
    def md5_keychain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "md5_keychain", value)

    @property
    @pulumi.getter(name="md5Keys")
    def md5_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfOspfInterfaceMd5KeyArgs']]]]:
        """
        MD5 key. The structure of `md5_keys` block is documented below.
        """
        return pulumi.get(self, "md5_keys")

    @md5_keys.setter
    def md5_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterOspfOspfInterfaceMd5KeyArgs']]]]):
        pulumi.set(self, "md5_keys", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        MTU for database description packets.
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="mtuIgnore")
    def mtu_ignore(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ignore MTU. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "mtu_ignore")

    @mtu_ignore.setter
    def mtu_ignore(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mtu_ignore", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Redistribute name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        """
        Network type. Valid values: `broadcast`, `non-broadcast`, `point-to-point`, `point-to-multipoint`, `point-to-multipoint-non-broadcast`.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[pulumi.Input[int]]:
        """
        Prefix length.
        """
        return pulumi.get(self, "prefix_length")

    @prefix_length.setter
    def prefix_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prefix_length", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="resyncTimeout")
    def resync_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Graceful restart neighbor resynchronization timeout.
        """
        return pulumi.get(self, "resync_timeout")

    @resync_timeout.setter
    def resync_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "resync_timeout", value)

    @property
    @pulumi.getter(name="retransmitInterval")
    def retransmit_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Retransmit interval.
        """
        return pulumi.get(self, "retransmit_interval")

    @retransmit_interval.setter
    def retransmit_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retransmit_interval", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="transmitDelay")
    def transmit_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Transmit delay.
        """
        return pulumi.get(self, "transmit_delay")

    @transmit_delay.setter
    def transmit_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "transmit_delay", value)


@pulumi.input_type
class RouterOspfOspfInterfaceMd5KeyArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 key_string: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Distribute list entry ID.
        :param pulumi.Input[str] key_string: Password for the key.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Distribute list entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[pulumi.Input[str]]:
        """
        Password for the key.
        """
        return pulumi.get(self, "key_string")

    @key_string.setter
    def key_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_string", value)


@pulumi.input_type
class RouterOspfPassiveInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Redistribute name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Redistribute name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RouterOspfRedistributeArgs:
    def __init__(__self__, *,
                 metric: Optional[pulumi.Input[int]] = None,
                 metric_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 routemap: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] metric: Redistribute metric setting.
        :param pulumi.Input[str] metric_type: Metric type. Valid values: `1`, `2`.
        :param pulumi.Input[str] name: Redistribute name.
        :param pulumi.Input[str] routemap: Route map name.
        :param pulumi.Input[str] status: status Valid values: `enable`, `disable`.
        :param pulumi.Input[int] tag: Tag value.
        """
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if routemap is not None:
            pulumi.set(__self__, "routemap", routemap)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[int]]:
        """
        Redistribute metric setting.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[pulumi.Input[str]]:
        """
        Metric type. Valid values: `1`, `2`.
        """
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Redistribute name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def routemap(self) -> Optional[pulumi.Input[str]]:
        """
        Route map name.
        """
        return pulumi.get(self, "routemap")

    @routemap.setter
    def routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routemap", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[int]]:
        """
        Tag value.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class RouterOspfSummaryAddressArgs:
    def __init__(__self__, *,
                 advertise: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] advertise: Enable/disable advertise status. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] id: Distribute list entry ID.
        :param pulumi.Input[str] prefix: Prefix.
        :param pulumi.Input[int] tag: Tag value.
        """
        if advertise is not None:
            pulumi.set(__self__, "advertise", advertise)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def advertise(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertise status. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "advertise")

    @advertise.setter
    def advertise(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advertise", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Distribute list entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[int]]:
        """
        Tag value.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class RouterPolicyDstArgs:
    def __init__(__self__, *,
                 subnet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] subnet: IP and mask.
        """
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IP and mask.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)


@pulumi.input_type
class RouterPolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Custom Destination Internet Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom Destination Internet Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RouterPolicyInputDeviceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Custom Destination Internet Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom Destination Internet Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RouterPolicyInternetServiceCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Custom Destination Internet Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom Destination Internet Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RouterPolicyInternetServiceIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Destination Internet Service ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Destination Internet Service ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class RouterPolicySrcArgs:
    def __init__(__self__, *,
                 subnet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] subnet: IP and mask.
        """
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IP and mask.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)


@pulumi.input_type
class RouterPolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Custom Destination Internet Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom Destination Internet Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RouterPrefixList6RuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 flags: Optional[pulumi.Input[int]] = None,
                 ge: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 le: Optional[pulumi.Input[int]] = None,
                 prefix6: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Permit or deny packets that match this rule. Valid values: `permit`, `deny`.
        :param pulumi.Input[int] flags: Flags.
        :param pulumi.Input[int] ge: Minimum prefix length to be matched (0 - 128).
        :param pulumi.Input[int] id: Rule ID.
        :param pulumi.Input[int] le: Maximum prefix length to be matched (0 - 128).
        :param pulumi.Input[str] prefix6: IPv6 prefix to define regular filter criteria, such as "any" or subnets.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if ge is not None:
            pulumi.set(__self__, "ge", ge)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if le is not None:
            pulumi.set(__self__, "le", le)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Permit or deny packets that match this rule. Valid values: `permit`, `deny`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def flags(self) -> Optional[pulumi.Input[int]]:
        """
        Flags.
        """
        return pulumi.get(self, "flags")

    @flags.setter
    def flags(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flags", value)

    @property
    @pulumi.getter
    def ge(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum prefix length to be matched (0 - 128).
        """
        return pulumi.get(self, "ge")

    @ge.setter
    def ge(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ge", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Rule ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def le(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum prefix length to be matched (0 - 128).
        """
        return pulumi.get(self, "le")

    @le.setter
    def le(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "le", value)

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 prefix to define regular filter criteria, such as "any" or subnets.
        """
        return pulumi.get(self, "prefix6")

    @prefix6.setter
    def prefix6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix6", value)


@pulumi.input_type
class RouterPrefixListRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 flags: Optional[pulumi.Input[int]] = None,
                 ge: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 le: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Permit or deny this IP address and netmask prefix. Valid values: `permit`, `deny`.
        :param pulumi.Input[int] flags: Flags.
        :param pulumi.Input[int] ge: Minimum prefix length to be matched (0 - 32).
        :param pulumi.Input[int] id: Rule ID.
        :param pulumi.Input[int] le: Maximum prefix length to be matched (0 - 32).
        :param pulumi.Input[str] prefix: IPv4 prefix to define regular filter criteria, such as "any" or subnets.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if ge is not None:
            pulumi.set(__self__, "ge", ge)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if le is not None:
            pulumi.set(__self__, "le", le)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Permit or deny this IP address and netmask prefix. Valid values: `permit`, `deny`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def flags(self) -> Optional[pulumi.Input[int]]:
        """
        Flags.
        """
        return pulumi.get(self, "flags")

    @flags.setter
    def flags(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flags", value)

    @property
    @pulumi.getter
    def ge(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum prefix length to be matched (0 - 32).
        """
        return pulumi.get(self, "ge")

    @ge.setter
    def ge(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ge", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Rule ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def le(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum prefix length to be matched (0 - 32).
        """
        return pulumi.get(self, "le")

    @le.setter
    def le(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "le", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 prefix to define regular filter criteria, such as "any" or subnets.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class RouterRipDistanceArgs:
    def __init__(__self__, *,
                 access_list: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_list: Access list name.
        :param pulumi.Input[int] distance: Distance (1 - 255).
        :param pulumi.Input[int] id: Offset-list ID.
        :param pulumi.Input[str] prefix: Network prefix.
        """
        if access_list is not None:
            pulumi.set(__self__, "access_list", access_list)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> Optional[pulumi.Input[str]]:
        """
        Access list name.
        """
        return pulumi.get(self, "access_list")

    @access_list.setter
    def access_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_list", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[int]]:
        """
        Distance (1 - 255).
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Offset-list ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Network prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class RouterRipDistributeListArgs:
    def __init__(__self__, *,
                 direction: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 listname: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] direction: Offset list direction. Valid values: `in`, `out`.
        :param pulumi.Input[int] id: Offset-list ID.
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[str] listname: Distribute access/prefix list name.
        :param pulumi.Input[str] status: status Valid values: `enable`, `disable`.
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if listname is not None:
            pulumi.set(__self__, "listname", listname)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        """
        Offset list direction. Valid values: `in`, `out`.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Offset-list ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def listname(self) -> Optional[pulumi.Input[str]]:
        """
        Distribute access/prefix list name.
        """
        return pulumi.get(self, "listname")

    @listname.setter
    def listname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listname", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class RouterRipInterfaceArgs:
    def __init__(__self__, *,
                 auth_keychain: Optional[pulumi.Input[str]] = None,
                 auth_mode: Optional[pulumi.Input[str]] = None,
                 auth_string: Optional[pulumi.Input[str]] = None,
                 flags: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 receive_version: Optional[pulumi.Input[str]] = None,
                 send_version: Optional[pulumi.Input[str]] = None,
                 send_version2_broadcast: Optional[pulumi.Input[str]] = None,
                 split_horizon: Optional[pulumi.Input[str]] = None,
                 split_horizon_status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_keychain: Authentication key-chain name.
        :param pulumi.Input[str] auth_mode: Authentication mode. Valid values: `none`, `text`, `md5`.
        :param pulumi.Input[str] auth_string: Authentication string/password.
        :param pulumi.Input[int] flags: flags
        :param pulumi.Input[str] name: Interface name.
        :param pulumi.Input[str] receive_version: Receive version. Valid values: `1`, `2`.
        :param pulumi.Input[str] send_version: Send version. Valid values: `1`, `2`.
        :param pulumi.Input[str] send_version2_broadcast: Enable/disable broadcast version 1 compatible packets. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] split_horizon: Enable/disable split horizon. Valid values: `poisoned`, `regular`.
        :param pulumi.Input[str] split_horizon_status: Enable/disable split horizon. Valid values: `enable`, `disable`.
        """
        if auth_keychain is not None:
            pulumi.set(__self__, "auth_keychain", auth_keychain)
        if auth_mode is not None:
            pulumi.set(__self__, "auth_mode", auth_mode)
        if auth_string is not None:
            pulumi.set(__self__, "auth_string", auth_string)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if receive_version is not None:
            pulumi.set(__self__, "receive_version", receive_version)
        if send_version is not None:
            pulumi.set(__self__, "send_version", send_version)
        if send_version2_broadcast is not None:
            pulumi.set(__self__, "send_version2_broadcast", send_version2_broadcast)
        if split_horizon is not None:
            pulumi.set(__self__, "split_horizon", split_horizon)
        if split_horizon_status is not None:
            pulumi.set(__self__, "split_horizon_status", split_horizon_status)

    @property
    @pulumi.getter(name="authKeychain")
    def auth_keychain(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication key-chain name.
        """
        return pulumi.get(self, "auth_keychain")

    @auth_keychain.setter
    def auth_keychain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_keychain", value)

    @property
    @pulumi.getter(name="authMode")
    def auth_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication mode. Valid values: `none`, `text`, `md5`.
        """
        return pulumi.get(self, "auth_mode")

    @auth_mode.setter
    def auth_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_mode", value)

    @property
    @pulumi.getter(name="authString")
    def auth_string(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication string/password.
        """
        return pulumi.get(self, "auth_string")

    @auth_string.setter
    def auth_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_string", value)

    @property
    @pulumi.getter
    def flags(self) -> Optional[pulumi.Input[int]]:
        """
        flags
        """
        return pulumi.get(self, "flags")

    @flags.setter
    def flags(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flags", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="receiveVersion")
    def receive_version(self) -> Optional[pulumi.Input[str]]:
        """
        Receive version. Valid values: `1`, `2`.
        """
        return pulumi.get(self, "receive_version")

    @receive_version.setter
    def receive_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "receive_version", value)

    @property
    @pulumi.getter(name="sendVersion")
    def send_version(self) -> Optional[pulumi.Input[str]]:
        """
        Send version. Valid values: `1`, `2`.
        """
        return pulumi.get(self, "send_version")

    @send_version.setter
    def send_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_version", value)

    @property
    @pulumi.getter(name="sendVersion2Broadcast")
    def send_version2_broadcast(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable broadcast version 1 compatible packets. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "send_version2_broadcast")

    @send_version2_broadcast.setter
    def send_version2_broadcast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_version2_broadcast", value)

    @property
    @pulumi.getter(name="splitHorizon")
    def split_horizon(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable split horizon. Valid values: `poisoned`, `regular`.
        """
        return pulumi.get(self, "split_horizon")

    @split_horizon.setter
    def split_horizon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_horizon", value)

    @property
    @pulumi.getter(name="splitHorizonStatus")
    def split_horizon_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable split horizon. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "split_horizon_status")

    @split_horizon_status.setter
    def split_horizon_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_horizon_status", value)


@pulumi.input_type
class RouterRipNeighborArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Offset-list ID.
        :param pulumi.Input[str] ip: IP address.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Offset-list ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class RouterRipNetworkArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Offset-list ID.
        :param pulumi.Input[str] prefix: Network prefix.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Offset-list ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Network prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class RouterRipOffsetListArgs:
    def __init__(__self__, *,
                 access_list: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 offset: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_list: Access list name.
        :param pulumi.Input[str] direction: Offset list direction. Valid values: `in`, `out`.
        :param pulumi.Input[int] id: Offset-list ID.
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[int] offset: offset
        :param pulumi.Input[str] status: status Valid values: `enable`, `disable`.
        """
        if access_list is not None:
            pulumi.set(__self__, "access_list", access_list)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> Optional[pulumi.Input[str]]:
        """
        Access list name.
        """
        return pulumi.get(self, "access_list")

    @access_list.setter
    def access_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_list", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        """
        Offset list direction. Valid values: `in`, `out`.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Offset-list ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def offset(self) -> Optional[pulumi.Input[int]]:
        """
        offset
        """
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class RouterRipPassiveInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RouterRipRedistributeArgs:
    def __init__(__self__, *,
                 metric: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 routemap: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] metric: Redistribute metric setting.
        :param pulumi.Input[str] name: Interface name.
        :param pulumi.Input[str] routemap: Route map name.
        :param pulumi.Input[str] status: status Valid values: `enable`, `disable`.
        """
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if routemap is not None:
            pulumi.set(__self__, "routemap", routemap)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[int]]:
        """
        Redistribute metric setting.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def routemap(self) -> Optional[pulumi.Input[str]]:
        """
        Route map name.
        """
        return pulumi.get(self, "routemap")

    @routemap.setter
    def routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routemap", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class RouterRipngAggregateAddressArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix6: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Offset-list ID.
        :param pulumi.Input[str] prefix6: Aggregate address prefix.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Offset-list ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[pulumi.Input[str]]:
        """
        Aggregate address prefix.
        """
        return pulumi.get(self, "prefix6")

    @prefix6.setter
    def prefix6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix6", value)


@pulumi.input_type
class RouterRipngDistanceArgs:
    def __init__(__self__, *,
                 access_list6: Optional[pulumi.Input[str]] = None,
                 distance: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix6: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_list6: IPv6 access list name.
        :param pulumi.Input[int] distance: Distance (1 - 255).
        :param pulumi.Input[int] id: Offset-list ID.
        :param pulumi.Input[str] prefix6: Aggregate address prefix.
        """
        if access_list6 is not None:
            pulumi.set(__self__, "access_list6", access_list6)
        if distance is not None:
            pulumi.set(__self__, "distance", distance)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix6 is not None:
            pulumi.set(__self__, "prefix6", prefix6)

    @property
    @pulumi.getter(name="accessList6")
    def access_list6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 access list name.
        """
        return pulumi.get(self, "access_list6")

    @access_list6.setter
    def access_list6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_list6", value)

    @property
    @pulumi.getter
    def distance(self) -> Optional[pulumi.Input[int]]:
        """
        Distance (1 - 255).
        """
        return pulumi.get(self, "distance")

    @distance.setter
    def distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "distance", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Offset-list ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix6(self) -> Optional[pulumi.Input[str]]:
        """
        Aggregate address prefix.
        """
        return pulumi.get(self, "prefix6")

    @prefix6.setter
    def prefix6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix6", value)


@pulumi.input_type
class RouterRipngDistributeListArgs:
    def __init__(__self__, *,
                 direction: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 listname: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] direction: Offset list direction. Valid values: `in`, `out`.
        :param pulumi.Input[int] id: Offset-list ID.
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[str] listname: Distribute access/prefix list name.
        :param pulumi.Input[str] status: status Valid values: `enable`, `disable`.
        """
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if listname is not None:
            pulumi.set(__self__, "listname", listname)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        """
        Offset list direction. Valid values: `in`, `out`.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Offset-list ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def listname(self) -> Optional[pulumi.Input[str]]:
        """
        Distribute access/prefix list name.
        """
        return pulumi.get(self, "listname")

    @listname.setter
    def listname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listname", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class RouterRipngInterfaceArgs:
    def __init__(__self__, *,
                 flags: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 split_horizon: Optional[pulumi.Input[str]] = None,
                 split_horizon_status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] flags: Flags.
        :param pulumi.Input[str] name: Interface name.
        :param pulumi.Input[str] split_horizon: Enable/disable split horizon. Valid values: `poisoned`, `regular`.
        :param pulumi.Input[str] split_horizon_status: Enable/disable split horizon. Valid values: `enable`, `disable`.
        """
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if split_horizon is not None:
            pulumi.set(__self__, "split_horizon", split_horizon)
        if split_horizon_status is not None:
            pulumi.set(__self__, "split_horizon_status", split_horizon_status)

    @property
    @pulumi.getter
    def flags(self) -> Optional[pulumi.Input[int]]:
        """
        Flags.
        """
        return pulumi.get(self, "flags")

    @flags.setter
    def flags(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flags", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="splitHorizon")
    def split_horizon(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable split horizon. Valid values: `poisoned`, `regular`.
        """
        return pulumi.get(self, "split_horizon")

    @split_horizon.setter
    def split_horizon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_horizon", value)

    @property
    @pulumi.getter(name="splitHorizonStatus")
    def split_horizon_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable split horizon. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "split_horizon_status")

    @split_horizon_status.setter
    def split_horizon_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_horizon_status", value)


@pulumi.input_type
class RouterRipngNeighborArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ip6: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Offset-list ID.
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[str] ip6: IPv6 link-local address.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Offset-list ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def ip6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 link-local address.
        """
        return pulumi.get(self, "ip6")

    @ip6.setter
    def ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6", value)


@pulumi.input_type
class RouterRipngNetworkArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Offset-list ID.
        :param pulumi.Input[str] prefix: Network IPv6 link-local prefix.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Offset-list ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Network IPv6 link-local prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class RouterRipngOffsetListArgs:
    def __init__(__self__, *,
                 access_list6: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 offset: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_list6: IPv6 access list name.
        :param pulumi.Input[str] direction: Offset list direction. Valid values: `in`, `out`.
        :param pulumi.Input[int] id: Offset-list ID.
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[int] offset: offset
        :param pulumi.Input[str] status: status Valid values: `enable`, `disable`.
        """
        if access_list6 is not None:
            pulumi.set(__self__, "access_list6", access_list6)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accessList6")
    def access_list6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 access list name.
        """
        return pulumi.get(self, "access_list6")

    @access_list6.setter
    def access_list6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_list6", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        """
        Offset list direction. Valid values: `in`, `out`.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Offset-list ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def offset(self) -> Optional[pulumi.Input[int]]:
        """
        offset
        """
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class RouterRipngPassiveInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RouterRipngRedistributeArgs:
    def __init__(__self__, *,
                 metric: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 routemap: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] metric: Redistribute metric setting.
        :param pulumi.Input[str] name: Interface name.
        :param pulumi.Input[str] routemap: Route map name.
        :param pulumi.Input[str] status: status Valid values: `enable`, `disable`.
        """
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if routemap is not None:
            pulumi.set(__self__, "routemap", routemap)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[int]]:
        """
        Redistribute metric setting.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def routemap(self) -> Optional[pulumi.Input[str]]:
        """
        Route map name.
        """
        return pulumi.get(self, "routemap")

    @routemap.setter
    def routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routemap", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        status Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class RouterRouteMapRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 match_as_path: Optional[pulumi.Input[str]] = None,
                 match_community: Optional[pulumi.Input[str]] = None,
                 match_community_exact: Optional[pulumi.Input[str]] = None,
                 match_flags: Optional[pulumi.Input[int]] = None,
                 match_interface: Optional[pulumi.Input[str]] = None,
                 match_ip6_address: Optional[pulumi.Input[str]] = None,
                 match_ip6_nexthop: Optional[pulumi.Input[str]] = None,
                 match_ip_address: Optional[pulumi.Input[str]] = None,
                 match_ip_nexthop: Optional[pulumi.Input[str]] = None,
                 match_metric: Optional[pulumi.Input[int]] = None,
                 match_origin: Optional[pulumi.Input[str]] = None,
                 match_route_type: Optional[pulumi.Input[str]] = None,
                 match_tag: Optional[pulumi.Input[int]] = None,
                 match_vrf: Optional[pulumi.Input[int]] = None,
                 set_aggregator_as: Optional[pulumi.Input[int]] = None,
                 set_aggregator_ip: Optional[pulumi.Input[str]] = None,
                 set_aspath_action: Optional[pulumi.Input[str]] = None,
                 set_aspaths: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetAspathArgs']]]] = None,
                 set_atomic_aggregate: Optional[pulumi.Input[str]] = None,
                 set_communities: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetCommunityArgs']]]] = None,
                 set_community_additive: Optional[pulumi.Input[str]] = None,
                 set_community_delete: Optional[pulumi.Input[str]] = None,
                 set_dampening_max_suppress: Optional[pulumi.Input[int]] = None,
                 set_dampening_reachability_half_life: Optional[pulumi.Input[int]] = None,
                 set_dampening_reuse: Optional[pulumi.Input[int]] = None,
                 set_dampening_suppress: Optional[pulumi.Input[int]] = None,
                 set_dampening_unreachability_half_life: Optional[pulumi.Input[int]] = None,
                 set_extcommunity_rts: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetExtcommunityRtArgs']]]] = None,
                 set_extcommunity_soos: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetExtcommunitySooArgs']]]] = None,
                 set_flags: Optional[pulumi.Input[int]] = None,
                 set_ip6_nexthop: Optional[pulumi.Input[str]] = None,
                 set_ip6_nexthop_local: Optional[pulumi.Input[str]] = None,
                 set_ip_nexthop: Optional[pulumi.Input[str]] = None,
                 set_local_preference: Optional[pulumi.Input[int]] = None,
                 set_metric: Optional[pulumi.Input[int]] = None,
                 set_metric_type: Optional[pulumi.Input[str]] = None,
                 set_origin: Optional[pulumi.Input[str]] = None,
                 set_originator_id: Optional[pulumi.Input[str]] = None,
                 set_route_tag: Optional[pulumi.Input[int]] = None,
                 set_tag: Optional[pulumi.Input[int]] = None,
                 set_weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `permit`, `deny`.
        :param pulumi.Input[int] id: Rule ID.
        :param pulumi.Input[str] match_as_path: Match BGP AS path list.
        :param pulumi.Input[str] match_community: Match BGP community list.
        :param pulumi.Input[str] match_community_exact: Enable/disable exact matching of communities. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] match_flags: BGP flag value to match (0 - 65535)
        :param pulumi.Input[str] match_interface: Match interface configuration.
        :param pulumi.Input[str] match_ip6_address: Match IPv6 address permitted by access-list6 or prefix-list6.
        :param pulumi.Input[str] match_ip6_nexthop: Match next hop IPv6 address passed by access-list6 or prefix-list6.
        :param pulumi.Input[str] match_ip_address: Match IP address permitted by access-list or prefix-list.
        :param pulumi.Input[str] match_ip_nexthop: Match next hop IP address passed by access-list or prefix-list.
        :param pulumi.Input[int] match_metric: Match metric for redistribute routes.
        :param pulumi.Input[str] match_origin: Match BGP origin code. Valid values: `none`, `egp`, `igp`, `incomplete`.
        :param pulumi.Input[str] match_route_type: Match route type.
        :param pulumi.Input[int] match_tag: Match tag.
        :param pulumi.Input[int] match_vrf: Match VRF ID.
        :param pulumi.Input[int] set_aggregator_as: BGP aggregator AS.
        :param pulumi.Input[str] set_aggregator_ip: BGP aggregator IP.
        :param pulumi.Input[str] set_aspath_action: Specify preferred action of set-aspath. Valid values: `prepend`, `replace`.
        :param pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetAspathArgs']]] set_aspaths: Prepend BGP AS path attribute. The structure of `set_aspath` block is documented below.
        :param pulumi.Input[str] set_atomic_aggregate: Enable/disable BGP atomic aggregate attribute. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetCommunityArgs']]] set_communities: BGP community attribute. The structure of `set_community` block is documented below.
        :param pulumi.Input[str] set_community_additive: Enable/disable adding set-community to existing community. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] set_community_delete: Delete communities matching community list.
        :param pulumi.Input[int] set_dampening_max_suppress: Maximum duration to suppress a route (1 - 255 min, 0 = unset).
        :param pulumi.Input[int] set_dampening_reachability_half_life: Reachability half-life time for the penalty (1 - 45 min, 0 = unset).
        :param pulumi.Input[int] set_dampening_reuse: Value to start reusing a route (1 - 20000, 0 = unset).
        :param pulumi.Input[int] set_dampening_suppress: Value to start suppressing a route (1 - 20000, 0 = unset).
        :param pulumi.Input[int] set_dampening_unreachability_half_life: Unreachability Half-life time for the penalty (1 - 45 min, 0 = unset)
        :param pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetExtcommunityRtArgs']]] set_extcommunity_rts: Route Target extended community. The structure of `set_extcommunity_rt` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetExtcommunitySooArgs']]] set_extcommunity_soos: Site-of-Origin extended community. The structure of `set_extcommunity_soo` block is documented below.
        :param pulumi.Input[int] set_flags: BGP flags value (0 - 65535)
        :param pulumi.Input[str] set_ip6_nexthop: IPv6 global address of next hop.
        :param pulumi.Input[str] set_ip6_nexthop_local: IPv6 local address of next hop.
        :param pulumi.Input[str] set_ip_nexthop: IP address of next hop.
        :param pulumi.Input[int] set_local_preference: BGP local preference path attribute.
        :param pulumi.Input[int] set_metric: Metric value.
        :param pulumi.Input[str] set_metric_type: Metric type.
        :param pulumi.Input[str] set_origin: BGP origin code. Valid values: `none`, `egp`, `igp`, `incomplete`.
        :param pulumi.Input[str] set_originator_id: BGP originator ID attribute.
        :param pulumi.Input[int] set_route_tag: Route tag for routing table.
        :param pulumi.Input[int] set_tag: Tag value.
        :param pulumi.Input[int] set_weight: BGP weight for routing table.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if match_as_path is not None:
            pulumi.set(__self__, "match_as_path", match_as_path)
        if match_community is not None:
            pulumi.set(__self__, "match_community", match_community)
        if match_community_exact is not None:
            pulumi.set(__self__, "match_community_exact", match_community_exact)
        if match_flags is not None:
            pulumi.set(__self__, "match_flags", match_flags)
        if match_interface is not None:
            pulumi.set(__self__, "match_interface", match_interface)
        if match_ip6_address is not None:
            pulumi.set(__self__, "match_ip6_address", match_ip6_address)
        if match_ip6_nexthop is not None:
            pulumi.set(__self__, "match_ip6_nexthop", match_ip6_nexthop)
        if match_ip_address is not None:
            pulumi.set(__self__, "match_ip_address", match_ip_address)
        if match_ip_nexthop is not None:
            pulumi.set(__self__, "match_ip_nexthop", match_ip_nexthop)
        if match_metric is not None:
            pulumi.set(__self__, "match_metric", match_metric)
        if match_origin is not None:
            pulumi.set(__self__, "match_origin", match_origin)
        if match_route_type is not None:
            pulumi.set(__self__, "match_route_type", match_route_type)
        if match_tag is not None:
            pulumi.set(__self__, "match_tag", match_tag)
        if match_vrf is not None:
            pulumi.set(__self__, "match_vrf", match_vrf)
        if set_aggregator_as is not None:
            pulumi.set(__self__, "set_aggregator_as", set_aggregator_as)
        if set_aggregator_ip is not None:
            pulumi.set(__self__, "set_aggregator_ip", set_aggregator_ip)
        if set_aspath_action is not None:
            pulumi.set(__self__, "set_aspath_action", set_aspath_action)
        if set_aspaths is not None:
            pulumi.set(__self__, "set_aspaths", set_aspaths)
        if set_atomic_aggregate is not None:
            pulumi.set(__self__, "set_atomic_aggregate", set_atomic_aggregate)
        if set_communities is not None:
            pulumi.set(__self__, "set_communities", set_communities)
        if set_community_additive is not None:
            pulumi.set(__self__, "set_community_additive", set_community_additive)
        if set_community_delete is not None:
            pulumi.set(__self__, "set_community_delete", set_community_delete)
        if set_dampening_max_suppress is not None:
            pulumi.set(__self__, "set_dampening_max_suppress", set_dampening_max_suppress)
        if set_dampening_reachability_half_life is not None:
            pulumi.set(__self__, "set_dampening_reachability_half_life", set_dampening_reachability_half_life)
        if set_dampening_reuse is not None:
            pulumi.set(__self__, "set_dampening_reuse", set_dampening_reuse)
        if set_dampening_suppress is not None:
            pulumi.set(__self__, "set_dampening_suppress", set_dampening_suppress)
        if set_dampening_unreachability_half_life is not None:
            pulumi.set(__self__, "set_dampening_unreachability_half_life", set_dampening_unreachability_half_life)
        if set_extcommunity_rts is not None:
            pulumi.set(__self__, "set_extcommunity_rts", set_extcommunity_rts)
        if set_extcommunity_soos is not None:
            pulumi.set(__self__, "set_extcommunity_soos", set_extcommunity_soos)
        if set_flags is not None:
            pulumi.set(__self__, "set_flags", set_flags)
        if set_ip6_nexthop is not None:
            pulumi.set(__self__, "set_ip6_nexthop", set_ip6_nexthop)
        if set_ip6_nexthop_local is not None:
            pulumi.set(__self__, "set_ip6_nexthop_local", set_ip6_nexthop_local)
        if set_ip_nexthop is not None:
            pulumi.set(__self__, "set_ip_nexthop", set_ip_nexthop)
        if set_local_preference is not None:
            pulumi.set(__self__, "set_local_preference", set_local_preference)
        if set_metric is not None:
            pulumi.set(__self__, "set_metric", set_metric)
        if set_metric_type is not None:
            pulumi.set(__self__, "set_metric_type", set_metric_type)
        if set_origin is not None:
            pulumi.set(__self__, "set_origin", set_origin)
        if set_originator_id is not None:
            pulumi.set(__self__, "set_originator_id", set_originator_id)
        if set_route_tag is not None:
            pulumi.set(__self__, "set_route_tag", set_route_tag)
        if set_tag is not None:
            pulumi.set(__self__, "set_tag", set_tag)
        if set_weight is not None:
            pulumi.set(__self__, "set_weight", set_weight)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `permit`, `deny`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Rule ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="matchAsPath")
    def match_as_path(self) -> Optional[pulumi.Input[str]]:
        """
        Match BGP AS path list.
        """
        return pulumi.get(self, "match_as_path")

    @match_as_path.setter
    def match_as_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_as_path", value)

    @property
    @pulumi.getter(name="matchCommunity")
    def match_community(self) -> Optional[pulumi.Input[str]]:
        """
        Match BGP community list.
        """
        return pulumi.get(self, "match_community")

    @match_community.setter
    def match_community(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_community", value)

    @property
    @pulumi.getter(name="matchCommunityExact")
    def match_community_exact(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable exact matching of communities. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "match_community_exact")

    @match_community_exact.setter
    def match_community_exact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_community_exact", value)

    @property
    @pulumi.getter(name="matchFlags")
    def match_flags(self) -> Optional[pulumi.Input[int]]:
        """
        BGP flag value to match (0 - 65535)
        """
        return pulumi.get(self, "match_flags")

    @match_flags.setter
    def match_flags(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "match_flags", value)

    @property
    @pulumi.getter(name="matchInterface")
    def match_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Match interface configuration.
        """
        return pulumi.get(self, "match_interface")

    @match_interface.setter
    def match_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_interface", value)

    @property
    @pulumi.getter(name="matchIp6Address")
    def match_ip6_address(self) -> Optional[pulumi.Input[str]]:
        """
        Match IPv6 address permitted by access-list6 or prefix-list6.
        """
        return pulumi.get(self, "match_ip6_address")

    @match_ip6_address.setter
    def match_ip6_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_ip6_address", value)

    @property
    @pulumi.getter(name="matchIp6Nexthop")
    def match_ip6_nexthop(self) -> Optional[pulumi.Input[str]]:
        """
        Match next hop IPv6 address passed by access-list6 or prefix-list6.
        """
        return pulumi.get(self, "match_ip6_nexthop")

    @match_ip6_nexthop.setter
    def match_ip6_nexthop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_ip6_nexthop", value)

    @property
    @pulumi.getter(name="matchIpAddress")
    def match_ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        Match IP address permitted by access-list or prefix-list.
        """
        return pulumi.get(self, "match_ip_address")

    @match_ip_address.setter
    def match_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_ip_address", value)

    @property
    @pulumi.getter(name="matchIpNexthop")
    def match_ip_nexthop(self) -> Optional[pulumi.Input[str]]:
        """
        Match next hop IP address passed by access-list or prefix-list.
        """
        return pulumi.get(self, "match_ip_nexthop")

    @match_ip_nexthop.setter
    def match_ip_nexthop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_ip_nexthop", value)

    @property
    @pulumi.getter(name="matchMetric")
    def match_metric(self) -> Optional[pulumi.Input[int]]:
        """
        Match metric for redistribute routes.
        """
        return pulumi.get(self, "match_metric")

    @match_metric.setter
    def match_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "match_metric", value)

    @property
    @pulumi.getter(name="matchOrigin")
    def match_origin(self) -> Optional[pulumi.Input[str]]:
        """
        Match BGP origin code. Valid values: `none`, `egp`, `igp`, `incomplete`.
        """
        return pulumi.get(self, "match_origin")

    @match_origin.setter
    def match_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_origin", value)

    @property
    @pulumi.getter(name="matchRouteType")
    def match_route_type(self) -> Optional[pulumi.Input[str]]:
        """
        Match route type.
        """
        return pulumi.get(self, "match_route_type")

    @match_route_type.setter
    def match_route_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_route_type", value)

    @property
    @pulumi.getter(name="matchTag")
    def match_tag(self) -> Optional[pulumi.Input[int]]:
        """
        Match tag.
        """
        return pulumi.get(self, "match_tag")

    @match_tag.setter
    def match_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "match_tag", value)

    @property
    @pulumi.getter(name="matchVrf")
    def match_vrf(self) -> Optional[pulumi.Input[int]]:
        """
        Match VRF ID.
        """
        return pulumi.get(self, "match_vrf")

    @match_vrf.setter
    def match_vrf(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "match_vrf", value)

    @property
    @pulumi.getter(name="setAggregatorAs")
    def set_aggregator_as(self) -> Optional[pulumi.Input[int]]:
        """
        BGP aggregator AS.
        """
        return pulumi.get(self, "set_aggregator_as")

    @set_aggregator_as.setter
    def set_aggregator_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_aggregator_as", value)

    @property
    @pulumi.getter(name="setAggregatorIp")
    def set_aggregator_ip(self) -> Optional[pulumi.Input[str]]:
        """
        BGP aggregator IP.
        """
        return pulumi.get(self, "set_aggregator_ip")

    @set_aggregator_ip.setter
    def set_aggregator_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_aggregator_ip", value)

    @property
    @pulumi.getter(name="setAspathAction")
    def set_aspath_action(self) -> Optional[pulumi.Input[str]]:
        """
        Specify preferred action of set-aspath. Valid values: `prepend`, `replace`.
        """
        return pulumi.get(self, "set_aspath_action")

    @set_aspath_action.setter
    def set_aspath_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_aspath_action", value)

    @property
    @pulumi.getter(name="setAspaths")
    def set_aspaths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetAspathArgs']]]]:
        """
        Prepend BGP AS path attribute. The structure of `set_aspath` block is documented below.
        """
        return pulumi.get(self, "set_aspaths")

    @set_aspaths.setter
    def set_aspaths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetAspathArgs']]]]):
        pulumi.set(self, "set_aspaths", value)

    @property
    @pulumi.getter(name="setAtomicAggregate")
    def set_atomic_aggregate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable BGP atomic aggregate attribute. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "set_atomic_aggregate")

    @set_atomic_aggregate.setter
    def set_atomic_aggregate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_atomic_aggregate", value)

    @property
    @pulumi.getter(name="setCommunities")
    def set_communities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetCommunityArgs']]]]:
        """
        BGP community attribute. The structure of `set_community` block is documented below.
        """
        return pulumi.get(self, "set_communities")

    @set_communities.setter
    def set_communities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetCommunityArgs']]]]):
        pulumi.set(self, "set_communities", value)

    @property
    @pulumi.getter(name="setCommunityAdditive")
    def set_community_additive(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable adding set-community to existing community. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "set_community_additive")

    @set_community_additive.setter
    def set_community_additive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_community_additive", value)

    @property
    @pulumi.getter(name="setCommunityDelete")
    def set_community_delete(self) -> Optional[pulumi.Input[str]]:
        """
        Delete communities matching community list.
        """
        return pulumi.get(self, "set_community_delete")

    @set_community_delete.setter
    def set_community_delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_community_delete", value)

    @property
    @pulumi.getter(name="setDampeningMaxSuppress")
    def set_dampening_max_suppress(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum duration to suppress a route (1 - 255 min, 0 = unset).
        """
        return pulumi.get(self, "set_dampening_max_suppress")

    @set_dampening_max_suppress.setter
    def set_dampening_max_suppress(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_dampening_max_suppress", value)

    @property
    @pulumi.getter(name="setDampeningReachabilityHalfLife")
    def set_dampening_reachability_half_life(self) -> Optional[pulumi.Input[int]]:
        """
        Reachability half-life time for the penalty (1 - 45 min, 0 = unset).
        """
        return pulumi.get(self, "set_dampening_reachability_half_life")

    @set_dampening_reachability_half_life.setter
    def set_dampening_reachability_half_life(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_dampening_reachability_half_life", value)

    @property
    @pulumi.getter(name="setDampeningReuse")
    def set_dampening_reuse(self) -> Optional[pulumi.Input[int]]:
        """
        Value to start reusing a route (1 - 20000, 0 = unset).
        """
        return pulumi.get(self, "set_dampening_reuse")

    @set_dampening_reuse.setter
    def set_dampening_reuse(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_dampening_reuse", value)

    @property
    @pulumi.getter(name="setDampeningSuppress")
    def set_dampening_suppress(self) -> Optional[pulumi.Input[int]]:
        """
        Value to start suppressing a route (1 - 20000, 0 = unset).
        """
        return pulumi.get(self, "set_dampening_suppress")

    @set_dampening_suppress.setter
    def set_dampening_suppress(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_dampening_suppress", value)

    @property
    @pulumi.getter(name="setDampeningUnreachabilityHalfLife")
    def set_dampening_unreachability_half_life(self) -> Optional[pulumi.Input[int]]:
        """
        Unreachability Half-life time for the penalty (1 - 45 min, 0 = unset)
        """
        return pulumi.get(self, "set_dampening_unreachability_half_life")

    @set_dampening_unreachability_half_life.setter
    def set_dampening_unreachability_half_life(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_dampening_unreachability_half_life", value)

    @property
    @pulumi.getter(name="setExtcommunityRts")
    def set_extcommunity_rts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetExtcommunityRtArgs']]]]:
        """
        Route Target extended community. The structure of `set_extcommunity_rt` block is documented below.
        """
        return pulumi.get(self, "set_extcommunity_rts")

    @set_extcommunity_rts.setter
    def set_extcommunity_rts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetExtcommunityRtArgs']]]]):
        pulumi.set(self, "set_extcommunity_rts", value)

    @property
    @pulumi.getter(name="setExtcommunitySoos")
    def set_extcommunity_soos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetExtcommunitySooArgs']]]]:
        """
        Site-of-Origin extended community. The structure of `set_extcommunity_soo` block is documented below.
        """
        return pulumi.get(self, "set_extcommunity_soos")

    @set_extcommunity_soos.setter
    def set_extcommunity_soos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RouterRouteMapRuleSetExtcommunitySooArgs']]]]):
        pulumi.set(self, "set_extcommunity_soos", value)

    @property
    @pulumi.getter(name="setFlags")
    def set_flags(self) -> Optional[pulumi.Input[int]]:
        """
        BGP flags value (0 - 65535)
        """
        return pulumi.get(self, "set_flags")

    @set_flags.setter
    def set_flags(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_flags", value)

    @property
    @pulumi.getter(name="setIp6Nexthop")
    def set_ip6_nexthop(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 global address of next hop.
        """
        return pulumi.get(self, "set_ip6_nexthop")

    @set_ip6_nexthop.setter
    def set_ip6_nexthop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_ip6_nexthop", value)

    @property
    @pulumi.getter(name="setIp6NexthopLocal")
    def set_ip6_nexthop_local(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 local address of next hop.
        """
        return pulumi.get(self, "set_ip6_nexthop_local")

    @set_ip6_nexthop_local.setter
    def set_ip6_nexthop_local(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_ip6_nexthop_local", value)

    @property
    @pulumi.getter(name="setIpNexthop")
    def set_ip_nexthop(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of next hop.
        """
        return pulumi.get(self, "set_ip_nexthop")

    @set_ip_nexthop.setter
    def set_ip_nexthop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_ip_nexthop", value)

    @property
    @pulumi.getter(name="setLocalPreference")
    def set_local_preference(self) -> Optional[pulumi.Input[int]]:
        """
        BGP local preference path attribute.
        """
        return pulumi.get(self, "set_local_preference")

    @set_local_preference.setter
    def set_local_preference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_local_preference", value)

    @property
    @pulumi.getter(name="setMetric")
    def set_metric(self) -> Optional[pulumi.Input[int]]:
        """
        Metric value.
        """
        return pulumi.get(self, "set_metric")

    @set_metric.setter
    def set_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_metric", value)

    @property
    @pulumi.getter(name="setMetricType")
    def set_metric_type(self) -> Optional[pulumi.Input[str]]:
        """
        Metric type.
        """
        return pulumi.get(self, "set_metric_type")

    @set_metric_type.setter
    def set_metric_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_metric_type", value)

    @property
    @pulumi.getter(name="setOrigin")
    def set_origin(self) -> Optional[pulumi.Input[str]]:
        """
        BGP origin code. Valid values: `none`, `egp`, `igp`, `incomplete`.
        """
        return pulumi.get(self, "set_origin")

    @set_origin.setter
    def set_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_origin", value)

    @property
    @pulumi.getter(name="setOriginatorId")
    def set_originator_id(self) -> Optional[pulumi.Input[str]]:
        """
        BGP originator ID attribute.
        """
        return pulumi.get(self, "set_originator_id")

    @set_originator_id.setter
    def set_originator_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_originator_id", value)

    @property
    @pulumi.getter(name="setRouteTag")
    def set_route_tag(self) -> Optional[pulumi.Input[int]]:
        """
        Route tag for routing table.
        """
        return pulumi.get(self, "set_route_tag")

    @set_route_tag.setter
    def set_route_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_route_tag", value)

    @property
    @pulumi.getter(name="setTag")
    def set_tag(self) -> Optional[pulumi.Input[int]]:
        """
        Tag value.
        """
        return pulumi.get(self, "set_tag")

    @set_tag.setter
    def set_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_tag", value)

    @property
    @pulumi.getter(name="setWeight")
    def set_weight(self) -> Optional[pulumi.Input[int]]:
        """
        BGP weight for routing table.
        """
        return pulumi.get(self, "set_weight")

    @set_weight.setter
    def set_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_weight", value)


@pulumi.input_type
class RouterRouteMapRuleSetAspathArgs:
    def __init__(__self__, *,
                 as_: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] as_: AS number (0 - 42949672). NOTE: Use quotes for repeating numbers, e.g.: "1 1 2"
        """
        if as_ is not None:
            pulumi.set(__self__, "as_", as_)

    @property
    @pulumi.getter(name="as")
    def as_(self) -> Optional[pulumi.Input[str]]:
        """
        AS number (0 - 42949672). NOTE: Use quotes for repeating numbers, e.g.: "1 1 2"
        """
        return pulumi.get(self, "as_")

    @as_.setter
    def as_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "as_", value)


@pulumi.input_type
class RouterRouteMapRuleSetCommunityArgs:
    def __init__(__self__, *,
                 community: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] community: AA:NN
        """
        if community is not None:
            pulumi.set(__self__, "community", community)

    @property
    @pulumi.getter
    def community(self) -> Optional[pulumi.Input[str]]:
        """
        AA:NN
        """
        return pulumi.get(self, "community")

    @community.setter
    def community(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community", value)


@pulumi.input_type
class RouterRouteMapRuleSetExtcommunityRtArgs:
    def __init__(__self__, *,
                 community: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] community: AA:NN
        """
        if community is not None:
            pulumi.set(__self__, "community", community)

    @property
    @pulumi.getter
    def community(self) -> Optional[pulumi.Input[str]]:
        """
        AA:NN
        """
        return pulumi.get(self, "community")

    @community.setter
    def community(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community", value)


@pulumi.input_type
class RouterRouteMapRuleSetExtcommunitySooArgs:
    def __init__(__self__, *,
                 community: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] community: AA:NN
        """
        if community is not None:
            pulumi.set(__self__, "community", community)

    @property
    @pulumi.getter
    def community(self) -> Optional[pulumi.Input[str]]:
        """
        AA:NN
        """
        return pulumi.get(self, "community")

    @community.setter
    def community(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community", value)


@pulumi.input_type
class RouterStatic6SdwanZoneArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: SD-WAN zone name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        SD-WAN zone name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RouterStaticSdwanZoneArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: SD-WAN zone name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        SD-WAN zone name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RouterbgpNeighborConditionalAdvertise6Args:
    def __init__(__self__, *,
                 advertise_routemap: Optional[pulumi.Input[str]] = None,
                 condition_routemap: Optional[pulumi.Input[str]] = None,
                 condition_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] advertise_routemap: Name of advertising route map.
        :param pulumi.Input[str] condition_routemap: Name of condition route map.
        :param pulumi.Input[str] condition_type: Type of condition. Valid values: `exist`, `non-exist`.
        """
        if advertise_routemap is not None:
            pulumi.set(__self__, "advertise_routemap", advertise_routemap)
        if condition_routemap is not None:
            pulumi.set(__self__, "condition_routemap", condition_routemap)
        if condition_type is not None:
            pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="advertiseRoutemap")
    def advertise_routemap(self) -> Optional[pulumi.Input[str]]:
        """
        Name of advertising route map.
        """
        return pulumi.get(self, "advertise_routemap")

    @advertise_routemap.setter
    def advertise_routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advertise_routemap", value)

    @property
    @pulumi.getter(name="conditionRoutemap")
    def condition_routemap(self) -> Optional[pulumi.Input[str]]:
        """
        Name of condition route map.
        """
        return pulumi.get(self, "condition_routemap")

    @condition_routemap.setter
    def condition_routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition_routemap", value)

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of condition. Valid values: `exist`, `non-exist`.
        """
        return pulumi.get(self, "condition_type")

    @condition_type.setter
    def condition_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition_type", value)


@pulumi.input_type
class RouterbgpNeighborConditionalAdvertiseArgs:
    def __init__(__self__, *,
                 advertise_routemap: Optional[pulumi.Input[str]] = None,
                 condition_routemap: Optional[pulumi.Input[str]] = None,
                 condition_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] advertise_routemap: Name of advertising route map.
        :param pulumi.Input[str] condition_routemap: Name of condition route map.
        :param pulumi.Input[str] condition_type: Type of condition. Valid values: `exist`, `non-exist`.
        """
        if advertise_routemap is not None:
            pulumi.set(__self__, "advertise_routemap", advertise_routemap)
        if condition_routemap is not None:
            pulumi.set(__self__, "condition_routemap", condition_routemap)
        if condition_type is not None:
            pulumi.set(__self__, "condition_type", condition_type)

    @property
    @pulumi.getter(name="advertiseRoutemap")
    def advertise_routemap(self) -> Optional[pulumi.Input[str]]:
        """
        Name of advertising route map.
        """
        return pulumi.get(self, "advertise_routemap")

    @advertise_routemap.setter
    def advertise_routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advertise_routemap", value)

    @property
    @pulumi.getter(name="conditionRoutemap")
    def condition_routemap(self) -> Optional[pulumi.Input[str]]:
        """
        Name of condition route map.
        """
        return pulumi.get(self, "condition_routemap")

    @condition_routemap.setter
    def condition_routemap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition_routemap", value)

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of condition. Valid values: `exist`, `non-exist`.
        """
        return pulumi.get(self, "condition_type")

    @condition_type.setter
    def condition_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition_type", value)


@pulumi.input_type
class Routerospf6Ospf6InterfaceIpsecKeyArgs:
    def __init__(__self__, *,
                 auth_key: Optional[pulumi.Input[str]] = None,
                 enc_key: Optional[pulumi.Input[str]] = None,
                 spi: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] auth_key: Authentication key.
        :param pulumi.Input[str] enc_key: Encryption key.
        :param pulumi.Input[int] spi: Security Parameters Index.
        """
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if enc_key is not None:
            pulumi.set(__self__, "enc_key", enc_key)
        if spi is not None:
            pulumi.set(__self__, "spi", spi)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication key.
        """
        return pulumi.get(self, "auth_key")

    @auth_key.setter
    def auth_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_key", value)

    @property
    @pulumi.getter(name="encKey")
    def enc_key(self) -> Optional[pulumi.Input[str]]:
        """
        Encryption key.
        """
        return pulumi.get(self, "enc_key")

    @enc_key.setter
    def enc_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enc_key", value)

    @property
    @pulumi.getter
    def spi(self) -> Optional[pulumi.Input[int]]:
        """
        Security Parameters Index.
        """
        return pulumi.get(self, "spi")

    @spi.setter
    def spi(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spi", value)


@pulumi.input_type
class Routerospf6Ospf6InterfaceNeighborArgs:
    def __init__(__self__, *,
                 cost: Optional[pulumi.Input[int]] = None,
                 ip6: Optional[pulumi.Input[str]] = None,
                 poll_interval: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] cost: Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        :param pulumi.Input[str] ip6: IPv6 link local address of the neighbor.
        :param pulumi.Input[int] poll_interval: Poll interval time in seconds.
        :param pulumi.Input[int] priority: priority
        """
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)
        if poll_interval is not None:
            pulumi.set(__self__, "poll_interval", poll_interval)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        """
        Cost of the interface, value range from 0 to 65535, 0 means auto-cost.
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter
    def ip6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 link local address of the neighbor.
        """
        return pulumi.get(self, "ip6")

    @ip6.setter
    def ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6", value)

    @property
    @pulumi.getter(name="pollInterval")
    def poll_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Poll interval time in seconds.
        """
        return pulumi.get(self, "poll_interval")

    @poll_interval.setter
    def poll_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "poll_interval", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        priority
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class RouterospfOspfInterfaceMd5KeyArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 key_string: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Key ID (1 - 255).
        :param pulumi.Input[str] key_string: Password for the key.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key_string is not None:
            pulumi.set(__self__, "key_string", key_string)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Key ID (1 - 255).
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="keyString")
    def key_string(self) -> Optional[pulumi.Input[str]]:
        """
        Password for the key.
        """
        return pulumi.get(self, "key_string")

    @key_string.setter
    def key_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_string", value)


@pulumi.input_type
class SctpFilterProfilePpidFilterArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ppid: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] action: Action taken when PPID is matched. Valid values: `pass`, `reset`, `replace`.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[int] ppid: Payload protocol identifier.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ppid is not None:
            pulumi.set(__self__, "ppid", ppid)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action taken when PPID is matched. Valid values: `pass`, `reset`, `replace`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ppid(self) -> Optional[pulumi.Input[int]]:
        """
        Payload protocol identifier.
        """
        return pulumi.get(self, "ppid")

    @ppid.setter
    def ppid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ppid", value)


@pulumi.input_type
class SpamfilterBwlEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 email_pattern: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip4_subnet: Optional[pulumi.Input[str]] = None,
                 ip6_subnet: Optional[pulumi.Input[str]] = None,
                 pattern_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Reject, mark as spam or good email. Valid values: `reject`, `spam`, `clear`.
        :param pulumi.Input[str] addr_type: IP address type. Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] email_pattern: Email address pattern.
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[str] ip4_subnet: IPv4 network address/subnet mask bits.
        :param pulumi.Input[str] ip6_subnet: IPv6 network address/subnet mask bits.
        :param pulumi.Input[str] pattern_type: Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
        :param pulumi.Input[str] status: Enable/disable status. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] type: Entry type. Valid values: `ip`, `email`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if email_pattern is not None:
            pulumi.set(__self__, "email_pattern", email_pattern)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip4_subnet is not None:
            pulumi.set(__self__, "ip4_subnet", ip4_subnet)
        if ip6_subnet is not None:
            pulumi.set(__self__, "ip6_subnet", ip6_subnet)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Reject, mark as spam or good email. Valid values: `reject`, `spam`, `clear`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        IP address type. Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter(name="emailPattern")
    def email_pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Email address pattern.
        """
        return pulumi.get(self, "email_pattern")

    @email_pattern.setter
    def email_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_pattern", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ip4Subnet")
    def ip4_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 network address/subnet mask bits.
        """
        return pulumi.get(self, "ip4_subnet")

    @ip4_subnet.setter
    def ip4_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip4_subnet", value)

    @property
    @pulumi.getter(name="ip6Subnet")
    def ip6_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 network address/subnet mask bits.
        """
        return pulumi.get(self, "ip6_subnet")

    @ip6_subnet.setter
    def ip6_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_subnet", value)

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[pulumi.Input[str]]:
        """
        Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
        """
        return pulumi.get(self, "pattern_type")

    @pattern_type.setter
    def pattern_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Entry type. Valid values: `ip`, `email`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SpamfilterBwordEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 language: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 pattern_type: Optional[pulumi.Input[str]] = None,
                 score: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 where: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Mark spam or good. Valid values: `spam`, `clear`.
        :param pulumi.Input[int] id: Banned word entry ID.
        :param pulumi.Input[str] language: Language for the banned word. Valid values: `western`, `simch`, `trach`, `japanese`, `korean`, `french`, `thai`, `spanish`.
        :param pulumi.Input[str] pattern: Pattern for the banned word.
        :param pulumi.Input[str] pattern_type: Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
        :param pulumi.Input[int] score: Score value.
        :param pulumi.Input[str] status: Enable/disable status. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] where: Component of the email to be scanned. Valid values: `subject`, `body`, `all`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if score is not None:
            pulumi.set(__self__, "score", score)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if where is not None:
            pulumi.set(__self__, "where", where)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Mark spam or good. Valid values: `spam`, `clear`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Banned word entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[str]]:
        """
        Language for the banned word. Valid values: `western`, `simch`, `trach`, `japanese`, `korean`, `french`, `thai`, `spanish`.
        """
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Pattern for the banned word.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[pulumi.Input[str]]:
        """
        Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
        """
        return pulumi.get(self, "pattern_type")

    @pattern_type.setter
    def pattern_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_type", value)

    @property
    @pulumi.getter
    def score(self) -> Optional[pulumi.Input[int]]:
        """
        Score value.
        """
        return pulumi.get(self, "score")

    @score.setter
    def score(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "score", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def where(self) -> Optional[pulumi.Input[str]]:
        """
        Component of the email to be scanned. Valid values: `subject`, `body`, `all`.
        """
        return pulumi.get(self, "where")

    @where.setter
    def where(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "where", value)


@pulumi.input_type
class SpamfilterDnsblEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Reject connection or mark as spam email. Valid values: `reject`, `spam`.
        :param pulumi.Input[int] id: DNSBL/ORBL entry ID.
        :param pulumi.Input[str] server: DNSBL or ORBL server name.
        :param pulumi.Input[str] status: Enable/disable status. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Reject connection or mark as spam email. Valid values: `reject`, `spam`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        DNSBL/ORBL entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        DNSBL or ORBL server name.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SpamfilterIptrustEntryArgs:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip4_subnet: Optional[pulumi.Input[str]] = None,
                 ip6_subnet: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] addr_type: Type of address. Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[int] id: Trusted IP entry ID.
        :param pulumi.Input[str] ip4_subnet: IPv4 network address or network address/subnet mask bits.
        :param pulumi.Input[str] ip6_subnet: IPv6 network address/subnet mask bits.
        :param pulumi.Input[str] status: Enable/disable status. Valid values: `enable`, `disable`.
        """
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip4_subnet is not None:
            pulumi.set(__self__, "ip4_subnet", ip4_subnet)
        if ip6_subnet is not None:
            pulumi.set(__self__, "ip6_subnet", ip6_subnet)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of address. Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Trusted IP entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ip4Subnet")
    def ip4_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 network address or network address/subnet mask bits.
        """
        return pulumi.get(self, "ip4_subnet")

    @ip4_subnet.setter
    def ip4_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip4_subnet", value)

    @property
    @pulumi.getter(name="ip6Subnet")
    def ip6_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 network address/subnet mask bits.
        """
        return pulumi.get(self, "ip6_subnet")

    @ip6_subnet.setter
    def ip6_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_subnet", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SpamfilterMheaderEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 fieldbody: Optional[pulumi.Input[str]] = None,
                 fieldname: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 pattern_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Mark spam or good. Valid values: `spam`, `clear`.
        :param pulumi.Input[str] fieldbody: Pattern for the header field body.
        :param pulumi.Input[str] fieldname: Pattern for header field name.
        :param pulumi.Input[int] id: Mime header entry ID.
        :param pulumi.Input[str] pattern_type: Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
        :param pulumi.Input[str] status: Enable/disable status. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if fieldbody is not None:
            pulumi.set(__self__, "fieldbody", fieldbody)
        if fieldname is not None:
            pulumi.set(__self__, "fieldname", fieldname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Mark spam or good. Valid values: `spam`, `clear`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def fieldbody(self) -> Optional[pulumi.Input[str]]:
        """
        Pattern for the header field body.
        """
        return pulumi.get(self, "fieldbody")

    @fieldbody.setter
    def fieldbody(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fieldbody", value)

    @property
    @pulumi.getter
    def fieldname(self) -> Optional[pulumi.Input[str]]:
        """
        Pattern for header field name.
        """
        return pulumi.get(self, "fieldname")

    @fieldname.setter
    def fieldname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fieldname", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Mime header entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[pulumi.Input[str]]:
        """
        Wildcard pattern or regular expression. Valid values: `wildcard`, `regexp`.
        """
        return pulumi.get(self, "pattern_type")

    @pattern_type.setter
    def pattern_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SpamfilterProfileGmailArgs:
    def __init__(__self__, *,
                 log: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        """
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)


@pulumi.input_type
class SpamfilterProfileImapArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 tag_msg: Optional[pulumi.Input[str]] = None,
                 tag_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action for spam email. Valid values: `pass`, `discard`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tag_msg: Subject text or header added to spam email.
        :param pulumi.Input[str] tag_type: Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if tag_msg is not None:
            pulumi.set(__self__, "tag_msg", tag_msg)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action for spam email. Valid values: `pass`, `discard`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="tagMsg")
    def tag_msg(self) -> Optional[pulumi.Input[str]]:
        """
        Subject text or header added to spam email.
        """
        return pulumi.get(self, "tag_msg")

    @tag_msg.setter
    def tag_msg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_msg", value)

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[pulumi.Input[str]]:
        """
        Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
        """
        return pulumi.get(self, "tag_type")

    @tag_type.setter
    def tag_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_type", value)


@pulumi.input_type
class SpamfilterProfileMapiArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action for spam email. Valid values: `pass`, `discard`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action for spam email. Valid values: `pass`, `discard`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)


@pulumi.input_type
class SpamfilterProfileMsnHotmailArgs:
    def __init__(__self__, *,
                 log: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        """
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)


@pulumi.input_type
class SpamfilterProfilePop3Args:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 tag_msg: Optional[pulumi.Input[str]] = None,
                 tag_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action for spam email. Valid values: `pass`, `discard`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tag_msg: Subject text or header added to spam email.
        :param pulumi.Input[str] tag_type: Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if tag_msg is not None:
            pulumi.set(__self__, "tag_msg", tag_msg)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action for spam email. Valid values: `pass`, `discard`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="tagMsg")
    def tag_msg(self) -> Optional[pulumi.Input[str]]:
        """
        Subject text or header added to spam email.
        """
        return pulumi.get(self, "tag_msg")

    @tag_msg.setter
    def tag_msg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_msg", value)

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[pulumi.Input[str]]:
        """
        Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
        """
        return pulumi.get(self, "tag_type")

    @tag_type.setter
    def tag_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_type", value)


@pulumi.input_type
class SpamfilterProfileSmtpArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 hdrip: Optional[pulumi.Input[str]] = None,
                 local_override: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 tag_msg: Optional[pulumi.Input[str]] = None,
                 tag_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action for spam email. Valid values: `pass`, `discard`.
        :param pulumi.Input[str] hdrip: Enable/disable SMTP email header IP checks for spamfsip, spamrbl and spambwl filters. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] local_override: Enable/disable local filter to override SMTP remote check result. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tag_msg: Subject text or header added to spam email.
        :param pulumi.Input[str] tag_type: Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if hdrip is not None:
            pulumi.set(__self__, "hdrip", hdrip)
        if local_override is not None:
            pulumi.set(__self__, "local_override", local_override)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if tag_msg is not None:
            pulumi.set(__self__, "tag_msg", tag_msg)
        if tag_type is not None:
            pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action for spam email. Valid values: `pass`, `discard`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def hdrip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SMTP email header IP checks for spamfsip, spamrbl and spambwl filters. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "hdrip")

    @hdrip.setter
    def hdrip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hdrip", value)

    @property
    @pulumi.getter(name="localOverride")
    def local_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable local filter to override SMTP remote check result. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "local_override")

    @local_override.setter
    def local_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_override", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="tagMsg")
    def tag_msg(self) -> Optional[pulumi.Input[str]]:
        """
        Subject text or header added to spam email.
        """
        return pulumi.get(self, "tag_msg")

    @tag_msg.setter
    def tag_msg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_msg", value)

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> Optional[pulumi.Input[str]]:
        """
        Tag subject or header for spam email. Valid values: `subject`, `header`, `spaminfo`.
        """
        return pulumi.get(self, "tag_type")

    @tag_type.setter
    def tag_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_type", value)


@pulumi.input_type
class SpamfilterProfileYahooMailArgs:
    def __init__(__self__, *,
                 log: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        """
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)


@pulumi.input_type
class SshFilterProfileFileFilterArgs:
    def __init__(__self__, *,
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input['SshFilterProfileFileFilterEntryArgs']]]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 scan_archive_contents: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SshFilterProfileFileFilterEntryArgs']]] entries: File filter entries. The structure of `entries` block is documented below.
        :param pulumi.Input[str] log: Enable/disable file filter logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] scan_archive_contents: Enable/disable file filter archive contents scan. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable file filter. Valid values: `enable`, `disable`.
        """
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if scan_archive_contents is not None:
            pulumi.set(__self__, "scan_archive_contents", scan_archive_contents)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SshFilterProfileFileFilterEntryArgs']]]]:
        """
        File filter entries. The structure of `entries` block is documented below.
        """
        return pulumi.get(self, "entries")

    @entries.setter
    def entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SshFilterProfileFileFilterEntryArgs']]]]):
        pulumi.set(self, "entries", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable file filter logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="scanArchiveContents")
    def scan_archive_contents(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable file filter archive contents scan. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_archive_contents")

    @scan_archive_contents.setter
    def scan_archive_contents(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_archive_contents", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable file filter. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SshFilterProfileFileFilterEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input['SshFilterProfileFileFilterEntryFileTypeArgs']]]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 password_protected: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action taken for matched file. Valid values: `log`, `block`.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] direction: Match files transmitted in the session's originating or reply direction. Valid values: `incoming`, `outgoing`, `any`.
        :param pulumi.Input[Sequence[pulumi.Input['SshFilterProfileFileFilterEntryFileTypeArgs']]] file_types: Select file type. The structure of `file_type` block is documented below.
        :param pulumi.Input[str] filter: Add a file filter.
        :param pulumi.Input[str] password_protected: Match password-protected files. Valid values: `yes`, `any`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if password_protected is not None:
            pulumi.set(__self__, "password_protected", password_protected)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action taken for matched file. Valid values: `log`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        """
        Match files transmitted in the session's originating or reply direction. Valid values: `incoming`, `outgoing`, `any`.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SshFilterProfileFileFilterEntryFileTypeArgs']]]]:
        """
        Select file type. The structure of `file_type` block is documented below.
        """
        return pulumi.get(self, "file_types")

    @file_types.setter
    def file_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SshFilterProfileFileFilterEntryFileTypeArgs']]]]):
        pulumi.set(self, "file_types", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Add a file filter.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="passwordProtected")
    def password_protected(self) -> Optional[pulumi.Input[str]]:
        """
        Match password-protected files. Valid values: `yes`, `any`.
        """
        return pulumi.get(self, "password_protected")

    @password_protected.setter
    def password_protected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_protected", value)


@pulumi.input_type
class SshFilterProfileFileFilterEntryFileTypeArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: File type name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        File type name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SshFilterProfileShellCommandArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 alert: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action taken for matched file. Valid values: `log`, `block`.
        :param pulumi.Input[str] alert: Enable/disable alert. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] id: Id.
        :param pulumi.Input[str] log: Enable/disable file filter logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pattern: SSH shell command pattern.
        :param pulumi.Input[str] severity: Log severity. Valid values: `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] type: Matching type. Valid values: `simple`, `regex`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if alert is not None:
            pulumi.set(__self__, "alert", alert)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action taken for matched file. Valid values: `log`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def alert(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable alert. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "alert")

    @alert.setter
    def alert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable file filter logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        SSH shell command pattern.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Log severity. Valid values: `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Matching type. Valid values: `simple`, `regex`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SwitchControllerAutoConfigCustomSwitchBindingArgs:
    def __init__(__self__, *,
                 policy: Optional[pulumi.Input[str]] = None,
                 switch_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] policy: Custom auto-config policy.
        :param pulumi.Input[str] switch_id: Switch name.
        """
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if switch_id is not None:
            pulumi.set(__self__, "switch_id", switch_id)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        """
        Custom auto-config policy.
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter(name="switchId")
    def switch_id(self) -> Optional[pulumi.Input[str]]:
        """
        Switch name.
        """
        return pulumi.get(self, "switch_id")

    @switch_id.setter
    def switch_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_id", value)


@pulumi.input_type
class SwitchControllerDynamicPortPolicyPolicyArgs:
    def __init__(__self__, *,
                 bounce_port_link: Optional[pulumi.Input[str]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 family: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 hw_vendor: Optional[pulumi.Input[str]] = None,
                 interface_tags: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerDynamicPortPolicyPolicyInterfaceTagArgs']]]] = None,
                 lldp_profile: Optional[pulumi.Input[str]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 n8021x: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 qos_policy: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vlan_policy: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bounce_port_link: Enable/disable bouncing (administratively bring the link down, up) of a switch port where this policy is applied. Helps to clear and reassign VLAN from lldp-profile. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] category: Category of Dynamic port policy. Valid values: `device`, `interface-tag`.
        :param pulumi.Input[str] description: Description for the policy.
        :param pulumi.Input[str] family: Policy matching family.
        :param pulumi.Input[str] host: Policy matching host.
        :param pulumi.Input[str] hw_vendor: Match policy based on hardware vendor.
        :param pulumi.Input[Sequence[pulumi.Input['SwitchControllerDynamicPortPolicyPolicyInterfaceTagArgs']]] interface_tags: Policy matching the FortiSwitch interface object tags. The structure of `interface_tags` block is documented below.
        :param pulumi.Input[str] lldp_profile: LLDP profile to be applied when using this policy.
        :param pulumi.Input[str] mac: Policy matching MAC address.
        :param pulumi.Input[str] n8021x: 802.1x security policy to be applied when using this policy.
        :param pulumi.Input[str] name: Policy name.
        :param pulumi.Input[str] qos_policy: QoS policy to be applied when using this policy.
        :param pulumi.Input[str] status: Enable/disable policy. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] type: Policy matching type.
        :param pulumi.Input[str] vlan_policy: VLAN policy to be applied when using this policy.
        """
        if bounce_port_link is not None:
            pulumi.set(__self__, "bounce_port_link", bounce_port_link)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if hw_vendor is not None:
            pulumi.set(__self__, "hw_vendor", hw_vendor)
        if interface_tags is not None:
            pulumi.set(__self__, "interface_tags", interface_tags)
        if lldp_profile is not None:
            pulumi.set(__self__, "lldp_profile", lldp_profile)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if n8021x is not None:
            pulumi.set(__self__, "n8021x", n8021x)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if qos_policy is not None:
            pulumi.set(__self__, "qos_policy", qos_policy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vlan_policy is not None:
            pulumi.set(__self__, "vlan_policy", vlan_policy)

    @property
    @pulumi.getter(name="bouncePortLink")
    def bounce_port_link(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable bouncing (administratively bring the link down, up) of a switch port where this policy is applied. Helps to clear and reassign VLAN from lldp-profile. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "bounce_port_link")

    @bounce_port_link.setter
    def bounce_port_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bounce_port_link", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Category of Dynamic port policy. Valid values: `device`, `interface-tag`.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for the policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def family(self) -> Optional[pulumi.Input[str]]:
        """
        Policy matching family.
        """
        return pulumi.get(self, "family")

    @family.setter
    def family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "family", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Policy matching host.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="hwVendor")
    def hw_vendor(self) -> Optional[pulumi.Input[str]]:
        """
        Match policy based on hardware vendor.
        """
        return pulumi.get(self, "hw_vendor")

    @hw_vendor.setter
    def hw_vendor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hw_vendor", value)

    @property
    @pulumi.getter(name="interfaceTags")
    def interface_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerDynamicPortPolicyPolicyInterfaceTagArgs']]]]:
        """
        Policy matching the FortiSwitch interface object tags. The structure of `interface_tags` block is documented below.
        """
        return pulumi.get(self, "interface_tags")

    @interface_tags.setter
    def interface_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerDynamicPortPolicyPolicyInterfaceTagArgs']]]]):
        pulumi.set(self, "interface_tags", value)

    @property
    @pulumi.getter(name="lldpProfile")
    def lldp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        LLDP profile to be applied when using this policy.
        """
        return pulumi.get(self, "lldp_profile")

    @lldp_profile.setter
    def lldp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp_profile", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        """
        Policy matching MAC address.
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def n8021x(self) -> Optional[pulumi.Input[str]]:
        """
        802.1x security policy to be applied when using this policy.
        """
        return pulumi.get(self, "n8021x")

    @n8021x.setter
    def n8021x(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n8021x", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="qosPolicy")
    def qos_policy(self) -> Optional[pulumi.Input[str]]:
        """
        QoS policy to be applied when using this policy.
        """
        return pulumi.get(self, "qos_policy")

    @qos_policy.setter
    def qos_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qos_policy", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Policy matching type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vlanPolicy")
    def vlan_policy(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN policy to be applied when using this policy.
        """
        return pulumi.get(self, "vlan_policy")

    @vlan_policy.setter
    def vlan_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_policy", value)


@pulumi.input_type
class SwitchControllerDynamicPortPolicyPolicyInterfaceTagArgs:
    def __init__(__self__, *,
                 tag_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] tag_name: FortiSwitch port tag name.
        """
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        FortiSwitch port tag name.
        """
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)


@pulumi.input_type
class SwitchControllerFlowTrackingAggregateArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Aggregate id.
        :param pulumi.Input[str] ip: IP address to group all matching traffic sessions to a flow.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Aggregate id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address to group all matching traffic sessions to a flow.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class SwitchControllerFortilinkSettingsNacPortsArgs:
    def __init__(__self__, *,
                 bounce_nac_port: Optional[pulumi.Input[str]] = None,
                 lan_segment: Optional[pulumi.Input[str]] = None,
                 member_change: Optional[pulumi.Input[int]] = None,
                 nac_lan_interface: Optional[pulumi.Input[str]] = None,
                 nac_segment_vlans: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerFortilinkSettingsNacPortsNacSegmentVlanArgs']]]] = None,
                 onboarding_vlan: Optional[pulumi.Input[str]] = None,
                 parent_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bounce_nac_port: Enable/disable bouncing (administratively bring the link down, up) of a switch port when NAC mode is configured on the port. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] lan_segment: Enable/disable LAN segment feature on the FortiLink interface. Valid values: `enabled`, `disabled`.
        :param pulumi.Input[int] member_change: Member change flag.
        :param pulumi.Input[str] nac_lan_interface: Configure NAC LAN interface.
        :param pulumi.Input[Sequence[pulumi.Input['SwitchControllerFortilinkSettingsNacPortsNacSegmentVlanArgs']]] nac_segment_vlans: Configure NAC segment VLANs. The structure of `nac_segment_vlans` block is documented below.
        :param pulumi.Input[str] onboarding_vlan: Default NAC Onboarding VLAN when NAC devices are discovered.
        :param pulumi.Input[str] parent_key: Parent key name.
        """
        if bounce_nac_port is not None:
            pulumi.set(__self__, "bounce_nac_port", bounce_nac_port)
        if lan_segment is not None:
            pulumi.set(__self__, "lan_segment", lan_segment)
        if member_change is not None:
            pulumi.set(__self__, "member_change", member_change)
        if nac_lan_interface is not None:
            pulumi.set(__self__, "nac_lan_interface", nac_lan_interface)
        if nac_segment_vlans is not None:
            pulumi.set(__self__, "nac_segment_vlans", nac_segment_vlans)
        if onboarding_vlan is not None:
            pulumi.set(__self__, "onboarding_vlan", onboarding_vlan)
        if parent_key is not None:
            pulumi.set(__self__, "parent_key", parent_key)

    @property
    @pulumi.getter(name="bounceNacPort")
    def bounce_nac_port(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable bouncing (administratively bring the link down, up) of a switch port when NAC mode is configured on the port. Helps to re-initiate the DHCP process for a device. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "bounce_nac_port")

    @bounce_nac_port.setter
    def bounce_nac_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bounce_nac_port", value)

    @property
    @pulumi.getter(name="lanSegment")
    def lan_segment(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable LAN segment feature on the FortiLink interface. Valid values: `enabled`, `disabled`.
        """
        return pulumi.get(self, "lan_segment")

    @lan_segment.setter
    def lan_segment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lan_segment", value)

    @property
    @pulumi.getter(name="memberChange")
    def member_change(self) -> Optional[pulumi.Input[int]]:
        """
        Member change flag.
        """
        return pulumi.get(self, "member_change")

    @member_change.setter
    def member_change(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "member_change", value)

    @property
    @pulumi.getter(name="nacLanInterface")
    def nac_lan_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Configure NAC LAN interface.
        """
        return pulumi.get(self, "nac_lan_interface")

    @nac_lan_interface.setter
    def nac_lan_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nac_lan_interface", value)

    @property
    @pulumi.getter(name="nacSegmentVlans")
    def nac_segment_vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerFortilinkSettingsNacPortsNacSegmentVlanArgs']]]]:
        """
        Configure NAC segment VLANs. The structure of `nac_segment_vlans` block is documented below.
        """
        return pulumi.get(self, "nac_segment_vlans")

    @nac_segment_vlans.setter
    def nac_segment_vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerFortilinkSettingsNacPortsNacSegmentVlanArgs']]]]):
        pulumi.set(self, "nac_segment_vlans", value)

    @property
    @pulumi.getter(name="onboardingVlan")
    def onboarding_vlan(self) -> Optional[pulumi.Input[str]]:
        """
        Default NAC Onboarding VLAN when NAC devices are discovered.
        """
        return pulumi.get(self, "onboarding_vlan")

    @onboarding_vlan.setter
    def onboarding_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "onboarding_vlan", value)

    @property
    @pulumi.getter(name="parentKey")
    def parent_key(self) -> Optional[pulumi.Input[str]]:
        """
        Parent key name.
        """
        return pulumi.get(self, "parent_key")

    @parent_key.setter
    def parent_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_key", value)


@pulumi.input_type
class SwitchControllerFortilinkSettingsNacPortsNacSegmentVlanArgs:
    def __init__(__self__, *,
                 vlan_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] vlan_name: VLAN interface name.
        """
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN interface name.
        """
        return pulumi.get(self, "vlan_name")

    @vlan_name.setter
    def vlan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_name", value)


@pulumi.input_type
class SwitchControllerGlobalCustomCommandArgs:
    def __init__(__self__, *,
                 command_entry: Optional[pulumi.Input[str]] = None,
                 command_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] command_entry: List of FortiSwitch commands.
        :param pulumi.Input[str] command_name: Name of custom command to push to all FortiSwitches in VDOM.
        """
        if command_entry is not None:
            pulumi.set(__self__, "command_entry", command_entry)
        if command_name is not None:
            pulumi.set(__self__, "command_name", command_name)

    @property
    @pulumi.getter(name="commandEntry")
    def command_entry(self) -> Optional[pulumi.Input[str]]:
        """
        List of FortiSwitch commands.
        """
        return pulumi.get(self, "command_entry")

    @command_entry.setter
    def command_entry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_entry", value)

    @property
    @pulumi.getter(name="commandName")
    def command_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of custom command to push to all FortiSwitches in VDOM.
        """
        return pulumi.get(self, "command_name")

    @command_name.setter
    def command_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_name", value)


@pulumi.input_type
class SwitchControllerGlobalDisableDiscoveryArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Managed device ID.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Managed device ID.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SwitchControllerLldpProfileCustomTlvArgs:
    def __init__(__self__, *,
                 information_string: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 oui: Optional[pulumi.Input[str]] = None,
                 subtype: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] information_string: Organizationally defined information string (0 - 507 hexadecimal bytes).
        :param pulumi.Input[str] name: TLV name (not sent).
        :param pulumi.Input[str] oui: Organizationally unique identifier (OUI), a 3-byte hexadecimal number, for this TLV.
        :param pulumi.Input[int] subtype: Organizationally defined subtype (0 - 255).
        """
        if information_string is not None:
            pulumi.set(__self__, "information_string", information_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if oui is not None:
            pulumi.set(__self__, "oui", oui)
        if subtype is not None:
            pulumi.set(__self__, "subtype", subtype)

    @property
    @pulumi.getter(name="informationString")
    def information_string(self) -> Optional[pulumi.Input[str]]:
        """
        Organizationally defined information string (0 - 507 hexadecimal bytes).
        """
        return pulumi.get(self, "information_string")

    @information_string.setter
    def information_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "information_string", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        TLV name (not sent).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def oui(self) -> Optional[pulumi.Input[str]]:
        """
        Organizationally unique identifier (OUI), a 3-byte hexadecimal number, for this TLV.
        """
        return pulumi.get(self, "oui")

    @oui.setter
    def oui(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oui", value)

    @property
    @pulumi.getter
    def subtype(self) -> Optional[pulumi.Input[int]]:
        """
        Organizationally defined subtype (0 - 255).
        """
        return pulumi.get(self, "subtype")

    @subtype.setter
    def subtype(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "subtype", value)


@pulumi.input_type
class SwitchControllerLldpProfileMedLocationServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sys_location_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: TLV name (not sent).
        :param pulumi.Input[str] status: Enable or disable this TLV. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] sys_location_id: Location service ID.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sys_location_id is not None:
            pulumi.set(__self__, "sys_location_id", sys_location_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        TLV name (not sent).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable or disable this TLV. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="sysLocationId")
    def sys_location_id(self) -> Optional[pulumi.Input[str]]:
        """
        Location service ID.
        """
        return pulumi.get(self, "sys_location_id")

    @sys_location_id.setter
    def sys_location_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sys_location_id", value)


@pulumi.input_type
class SwitchControllerLldpProfileMedNetworkPolicyArgs:
    def __init__(__self__, *,
                 assign_vlan: Optional[pulumi.Input[str]] = None,
                 dscp: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None,
                 vlan_intf: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] assign_vlan: Enable/disable VLAN assignment when this profile is applied on managed FortiSwitch port. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] dscp: Advertised Differentiated Services Code Point (DSCP) value, a packet header value indicating the level of service requested for traffic, such as high priority or best effort delivery.
        :param pulumi.Input[str] name: TLV name (not sent).
        :param pulumi.Input[int] priority: Advertised Layer 2 priority (0 - 7; from lowest to highest priority).
        :param pulumi.Input[str] status: Enable or disable this TLV. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] vlan: ID of VLAN to advertise, if configured on port (0 - 4094, 0 = priority tag).
        :param pulumi.Input[str] vlan_intf: VLAN interface to advertise; if configured on port.
        """
        if assign_vlan is not None:
            pulumi.set(__self__, "assign_vlan", assign_vlan)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)
        if vlan_intf is not None:
            pulumi.set(__self__, "vlan_intf", vlan_intf)

    @property
    @pulumi.getter(name="assignVlan")
    def assign_vlan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VLAN assignment when this profile is applied on managed FortiSwitch port. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "assign_vlan")

    @assign_vlan.setter
    def assign_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assign_vlan", value)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Advertised Differentiated Services Code Point (DSCP) value, a packet header value indicating the level of service requested for traffic, such as high priority or best effort delivery.
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        TLV name (not sent).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Advertised Layer 2 priority (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable or disable this TLV. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        ID of VLAN to advertise, if configured on port (0 - 4094, 0 = priority tag).
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)

    @property
    @pulumi.getter(name="vlanIntf")
    def vlan_intf(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN interface to advertise; if configured on port.
        """
        return pulumi.get(self, "vlan_intf")

    @vlan_intf.setter
    def vlan_intf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_intf", value)


@pulumi.input_type
class SwitchControllerLocationAddressCivicArgs:
    def __init__(__self__, *,
                 additional: Optional[pulumi.Input[str]] = None,
                 additional_code: Optional[pulumi.Input[str]] = None,
                 block: Optional[pulumi.Input[str]] = None,
                 branch_road: Optional[pulumi.Input[str]] = None,
                 building: Optional[pulumi.Input[str]] = None,
                 city: Optional[pulumi.Input[str]] = None,
                 city_division: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 country_subdivision: Optional[pulumi.Input[str]] = None,
                 county: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 floor: Optional[pulumi.Input[str]] = None,
                 landmark: Optional[pulumi.Input[str]] = None,
                 language: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 number: Optional[pulumi.Input[str]] = None,
                 number_suffix: Optional[pulumi.Input[str]] = None,
                 parent_key: Optional[pulumi.Input[str]] = None,
                 place_type: Optional[pulumi.Input[str]] = None,
                 post_office_box: Optional[pulumi.Input[str]] = None,
                 postal_community: Optional[pulumi.Input[str]] = None,
                 primary_road: Optional[pulumi.Input[str]] = None,
                 road_section: Optional[pulumi.Input[str]] = None,
                 room: Optional[pulumi.Input[str]] = None,
                 script: Optional[pulumi.Input[str]] = None,
                 seat: Optional[pulumi.Input[str]] = None,
                 street: Optional[pulumi.Input[str]] = None,
                 street_name_post_mod: Optional[pulumi.Input[str]] = None,
                 street_name_pre_mod: Optional[pulumi.Input[str]] = None,
                 street_suffix: Optional[pulumi.Input[str]] = None,
                 sub_branch_road: Optional[pulumi.Input[str]] = None,
                 trailing_str_suffix: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None,
                 zip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] additional: Location additional details.
        :param pulumi.Input[str] additional_code: Location additional code details.
        :param pulumi.Input[str] block: Location block details.
        :param pulumi.Input[str] branch_road: Location branch road details.
        :param pulumi.Input[str] building: Location building details.
        :param pulumi.Input[str] city: Location city details.
        :param pulumi.Input[str] city_division: Location city division details.
        :param pulumi.Input[str] country: The two-letter ISO 3166 country code in capital ASCII letters eg. US, CA, DK, DE.
        :param pulumi.Input[str] country_subdivision: National subdivisions (state, canton, region, province, or prefecture).
        :param pulumi.Input[str] county: County, parish, gun (JP), or district (IN).
        :param pulumi.Input[str] direction: Leading street direction.
        :param pulumi.Input[str] floor: Floor.
        :param pulumi.Input[str] landmark: Landmark or vanity address.
        :param pulumi.Input[str] language: Language.
        :param pulumi.Input[str] name: Name (residence and office occupant).
        :param pulumi.Input[str] number: House number.
        :param pulumi.Input[str] number_suffix: House number suffix.
        :param pulumi.Input[str] parent_key: Parent key name.
        :param pulumi.Input[str] place_type: Placetype.
        :param pulumi.Input[str] post_office_box: Post office box (P.O. box).
        :param pulumi.Input[str] postal_community: Postal community name.
        :param pulumi.Input[str] primary_road: Primary road name.
        :param pulumi.Input[str] road_section: Road section.
        :param pulumi.Input[str] room: Room number.
        :param pulumi.Input[str] script: Script used to present the address information.
        :param pulumi.Input[str] seat: Seat number.
        :param pulumi.Input[str] street: Street.
        :param pulumi.Input[str] street_name_post_mod: Street name post modifier.
        :param pulumi.Input[str] street_name_pre_mod: Street name pre modifier.
        :param pulumi.Input[str] street_suffix: Street suffix.
        :param pulumi.Input[str] sub_branch_road: Sub branch road name.
        :param pulumi.Input[str] trailing_str_suffix: Trailing street suffix.
        :param pulumi.Input[str] unit: Unit (apartment, suite).
        :param pulumi.Input[str] zip: Postal/zip code.
        """
        if additional is not None:
            pulumi.set(__self__, "additional", additional)
        if additional_code is not None:
            pulumi.set(__self__, "additional_code", additional_code)
        if block is not None:
            pulumi.set(__self__, "block", block)
        if branch_road is not None:
            pulumi.set(__self__, "branch_road", branch_road)
        if building is not None:
            pulumi.set(__self__, "building", building)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if city_division is not None:
            pulumi.set(__self__, "city_division", city_division)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if country_subdivision is not None:
            pulumi.set(__self__, "country_subdivision", country_subdivision)
        if county is not None:
            pulumi.set(__self__, "county", county)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if floor is not None:
            pulumi.set(__self__, "floor", floor)
        if landmark is not None:
            pulumi.set(__self__, "landmark", landmark)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if number is not None:
            pulumi.set(__self__, "number", number)
        if number_suffix is not None:
            pulumi.set(__self__, "number_suffix", number_suffix)
        if parent_key is not None:
            pulumi.set(__self__, "parent_key", parent_key)
        if place_type is not None:
            pulumi.set(__self__, "place_type", place_type)
        if post_office_box is not None:
            pulumi.set(__self__, "post_office_box", post_office_box)
        if postal_community is not None:
            pulumi.set(__self__, "postal_community", postal_community)
        if primary_road is not None:
            pulumi.set(__self__, "primary_road", primary_road)
        if road_section is not None:
            pulumi.set(__self__, "road_section", road_section)
        if room is not None:
            pulumi.set(__self__, "room", room)
        if script is not None:
            pulumi.set(__self__, "script", script)
        if seat is not None:
            pulumi.set(__self__, "seat", seat)
        if street is not None:
            pulumi.set(__self__, "street", street)
        if street_name_post_mod is not None:
            pulumi.set(__self__, "street_name_post_mod", street_name_post_mod)
        if street_name_pre_mod is not None:
            pulumi.set(__self__, "street_name_pre_mod", street_name_pre_mod)
        if street_suffix is not None:
            pulumi.set(__self__, "street_suffix", street_suffix)
        if sub_branch_road is not None:
            pulumi.set(__self__, "sub_branch_road", sub_branch_road)
        if trailing_str_suffix is not None:
            pulumi.set(__self__, "trailing_str_suffix", trailing_str_suffix)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if zip is not None:
            pulumi.set(__self__, "zip", zip)

    @property
    @pulumi.getter
    def additional(self) -> Optional[pulumi.Input[str]]:
        """
        Location additional details.
        """
        return pulumi.get(self, "additional")

    @additional.setter
    def additional(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional", value)

    @property
    @pulumi.getter(name="additionalCode")
    def additional_code(self) -> Optional[pulumi.Input[str]]:
        """
        Location additional code details.
        """
        return pulumi.get(self, "additional_code")

    @additional_code.setter
    def additional_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_code", value)

    @property
    @pulumi.getter
    def block(self) -> Optional[pulumi.Input[str]]:
        """
        Location block details.
        """
        return pulumi.get(self, "block")

    @block.setter
    def block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block", value)

    @property
    @pulumi.getter(name="branchRoad")
    def branch_road(self) -> Optional[pulumi.Input[str]]:
        """
        Location branch road details.
        """
        return pulumi.get(self, "branch_road")

    @branch_road.setter
    def branch_road(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch_road", value)

    @property
    @pulumi.getter
    def building(self) -> Optional[pulumi.Input[str]]:
        """
        Location building details.
        """
        return pulumi.get(self, "building")

    @building.setter
    def building(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "building", value)

    @property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[str]]:
        """
        Location city details.
        """
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="cityDivision")
    def city_division(self) -> Optional[pulumi.Input[str]]:
        """
        Location city division details.
        """
        return pulumi.get(self, "city_division")

    @city_division.setter
    def city_division(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "city_division", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        """
        The two-letter ISO 3166 country code in capital ASCII letters eg. US, CA, DK, DE.
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="countrySubdivision")
    def country_subdivision(self) -> Optional[pulumi.Input[str]]:
        """
        National subdivisions (state, canton, region, province, or prefecture).
        """
        return pulumi.get(self, "country_subdivision")

    @country_subdivision.setter
    def country_subdivision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country_subdivision", value)

    @property
    @pulumi.getter
    def county(self) -> Optional[pulumi.Input[str]]:
        """
        County, parish, gun (JP), or district (IN).
        """
        return pulumi.get(self, "county")

    @county.setter
    def county(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "county", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        """
        Leading street direction.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def floor(self) -> Optional[pulumi.Input[str]]:
        """
        Floor.
        """
        return pulumi.get(self, "floor")

    @floor.setter
    def floor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "floor", value)

    @property
    @pulumi.getter
    def landmark(self) -> Optional[pulumi.Input[str]]:
        """
        Landmark or vanity address.
        """
        return pulumi.get(self, "landmark")

    @landmark.setter
    def landmark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "landmark", value)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[str]]:
        """
        Language.
        """
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name (residence and office occupant).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def number(self) -> Optional[pulumi.Input[str]]:
        """
        House number.
        """
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "number", value)

    @property
    @pulumi.getter(name="numberSuffix")
    def number_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        House number suffix.
        """
        return pulumi.get(self, "number_suffix")

    @number_suffix.setter
    def number_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "number_suffix", value)

    @property
    @pulumi.getter(name="parentKey")
    def parent_key(self) -> Optional[pulumi.Input[str]]:
        """
        Parent key name.
        """
        return pulumi.get(self, "parent_key")

    @parent_key.setter
    def parent_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_key", value)

    @property
    @pulumi.getter(name="placeType")
    def place_type(self) -> Optional[pulumi.Input[str]]:
        """
        Placetype.
        """
        return pulumi.get(self, "place_type")

    @place_type.setter
    def place_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "place_type", value)

    @property
    @pulumi.getter(name="postOfficeBox")
    def post_office_box(self) -> Optional[pulumi.Input[str]]:
        """
        Post office box (P.O. box).
        """
        return pulumi.get(self, "post_office_box")

    @post_office_box.setter
    def post_office_box(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_office_box", value)

    @property
    @pulumi.getter(name="postalCommunity")
    def postal_community(self) -> Optional[pulumi.Input[str]]:
        """
        Postal community name.
        """
        return pulumi.get(self, "postal_community")

    @postal_community.setter
    def postal_community(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "postal_community", value)

    @property
    @pulumi.getter(name="primaryRoad")
    def primary_road(self) -> Optional[pulumi.Input[str]]:
        """
        Primary road name.
        """
        return pulumi.get(self, "primary_road")

    @primary_road.setter
    def primary_road(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_road", value)

    @property
    @pulumi.getter(name="roadSection")
    def road_section(self) -> Optional[pulumi.Input[str]]:
        """
        Road section.
        """
        return pulumi.get(self, "road_section")

    @road_section.setter
    def road_section(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "road_section", value)

    @property
    @pulumi.getter
    def room(self) -> Optional[pulumi.Input[str]]:
        """
        Room number.
        """
        return pulumi.get(self, "room")

    @room.setter
    def room(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "room", value)

    @property
    @pulumi.getter
    def script(self) -> Optional[pulumi.Input[str]]:
        """
        Script used to present the address information.
        """
        return pulumi.get(self, "script")

    @script.setter
    def script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script", value)

    @property
    @pulumi.getter
    def seat(self) -> Optional[pulumi.Input[str]]:
        """
        Seat number.
        """
        return pulumi.get(self, "seat")

    @seat.setter
    def seat(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "seat", value)

    @property
    @pulumi.getter
    def street(self) -> Optional[pulumi.Input[str]]:
        """
        Street.
        """
        return pulumi.get(self, "street")

    @street.setter
    def street(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "street", value)

    @property
    @pulumi.getter(name="streetNamePostMod")
    def street_name_post_mod(self) -> Optional[pulumi.Input[str]]:
        """
        Street name post modifier.
        """
        return pulumi.get(self, "street_name_post_mod")

    @street_name_post_mod.setter
    def street_name_post_mod(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "street_name_post_mod", value)

    @property
    @pulumi.getter(name="streetNamePreMod")
    def street_name_pre_mod(self) -> Optional[pulumi.Input[str]]:
        """
        Street name pre modifier.
        """
        return pulumi.get(self, "street_name_pre_mod")

    @street_name_pre_mod.setter
    def street_name_pre_mod(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "street_name_pre_mod", value)

    @property
    @pulumi.getter(name="streetSuffix")
    def street_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        Street suffix.
        """
        return pulumi.get(self, "street_suffix")

    @street_suffix.setter
    def street_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "street_suffix", value)

    @property
    @pulumi.getter(name="subBranchRoad")
    def sub_branch_road(self) -> Optional[pulumi.Input[str]]:
        """
        Sub branch road name.
        """
        return pulumi.get(self, "sub_branch_road")

    @sub_branch_road.setter
    def sub_branch_road(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_branch_road", value)

    @property
    @pulumi.getter(name="trailingStrSuffix")
    def trailing_str_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        Trailing street suffix.
        """
        return pulumi.get(self, "trailing_str_suffix")

    @trailing_str_suffix.setter
    def trailing_str_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trailing_str_suffix", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        Unit (apartment, suite).
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def zip(self) -> Optional[pulumi.Input[str]]:
        """
        Postal/zip code.
        """
        return pulumi.get(self, "zip")

    @zip.setter
    def zip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zip", value)


@pulumi.input_type
class SwitchControllerLocationCoordinatesArgs:
    def __init__(__self__, *,
                 altitude: Optional[pulumi.Input[str]] = None,
                 altitude_unit: Optional[pulumi.Input[str]] = None,
                 datum: Optional[pulumi.Input[str]] = None,
                 latitude: Optional[pulumi.Input[str]] = None,
                 longitude: Optional[pulumi.Input[str]] = None,
                 parent_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] altitude: +/- Floating point no. eg. 117.47.
        :param pulumi.Input[str] altitude_unit: m ( meters), f ( floors). Valid values: `m`, `f`.
        :param pulumi.Input[str] datum: WGS84, NAD83, NAD83/MLLW. Valid values: `WGS84`, `NAD83`, `NAD83/MLLW`.
        :param pulumi.Input[str] latitude: Floating point start with ( +/- )  or end with ( N or S ) eg. +/-16.67 or 16.67N.
        :param pulumi.Input[str] longitude: Floating point start with ( +/- )  or end with ( E or W ) eg. +/-26.789 or 26.789E.
        :param pulumi.Input[str] parent_key: Parent key name.
        """
        if altitude is not None:
            pulumi.set(__self__, "altitude", altitude)
        if altitude_unit is not None:
            pulumi.set(__self__, "altitude_unit", altitude_unit)
        if datum is not None:
            pulumi.set(__self__, "datum", datum)
        if latitude is not None:
            pulumi.set(__self__, "latitude", latitude)
        if longitude is not None:
            pulumi.set(__self__, "longitude", longitude)
        if parent_key is not None:
            pulumi.set(__self__, "parent_key", parent_key)

    @property
    @pulumi.getter
    def altitude(self) -> Optional[pulumi.Input[str]]:
        """
        +/- Floating point no. eg. 117.47.
        """
        return pulumi.get(self, "altitude")

    @altitude.setter
    def altitude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "altitude", value)

    @property
    @pulumi.getter(name="altitudeUnit")
    def altitude_unit(self) -> Optional[pulumi.Input[str]]:
        """
        m ( meters), f ( floors). Valid values: `m`, `f`.
        """
        return pulumi.get(self, "altitude_unit")

    @altitude_unit.setter
    def altitude_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "altitude_unit", value)

    @property
    @pulumi.getter
    def datum(self) -> Optional[pulumi.Input[str]]:
        """
        WGS84, NAD83, NAD83/MLLW. Valid values: `WGS84`, `NAD83`, `NAD83/MLLW`.
        """
        return pulumi.get(self, "datum")

    @datum.setter
    def datum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datum", value)

    @property
    @pulumi.getter
    def latitude(self) -> Optional[pulumi.Input[str]]:
        """
        Floating point start with ( +/- )  or end with ( N or S ) eg. +/-16.67 or 16.67N.
        """
        return pulumi.get(self, "latitude")

    @latitude.setter
    def latitude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latitude", value)

    @property
    @pulumi.getter
    def longitude(self) -> Optional[pulumi.Input[str]]:
        """
        Floating point start with ( +/- )  or end with ( E or W ) eg. +/-26.789 or 26.789E.
        """
        return pulumi.get(self, "longitude")

    @longitude.setter
    def longitude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "longitude", value)

    @property
    @pulumi.getter(name="parentKey")
    def parent_key(self) -> Optional[pulumi.Input[str]]:
        """
        Parent key name.
        """
        return pulumi.get(self, "parent_key")

    @parent_key.setter
    def parent_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_key", value)


@pulumi.input_type
class SwitchControllerLocationElinNumberArgs:
    def __init__(__self__, *,
                 elin_num: Optional[pulumi.Input[str]] = None,
                 parent_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] elin_num: Configure ELIN callback number.
        :param pulumi.Input[str] parent_key: Parent key name.
        """
        if elin_num is not None:
            pulumi.set(__self__, "elin_num", elin_num)
        if parent_key is not None:
            pulumi.set(__self__, "parent_key", parent_key)

    @property
    @pulumi.getter(name="elinNum")
    def elin_num(self) -> Optional[pulumi.Input[str]]:
        """
        Configure ELIN callback number.
        """
        return pulumi.get(self, "elin_num")

    @elin_num.setter
    def elin_num(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elin_num", value)

    @property
    @pulumi.getter(name="parentKey")
    def parent_key(self) -> Optional[pulumi.Input[str]]:
        """
        Parent key name.
        """
        return pulumi.get(self, "parent_key")

    @parent_key.setter
    def parent_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_key", value)


@pulumi.input_type
class SwitchControllerManagedSwitchCustomCommandArgs:
    def __init__(__self__, *,
                 command_entry: Optional[pulumi.Input[str]] = None,
                 command_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] command_entry: List of FortiSwitch commands.
        :param pulumi.Input[str] command_name: Names of commands to be pushed to this FortiSwitch device, as configured under config switch-controller custom-command.
        """
        if command_entry is not None:
            pulumi.set(__self__, "command_entry", command_entry)
        if command_name is not None:
            pulumi.set(__self__, "command_name", command_name)

    @property
    @pulumi.getter(name="commandEntry")
    def command_entry(self) -> Optional[pulumi.Input[str]]:
        """
        List of FortiSwitch commands.
        """
        return pulumi.get(self, "command_entry")

    @command_entry.setter
    def command_entry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_entry", value)

    @property
    @pulumi.getter(name="commandName")
    def command_name(self) -> Optional[pulumi.Input[str]]:
        """
        Names of commands to be pushed to this FortiSwitch device, as configured under config switch-controller custom-command.
        """
        return pulumi.get(self, "command_name")

    @command_name.setter
    def command_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_name", value)


@pulumi.input_type
class SwitchControllerManagedSwitchIgmpSnoopingArgs:
    def __init__(__self__, *,
                 aging_time: Optional[pulumi.Input[int]] = None,
                 flood_unknown_multicast: Optional[pulumi.Input[str]] = None,
                 local_override: Optional[pulumi.Input[str]] = None,
                 vlans: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchIgmpSnoopingVlanArgs']]]] = None):
        """
        :param pulumi.Input[int] aging_time: Maximum time to retain a multicast snooping entry for which no packets have been seen (15 - 3600 sec, default = 300).
        :param pulumi.Input[str] flood_unknown_multicast: Enable/disable unknown multicast flooding. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] local_override: Enable to override global 802.1X settings on individual FortiSwitches. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchIgmpSnoopingVlanArgs']]] vlans: Configure IGMP snooping VLAN. The structure of `vlans` block is documented below.
        """
        if aging_time is not None:
            pulumi.set(__self__, "aging_time", aging_time)
        if flood_unknown_multicast is not None:
            pulumi.set(__self__, "flood_unknown_multicast", flood_unknown_multicast)
        if local_override is not None:
            pulumi.set(__self__, "local_override", local_override)
        if vlans is not None:
            pulumi.set(__self__, "vlans", vlans)

    @property
    @pulumi.getter(name="agingTime")
    def aging_time(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum time to retain a multicast snooping entry for which no packets have been seen (15 - 3600 sec, default = 300).
        """
        return pulumi.get(self, "aging_time")

    @aging_time.setter
    def aging_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aging_time", value)

    @property
    @pulumi.getter(name="floodUnknownMulticast")
    def flood_unknown_multicast(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable unknown multicast flooding. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "flood_unknown_multicast")

    @flood_unknown_multicast.setter
    def flood_unknown_multicast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flood_unknown_multicast", value)

    @property
    @pulumi.getter(name="localOverride")
    def local_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override global 802.1X settings on individual FortiSwitches. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_override")

    @local_override.setter
    def local_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_override", value)

    @property
    @pulumi.getter
    def vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchIgmpSnoopingVlanArgs']]]]:
        """
        Configure IGMP snooping VLAN. The structure of `vlans` block is documented below.
        """
        return pulumi.get(self, "vlans")

    @vlans.setter
    def vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchIgmpSnoopingVlanArgs']]]]):
        pulumi.set(self, "vlans", value)


@pulumi.input_type
class SwitchControllerManagedSwitchIgmpSnoopingVlanArgs:
    def __init__(__self__, *,
                 proxy: Optional[pulumi.Input[str]] = None,
                 querier: Optional[pulumi.Input[str]] = None,
                 querier_addr: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 vlan_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] proxy: IGMP snooping proxy for the VLAN interface. Valid values: `disable`, `enable`, `global`.
        :param pulumi.Input[str] querier: Enable/disable IGMP snooping querier for the VLAN interface. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] querier_addr: IGMP snooping querier address.
        :param pulumi.Input[int] version: IGMP snooping querier version.
        :param pulumi.Input[str] vlan_name: List of FortiSwitch VLANs.
        """
        if proxy is not None:
            pulumi.set(__self__, "proxy", proxy)
        if querier is not None:
            pulumi.set(__self__, "querier", querier)
        if querier_addr is not None:
            pulumi.set(__self__, "querier_addr", querier_addr)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter
    def proxy(self) -> Optional[pulumi.Input[str]]:
        """
        IGMP snooping proxy for the VLAN interface. Valid values: `disable`, `enable`, `global`.
        """
        return pulumi.get(self, "proxy")

    @proxy.setter
    def proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy", value)

    @property
    @pulumi.getter
    def querier(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IGMP snooping querier for the VLAN interface. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "querier")

    @querier.setter
    def querier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "querier", value)

    @property
    @pulumi.getter(name="querierAddr")
    def querier_addr(self) -> Optional[pulumi.Input[str]]:
        """
        IGMP snooping querier address.
        """
        return pulumi.get(self, "querier_addr")

    @querier_addr.setter
    def querier_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "querier_addr", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        IGMP snooping querier version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[pulumi.Input[str]]:
        """
        List of FortiSwitch VLANs.
        """
        return pulumi.get(self, "vlan_name")

    @vlan_name.setter
    def vlan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_name", value)


@pulumi.input_type
class SwitchControllerManagedSwitchIpSourceGuardArgs:
    def __init__(__self__, *,
                 binding_entries: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchIpSourceGuardBindingEntryArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchIpSourceGuardBindingEntryArgs']]] binding_entries: IP and MAC address configuration. The structure of `binding_entry` block is documented below.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] port: Remote syslog server listening port.
        """
        if binding_entries is not None:
            pulumi.set(__self__, "binding_entries", binding_entries)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="bindingEntries")
    def binding_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchIpSourceGuardBindingEntryArgs']]]]:
        """
        IP and MAC address configuration. The structure of `binding_entry` block is documented below.
        """
        return pulumi.get(self, "binding_entries")

    @binding_entries.setter
    def binding_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchIpSourceGuardBindingEntryArgs']]]]):
        pulumi.set(self, "binding_entries", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Remote syslog server listening port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class SwitchControllerManagedSwitchIpSourceGuardBindingEntryArgs:
    def __init__(__self__, *,
                 entry_name: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 mac: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] entry_name: Configure binding pair.
        :param pulumi.Input[str] ip: IPv4 address of the SNMP manager (host).
        :param pulumi.Input[str] mac: MAC address.
        """
        if entry_name is not None:
            pulumi.set(__self__, "entry_name", entry_name)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)

    @property
    @pulumi.getter(name="entryName")
    def entry_name(self) -> Optional[pulumi.Input[str]]:
        """
        Configure binding pair.
        """
        return pulumi.get(self, "entry_name")

    @entry_name.setter
    def entry_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entry_name", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of the SNMP manager (host).
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address.
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)


@pulumi.input_type
class SwitchControllerManagedSwitchMirrorArgs:
    def __init__(__self__, *,
                 dst: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 src_egresses: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchMirrorSrcEgressArgs']]]] = None,
                 src_ingresses: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchMirrorSrcIngressArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 switching_packet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] dst: Destination port.
        :param pulumi.Input[str] name: Interface name.
        :param pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchMirrorSrcEgressArgs']]] src_egresses: Source egress interfaces. The structure of `src_egress` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchMirrorSrcIngressArgs']]] src_ingresses: Source ingress interfaces. The structure of `src_ingress` block is documented below.
        :param pulumi.Input[str] status: Active/inactive mirror configuration. Valid values: `active`, `inactive`.
        :param pulumi.Input[str] switching_packet: Enable/disable switching functionality when mirroring. Valid values: `enable`, `disable`.
        """
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if src_egresses is not None:
            pulumi.set(__self__, "src_egresses", src_egresses)
        if src_ingresses is not None:
            pulumi.set(__self__, "src_ingresses", src_ingresses)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if switching_packet is not None:
            pulumi.set(__self__, "switching_packet", switching_packet)

    @property
    @pulumi.getter
    def dst(self) -> Optional[pulumi.Input[str]]:
        """
        Destination port.
        """
        return pulumi.get(self, "dst")

    @dst.setter
    def dst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="srcEgresses")
    def src_egresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchMirrorSrcEgressArgs']]]]:
        """
        Source egress interfaces. The structure of `src_egress` block is documented below.
        """
        return pulumi.get(self, "src_egresses")

    @src_egresses.setter
    def src_egresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchMirrorSrcEgressArgs']]]]):
        pulumi.set(self, "src_egresses", value)

    @property
    @pulumi.getter(name="srcIngresses")
    def src_ingresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchMirrorSrcIngressArgs']]]]:
        """
        Source ingress interfaces. The structure of `src_ingress` block is documented below.
        """
        return pulumi.get(self, "src_ingresses")

    @src_ingresses.setter
    def src_ingresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchMirrorSrcIngressArgs']]]]):
        pulumi.set(self, "src_ingresses", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Active/inactive mirror configuration. Valid values: `active`, `inactive`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="switchingPacket")
    def switching_packet(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable switching functionality when mirroring. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "switching_packet")

    @switching_packet.setter
    def switching_packet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switching_packet", value)


@pulumi.input_type
class SwitchControllerManagedSwitchMirrorSrcEgressArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SwitchControllerManagedSwitchMirrorSrcIngressArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SwitchControllerManagedSwitchN8021xSettingsArgs:
    def __init__(__self__, *,
                 link_down_auth: Optional[pulumi.Input[str]] = None,
                 local_override: Optional[pulumi.Input[str]] = None,
                 max_reauth_attempt: Optional[pulumi.Input[int]] = None,
                 reauth_period: Optional[pulumi.Input[int]] = None,
                 tx_period: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] link_down_auth: Authentication state to set if a link is down. Valid values: `set-unauth`, `no-action`.
        :param pulumi.Input[str] local_override: Enable to override global 802.1X settings on individual FortiSwitches. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] max_reauth_attempt: Maximum number of authentication attempts (0 - 15, default = 3).
        :param pulumi.Input[int] reauth_period: Reauthentication time interval (1 - 1440 min, default = 60, 0 = disable).
        :param pulumi.Input[int] tx_period: 802.1X Tx period (seconds, default=30).
        """
        if link_down_auth is not None:
            pulumi.set(__self__, "link_down_auth", link_down_auth)
        if local_override is not None:
            pulumi.set(__self__, "local_override", local_override)
        if max_reauth_attempt is not None:
            pulumi.set(__self__, "max_reauth_attempt", max_reauth_attempt)
        if reauth_period is not None:
            pulumi.set(__self__, "reauth_period", reauth_period)
        if tx_period is not None:
            pulumi.set(__self__, "tx_period", tx_period)

    @property
    @pulumi.getter(name="linkDownAuth")
    def link_down_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication state to set if a link is down. Valid values: `set-unauth`, `no-action`.
        """
        return pulumi.get(self, "link_down_auth")

    @link_down_auth.setter
    def link_down_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_down_auth", value)

    @property
    @pulumi.getter(name="localOverride")
    def local_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override global 802.1X settings on individual FortiSwitches. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_override")

    @local_override.setter
    def local_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_override", value)

    @property
    @pulumi.getter(name="maxReauthAttempt")
    def max_reauth_attempt(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of authentication attempts (0 - 15, default = 3).
        """
        return pulumi.get(self, "max_reauth_attempt")

    @max_reauth_attempt.setter
    def max_reauth_attempt(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_reauth_attempt", value)

    @property
    @pulumi.getter(name="reauthPeriod")
    def reauth_period(self) -> Optional[pulumi.Input[int]]:
        """
        Reauthentication time interval (1 - 1440 min, default = 60, 0 = disable).
        """
        return pulumi.get(self, "reauth_period")

    @reauth_period.setter
    def reauth_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reauth_period", value)

    @property
    @pulumi.getter(name="txPeriod")
    def tx_period(self) -> Optional[pulumi.Input[int]]:
        """
        802.1X Tx period (seconds, default=30).
        """
        return pulumi.get(self, "tx_period")

    @tx_period.setter
    def tx_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tx_period", value)


@pulumi.input_type
class SwitchControllerManagedSwitchPortArgs:
    def __init__(__self__, *,
                 access_mode: Optional[pulumi.Input[str]] = None,
                 aggregator_mode: Optional[pulumi.Input[str]] = None,
                 allowed_vlans: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortAllowedVlanArgs']]]] = None,
                 allowed_vlans_all: Optional[pulumi.Input[str]] = None,
                 arp_inspection_trust: Optional[pulumi.Input[str]] = None,
                 bundle: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dhcp_snoop_option82_trust: Optional[pulumi.Input[str]] = None,
                 dhcp_snooping: Optional[pulumi.Input[str]] = None,
                 discard_mode: Optional[pulumi.Input[str]] = None,
                 edge_port: Optional[pulumi.Input[str]] = None,
                 export_tags: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortExportTagArgs']]]] = None,
                 export_to: Optional[pulumi.Input[str]] = None,
                 export_to_pool: Optional[pulumi.Input[str]] = None,
                 export_to_pool_flag: Optional[pulumi.Input[int]] = None,
                 fec_capable: Optional[pulumi.Input[int]] = None,
                 fec_state: Optional[pulumi.Input[str]] = None,
                 fgt_peer_device_name: Optional[pulumi.Input[str]] = None,
                 fgt_peer_port_name: Optional[pulumi.Input[str]] = None,
                 fiber_port: Optional[pulumi.Input[int]] = None,
                 flags: Optional[pulumi.Input[int]] = None,
                 flow_control: Optional[pulumi.Input[str]] = None,
                 fortilink_port: Optional[pulumi.Input[int]] = None,
                 igmp_snooping: Optional[pulumi.Input[str]] = None,
                 igmps_flood_reports: Optional[pulumi.Input[str]] = None,
                 igmps_flood_traffic: Optional[pulumi.Input[str]] = None,
                 interface_tags: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortInterfaceTagArgs']]]] = None,
                 ip_source_guard: Optional[pulumi.Input[str]] = None,
                 isl_local_trunk_name: Optional[pulumi.Input[str]] = None,
                 isl_peer_device_name: Optional[pulumi.Input[str]] = None,
                 isl_peer_port_name: Optional[pulumi.Input[str]] = None,
                 lacp_speed: Optional[pulumi.Input[str]] = None,
                 learning_limit: Optional[pulumi.Input[int]] = None,
                 lldp_profile: Optional[pulumi.Input[str]] = None,
                 lldp_status: Optional[pulumi.Input[str]] = None,
                 loop_guard: Optional[pulumi.Input[str]] = None,
                 loop_guard_timeout: Optional[pulumi.Input[int]] = None,
                 mac_addr: Optional[pulumi.Input[str]] = None,
                 matched_dpp_intf_tags: Optional[pulumi.Input[str]] = None,
                 matched_dpp_policy: Optional[pulumi.Input[str]] = None,
                 max_bundle: Optional[pulumi.Input[int]] = None,
                 mclag: Optional[pulumi.Input[str]] = None,
                 mclag_icl_port: Optional[pulumi.Input[int]] = None,
                 media_type: Optional[pulumi.Input[str]] = None,
                 member_withdrawal_behavior: Optional[pulumi.Input[str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortMemberArgs']]]] = None,
                 min_bundle: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 p2p_port: Optional[pulumi.Input[int]] = None,
                 packet_sample_rate: Optional[pulumi.Input[int]] = None,
                 packet_sampler: Optional[pulumi.Input[str]] = None,
                 pause_meter: Optional[pulumi.Input[int]] = None,
                 pause_meter_resume: Optional[pulumi.Input[str]] = None,
                 poe_capable: Optional[pulumi.Input[int]] = None,
                 poe_max_power: Optional[pulumi.Input[str]] = None,
                 poe_pre_standard_detection: Optional[pulumi.Input[str]] = None,
                 poe_standard: Optional[pulumi.Input[str]] = None,
                 poe_status: Optional[pulumi.Input[str]] = None,
                 port_name: Optional[pulumi.Input[str]] = None,
                 port_number: Optional[pulumi.Input[int]] = None,
                 port_owner: Optional[pulumi.Input[str]] = None,
                 port_policy: Optional[pulumi.Input[str]] = None,
                 port_prefix_type: Optional[pulumi.Input[int]] = None,
                 port_security_policy: Optional[pulumi.Input[str]] = None,
                 port_selection_criteria: Optional[pulumi.Input[str]] = None,
                 ptp_policy: Optional[pulumi.Input[str]] = None,
                 qos_policy: Optional[pulumi.Input[str]] = None,
                 rpvst_port: Optional[pulumi.Input[str]] = None,
                 sample_direction: Optional[pulumi.Input[str]] = None,
                 sflow_counter_interval: Optional[pulumi.Input[int]] = None,
                 sflow_sample_rate: Optional[pulumi.Input[int]] = None,
                 sflow_sampler: Optional[pulumi.Input[str]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 speed_mask: Optional[pulumi.Input[int]] = None,
                 stacking_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sticky_mac: Optional[pulumi.Input[str]] = None,
                 storm_control_policy: Optional[pulumi.Input[str]] = None,
                 stp_bpdu_guard: Optional[pulumi.Input[str]] = None,
                 stp_bpdu_guard_timeout: Optional[pulumi.Input[int]] = None,
                 stp_root_guard: Optional[pulumi.Input[str]] = None,
                 stp_state: Optional[pulumi.Input[str]] = None,
                 switch_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 untagged_vlans: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortUntaggedVlanArgs']]]] = None,
                 virtual_port: Optional[pulumi.Input[int]] = None,
                 vlan: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_mode: Access mode of the port.
        :param pulumi.Input[str] aggregator_mode: LACP member select mode. Valid values: `bandwidth`, `count`.
        :param pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortAllowedVlanArgs']]] allowed_vlans: Configure switch port tagged vlans The structure of `allowed_vlans` block is documented below.
        :param pulumi.Input[str] allowed_vlans_all: Enable/disable all defined vlans on this port. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] arp_inspection_trust: Trusted or untrusted dynamic ARP inspection. Valid values: `untrusted`, `trusted`.
        :param pulumi.Input[str] bundle: Enable/disable Link Aggregation Group (LAG) bundling for non-FortiLink interfaces. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] dhcp_snoop_option82_trust: Enable/disable allowance of DHCP with option-82 on untrusted interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dhcp_snooping: Trusted or untrusted DHCP-snooping interface. Valid values: `untrusted`, `trusted`.
        :param pulumi.Input[str] discard_mode: Configure discard mode for port. Valid values: `none`, `all-untagged`, `all-tagged`.
        :param pulumi.Input[str] edge_port: Enable/disable this interface as an edge port, bridging connections between workstations and/or computers. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortExportTagArgs']]] export_tags: Switch controller export tag name. The structure of `export_tags` block is documented below.
        :param pulumi.Input[str] export_to: Export managed-switch port to a tenant VDOM.
        :param pulumi.Input[str] export_to_pool: Switch controller export port to pool-list.
        :param pulumi.Input[int] export_to_pool_flag: Switch controller export port to pool-list.
        :param pulumi.Input[int] fec_capable: FEC capable.
        :param pulumi.Input[str] fec_state: State of forward error correction. Valid values: `disabled`, `cl74`, `cl91`.
        :param pulumi.Input[str] fgt_peer_device_name: FGT peer device name.
        :param pulumi.Input[str] fgt_peer_port_name: FGT peer port name.
        :param pulumi.Input[int] fiber_port: Fiber-port.
        :param pulumi.Input[int] flags: Port properties flags.
        :param pulumi.Input[str] flow_control: Flow control direction. Valid values: `disable`, `tx`, `rx`, `both`.
        :param pulumi.Input[int] fortilink_port: FortiLink uplink port.
        :param pulumi.Input[str] igmp_snooping: Set IGMP snooping mode for the physical port interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] igmps_flood_reports: Enable/disable flooding of IGMP reports to this interface when igmp-snooping enabled. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] igmps_flood_traffic: Enable/disable flooding of IGMP snooping traffic to this interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortInterfaceTagArgs']]] interface_tags: Tag(s) associated with the interface for various features including virtual port pool, dynamic port policy. The structure of `interface_tags` block is documented below.
        :param pulumi.Input[str] ip_source_guard: Enable/disable IP source guard. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] isl_local_trunk_name: ISL local trunk name.
        :param pulumi.Input[str] isl_peer_device_name: ISL peer device name.
        :param pulumi.Input[str] isl_peer_port_name: ISL peer port name.
        :param pulumi.Input[str] lacp_speed: end Link Aggregation Control Protocol (LACP) messages every 30 seconds (slow) or every second (fast). Valid values: `slow`, `fast`.
        :param pulumi.Input[int] learning_limit: Limit the number of dynamic MAC addresses on this Port (1 - 128, 0 = no limit, default).
        :param pulumi.Input[str] lldp_profile: LLDP port TLV profile.
        :param pulumi.Input[str] lldp_status: LLDP transmit and receive status. Valid values: `disable`, `rx-only`, `tx-only`, `tx-rx`.
        :param pulumi.Input[str] loop_guard: Enable/disable loop-guard on this interface, an STP optimization used to prevent network loops. Valid values: `enabled`, `disabled`.
        :param pulumi.Input[int] loop_guard_timeout: Loop-guard timeout (0 - 120 min, default = 45).
        :param pulumi.Input[str] mac_addr: Port/Trunk MAC.
        :param pulumi.Input[str] matched_dpp_intf_tags: Matched interface tags in the dynamic port policy.
        :param pulumi.Input[str] matched_dpp_policy: Matched child policy in the dynamic port policy.
        :param pulumi.Input[int] max_bundle: Maximum size of LAG bundle (1 - 24, default = 24)
        :param pulumi.Input[str] mclag: Enable/disable multi-chassis link aggregation (MCLAG). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] mclag_icl_port: MCLAG-ICL port.
        :param pulumi.Input[str] media_type: Media type.
        :param pulumi.Input[str] member_withdrawal_behavior: Port behavior after it withdraws because of loss of control packets. Valid values: `forward`, `block`.
        :param pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortMemberArgs']]] members: Aggregated LAG bundle interfaces. The structure of `members` block is documented below.
        :param pulumi.Input[int] min_bundle: Minimum size of LAG bundle (1 - 24, default = 1)
        :param pulumi.Input[str] mode: LACP mode: ignore and do not send control messages, or negotiate 802.3ad aggregation passively or actively. Valid values: `static`, `lacp-passive`, `lacp-active`.
        :param pulumi.Input[int] p2p_port: General peer to peer tunnel port.
        :param pulumi.Input[int] packet_sample_rate: Packet sampling rate (0 - 99999 p/sec).
        :param pulumi.Input[str] packet_sampler: Enable/disable packet sampling on this interface. Valid values: `enabled`, `disabled`.
        :param pulumi.Input[int] pause_meter: Configure ingress pause metering rate, in kbps (default = 0, disabled).
        :param pulumi.Input[str] pause_meter_resume: Resume threshold for resuming traffic on ingress port. Valid values: `75%`, `50%`, `25%`.
        :param pulumi.Input[int] poe_capable: PoE capable.
        :param pulumi.Input[str] poe_max_power: PoE maximum power.
        :param pulumi.Input[str] poe_pre_standard_detection: Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] poe_standard: PoE standard supported.
        :param pulumi.Input[str] poe_status: Enable/disable PoE status. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] port_name: Switch port name.
        :param pulumi.Input[int] port_number: Port number.
        :param pulumi.Input[str] port_owner: Switch port name.
        :param pulumi.Input[str] port_policy: Switch controller dynamic port policy from available options.
        :param pulumi.Input[int] port_prefix_type: Port prefix type.
        :param pulumi.Input[str] port_security_policy: Switch controller authentication policy to apply to this managed switch from available options.
        :param pulumi.Input[str] port_selection_criteria: Algorithm for aggregate port selection. Valid values: `src-mac`, `dst-mac`, `src-dst-mac`, `src-ip`, `dst-ip`, `src-dst-ip`.
        :param pulumi.Input[str] ptp_policy: PTP policy configuration.
        :param pulumi.Input[str] qos_policy: Switch controller QoS policy from available options.
        :param pulumi.Input[str] rpvst_port: Enable/disable inter-operability with rapid PVST on this interface. Valid values: `disabled`, `enabled`.
        :param pulumi.Input[str] sample_direction: sFlow sample direction. Valid values: `tx`, `rx`, `both`.
        :param pulumi.Input[int] sflow_counter_interval: sFlow sampler counter polling interval (1 - 255 sec).
        :param pulumi.Input[int] sflow_sample_rate: sFlow sampler sample rate (0 - 99999 p/sec).
        :param pulumi.Input[str] sflow_sampler: Enable/disable sFlow protocol on this interface. Valid values: `enabled`, `disabled`.
        :param pulumi.Input[str] speed: Switch port speed; default and available settings depend on hardware.
        :param pulumi.Input[int] speed_mask: Switch port speed mask.
        :param pulumi.Input[int] stacking_port: Stacking port.
        :param pulumi.Input[str] status: Active/inactive mirror configuration. Valid values: `active`, `inactive`.
        :param pulumi.Input[str] sticky_mac: Enable or disable sticky-mac on the interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] storm_control_policy: Switch controller storm control policy from available options.
        :param pulumi.Input[str] stp_bpdu_guard: Enable/disable STP BPDU guard on this interface. Valid values: `enabled`, `disabled`.
        :param pulumi.Input[int] stp_bpdu_guard_timeout: BPDU Guard disabling protection (0 - 120 min).
        :param pulumi.Input[str] stp_root_guard: Enable/disable STP root guard on this interface. Valid values: `enabled`, `disabled`.
        :param pulumi.Input[str] stp_state: Enable/disable Spanning Tree Protocol (STP) on this interface. Valid values: `enabled`, `disabled`.
        :param pulumi.Input[str] switch_id: Switch id.
        :param pulumi.Input[str] type: Type. Valid values: `static`, `sticky`.
        :param pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortUntaggedVlanArgs']]] untagged_vlans: Configure switch port untagged vlans The structure of `untagged_vlans` block is documented below.
        :param pulumi.Input[int] virtual_port: Virtualized switch port.
        :param pulumi.Input[str] vlan: Vlan.
        """
        if access_mode is not None:
            pulumi.set(__self__, "access_mode", access_mode)
        if aggregator_mode is not None:
            pulumi.set(__self__, "aggregator_mode", aggregator_mode)
        if allowed_vlans is not None:
            pulumi.set(__self__, "allowed_vlans", allowed_vlans)
        if allowed_vlans_all is not None:
            pulumi.set(__self__, "allowed_vlans_all", allowed_vlans_all)
        if arp_inspection_trust is not None:
            pulumi.set(__self__, "arp_inspection_trust", arp_inspection_trust)
        if bundle is not None:
            pulumi.set(__self__, "bundle", bundle)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dhcp_snoop_option82_trust is not None:
            pulumi.set(__self__, "dhcp_snoop_option82_trust", dhcp_snoop_option82_trust)
        if dhcp_snooping is not None:
            pulumi.set(__self__, "dhcp_snooping", dhcp_snooping)
        if discard_mode is not None:
            pulumi.set(__self__, "discard_mode", discard_mode)
        if edge_port is not None:
            pulumi.set(__self__, "edge_port", edge_port)
        if export_tags is not None:
            pulumi.set(__self__, "export_tags", export_tags)
        if export_to is not None:
            pulumi.set(__self__, "export_to", export_to)
        if export_to_pool is not None:
            pulumi.set(__self__, "export_to_pool", export_to_pool)
        if export_to_pool_flag is not None:
            pulumi.set(__self__, "export_to_pool_flag", export_to_pool_flag)
        if fec_capable is not None:
            pulumi.set(__self__, "fec_capable", fec_capable)
        if fec_state is not None:
            pulumi.set(__self__, "fec_state", fec_state)
        if fgt_peer_device_name is not None:
            pulumi.set(__self__, "fgt_peer_device_name", fgt_peer_device_name)
        if fgt_peer_port_name is not None:
            pulumi.set(__self__, "fgt_peer_port_name", fgt_peer_port_name)
        if fiber_port is not None:
            pulumi.set(__self__, "fiber_port", fiber_port)
        if flags is not None:
            pulumi.set(__self__, "flags", flags)
        if flow_control is not None:
            pulumi.set(__self__, "flow_control", flow_control)
        if fortilink_port is not None:
            pulumi.set(__self__, "fortilink_port", fortilink_port)
        if igmp_snooping is not None:
            pulumi.set(__self__, "igmp_snooping", igmp_snooping)
        if igmps_flood_reports is not None:
            pulumi.set(__self__, "igmps_flood_reports", igmps_flood_reports)
        if igmps_flood_traffic is not None:
            pulumi.set(__self__, "igmps_flood_traffic", igmps_flood_traffic)
        if interface_tags is not None:
            pulumi.set(__self__, "interface_tags", interface_tags)
        if ip_source_guard is not None:
            pulumi.set(__self__, "ip_source_guard", ip_source_guard)
        if isl_local_trunk_name is not None:
            pulumi.set(__self__, "isl_local_trunk_name", isl_local_trunk_name)
        if isl_peer_device_name is not None:
            pulumi.set(__self__, "isl_peer_device_name", isl_peer_device_name)
        if isl_peer_port_name is not None:
            pulumi.set(__self__, "isl_peer_port_name", isl_peer_port_name)
        if lacp_speed is not None:
            pulumi.set(__self__, "lacp_speed", lacp_speed)
        if learning_limit is not None:
            pulumi.set(__self__, "learning_limit", learning_limit)
        if lldp_profile is not None:
            pulumi.set(__self__, "lldp_profile", lldp_profile)
        if lldp_status is not None:
            pulumi.set(__self__, "lldp_status", lldp_status)
        if loop_guard is not None:
            pulumi.set(__self__, "loop_guard", loop_guard)
        if loop_guard_timeout is not None:
            pulumi.set(__self__, "loop_guard_timeout", loop_guard_timeout)
        if mac_addr is not None:
            pulumi.set(__self__, "mac_addr", mac_addr)
        if matched_dpp_intf_tags is not None:
            pulumi.set(__self__, "matched_dpp_intf_tags", matched_dpp_intf_tags)
        if matched_dpp_policy is not None:
            pulumi.set(__self__, "matched_dpp_policy", matched_dpp_policy)
        if max_bundle is not None:
            pulumi.set(__self__, "max_bundle", max_bundle)
        if mclag is not None:
            pulumi.set(__self__, "mclag", mclag)
        if mclag_icl_port is not None:
            pulumi.set(__self__, "mclag_icl_port", mclag_icl_port)
        if media_type is not None:
            pulumi.set(__self__, "media_type", media_type)
        if member_withdrawal_behavior is not None:
            pulumi.set(__self__, "member_withdrawal_behavior", member_withdrawal_behavior)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if min_bundle is not None:
            pulumi.set(__self__, "min_bundle", min_bundle)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if p2p_port is not None:
            pulumi.set(__self__, "p2p_port", p2p_port)
        if packet_sample_rate is not None:
            pulumi.set(__self__, "packet_sample_rate", packet_sample_rate)
        if packet_sampler is not None:
            pulumi.set(__self__, "packet_sampler", packet_sampler)
        if pause_meter is not None:
            pulumi.set(__self__, "pause_meter", pause_meter)
        if pause_meter_resume is not None:
            pulumi.set(__self__, "pause_meter_resume", pause_meter_resume)
        if poe_capable is not None:
            pulumi.set(__self__, "poe_capable", poe_capable)
        if poe_max_power is not None:
            pulumi.set(__self__, "poe_max_power", poe_max_power)
        if poe_pre_standard_detection is not None:
            pulumi.set(__self__, "poe_pre_standard_detection", poe_pre_standard_detection)
        if poe_standard is not None:
            pulumi.set(__self__, "poe_standard", poe_standard)
        if poe_status is not None:
            pulumi.set(__self__, "poe_status", poe_status)
        if port_name is not None:
            pulumi.set(__self__, "port_name", port_name)
        if port_number is not None:
            pulumi.set(__self__, "port_number", port_number)
        if port_owner is not None:
            pulumi.set(__self__, "port_owner", port_owner)
        if port_policy is not None:
            pulumi.set(__self__, "port_policy", port_policy)
        if port_prefix_type is not None:
            pulumi.set(__self__, "port_prefix_type", port_prefix_type)
        if port_security_policy is not None:
            pulumi.set(__self__, "port_security_policy", port_security_policy)
        if port_selection_criteria is not None:
            pulumi.set(__self__, "port_selection_criteria", port_selection_criteria)
        if ptp_policy is not None:
            pulumi.set(__self__, "ptp_policy", ptp_policy)
        if qos_policy is not None:
            pulumi.set(__self__, "qos_policy", qos_policy)
        if rpvst_port is not None:
            pulumi.set(__self__, "rpvst_port", rpvst_port)
        if sample_direction is not None:
            pulumi.set(__self__, "sample_direction", sample_direction)
        if sflow_counter_interval is not None:
            pulumi.set(__self__, "sflow_counter_interval", sflow_counter_interval)
        if sflow_sample_rate is not None:
            pulumi.set(__self__, "sflow_sample_rate", sflow_sample_rate)
        if sflow_sampler is not None:
            pulumi.set(__self__, "sflow_sampler", sflow_sampler)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if speed_mask is not None:
            pulumi.set(__self__, "speed_mask", speed_mask)
        if stacking_port is not None:
            pulumi.set(__self__, "stacking_port", stacking_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sticky_mac is not None:
            pulumi.set(__self__, "sticky_mac", sticky_mac)
        if storm_control_policy is not None:
            pulumi.set(__self__, "storm_control_policy", storm_control_policy)
        if stp_bpdu_guard is not None:
            pulumi.set(__self__, "stp_bpdu_guard", stp_bpdu_guard)
        if stp_bpdu_guard_timeout is not None:
            pulumi.set(__self__, "stp_bpdu_guard_timeout", stp_bpdu_guard_timeout)
        if stp_root_guard is not None:
            pulumi.set(__self__, "stp_root_guard", stp_root_guard)
        if stp_state is not None:
            pulumi.set(__self__, "stp_state", stp_state)
        if switch_id is not None:
            pulumi.set(__self__, "switch_id", switch_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if untagged_vlans is not None:
            pulumi.set(__self__, "untagged_vlans", untagged_vlans)
        if virtual_port is not None:
            pulumi.set(__self__, "virtual_port", virtual_port)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Access mode of the port.
        """
        return pulumi.get(self, "access_mode")

    @access_mode.setter
    def access_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_mode", value)

    @property
    @pulumi.getter(name="aggregatorMode")
    def aggregator_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LACP member select mode. Valid values: `bandwidth`, `count`.
        """
        return pulumi.get(self, "aggregator_mode")

    @aggregator_mode.setter
    def aggregator_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_mode", value)

    @property
    @pulumi.getter(name="allowedVlans")
    def allowed_vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortAllowedVlanArgs']]]]:
        """
        Configure switch port tagged vlans The structure of `allowed_vlans` block is documented below.
        """
        return pulumi.get(self, "allowed_vlans")

    @allowed_vlans.setter
    def allowed_vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortAllowedVlanArgs']]]]):
        pulumi.set(self, "allowed_vlans", value)

    @property
    @pulumi.getter(name="allowedVlansAll")
    def allowed_vlans_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable all defined vlans on this port. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "allowed_vlans_all")

    @allowed_vlans_all.setter
    def allowed_vlans_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowed_vlans_all", value)

    @property
    @pulumi.getter(name="arpInspectionTrust")
    def arp_inspection_trust(self) -> Optional[pulumi.Input[str]]:
        """
        Trusted or untrusted dynamic ARP inspection. Valid values: `untrusted`, `trusted`.
        """
        return pulumi.get(self, "arp_inspection_trust")

    @arp_inspection_trust.setter
    def arp_inspection_trust(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arp_inspection_trust", value)

    @property
    @pulumi.getter
    def bundle(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Link Aggregation Group (LAG) bundling for non-FortiLink interfaces. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bundle")

    @bundle.setter
    def bundle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bundle", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dhcpSnoopOption82Trust")
    def dhcp_snoop_option82_trust(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowance of DHCP with option-82 on untrusted interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp_snoop_option82_trust")

    @dhcp_snoop_option82_trust.setter
    def dhcp_snoop_option82_trust(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_snoop_option82_trust", value)

    @property
    @pulumi.getter(name="dhcpSnooping")
    def dhcp_snooping(self) -> Optional[pulumi.Input[str]]:
        """
        Trusted or untrusted DHCP-snooping interface. Valid values: `untrusted`, `trusted`.
        """
        return pulumi.get(self, "dhcp_snooping")

    @dhcp_snooping.setter
    def dhcp_snooping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_snooping", value)

    @property
    @pulumi.getter(name="discardMode")
    def discard_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure discard mode for port. Valid values: `none`, `all-untagged`, `all-tagged`.
        """
        return pulumi.get(self, "discard_mode")

    @discard_mode.setter
    def discard_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "discard_mode", value)

    @property
    @pulumi.getter(name="edgePort")
    def edge_port(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this interface as an edge port, bridging connections between workstations and/or computers. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "edge_port")

    @edge_port.setter
    def edge_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edge_port", value)

    @property
    @pulumi.getter(name="exportTags")
    def export_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortExportTagArgs']]]]:
        """
        Switch controller export tag name. The structure of `export_tags` block is documented below.
        """
        return pulumi.get(self, "export_tags")

    @export_tags.setter
    def export_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortExportTagArgs']]]]):
        pulumi.set(self, "export_tags", value)

    @property
    @pulumi.getter(name="exportTo")
    def export_to(self) -> Optional[pulumi.Input[str]]:
        """
        Export managed-switch port to a tenant VDOM.
        """
        return pulumi.get(self, "export_to")

    @export_to.setter
    def export_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "export_to", value)

    @property
    @pulumi.getter(name="exportToPool")
    def export_to_pool(self) -> Optional[pulumi.Input[str]]:
        """
        Switch controller export port to pool-list.
        """
        return pulumi.get(self, "export_to_pool")

    @export_to_pool.setter
    def export_to_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "export_to_pool", value)

    @property
    @pulumi.getter(name="exportToPoolFlag")
    def export_to_pool_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Switch controller export port to pool-list.
        """
        return pulumi.get(self, "export_to_pool_flag")

    @export_to_pool_flag.setter
    def export_to_pool_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "export_to_pool_flag", value)

    @property
    @pulumi.getter(name="fecCapable")
    def fec_capable(self) -> Optional[pulumi.Input[int]]:
        """
        FEC capable.
        """
        return pulumi.get(self, "fec_capable")

    @fec_capable.setter
    def fec_capable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fec_capable", value)

    @property
    @pulumi.getter(name="fecState")
    def fec_state(self) -> Optional[pulumi.Input[str]]:
        """
        State of forward error correction. Valid values: `disabled`, `cl74`, `cl91`.
        """
        return pulumi.get(self, "fec_state")

    @fec_state.setter
    def fec_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fec_state", value)

    @property
    @pulumi.getter(name="fgtPeerDeviceName")
    def fgt_peer_device_name(self) -> Optional[pulumi.Input[str]]:
        """
        FGT peer device name.
        """
        return pulumi.get(self, "fgt_peer_device_name")

    @fgt_peer_device_name.setter
    def fgt_peer_device_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fgt_peer_device_name", value)

    @property
    @pulumi.getter(name="fgtPeerPortName")
    def fgt_peer_port_name(self) -> Optional[pulumi.Input[str]]:
        """
        FGT peer port name.
        """
        return pulumi.get(self, "fgt_peer_port_name")

    @fgt_peer_port_name.setter
    def fgt_peer_port_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fgt_peer_port_name", value)

    @property
    @pulumi.getter(name="fiberPort")
    def fiber_port(self) -> Optional[pulumi.Input[int]]:
        """
        Fiber-port.
        """
        return pulumi.get(self, "fiber_port")

    @fiber_port.setter
    def fiber_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fiber_port", value)

    @property
    @pulumi.getter
    def flags(self) -> Optional[pulumi.Input[int]]:
        """
        Port properties flags.
        """
        return pulumi.get(self, "flags")

    @flags.setter
    def flags(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flags", value)

    @property
    @pulumi.getter(name="flowControl")
    def flow_control(self) -> Optional[pulumi.Input[str]]:
        """
        Flow control direction. Valid values: `disable`, `tx`, `rx`, `both`.
        """
        return pulumi.get(self, "flow_control")

    @flow_control.setter
    def flow_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_control", value)

    @property
    @pulumi.getter(name="fortilinkPort")
    def fortilink_port(self) -> Optional[pulumi.Input[int]]:
        """
        FortiLink uplink port.
        """
        return pulumi.get(self, "fortilink_port")

    @fortilink_port.setter
    def fortilink_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fortilink_port", value)

    @property
    @pulumi.getter(name="igmpSnooping")
    def igmp_snooping(self) -> Optional[pulumi.Input[str]]:
        """
        Set IGMP snooping mode for the physical port interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "igmp_snooping")

    @igmp_snooping.setter
    def igmp_snooping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "igmp_snooping", value)

    @property
    @pulumi.getter(name="igmpsFloodReports")
    def igmps_flood_reports(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable flooding of IGMP reports to this interface when igmp-snooping enabled. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "igmps_flood_reports")

    @igmps_flood_reports.setter
    def igmps_flood_reports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "igmps_flood_reports", value)

    @property
    @pulumi.getter(name="igmpsFloodTraffic")
    def igmps_flood_traffic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable flooding of IGMP snooping traffic to this interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "igmps_flood_traffic")

    @igmps_flood_traffic.setter
    def igmps_flood_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "igmps_flood_traffic", value)

    @property
    @pulumi.getter(name="interfaceTags")
    def interface_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortInterfaceTagArgs']]]]:
        """
        Tag(s) associated with the interface for various features including virtual port pool, dynamic port policy. The structure of `interface_tags` block is documented below.
        """
        return pulumi.get(self, "interface_tags")

    @interface_tags.setter
    def interface_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortInterfaceTagArgs']]]]):
        pulumi.set(self, "interface_tags", value)

    @property
    @pulumi.getter(name="ipSourceGuard")
    def ip_source_guard(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable IP source guard. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ip_source_guard")

    @ip_source_guard.setter
    def ip_source_guard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_source_guard", value)

    @property
    @pulumi.getter(name="islLocalTrunkName")
    def isl_local_trunk_name(self) -> Optional[pulumi.Input[str]]:
        """
        ISL local trunk name.
        """
        return pulumi.get(self, "isl_local_trunk_name")

    @isl_local_trunk_name.setter
    def isl_local_trunk_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "isl_local_trunk_name", value)

    @property
    @pulumi.getter(name="islPeerDeviceName")
    def isl_peer_device_name(self) -> Optional[pulumi.Input[str]]:
        """
        ISL peer device name.
        """
        return pulumi.get(self, "isl_peer_device_name")

    @isl_peer_device_name.setter
    def isl_peer_device_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "isl_peer_device_name", value)

    @property
    @pulumi.getter(name="islPeerPortName")
    def isl_peer_port_name(self) -> Optional[pulumi.Input[str]]:
        """
        ISL peer port name.
        """
        return pulumi.get(self, "isl_peer_port_name")

    @isl_peer_port_name.setter
    def isl_peer_port_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "isl_peer_port_name", value)

    @property
    @pulumi.getter(name="lacpSpeed")
    def lacp_speed(self) -> Optional[pulumi.Input[str]]:
        """
        end Link Aggregation Control Protocol (LACP) messages every 30 seconds (slow) or every second (fast). Valid values: `slow`, `fast`.
        """
        return pulumi.get(self, "lacp_speed")

    @lacp_speed.setter
    def lacp_speed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lacp_speed", value)

    @property
    @pulumi.getter(name="learningLimit")
    def learning_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Limit the number of dynamic MAC addresses on this Port (1 - 128, 0 = no limit, default).
        """
        return pulumi.get(self, "learning_limit")

    @learning_limit.setter
    def learning_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "learning_limit", value)

    @property
    @pulumi.getter(name="lldpProfile")
    def lldp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        LLDP port TLV profile.
        """
        return pulumi.get(self, "lldp_profile")

    @lldp_profile.setter
    def lldp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp_profile", value)

    @property
    @pulumi.getter(name="lldpStatus")
    def lldp_status(self) -> Optional[pulumi.Input[str]]:
        """
        LLDP transmit and receive status. Valid values: `disable`, `rx-only`, `tx-only`, `tx-rx`.
        """
        return pulumi.get(self, "lldp_status")

    @lldp_status.setter
    def lldp_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lldp_status", value)

    @property
    @pulumi.getter(name="loopGuard")
    def loop_guard(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable loop-guard on this interface, an STP optimization used to prevent network loops. Valid values: `enabled`, `disabled`.
        """
        return pulumi.get(self, "loop_guard")

    @loop_guard.setter
    def loop_guard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "loop_guard", value)

    @property
    @pulumi.getter(name="loopGuardTimeout")
    def loop_guard_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Loop-guard timeout (0 - 120 min, default = 45).
        """
        return pulumi.get(self, "loop_guard_timeout")

    @loop_guard_timeout.setter
    def loop_guard_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "loop_guard_timeout", value)

    @property
    @pulumi.getter(name="macAddr")
    def mac_addr(self) -> Optional[pulumi.Input[str]]:
        """
        Port/Trunk MAC.
        """
        return pulumi.get(self, "mac_addr")

    @mac_addr.setter
    def mac_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_addr", value)

    @property
    @pulumi.getter(name="matchedDppIntfTags")
    def matched_dpp_intf_tags(self) -> Optional[pulumi.Input[str]]:
        """
        Matched interface tags in the dynamic port policy.
        """
        return pulumi.get(self, "matched_dpp_intf_tags")

    @matched_dpp_intf_tags.setter
    def matched_dpp_intf_tags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "matched_dpp_intf_tags", value)

    @property
    @pulumi.getter(name="matchedDppPolicy")
    def matched_dpp_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Matched child policy in the dynamic port policy.
        """
        return pulumi.get(self, "matched_dpp_policy")

    @matched_dpp_policy.setter
    def matched_dpp_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "matched_dpp_policy", value)

    @property
    @pulumi.getter(name="maxBundle")
    def max_bundle(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size of LAG bundle (1 - 24, default = 24)
        """
        return pulumi.get(self, "max_bundle")

    @max_bundle.setter
    def max_bundle(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_bundle", value)

    @property
    @pulumi.getter
    def mclag(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable multi-chassis link aggregation (MCLAG). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "mclag")

    @mclag.setter
    def mclag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mclag", value)

    @property
    @pulumi.getter(name="mclagIclPort")
    def mclag_icl_port(self) -> Optional[pulumi.Input[int]]:
        """
        MCLAG-ICL port.
        """
        return pulumi.get(self, "mclag_icl_port")

    @mclag_icl_port.setter
    def mclag_icl_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mclag_icl_port", value)

    @property
    @pulumi.getter(name="mediaType")
    def media_type(self) -> Optional[pulumi.Input[str]]:
        """
        Media type.
        """
        return pulumi.get(self, "media_type")

    @media_type.setter
    def media_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "media_type", value)

    @property
    @pulumi.getter(name="memberWithdrawalBehavior")
    def member_withdrawal_behavior(self) -> Optional[pulumi.Input[str]]:
        """
        Port behavior after it withdraws because of loss of control packets. Valid values: `forward`, `block`.
        """
        return pulumi.get(self, "member_withdrawal_behavior")

    @member_withdrawal_behavior.setter
    def member_withdrawal_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "member_withdrawal_behavior", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortMemberArgs']]]]:
        """
        Aggregated LAG bundle interfaces. The structure of `members` block is documented below.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter(name="minBundle")
    def min_bundle(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum size of LAG bundle (1 - 24, default = 1)
        """
        return pulumi.get(self, "min_bundle")

    @min_bundle.setter
    def min_bundle(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_bundle", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        LACP mode: ignore and do not send control messages, or negotiate 802.3ad aggregation passively or actively. Valid values: `static`, `lacp-passive`, `lacp-active`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="p2pPort")
    def p2p_port(self) -> Optional[pulumi.Input[int]]:
        """
        General peer to peer tunnel port.
        """
        return pulumi.get(self, "p2p_port")

    @p2p_port.setter
    def p2p_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "p2p_port", value)

    @property
    @pulumi.getter(name="packetSampleRate")
    def packet_sample_rate(self) -> Optional[pulumi.Input[int]]:
        """
        Packet sampling rate (0 - 99999 p/sec).
        """
        return pulumi.get(self, "packet_sample_rate")

    @packet_sample_rate.setter
    def packet_sample_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_sample_rate", value)

    @property
    @pulumi.getter(name="packetSampler")
    def packet_sampler(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable packet sampling on this interface. Valid values: `enabled`, `disabled`.
        """
        return pulumi.get(self, "packet_sampler")

    @packet_sampler.setter
    def packet_sampler(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "packet_sampler", value)

    @property
    @pulumi.getter(name="pauseMeter")
    def pause_meter(self) -> Optional[pulumi.Input[int]]:
        """
        Configure ingress pause metering rate, in kbps (default = 0, disabled).
        """
        return pulumi.get(self, "pause_meter")

    @pause_meter.setter
    def pause_meter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pause_meter", value)

    @property
    @pulumi.getter(name="pauseMeterResume")
    def pause_meter_resume(self) -> Optional[pulumi.Input[str]]:
        """
        Resume threshold for resuming traffic on ingress port. Valid values: `75%`, `50%`, `25%`.
        """
        return pulumi.get(self, "pause_meter_resume")

    @pause_meter_resume.setter
    def pause_meter_resume(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pause_meter_resume", value)

    @property
    @pulumi.getter(name="poeCapable")
    def poe_capable(self) -> Optional[pulumi.Input[int]]:
        """
        PoE capable.
        """
        return pulumi.get(self, "poe_capable")

    @poe_capable.setter
    def poe_capable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "poe_capable", value)

    @property
    @pulumi.getter(name="poeMaxPower")
    def poe_max_power(self) -> Optional[pulumi.Input[str]]:
        """
        PoE maximum power.
        """
        return pulumi.get(self, "poe_max_power")

    @poe_max_power.setter
    def poe_max_power(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poe_max_power", value)

    @property
    @pulumi.getter(name="poePreStandardDetection")
    def poe_pre_standard_detection(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PoE pre-standard detection. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "poe_pre_standard_detection")

    @poe_pre_standard_detection.setter
    def poe_pre_standard_detection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poe_pre_standard_detection", value)

    @property
    @pulumi.getter(name="poeStandard")
    def poe_standard(self) -> Optional[pulumi.Input[str]]:
        """
        PoE standard supported.
        """
        return pulumi.get(self, "poe_standard")

    @poe_standard.setter
    def poe_standard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poe_standard", value)

    @property
    @pulumi.getter(name="poeStatus")
    def poe_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable PoE status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "poe_status")

    @poe_status.setter
    def poe_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "poe_status", value)

    @property
    @pulumi.getter(name="portName")
    def port_name(self) -> Optional[pulumi.Input[str]]:
        """
        Switch port name.
        """
        return pulumi.get(self, "port_name")

    @port_name.setter
    def port_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_name", value)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> Optional[pulumi.Input[int]]:
        """
        Port number.
        """
        return pulumi.get(self, "port_number")

    @port_number.setter
    def port_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_number", value)

    @property
    @pulumi.getter(name="portOwner")
    def port_owner(self) -> Optional[pulumi.Input[str]]:
        """
        Switch port name.
        """
        return pulumi.get(self, "port_owner")

    @port_owner.setter
    def port_owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_owner", value)

    @property
    @pulumi.getter(name="portPolicy")
    def port_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Switch controller dynamic port policy from available options.
        """
        return pulumi.get(self, "port_policy")

    @port_policy.setter
    def port_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_policy", value)

    @property
    @pulumi.getter(name="portPrefixType")
    def port_prefix_type(self) -> Optional[pulumi.Input[int]]:
        """
        Port prefix type.
        """
        return pulumi.get(self, "port_prefix_type")

    @port_prefix_type.setter
    def port_prefix_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_prefix_type", value)

    @property
    @pulumi.getter(name="portSecurityPolicy")
    def port_security_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Switch controller authentication policy to apply to this managed switch from available options.
        """
        return pulumi.get(self, "port_security_policy")

    @port_security_policy.setter
    def port_security_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_security_policy", value)

    @property
    @pulumi.getter(name="portSelectionCriteria")
    def port_selection_criteria(self) -> Optional[pulumi.Input[str]]:
        """
        Algorithm for aggregate port selection. Valid values: `src-mac`, `dst-mac`, `src-dst-mac`, `src-ip`, `dst-ip`, `src-dst-ip`.
        """
        return pulumi.get(self, "port_selection_criteria")

    @port_selection_criteria.setter
    def port_selection_criteria(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_selection_criteria", value)

    @property
    @pulumi.getter(name="ptpPolicy")
    def ptp_policy(self) -> Optional[pulumi.Input[str]]:
        """
        PTP policy configuration.
        """
        return pulumi.get(self, "ptp_policy")

    @ptp_policy.setter
    def ptp_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ptp_policy", value)

    @property
    @pulumi.getter(name="qosPolicy")
    def qos_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Switch controller QoS policy from available options.
        """
        return pulumi.get(self, "qos_policy")

    @qos_policy.setter
    def qos_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qos_policy", value)

    @property
    @pulumi.getter(name="rpvstPort")
    def rpvst_port(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable inter-operability with rapid PVST on this interface. Valid values: `disabled`, `enabled`.
        """
        return pulumi.get(self, "rpvst_port")

    @rpvst_port.setter
    def rpvst_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rpvst_port", value)

    @property
    @pulumi.getter(name="sampleDirection")
    def sample_direction(self) -> Optional[pulumi.Input[str]]:
        """
        sFlow sample direction. Valid values: `tx`, `rx`, `both`.
        """
        return pulumi.get(self, "sample_direction")

    @sample_direction.setter
    def sample_direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sample_direction", value)

    @property
    @pulumi.getter(name="sflowCounterInterval")
    def sflow_counter_interval(self) -> Optional[pulumi.Input[int]]:
        """
        sFlow sampler counter polling interval (1 - 255 sec).
        """
        return pulumi.get(self, "sflow_counter_interval")

    @sflow_counter_interval.setter
    def sflow_counter_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sflow_counter_interval", value)

    @property
    @pulumi.getter(name="sflowSampleRate")
    def sflow_sample_rate(self) -> Optional[pulumi.Input[int]]:
        """
        sFlow sampler sample rate (0 - 99999 p/sec).
        """
        return pulumi.get(self, "sflow_sample_rate")

    @sflow_sample_rate.setter
    def sflow_sample_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sflow_sample_rate", value)

    @property
    @pulumi.getter(name="sflowSampler")
    def sflow_sampler(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sFlow protocol on this interface. Valid values: `enabled`, `disabled`.
        """
        return pulumi.get(self, "sflow_sampler")

    @sflow_sampler.setter
    def sflow_sampler(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sflow_sampler", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[str]]:
        """
        Switch port speed; default and available settings depend on hardware.
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speed", value)

    @property
    @pulumi.getter(name="speedMask")
    def speed_mask(self) -> Optional[pulumi.Input[int]]:
        """
        Switch port speed mask.
        """
        return pulumi.get(self, "speed_mask")

    @speed_mask.setter
    def speed_mask(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "speed_mask", value)

    @property
    @pulumi.getter(name="stackingPort")
    def stacking_port(self) -> Optional[pulumi.Input[int]]:
        """
        Stacking port.
        """
        return pulumi.get(self, "stacking_port")

    @stacking_port.setter
    def stacking_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stacking_port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Active/inactive mirror configuration. Valid values: `active`, `inactive`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="stickyMac")
    def sticky_mac(self) -> Optional[pulumi.Input[str]]:
        """
        Enable or disable sticky-mac on the interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sticky_mac")

    @sticky_mac.setter
    def sticky_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sticky_mac", value)

    @property
    @pulumi.getter(name="stormControlPolicy")
    def storm_control_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Switch controller storm control policy from available options.
        """
        return pulumi.get(self, "storm_control_policy")

    @storm_control_policy.setter
    def storm_control_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storm_control_policy", value)

    @property
    @pulumi.getter(name="stpBpduGuard")
    def stp_bpdu_guard(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable STP BPDU guard on this interface. Valid values: `enabled`, `disabled`.
        """
        return pulumi.get(self, "stp_bpdu_guard")

    @stp_bpdu_guard.setter
    def stp_bpdu_guard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stp_bpdu_guard", value)

    @property
    @pulumi.getter(name="stpBpduGuardTimeout")
    def stp_bpdu_guard_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        BPDU Guard disabling protection (0 - 120 min).
        """
        return pulumi.get(self, "stp_bpdu_guard_timeout")

    @stp_bpdu_guard_timeout.setter
    def stp_bpdu_guard_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stp_bpdu_guard_timeout", value)

    @property
    @pulumi.getter(name="stpRootGuard")
    def stp_root_guard(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable STP root guard on this interface. Valid values: `enabled`, `disabled`.
        """
        return pulumi.get(self, "stp_root_guard")

    @stp_root_guard.setter
    def stp_root_guard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stp_root_guard", value)

    @property
    @pulumi.getter(name="stpState")
    def stp_state(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Spanning Tree Protocol (STP) on this interface. Valid values: `enabled`, `disabled`.
        """
        return pulumi.get(self, "stp_state")

    @stp_state.setter
    def stp_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stp_state", value)

    @property
    @pulumi.getter(name="switchId")
    def switch_id(self) -> Optional[pulumi.Input[str]]:
        """
        Switch id.
        """
        return pulumi.get(self, "switch_id")

    @switch_id.setter
    def switch_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type. Valid values: `static`, `sticky`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="untaggedVlans")
    def untagged_vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortUntaggedVlanArgs']]]]:
        """
        Configure switch port untagged vlans The structure of `untagged_vlans` block is documented below.
        """
        return pulumi.get(self, "untagged_vlans")

    @untagged_vlans.setter
    def untagged_vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchPortUntaggedVlanArgs']]]]):
        pulumi.set(self, "untagged_vlans", value)

    @property
    @pulumi.getter(name="virtualPort")
    def virtual_port(self) -> Optional[pulumi.Input[int]]:
        """
        Virtualized switch port.
        """
        return pulumi.get(self, "virtual_port")

    @virtual_port.setter
    def virtual_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "virtual_port", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[str]]:
        """
        Vlan.
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class SwitchControllerManagedSwitchPortAllowedVlanArgs:
    def __init__(__self__, *,
                 vlan_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] vlan_name: List of FortiSwitch VLANs.
        """
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[pulumi.Input[str]]:
        """
        List of FortiSwitch VLANs.
        """
        return pulumi.get(self, "vlan_name")

    @vlan_name.setter
    def vlan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_name", value)


@pulumi.input_type
class SwitchControllerManagedSwitchPortExportTagArgs:
    def __init__(__self__, *,
                 tag_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] tag_name: Switch tag name.
        """
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        Switch tag name.
        """
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)


@pulumi.input_type
class SwitchControllerManagedSwitchPortInterfaceTagArgs:
    def __init__(__self__, *,
                 tag_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] tag_name: Switch tag name.
        """
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        Switch tag name.
        """
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)


@pulumi.input_type
class SwitchControllerManagedSwitchPortMemberArgs:
    def __init__(__self__, *,
                 member_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] member_name: Interface name from available options.
        """
        if member_name is not None:
            pulumi.set(__self__, "member_name", member_name)

    @property
    @pulumi.getter(name="memberName")
    def member_name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name from available options.
        """
        return pulumi.get(self, "member_name")

    @member_name.setter
    def member_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "member_name", value)


@pulumi.input_type
class SwitchControllerManagedSwitchPortUntaggedVlanArgs:
    def __init__(__self__, *,
                 vlan_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] vlan_name: List of FortiSwitch VLANs.
        """
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[pulumi.Input[str]]:
        """
        List of FortiSwitch VLANs.
        """
        return pulumi.get(self, "vlan_name")

    @vlan_name.setter
    def vlan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_name", value)


@pulumi.input_type
class SwitchControllerManagedSwitchRemoteLogArgs:
    def __init__(__self__, *,
                 csv: Optional[pulumi.Input[str]] = None,
                 facility: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] csv: Enable/disable comma-separated value (CSV) strings. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] facility: Facility to log to remote syslog server. Valid values: `kernel`, `user`, `mail`, `daemon`, `auth`, `syslog`, `lpr`, `news`, `uucp`, `cron`, `authpriv`, `ftp`, `ntp`, `audit`, `alert`, `clock`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`.
        :param pulumi.Input[str] name: Interface name.
        :param pulumi.Input[int] port: Remote syslog server listening port.
        :param pulumi.Input[str] server: IPv4 address of the remote syslog server.
        :param pulumi.Input[str] severity: Severity of logs to be transferred to remote log server. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] status: Active/inactive mirror configuration. Valid values: `active`, `inactive`.
        """
        if csv is not None:
            pulumi.set(__self__, "csv", csv)
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def csv(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable comma-separated value (CSV) strings. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "csv")

    @csv.setter
    def csv(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csv", value)

    @property
    @pulumi.getter
    def facility(self) -> Optional[pulumi.Input[str]]:
        """
        Facility to log to remote syslog server. Valid values: `kernel`, `user`, `mail`, `daemon`, `auth`, `syslog`, `lpr`, `news`, `uucp`, `cron`, `authpriv`, `ftp`, `ntp`, `audit`, `alert`, `clock`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6`, `local7`.
        """
        return pulumi.get(self, "facility")

    @facility.setter
    def facility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facility", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Remote syslog server listening port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of the remote syslog server.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity of logs to be transferred to remote log server. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Active/inactive mirror configuration. Valid values: `active`, `inactive`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SwitchControllerManagedSwitchSnmpCommunityArgs:
    def __init__(__self__, *,
                 events: Optional[pulumi.Input[str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchSnmpCommunityHostArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 query_v1_port: Optional[pulumi.Input[int]] = None,
                 query_v1_status: Optional[pulumi.Input[str]] = None,
                 query_v2c_port: Optional[pulumi.Input[int]] = None,
                 query_v2c_status: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_v1_lport: Optional[pulumi.Input[int]] = None,
                 trap_v1_rport: Optional[pulumi.Input[int]] = None,
                 trap_v1_status: Optional[pulumi.Input[str]] = None,
                 trap_v2c_lport: Optional[pulumi.Input[int]] = None,
                 trap_v2c_rport: Optional[pulumi.Input[int]] = None,
                 trap_v2c_status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] events: SNMP notifications (traps) to send. Valid values: `cpu-high`, `mem-low`, `log-full`, `intf-ip`, `ent-conf-change`.
        :param pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchSnmpCommunityHostArgs']]] hosts: Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
        :param pulumi.Input[int] id: Id
        :param pulumi.Input[str] name: Interface name.
        :param pulumi.Input[int] query_v1_port: SNMP v1 query port (default = 161).
        :param pulumi.Input[str] query_v1_status: Enable/disable SNMP v1 queries. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] query_v2c_port: SNMP v2c query port (default = 161).
        :param pulumi.Input[str] query_v2c_status: Enable/disable SNMP v2c queries. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] status: Active/inactive mirror configuration. Valid values: `active`, `inactive`.
        :param pulumi.Input[int] trap_v1_lport: SNMP v2c trap local port (default = 162).
        :param pulumi.Input[int] trap_v1_rport: SNMP v2c trap remote port (default = 162).
        :param pulumi.Input[str] trap_v1_status: Enable/disable SNMP v1 traps. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] trap_v2c_lport: SNMP v2c trap local port (default = 162).
        :param pulumi.Input[int] trap_v2c_rport: SNMP v2c trap remote port (default = 162).
        :param pulumi.Input[str] trap_v2c_status: Enable/disable SNMP v2c traps. Valid values: `disable`, `enable`.
        """
        if events is not None:
            pulumi.set(__self__, "events", events)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if query_v1_port is not None:
            pulumi.set(__self__, "query_v1_port", query_v1_port)
        if query_v1_status is not None:
            pulumi.set(__self__, "query_v1_status", query_v1_status)
        if query_v2c_port is not None:
            pulumi.set(__self__, "query_v2c_port", query_v2c_port)
        if query_v2c_status is not None:
            pulumi.set(__self__, "query_v2c_status", query_v2c_status)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trap_v1_lport is not None:
            pulumi.set(__self__, "trap_v1_lport", trap_v1_lport)
        if trap_v1_rport is not None:
            pulumi.set(__self__, "trap_v1_rport", trap_v1_rport)
        if trap_v1_status is not None:
            pulumi.set(__self__, "trap_v1_status", trap_v1_status)
        if trap_v2c_lport is not None:
            pulumi.set(__self__, "trap_v2c_lport", trap_v2c_lport)
        if trap_v2c_rport is not None:
            pulumi.set(__self__, "trap_v2c_rport", trap_v2c_rport)
        if trap_v2c_status is not None:
            pulumi.set(__self__, "trap_v2c_status", trap_v2c_status)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[str]]:
        """
        SNMP notifications (traps) to send. Valid values: `cpu-high`, `mem-low`, `log-full`, `intf-ip`, `ent-conf-change`.
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchSnmpCommunityHostArgs']]]]:
        """
        Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerManagedSwitchSnmpCommunityHostArgs']]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="queryV1Port")
    def query_v1_port(self) -> Optional[pulumi.Input[int]]:
        """
        SNMP v1 query port (default = 161).
        """
        return pulumi.get(self, "query_v1_port")

    @query_v1_port.setter
    def query_v1_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_v1_port", value)

    @property
    @pulumi.getter(name="queryV1Status")
    def query_v1_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP v1 queries. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "query_v1_status")

    @query_v1_status.setter
    def query_v1_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_v1_status", value)

    @property
    @pulumi.getter(name="queryV2cPort")
    def query_v2c_port(self) -> Optional[pulumi.Input[int]]:
        """
        SNMP v2c query port (default = 161).
        """
        return pulumi.get(self, "query_v2c_port")

    @query_v2c_port.setter
    def query_v2c_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_v2c_port", value)

    @property
    @pulumi.getter(name="queryV2cStatus")
    def query_v2c_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP v2c queries. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "query_v2c_status")

    @query_v2c_status.setter
    def query_v2c_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_v2c_status", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Active/inactive mirror configuration. Valid values: `active`, `inactive`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trapV1Lport")
    def trap_v1_lport(self) -> Optional[pulumi.Input[int]]:
        """
        SNMP v2c trap local port (default = 162).
        """
        return pulumi.get(self, "trap_v1_lport")

    @trap_v1_lport.setter
    def trap_v1_lport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_v1_lport", value)

    @property
    @pulumi.getter(name="trapV1Rport")
    def trap_v1_rport(self) -> Optional[pulumi.Input[int]]:
        """
        SNMP v2c trap remote port (default = 162).
        """
        return pulumi.get(self, "trap_v1_rport")

    @trap_v1_rport.setter
    def trap_v1_rport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_v1_rport", value)

    @property
    @pulumi.getter(name="trapV1Status")
    def trap_v1_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP v1 traps. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "trap_v1_status")

    @trap_v1_status.setter
    def trap_v1_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_v1_status", value)

    @property
    @pulumi.getter(name="trapV2cLport")
    def trap_v2c_lport(self) -> Optional[pulumi.Input[int]]:
        """
        SNMP v2c trap local port (default = 162).
        """
        return pulumi.get(self, "trap_v2c_lport")

    @trap_v2c_lport.setter
    def trap_v2c_lport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_v2c_lport", value)

    @property
    @pulumi.getter(name="trapV2cRport")
    def trap_v2c_rport(self) -> Optional[pulumi.Input[int]]:
        """
        SNMP v2c trap remote port (default = 162).
        """
        return pulumi.get(self, "trap_v2c_rport")

    @trap_v2c_rport.setter
    def trap_v2c_rport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_v2c_rport", value)

    @property
    @pulumi.getter(name="trapV2cStatus")
    def trap_v2c_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP v2c traps. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "trap_v2c_status")

    @trap_v2c_status.setter
    def trap_v2c_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_v2c_status", value)


@pulumi.input_type
class SwitchControllerManagedSwitchSnmpCommunityHostArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Id
        :param pulumi.Input[str] ip: IPv4 address of the SNMP manager (host).
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of the SNMP manager (host).
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class SwitchControllerManagedSwitchSnmpSysinfoArgs:
    def __init__(__self__, *,
                 contact_info: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 engine_id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] contact_info: Contact information.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] engine_id: Local SNMP engine ID string (max 24 char).
        :param pulumi.Input[str] location: System location.
        :param pulumi.Input[str] status: Active/inactive mirror configuration. Valid values: `active`, `inactive`.
        """
        if contact_info is not None:
            pulumi.set(__self__, "contact_info", contact_info)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine_id is not None:
            pulumi.set(__self__, "engine_id", engine_id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="contactInfo")
    def contact_info(self) -> Optional[pulumi.Input[str]]:
        """
        Contact information.
        """
        return pulumi.get(self, "contact_info")

    @contact_info.setter
    def contact_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact_info", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> Optional[pulumi.Input[str]]:
        """
        Local SNMP engine ID string (max 24 char).
        """
        return pulumi.get(self, "engine_id")

    @engine_id.setter
    def engine_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_id", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        System location.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Active/inactive mirror configuration. Valid values: `active`, `inactive`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SwitchControllerManagedSwitchSnmpTrapThresholdArgs:
    def __init__(__self__, *,
                 trap_high_cpu_threshold: Optional[pulumi.Input[int]] = None,
                 trap_log_full_threshold: Optional[pulumi.Input[int]] = None,
                 trap_low_memory_threshold: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] trap_high_cpu_threshold: CPU usage when trap is sent.
        :param pulumi.Input[int] trap_log_full_threshold: Log disk usage when trap is sent.
        :param pulumi.Input[int] trap_low_memory_threshold: Memory usage when trap is sent.
        """
        if trap_high_cpu_threshold is not None:
            pulumi.set(__self__, "trap_high_cpu_threshold", trap_high_cpu_threshold)
        if trap_log_full_threshold is not None:
            pulumi.set(__self__, "trap_log_full_threshold", trap_log_full_threshold)
        if trap_low_memory_threshold is not None:
            pulumi.set(__self__, "trap_low_memory_threshold", trap_low_memory_threshold)

    @property
    @pulumi.getter(name="trapHighCpuThreshold")
    def trap_high_cpu_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        CPU usage when trap is sent.
        """
        return pulumi.get(self, "trap_high_cpu_threshold")

    @trap_high_cpu_threshold.setter
    def trap_high_cpu_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_high_cpu_threshold", value)

    @property
    @pulumi.getter(name="trapLogFullThreshold")
    def trap_log_full_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Log disk usage when trap is sent.
        """
        return pulumi.get(self, "trap_log_full_threshold")

    @trap_log_full_threshold.setter
    def trap_log_full_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_log_full_threshold", value)

    @property
    @pulumi.getter(name="trapLowMemoryThreshold")
    def trap_low_memory_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Memory usage when trap is sent.
        """
        return pulumi.get(self, "trap_low_memory_threshold")

    @trap_low_memory_threshold.setter
    def trap_low_memory_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_low_memory_threshold", value)


@pulumi.input_type
class SwitchControllerManagedSwitchSnmpUserArgs:
    def __init__(__self__, *,
                 auth_proto: Optional[pulumi.Input[str]] = None,
                 auth_pwd: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priv_proto: Optional[pulumi.Input[str]] = None,
                 priv_pwd: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[str]] = None,
                 query_port: Optional[pulumi.Input[int]] = None,
                 security_level: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_proto: Authentication protocol.
        :param pulumi.Input[str] auth_pwd: Password for authentication protocol.
        :param pulumi.Input[str] name: Interface name.
        :param pulumi.Input[str] priv_proto: Privacy (encryption) protocol.
        :param pulumi.Input[str] priv_pwd: Password for privacy (encryption) protocol.
        :param pulumi.Input[str] queries: Enable/disable SNMP queries for this user. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] query_port: SNMPv3 query port (default = 161).
        :param pulumi.Input[str] security_level: Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
        """
        if auth_proto is not None:
            pulumi.set(__self__, "auth_proto", auth_proto)
        if auth_pwd is not None:
            pulumi.set(__self__, "auth_pwd", auth_pwd)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priv_proto is not None:
            pulumi.set(__self__, "priv_proto", priv_proto)
        if priv_pwd is not None:
            pulumi.set(__self__, "priv_pwd", priv_pwd)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if query_port is not None:
            pulumi.set(__self__, "query_port", query_port)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)

    @property
    @pulumi.getter(name="authProto")
    def auth_proto(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication protocol.
        """
        return pulumi.get(self, "auth_proto")

    @auth_proto.setter
    def auth_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_proto", value)

    @property
    @pulumi.getter(name="authPwd")
    def auth_pwd(self) -> Optional[pulumi.Input[str]]:
        """
        Password for authentication protocol.
        """
        return pulumi.get(self, "auth_pwd")

    @auth_pwd.setter
    def auth_pwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_pwd", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privProto")
    def priv_proto(self) -> Optional[pulumi.Input[str]]:
        """
        Privacy (encryption) protocol.
        """
        return pulumi.get(self, "priv_proto")

    @priv_proto.setter
    def priv_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priv_proto", value)

    @property
    @pulumi.getter(name="privPwd")
    def priv_pwd(self) -> Optional[pulumi.Input[str]]:
        """
        Password for privacy (encryption) protocol.
        """
        return pulumi.get(self, "priv_pwd")

    @priv_pwd.setter
    def priv_pwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priv_pwd", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP queries for this user. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="queryPort")
    def query_port(self) -> Optional[pulumi.Input[int]]:
        """
        SNMPv3 query port (default = 161).
        """
        return pulumi.get(self, "query_port")

    @query_port.setter
    def query_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_port", value)

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[pulumi.Input[str]]:
        """
        Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
        """
        return pulumi.get(self, "security_level")

    @security_level.setter
    def security_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_level", value)


@pulumi.input_type
class SwitchControllerManagedSwitchStaticMacArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[int] id: Id
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[str] mac: MAC address.
        :param pulumi.Input[str] type: Type. Valid values: `static`, `sticky`.
        :param pulumi.Input[str] vlan: Vlan.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address.
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type. Valid values: `static`, `sticky`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[str]]:
        """
        Vlan.
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class SwitchControllerManagedSwitchStormControlArgs:
    def __init__(__self__, *,
                 broadcast: Optional[pulumi.Input[str]] = None,
                 local_override: Optional[pulumi.Input[str]] = None,
                 rate: Optional[pulumi.Input[int]] = None,
                 unknown_multicast: Optional[pulumi.Input[str]] = None,
                 unknown_unicast: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] broadcast: Enable/disable storm control to drop broadcast traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] local_override: Enable to override global 802.1X settings on individual FortiSwitches. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] rate: Rate in packets per second at which storm traffic is controlled (1 - 10000000, default = 500). Storm control drops excess traffic data rates beyond this threshold.
        :param pulumi.Input[str] unknown_multicast: Enable/disable storm control to drop unknown multicast traffic. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] unknown_unicast: Enable/disable storm control to drop unknown unicast traffic. Valid values: `enable`, `disable`.
        """
        if broadcast is not None:
            pulumi.set(__self__, "broadcast", broadcast)
        if local_override is not None:
            pulumi.set(__self__, "local_override", local_override)
        if rate is not None:
            pulumi.set(__self__, "rate", rate)
        if unknown_multicast is not None:
            pulumi.set(__self__, "unknown_multicast", unknown_multicast)
        if unknown_unicast is not None:
            pulumi.set(__self__, "unknown_unicast", unknown_unicast)

    @property
    @pulumi.getter
    def broadcast(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable storm control to drop broadcast traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "broadcast")

    @broadcast.setter
    def broadcast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "broadcast", value)

    @property
    @pulumi.getter(name="localOverride")
    def local_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override global 802.1X settings on individual FortiSwitches. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_override")

    @local_override.setter
    def local_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_override", value)

    @property
    @pulumi.getter
    def rate(self) -> Optional[pulumi.Input[int]]:
        """
        Rate in packets per second at which storm traffic is controlled (1 - 10000000, default = 500). Storm control drops excess traffic data rates beyond this threshold.
        """
        return pulumi.get(self, "rate")

    @rate.setter
    def rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rate", value)

    @property
    @pulumi.getter(name="unknownMulticast")
    def unknown_multicast(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable storm control to drop unknown multicast traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "unknown_multicast")

    @unknown_multicast.setter
    def unknown_multicast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_multicast", value)

    @property
    @pulumi.getter(name="unknownUnicast")
    def unknown_unicast(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable storm control to drop unknown unicast traffic. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "unknown_unicast")

    @unknown_unicast.setter
    def unknown_unicast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_unicast", value)


@pulumi.input_type
class SwitchControllerManagedSwitchStpInstanceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Id
        :param pulumi.Input[str] priority: Priority. Valid values: `0`, `4096`, `8192`, `12288`, `16384`, `20480`, `24576`, `28672`, `32768`, `36864`, `40960`, `45056`, `49152`, `53248`, `57344`, `61440`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        Priority. Valid values: `0`, `4096`, `8192`, `12288`, `16384`, `20480`, `24576`, `28672`, `32768`, `36864`, `40960`, `45056`, `49152`, `53248`, `57344`, `61440`.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class SwitchControllerManagedSwitchStpSettingsArgs:
    def __init__(__self__, *,
                 forward_time: Optional[pulumi.Input[int]] = None,
                 hello_time: Optional[pulumi.Input[int]] = None,
                 local_override: Optional[pulumi.Input[str]] = None,
                 max_age: Optional[pulumi.Input[int]] = None,
                 max_hops: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pending_timer: Optional[pulumi.Input[int]] = None,
                 revision: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] forward_time: Period of time a port is in listening and learning state (4 - 30 sec, default = 15).
        :param pulumi.Input[int] hello_time: Period of time between successive STP frame Bridge Protocol Data Units (BPDUs) sent on a port (1 - 10 sec, default = 2).
        :param pulumi.Input[str] local_override: Enable to override global 802.1X settings on individual FortiSwitches. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] max_age: Maximum time before a bridge port saves its configuration BPDU information (6 - 40 sec, default = 20).
        :param pulumi.Input[int] max_hops: Maximum number of hops between the root bridge and the furthest bridge (1- 40, default = 20).
        :param pulumi.Input[str] name: Interface name.
        :param pulumi.Input[int] pending_timer: Pending time (1 - 15 sec, default = 4).
        :param pulumi.Input[int] revision: STP revision number (0 - 65535).
        :param pulumi.Input[str] status: Active/inactive mirror configuration. Valid values: `active`, `inactive`.
        """
        if forward_time is not None:
            pulumi.set(__self__, "forward_time", forward_time)
        if hello_time is not None:
            pulumi.set(__self__, "hello_time", hello_time)
        if local_override is not None:
            pulumi.set(__self__, "local_override", local_override)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if max_hops is not None:
            pulumi.set(__self__, "max_hops", max_hops)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pending_timer is not None:
            pulumi.set(__self__, "pending_timer", pending_timer)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="forwardTime")
    def forward_time(self) -> Optional[pulumi.Input[int]]:
        """
        Period of time a port is in listening and learning state (4 - 30 sec, default = 15).
        """
        return pulumi.get(self, "forward_time")

    @forward_time.setter
    def forward_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "forward_time", value)

    @property
    @pulumi.getter(name="helloTime")
    def hello_time(self) -> Optional[pulumi.Input[int]]:
        """
        Period of time between successive STP frame Bridge Protocol Data Units (BPDUs) sent on a port (1 - 10 sec, default = 2).
        """
        return pulumi.get(self, "hello_time")

    @hello_time.setter
    def hello_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hello_time", value)

    @property
    @pulumi.getter(name="localOverride")
    def local_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override global 802.1X settings on individual FortiSwitches. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_override")

    @local_override.setter
    def local_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_override", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum time before a bridge port saves its configuration BPDU information (6 - 40 sec, default = 20).
        """
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter(name="maxHops")
    def max_hops(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of hops between the root bridge and the furthest bridge (1- 40, default = 20).
        """
        return pulumi.get(self, "max_hops")

    @max_hops.setter
    def max_hops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_hops", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pendingTimer")
    def pending_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Pending time (1 - 15 sec, default = 4).
        """
        return pulumi.get(self, "pending_timer")

    @pending_timer.setter
    def pending_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pending_timer", value)

    @property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[int]]:
        """
        STP revision number (0 - 65535).
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "revision", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Active/inactive mirror configuration. Valid values: `active`, `inactive`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SwitchControllerManagedSwitchSwitchLogArgs:
    def __init__(__self__, *,
                 local_override: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] local_override: Enable to override global 802.1X settings on individual FortiSwitches. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity of logs to be transferred to remote log server. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        :param pulumi.Input[str] status: Active/inactive mirror configuration. Valid values: `active`, `inactive`.
        """
        if local_override is not None:
            pulumi.set(__self__, "local_override", local_override)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="localOverride")
    def local_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override global 802.1X settings on individual FortiSwitches. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "local_override")

    @local_override.setter
    def local_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_override", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity of logs to be transferred to remote log server. Valid values: `emergency`, `alert`, `critical`, `error`, `warning`, `notification`, `information`, `debug`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Active/inactive mirror configuration. Valid values: `active`, `inactive`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SwitchControllerManagedSwitchSwitchStpSettingsArgs:
    def __init__(__self__, *,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] status: Active/inactive mirror configuration. Valid values: `active`, `inactive`.
        """
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Active/inactive mirror configuration. Valid values: `active`, `inactive`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SwitchControllerQosIpDscpMapMapArgs:
    def __init__(__self__, *,
                 cos_queue: Optional[pulumi.Input[int]] = None,
                 diffserv: Optional[pulumi.Input[str]] = None,
                 ip_precedence: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] cos_queue: COS queue number.
        :param pulumi.Input[str] diffserv: Differentiated service. Valid values: `CS0`, `CS1`, `AF11`, `AF12`, `AF13`, `CS2`, `AF21`, `AF22`, `AF23`, `CS3`, `AF31`, `AF32`, `AF33`, `CS4`, `AF41`, `AF42`, `AF43`, `CS5`, `EF`, `CS6`, `CS7`.
        :param pulumi.Input[str] ip_precedence: IP Precedence. Valid values: `network-control`, `internetwork-control`, `critic-ecp`, `flashoverride`, `flash`, `immediate`, `priority`, `routine`.
        :param pulumi.Input[str] name: Dscp mapping entry name.
        :param pulumi.Input[str] value: Raw values of DSCP (0 - 63).
        """
        if cos_queue is not None:
            pulumi.set(__self__, "cos_queue", cos_queue)
        if diffserv is not None:
            pulumi.set(__self__, "diffserv", diffserv)
        if ip_precedence is not None:
            pulumi.set(__self__, "ip_precedence", ip_precedence)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="cosQueue")
    def cos_queue(self) -> Optional[pulumi.Input[int]]:
        """
        COS queue number.
        """
        return pulumi.get(self, "cos_queue")

    @cos_queue.setter
    def cos_queue(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cos_queue", value)

    @property
    @pulumi.getter
    def diffserv(self) -> Optional[pulumi.Input[str]]:
        """
        Differentiated service. Valid values: `CS0`, `CS1`, `AF11`, `AF12`, `AF13`, `CS2`, `AF21`, `AF22`, `AF23`, `CS3`, `AF31`, `AF32`, `AF33`, `CS4`, `AF41`, `AF42`, `AF43`, `CS5`, `EF`, `CS6`, `CS7`.
        """
        return pulumi.get(self, "diffserv")

    @diffserv.setter
    def diffserv(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffserv", value)

    @property
    @pulumi.getter(name="ipPrecedence")
    def ip_precedence(self) -> Optional[pulumi.Input[str]]:
        """
        IP Precedence. Valid values: `network-control`, `internetwork-control`, `critic-ecp`, `flashoverride`, `flash`, `immediate`, `priority`, `routine`.
        """
        return pulumi.get(self, "ip_precedence")

    @ip_precedence.setter
    def ip_precedence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_precedence", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Dscp mapping entry name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Raw values of DSCP (0 - 63).
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SwitchControllerQosQueuePolicyCosQueueArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 drop_policy: Optional[pulumi.Input[str]] = None,
                 ecn: Optional[pulumi.Input[str]] = None,
                 max_rate: Optional[pulumi.Input[int]] = None,
                 max_rate_percent: Optional[pulumi.Input[int]] = None,
                 min_rate: Optional[pulumi.Input[int]] = None,
                 min_rate_percent: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] description: Description of the COS queue.
        :param pulumi.Input[str] drop_policy: COS queue drop policy. Valid values: `taildrop`, `weighted-random-early-detection`.
        :param pulumi.Input[str] ecn: Enable/disable ECN packet marking to drop eligible packets. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] max_rate: Maximum rate (0 - 4294967295 kbps, 0 to disable).
        :param pulumi.Input[int] max_rate_percent: Maximum rate (% of link speed).
        :param pulumi.Input[int] min_rate: Minimum rate (0 - 4294967295 kbps, 0 to disable).
        :param pulumi.Input[int] min_rate_percent: Minimum rate (% of link speed).
        :param pulumi.Input[str] name: Cos queue ID.
        :param pulumi.Input[int] weight: Weight of weighted round robin scheduling.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if drop_policy is not None:
            pulumi.set(__self__, "drop_policy", drop_policy)
        if ecn is not None:
            pulumi.set(__self__, "ecn", ecn)
        if max_rate is not None:
            pulumi.set(__self__, "max_rate", max_rate)
        if max_rate_percent is not None:
            pulumi.set(__self__, "max_rate_percent", max_rate_percent)
        if min_rate is not None:
            pulumi.set(__self__, "min_rate", min_rate)
        if min_rate_percent is not None:
            pulumi.set(__self__, "min_rate_percent", min_rate_percent)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the COS queue.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dropPolicy")
    def drop_policy(self) -> Optional[pulumi.Input[str]]:
        """
        COS queue drop policy. Valid values: `taildrop`, `weighted-random-early-detection`.
        """
        return pulumi.get(self, "drop_policy")

    @drop_policy.setter
    def drop_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_policy", value)

    @property
    @pulumi.getter
    def ecn(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ECN packet marking to drop eligible packets. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ecn")

    @ecn.setter
    def ecn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ecn", value)

    @property
    @pulumi.getter(name="maxRate")
    def max_rate(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum rate (0 - 4294967295 kbps, 0 to disable).
        """
        return pulumi.get(self, "max_rate")

    @max_rate.setter
    def max_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_rate", value)

    @property
    @pulumi.getter(name="maxRatePercent")
    def max_rate_percent(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum rate (% of link speed).
        """
        return pulumi.get(self, "max_rate_percent")

    @max_rate_percent.setter
    def max_rate_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_rate_percent", value)

    @property
    @pulumi.getter(name="minRate")
    def min_rate(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum rate (0 - 4294967295 kbps, 0 to disable).
        """
        return pulumi.get(self, "min_rate")

    @min_rate.setter
    def min_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_rate", value)

    @property
    @pulumi.getter(name="minRatePercent")
    def min_rate_percent(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum rate (% of link speed).
        """
        return pulumi.get(self, "min_rate_percent")

    @min_rate_percent.setter
    def min_rate_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_rate_percent", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Cos queue ID.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight of weighted round robin scheduling.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class SwitchControllerQuarantineTargetArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 entry_id: Optional[pulumi.Input[int]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerQuarantineTargetTagArgs']]]] = None):
        """
        :param pulumi.Input[str] description: Description for the quarantine MAC.
        :param pulumi.Input[int] entry_id: FSW entry id for the quarantine MAC.
        :param pulumi.Input[str] mac: Quarantine MAC.
        :param pulumi.Input[Sequence[pulumi.Input['SwitchControllerQuarantineTargetTagArgs']]] tags: Tags for the quarantine MAC. The structure of `tag` block is documented below.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if entry_id is not None:
            pulumi.set(__self__, "entry_id", entry_id)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for the quarantine MAC.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="entryId")
    def entry_id(self) -> Optional[pulumi.Input[int]]:
        """
        FSW entry id for the quarantine MAC.
        """
        return pulumi.get(self, "entry_id")

    @entry_id.setter
    def entry_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "entry_id", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine MAC.
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerQuarantineTargetTagArgs']]]]:
        """
        Tags for the quarantine MAC. The structure of `tag` block is documented below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerQuarantineTargetTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class SwitchControllerQuarantineTargetTagArgs:
    def __init__(__self__, *,
                 tags: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] tags: Tag string(eg. string1 string2 string3).
        """
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[str]]:
        """
        Tag string(eg. string1 string2 string3).
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class SwitchControllerSecurityPolicy8021XUserGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SwitchControllerSnmpCommunityHostArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Host entry ID.
        :param pulumi.Input[str] ip: IPv4 address of the SNMP manager (host).
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Host entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of the SNMP manager (host).
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class SwitchControllerStpInstanceVlanRangeArgs:
    def __init__(__self__, *,
                 vlan_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] vlan_name: VLAN name.
        """
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN name.
        """
        return pulumi.get(self, "vlan_name")

    @vlan_name.setter
    def vlan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_name", value)


@pulumi.input_type
class SwitchControllerSwitchGroupMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 switch_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Managed device ID.
        :param pulumi.Input[str] switch_id: Managed device ID.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if switch_id is not None:
            pulumi.set(__self__, "switch_id", switch_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Managed device ID.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="switchId")
    def switch_id(self) -> Optional[pulumi.Input[str]]:
        """
        Managed device ID.
        """
        return pulumi.get(self, "switch_id")

    @switch_id.setter
    def switch_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_id", value)


@pulumi.input_type
class SwitchControllerTrafficSnifferTargetIpArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: Description for the sniffer port entry.
        :param pulumi.Input[str] ip: Sniffer IP.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for the sniffer port entry.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Sniffer IP.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class SwitchControllerTrafficSnifferTargetMacArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 mac: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: Description for the sniffer port entry.
        :param pulumi.Input[str] mac: Sniffer MAC.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for the sniffer port entry.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        """
        Sniffer MAC.
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)


@pulumi.input_type
class SwitchControllerTrafficSnifferTargetPortArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 in_ports: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerTrafficSnifferTargetPortInPortArgs']]]] = None,
                 out_ports: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerTrafficSnifferTargetPortOutPortArgs']]]] = None,
                 switch_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: Description for the sniffer port entry.
        :param pulumi.Input[Sequence[pulumi.Input['SwitchControllerTrafficSnifferTargetPortInPortArgs']]] in_ports: Configure source ingress port interfaces. The structure of `in_ports` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SwitchControllerTrafficSnifferTargetPortOutPortArgs']]] out_ports: Configure source egress port interfaces. The structure of `out_ports` block is documented below.
        :param pulumi.Input[str] switch_id: Managed-switch ID.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if in_ports is not None:
            pulumi.set(__self__, "in_ports", in_ports)
        if out_ports is not None:
            pulumi.set(__self__, "out_ports", out_ports)
        if switch_id is not None:
            pulumi.set(__self__, "switch_id", switch_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for the sniffer port entry.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="inPorts")
    def in_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerTrafficSnifferTargetPortInPortArgs']]]]:
        """
        Configure source ingress port interfaces. The structure of `in_ports` block is documented below.
        """
        return pulumi.get(self, "in_ports")

    @in_ports.setter
    def in_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerTrafficSnifferTargetPortInPortArgs']]]]):
        pulumi.set(self, "in_ports", value)

    @property
    @pulumi.getter(name="outPorts")
    def out_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerTrafficSnifferTargetPortOutPortArgs']]]]:
        """
        Configure source egress port interfaces. The structure of `out_ports` block is documented below.
        """
        return pulumi.get(self, "out_ports")

    @out_ports.setter
    def out_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SwitchControllerTrafficSnifferTargetPortOutPortArgs']]]]):
        pulumi.set(self, "out_ports", value)

    @property
    @pulumi.getter(name="switchId")
    def switch_id(self) -> Optional[pulumi.Input[str]]:
        """
        Managed-switch ID.
        """
        return pulumi.get(self, "switch_id")

    @switch_id.setter
    def switch_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_id", value)


@pulumi.input_type
class SwitchControllerTrafficSnifferTargetPortInPortArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SwitchControllerTrafficSnifferTargetPortOutPortArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SwitchControllerVlanPolicyAllowedVlanArgs:
    def __init__(__self__, *,
                 vlan_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] vlan_name: VLAN name.
        """
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN name.
        """
        return pulumi.get(self, "vlan_name")

    @vlan_name.setter
    def vlan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_name", value)


@pulumi.input_type
class SwitchControllerVlanPolicyUntaggedVlanArgs:
    def __init__(__self__, *,
                 vlan_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] vlan_name: VLAN name.
        """
        if vlan_name is not None:
            pulumi.set(__self__, "vlan_name", vlan_name)

    @property
    @pulumi.getter(name="vlanName")
    def vlan_name(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN name.
        """
        return pulumi.get(self, "vlan_name")

    @vlan_name.setter
    def vlan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_name", value)


@pulumi.input_type
class SwitchControllerVlanPortalMessageOverridesArgs:
    def __init__(__self__, *,
                 auth_disclaimer_page: Optional[pulumi.Input[str]] = None,
                 auth_login_failed_page: Optional[pulumi.Input[str]] = None,
                 auth_login_page: Optional[pulumi.Input[str]] = None,
                 auth_reject_page: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_disclaimer_page: Override auth-disclaimer-page message with message from portal-message-overrides group.
        :param pulumi.Input[str] auth_login_failed_page: Override auth-login-failed-page message with message from portal-message-overrides group.
        :param pulumi.Input[str] auth_login_page: Override auth-login-page message with message from portal-message-overrides group.
        :param pulumi.Input[str] auth_reject_page: Override auth-reject-page message with message from portal-message-overrides group.
        """
        if auth_disclaimer_page is not None:
            pulumi.set(__self__, "auth_disclaimer_page", auth_disclaimer_page)
        if auth_login_failed_page is not None:
            pulumi.set(__self__, "auth_login_failed_page", auth_login_failed_page)
        if auth_login_page is not None:
            pulumi.set(__self__, "auth_login_page", auth_login_page)
        if auth_reject_page is not None:
            pulumi.set(__self__, "auth_reject_page", auth_reject_page)

    @property
    @pulumi.getter(name="authDisclaimerPage")
    def auth_disclaimer_page(self) -> Optional[pulumi.Input[str]]:
        """
        Override auth-disclaimer-page message with message from portal-message-overrides group.
        """
        return pulumi.get(self, "auth_disclaimer_page")

    @auth_disclaimer_page.setter
    def auth_disclaimer_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_disclaimer_page", value)

    @property
    @pulumi.getter(name="authLoginFailedPage")
    def auth_login_failed_page(self) -> Optional[pulumi.Input[str]]:
        """
        Override auth-login-failed-page message with message from portal-message-overrides group.
        """
        return pulumi.get(self, "auth_login_failed_page")

    @auth_login_failed_page.setter
    def auth_login_failed_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_login_failed_page", value)

    @property
    @pulumi.getter(name="authLoginPage")
    def auth_login_page(self) -> Optional[pulumi.Input[str]]:
        """
        Override auth-login-page message with message from portal-message-overrides group.
        """
        return pulumi.get(self, "auth_login_page")

    @auth_login_page.setter
    def auth_login_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_login_page", value)

    @property
    @pulumi.getter(name="authRejectPage")
    def auth_reject_page(self) -> Optional[pulumi.Input[str]]:
        """
        Override auth-reject-page message with message from portal-message-overrides group.
        """
        return pulumi.get(self, "auth_reject_page")

    @auth_reject_page.setter
    def auth_reject_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_reject_page", value)


@pulumi.input_type
class SwitchControllerVlanSelectedUsergroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: User group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        User group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemAPIUserSettingTrusthostArgs:
    def __init__(__self__, *,
                 ipv4_trusthost: pulumi.Input[str],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "ipv4_trusthost", ipv4_trusthost)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="ipv4Trusthost")
    def ipv4_trusthost(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ipv4_trusthost")

    @ipv4_trusthost.setter
    def ipv4_trusthost(self, value: pulumi.Input[str]):
        pulumi.set(self, "ipv4_trusthost", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SystemAccprofileFwgrpPermissionArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 others: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input[str]] = None,
                 schedule: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] address: Address Configuration. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] others: Other Firewall Configuration. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] policy: Policy Configuration. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] schedule: Schedule Configuration. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] service: Service Configuration. Valid values: `none`, `read`, `read-write`.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if others is not None:
            pulumi.set(__self__, "others", others)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Address Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def others(self) -> Optional[pulumi.Input[str]]:
        """
        Other Firewall Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "others")

    @others.setter
    def others(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "others", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        """
        Policy Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        Service Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class SystemAccprofileLoggrpPermissionArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input[str]] = None,
                 data_access: Optional[pulumi.Input[str]] = None,
                 report_access: Optional[pulumi.Input[str]] = None,
                 threat_weight: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] config: Log & Report configuration. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] data_access: Log & Report Data Access. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] report_access: Log & Report Report Access. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] threat_weight: Log & Report Threat Weight. Valid values: `none`, `read`, `read-write`.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if data_access is not None:
            pulumi.set(__self__, "data_access", data_access)
        if report_access is not None:
            pulumi.set(__self__, "report_access", report_access)
        if threat_weight is not None:
            pulumi.set(__self__, "threat_weight", threat_weight)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[str]]:
        """
        Log & Report configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="dataAccess")
    def data_access(self) -> Optional[pulumi.Input[str]]:
        """
        Log & Report Data Access. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "data_access")

    @data_access.setter
    def data_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_access", value)

    @property
    @pulumi.getter(name="reportAccess")
    def report_access(self) -> Optional[pulumi.Input[str]]:
        """
        Log & Report Report Access. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "report_access")

    @report_access.setter
    def report_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "report_access", value)

    @property
    @pulumi.getter(name="threatWeight")
    def threat_weight(self) -> Optional[pulumi.Input[str]]:
        """
        Log & Report Threat Weight. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "threat_weight")

    @threat_weight.setter
    def threat_weight(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "threat_weight", value)


@pulumi.input_type
class SystemAccprofileNetgrpPermissionArgs:
    def __init__(__self__, *,
                 cfg: Optional[pulumi.Input[str]] = None,
                 packet_capture: Optional[pulumi.Input[str]] = None,
                 route_cfg: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cfg: System Configuration. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] packet_capture: Packet Capture Configuration. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] route_cfg: Router Configuration. Valid values: `none`, `read`, `read-write`.
        """
        if cfg is not None:
            pulumi.set(__self__, "cfg", cfg)
        if packet_capture is not None:
            pulumi.set(__self__, "packet_capture", packet_capture)
        if route_cfg is not None:
            pulumi.set(__self__, "route_cfg", route_cfg)

    @property
    @pulumi.getter
    def cfg(self) -> Optional[pulumi.Input[str]]:
        """
        System Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "cfg")

    @cfg.setter
    def cfg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cfg", value)

    @property
    @pulumi.getter(name="packetCapture")
    def packet_capture(self) -> Optional[pulumi.Input[str]]:
        """
        Packet Capture Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "packet_capture")

    @packet_capture.setter
    def packet_capture(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "packet_capture", value)

    @property
    @pulumi.getter(name="routeCfg")
    def route_cfg(self) -> Optional[pulumi.Input[str]]:
        """
        Router Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "route_cfg")

    @route_cfg.setter
    def route_cfg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_cfg", value)


@pulumi.input_type
class SystemAccprofileSysgrpPermissionArgs:
    def __init__(__self__, *,
                 admin: Optional[pulumi.Input[str]] = None,
                 cfg: Optional[pulumi.Input[str]] = None,
                 mnt: Optional[pulumi.Input[str]] = None,
                 upd: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] admin: Administrator Users. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] cfg: System Configuration. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] mnt: Maintenance. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] upd: FortiGuard Updates. Valid values: `none`, `read`, `read-write`.
        """
        if admin is not None:
            pulumi.set(__self__, "admin", admin)
        if cfg is not None:
            pulumi.set(__self__, "cfg", cfg)
        if mnt is not None:
            pulumi.set(__self__, "mnt", mnt)
        if upd is not None:
            pulumi.set(__self__, "upd", upd)

    @property
    @pulumi.getter
    def admin(self) -> Optional[pulumi.Input[str]]:
        """
        Administrator Users. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "admin")

    @admin.setter
    def admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin", value)

    @property
    @pulumi.getter
    def cfg(self) -> Optional[pulumi.Input[str]]:
        """
        System Configuration. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "cfg")

    @cfg.setter
    def cfg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cfg", value)

    @property
    @pulumi.getter
    def mnt(self) -> Optional[pulumi.Input[str]]:
        """
        Maintenance. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "mnt")

    @mnt.setter
    def mnt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mnt", value)

    @property
    @pulumi.getter
    def upd(self) -> Optional[pulumi.Input[str]]:
        """
        FortiGuard Updates. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "upd")

    @upd.setter
    def upd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upd", value)


@pulumi.input_type
class SystemAccprofileUtmgrpPermissionArgs:
    def __init__(__self__, *,
                 antivirus: Optional[pulumi.Input[str]] = None,
                 application_control: Optional[pulumi.Input[str]] = None,
                 data_loss_prevention: Optional[pulumi.Input[str]] = None,
                 dnsfilter: Optional[pulumi.Input[str]] = None,
                 emailfilter: Optional[pulumi.Input[str]] = None,
                 endpoint_control: Optional[pulumi.Input[str]] = None,
                 file_filter: Optional[pulumi.Input[str]] = None,
                 icap: Optional[pulumi.Input[str]] = None,
                 ips: Optional[pulumi.Input[str]] = None,
                 spamfilter: Optional[pulumi.Input[str]] = None,
                 voip: Optional[pulumi.Input[str]] = None,
                 waf: Optional[pulumi.Input[str]] = None,
                 webfilter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] antivirus: Antivirus profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] application_control: Application Control profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] data_loss_prevention: DLP profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] dnsfilter: DNS Filter profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] emailfilter: AntiSpam filter and settings. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] endpoint_control: FortiClient Profiles. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] file_filter: File-filter profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] icap: ICAP profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] ips: IPS profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] spamfilter: AntiSpam filter and settings. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] voip: VoIP profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] waf: Web Application Firewall profiles and settings. Valid values: `none`, `read`, `read-write`.
        :param pulumi.Input[str] webfilter: Web Filter profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        if antivirus is not None:
            pulumi.set(__self__, "antivirus", antivirus)
        if application_control is not None:
            pulumi.set(__self__, "application_control", application_control)
        if data_loss_prevention is not None:
            pulumi.set(__self__, "data_loss_prevention", data_loss_prevention)
        if dnsfilter is not None:
            pulumi.set(__self__, "dnsfilter", dnsfilter)
        if emailfilter is not None:
            pulumi.set(__self__, "emailfilter", emailfilter)
        if endpoint_control is not None:
            pulumi.set(__self__, "endpoint_control", endpoint_control)
        if file_filter is not None:
            pulumi.set(__self__, "file_filter", file_filter)
        if icap is not None:
            pulumi.set(__self__, "icap", icap)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if spamfilter is not None:
            pulumi.set(__self__, "spamfilter", spamfilter)
        if voip is not None:
            pulumi.set(__self__, "voip", voip)
        if waf is not None:
            pulumi.set(__self__, "waf", waf)
        if webfilter is not None:
            pulumi.set(__self__, "webfilter", webfilter)

    @property
    @pulumi.getter
    def antivirus(self) -> Optional[pulumi.Input[str]]:
        """
        Antivirus profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "antivirus")

    @antivirus.setter
    def antivirus(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antivirus", value)

    @property
    @pulumi.getter(name="applicationControl")
    def application_control(self) -> Optional[pulumi.Input[str]]:
        """
        Application Control profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "application_control")

    @application_control.setter
    def application_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_control", value)

    @property
    @pulumi.getter(name="dataLossPrevention")
    def data_loss_prevention(self) -> Optional[pulumi.Input[str]]:
        """
        DLP profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "data_loss_prevention")

    @data_loss_prevention.setter
    def data_loss_prevention(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_loss_prevention", value)

    @property
    @pulumi.getter
    def dnsfilter(self) -> Optional[pulumi.Input[str]]:
        """
        DNS Filter profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "dnsfilter")

    @dnsfilter.setter
    def dnsfilter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dnsfilter", value)

    @property
    @pulumi.getter
    def emailfilter(self) -> Optional[pulumi.Input[str]]:
        """
        AntiSpam filter and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "emailfilter")

    @emailfilter.setter
    def emailfilter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emailfilter", value)

    @property
    @pulumi.getter(name="endpointControl")
    def endpoint_control(self) -> Optional[pulumi.Input[str]]:
        """
        FortiClient Profiles. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "endpoint_control")

    @endpoint_control.setter
    def endpoint_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_control", value)

    @property
    @pulumi.getter(name="fileFilter")
    def file_filter(self) -> Optional[pulumi.Input[str]]:
        """
        File-filter profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "file_filter")

    @file_filter.setter
    def file_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_filter", value)

    @property
    @pulumi.getter
    def icap(self) -> Optional[pulumi.Input[str]]:
        """
        ICAP profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "icap")

    @icap.setter
    def icap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icap", value)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[str]]:
        """
        IPS profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter
    def spamfilter(self) -> Optional[pulumi.Input[str]]:
        """
        AntiSpam filter and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "spamfilter")

    @spamfilter.setter
    def spamfilter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spamfilter", value)

    @property
    @pulumi.getter
    def voip(self) -> Optional[pulumi.Input[str]]:
        """
        VoIP profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "voip")

    @voip.setter
    def voip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "voip", value)

    @property
    @pulumi.getter
    def waf(self) -> Optional[pulumi.Input[str]]:
        """
        Web Application Firewall profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "waf")

    @waf.setter
    def waf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "waf", value)

    @property
    @pulumi.getter
    def webfilter(self) -> Optional[pulumi.Input[str]]:
        """
        Web Filter profiles and settings. Valid values: `none`, `read`, `read-write`.
        """
        return pulumi.get(self, "webfilter")

    @webfilter.setter
    def webfilter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webfilter", value)


@pulumi.input_type
class SystemAcmeAccountArgs:
    def __init__(__self__, *,
                 ca_url: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 privatekey: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ca_url: Account ca_url.
        :param pulumi.Input[str] email: Account email.
        :param pulumi.Input[str] id: Account id.
        :param pulumi.Input[str] privatekey: Account Private Key.
        :param pulumi.Input[str] status: Account status.
        :param pulumi.Input[str] url: Account url.
        """
        if ca_url is not None:
            pulumi.set(__self__, "ca_url", ca_url)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if privatekey is not None:
            pulumi.set(__self__, "privatekey", privatekey)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="caUrl")
    def ca_url(self) -> Optional[pulumi.Input[str]]:
        """
        Account ca_url.
        """
        return pulumi.get(self, "ca_url")

    @ca_url.setter
    def ca_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_url", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Account email.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Account id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def privatekey(self) -> Optional[pulumi.Input[str]]:
        """
        Account Private Key.
        """
        return pulumi.get(self, "privatekey")

    @privatekey.setter
    def privatekey(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "privatekey", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Account status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Account url.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SystemAcmeInterfaceArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface_name: Interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class SystemAdminGuestUsergroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Select guest user groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Select guest user groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemAdminGuiDashboardArgs:
    def __init__(__self__, *,
                 columns: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 layout_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 widgets: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAdminGuiDashboardWidgetArgs']]]] = None):
        """
        :param pulumi.Input[int] columns: Number of columns.
        :param pulumi.Input[int] id: Select menu ID.
        :param pulumi.Input[str] layout_type: Layout type. Valid values: `responsive`, `fixed`.
        :param pulumi.Input[str] name: Select guest user groups.
        :param pulumi.Input[str] scope: Dashboard scope. Valid values: `global`, `vdom`.
        :param pulumi.Input[Sequence[pulumi.Input['SystemAdminGuiDashboardWidgetArgs']]] widgets: Dashboard widgets. The structure of `widget` block is documented below.
        """
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if layout_type is not None:
            pulumi.set(__self__, "layout_type", layout_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if widgets is not None:
            pulumi.set(__self__, "widgets", widgets)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[int]]:
        """
        Number of columns.
        """
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Select menu ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="layoutType")
    def layout_type(self) -> Optional[pulumi.Input[str]]:
        """
        Layout type. Valid values: `responsive`, `fixed`.
        """
        return pulumi.get(self, "layout_type")

    @layout_type.setter
    def layout_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "layout_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Select guest user groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        Dashboard scope. Valid values: `global`, `vdom`.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def widgets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemAdminGuiDashboardWidgetArgs']]]]:
        """
        Dashboard widgets. The structure of `widget` block is documented below.
        """
        return pulumi.get(self, "widgets")

    @widgets.setter
    def widgets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAdminGuiDashboardWidgetArgs']]]]):
        pulumi.set(self, "widgets", value)


@pulumi.input_type
class SystemAdminGuiDashboardWidgetArgs:
    def __init__(__self__, *,
                 fabric_device: Optional[pulumi.Input[str]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAdminGuiDashboardWidgetFilterArgs']]]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 industry: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 report_by: Optional[pulumi.Input[str]] = None,
                 sort_by: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 visualization: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[int]] = None,
                 x_pos: Optional[pulumi.Input[int]] = None,
                 y_pos: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] fabric_device: Fabric device to monitor.
        :param pulumi.Input[Sequence[pulumi.Input['SystemAdminGuiDashboardWidgetFilterArgs']]] filters: FortiView filters. The structure of `filters` block is documented below.
        :param pulumi.Input[int] height: Height.
        :param pulumi.Input[int] id: Select menu ID.
        :param pulumi.Input[str] industry: Security Audit Rating industry. Valid values: `default`, `custom`.
        :param pulumi.Input[str] interface: Interface to monitor.
        :param pulumi.Input[str] region: Security Audit Rating region. Valid values: `default`, `custom`.
        :param pulumi.Input[str] report_by: Field to aggregate the data by. Valid values: `source`, `destination`, `country`, `intfpair`, `srcintf`, `dstintf`, `policy`, `wificlient`, `shaper`, `endpoint-vulnerability`, `endpoint-device`, `application`, `cloud-app`, `cloud-user`, `web-domain`, `web-category`, `web-search-phrase`, `threat`, `system`, `unauth`, `admin`, `vpn`.
        :param pulumi.Input[str] sort_by: Field to sort the data by.
        :param pulumi.Input[str] timeframe: Timeframe period of reported data. Valid values: `realtime`, `5min`, `hour`, `day`, `week`.
        :param pulumi.Input[str] title: Widget title.
        :param pulumi.Input[str] type: Widget type. Valid values: `sysinfo`, `licinfo`, `vminfo`, `forticloud`, `cpu-usage`, `memory-usage`, `disk-usage`, `log-rate`, `sessions`, `session-rate`, `tr-history`, `analytics`, `usb-modem`, `admins`, `security-fabric`, `security-fabric-ranking`, `ha-status`, `vulnerability-summary`, `host-scan-summary`, `fortiview`, `botnet-activity`, `fortimail`.
        :param pulumi.Input[str] visualization: Visualization to use. Valid values: `table`, `bubble`, `country`, `chord`.
        :param pulumi.Input[int] width: Width.
        :param pulumi.Input[int] x_pos: X position.
        :param pulumi.Input[int] y_pos: Y position.
        """
        if fabric_device is not None:
            pulumi.set(__self__, "fabric_device", fabric_device)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if industry is not None:
            pulumi.set(__self__, "industry", industry)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if report_by is not None:
            pulumi.set(__self__, "report_by", report_by)
        if sort_by is not None:
            pulumi.set(__self__, "sort_by", sort_by)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if visualization is not None:
            pulumi.set(__self__, "visualization", visualization)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="fabricDevice")
    def fabric_device(self) -> Optional[pulumi.Input[str]]:
        """
        Fabric device to monitor.
        """
        return pulumi.get(self, "fabric_device")

    @fabric_device.setter
    def fabric_device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fabric_device", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemAdminGuiDashboardWidgetFilterArgs']]]]:
        """
        FortiView filters. The structure of `filters` block is documented below.
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAdminGuiDashboardWidgetFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        Height.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Select menu ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def industry(self) -> Optional[pulumi.Input[str]]:
        """
        Security Audit Rating industry. Valid values: `default`, `custom`.
        """
        return pulumi.get(self, "industry")

    @industry.setter
    def industry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "industry", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface to monitor.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Security Audit Rating region. Valid values: `default`, `custom`.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="reportBy")
    def report_by(self) -> Optional[pulumi.Input[str]]:
        """
        Field to aggregate the data by. Valid values: `source`, `destination`, `country`, `intfpair`, `srcintf`, `dstintf`, `policy`, `wificlient`, `shaper`, `endpoint-vulnerability`, `endpoint-device`, `application`, `cloud-app`, `cloud-user`, `web-domain`, `web-category`, `web-search-phrase`, `threat`, `system`, `unauth`, `admin`, `vpn`.
        """
        return pulumi.get(self, "report_by")

    @report_by.setter
    def report_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "report_by", value)

    @property
    @pulumi.getter(name="sortBy")
    def sort_by(self) -> Optional[pulumi.Input[str]]:
        """
        Field to sort the data by.
        """
        return pulumi.get(self, "sort_by")

    @sort_by.setter
    def sort_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort_by", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        """
        Timeframe period of reported data. Valid values: `realtime`, `5min`, `hour`, `day`, `week`.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Widget title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Widget type. Valid values: `sysinfo`, `licinfo`, `vminfo`, `forticloud`, `cpu-usage`, `memory-usage`, `disk-usage`, `log-rate`, `sessions`, `session-rate`, `tr-history`, `analytics`, `usb-modem`, `admins`, `security-fabric`, `security-fabric-ranking`, `ha-status`, `vulnerability-summary`, `host-scan-summary`, `fortiview`, `botnet-activity`, `fortimail`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def visualization(self) -> Optional[pulumi.Input[str]]:
        """
        Visualization to use. Valid values: `table`, `bubble`, `country`, `chord`.
        """
        return pulumi.get(self, "visualization")

    @visualization.setter
    def visualization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visualization", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        Width.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[int]]:
        """
        X position.
        """
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[int]]:
        """
        Y position.
        """
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "y_pos", value)


@pulumi.input_type
class SystemAdminGuiDashboardWidgetFilterArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Select menu ID.
        :param pulumi.Input[str] key: Filter key.
        :param pulumi.Input[str] value: Filter value.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Select menu ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Filter key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SystemAdminGuiGlobalMenuFavoriteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Select menu ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Select menu ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemAdminGuiNewFeatureAcknowledgeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Select menu ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Select menu ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemAdminGuiVdomMenuFavoriteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Select menu ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Select menu ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemAdminLoginTimeArgs:
    def __init__(__self__, *,
                 last_failed_login: Optional[pulumi.Input[str]] = None,
                 last_login: Optional[pulumi.Input[str]] = None,
                 usr_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] last_failed_login: Last failed login time.
        :param pulumi.Input[str] last_login: Last successful login time.
        :param pulumi.Input[str] usr_name: User name.
        """
        if last_failed_login is not None:
            pulumi.set(__self__, "last_failed_login", last_failed_login)
        if last_login is not None:
            pulumi.set(__self__, "last_login", last_login)
        if usr_name is not None:
            pulumi.set(__self__, "usr_name", usr_name)

    @property
    @pulumi.getter(name="lastFailedLogin")
    def last_failed_login(self) -> Optional[pulumi.Input[str]]:
        """
        Last failed login time.
        """
        return pulumi.get(self, "last_failed_login")

    @last_failed_login.setter
    def last_failed_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_failed_login", value)

    @property
    @pulumi.getter(name="lastLogin")
    def last_login(self) -> Optional[pulumi.Input[str]]:
        """
        Last successful login time.
        """
        return pulumi.get(self, "last_login")

    @last_login.setter
    def last_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_login", value)

    @property
    @pulumi.getter(name="usrName")
    def usr_name(self) -> Optional[pulumi.Input[str]]:
        """
        User name.
        """
        return pulumi.get(self, "usr_name")

    @usr_name.setter
    def usr_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usr_name", value)


@pulumi.input_type
class SystemAdminVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Select guest user groups.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Select guest user groups.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemAlarmGroupArgs:
    def __init__(__self__, *,
                 admin_auth_failure_threshold: Optional[pulumi.Input[int]] = None,
                 admin_auth_lockout_threshold: Optional[pulumi.Input[int]] = None,
                 decryption_failure_threshold: Optional[pulumi.Input[int]] = None,
                 encryption_failure_threshold: Optional[pulumi.Input[int]] = None,
                 fw_policy_id: Optional[pulumi.Input[int]] = None,
                 fw_policy_id_threshold: Optional[pulumi.Input[int]] = None,
                 fw_policy_violations: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAlarmGroupFwPolicyViolationArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 log_full_warning_threshold: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 replay_attempt_threshold: Optional[pulumi.Input[int]] = None,
                 self_test_failure_threshold: Optional[pulumi.Input[int]] = None,
                 user_auth_failure_threshold: Optional[pulumi.Input[int]] = None,
                 user_auth_lockout_threshold: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] admin_auth_failure_threshold: Admin authentication failure threshold.
        :param pulumi.Input[int] admin_auth_lockout_threshold: Admin authentication lockout threshold.
        :param pulumi.Input[int] decryption_failure_threshold: Decryption failure threshold.
        :param pulumi.Input[int] encryption_failure_threshold: Encryption failure threshold.
        :param pulumi.Input[int] fw_policy_id: Firewall policy ID.
        :param pulumi.Input[int] fw_policy_id_threshold: Firewall policy ID threshold.
        :param pulumi.Input[Sequence[pulumi.Input['SystemAlarmGroupFwPolicyViolationArgs']]] fw_policy_violations: Firewall policy violations. The structure of `fw_policy_violations` block is documented below.
        :param pulumi.Input[int] id: Firewall policy violations ID.
        :param pulumi.Input[int] log_full_warning_threshold: Log full warning threshold.
        :param pulumi.Input[int] period: Time period in seconds (0 = from start up).
        :param pulumi.Input[int] replay_attempt_threshold: Replay attempt threshold.
        :param pulumi.Input[int] self_test_failure_threshold: Self-test failure threshold.
        :param pulumi.Input[int] user_auth_failure_threshold: User authentication failure threshold.
        :param pulumi.Input[int] user_auth_lockout_threshold: User authentication lockout threshold.
        """
        if admin_auth_failure_threshold is not None:
            pulumi.set(__self__, "admin_auth_failure_threshold", admin_auth_failure_threshold)
        if admin_auth_lockout_threshold is not None:
            pulumi.set(__self__, "admin_auth_lockout_threshold", admin_auth_lockout_threshold)
        if decryption_failure_threshold is not None:
            pulumi.set(__self__, "decryption_failure_threshold", decryption_failure_threshold)
        if encryption_failure_threshold is not None:
            pulumi.set(__self__, "encryption_failure_threshold", encryption_failure_threshold)
        if fw_policy_id is not None:
            pulumi.set(__self__, "fw_policy_id", fw_policy_id)
        if fw_policy_id_threshold is not None:
            pulumi.set(__self__, "fw_policy_id_threshold", fw_policy_id_threshold)
        if fw_policy_violations is not None:
            pulumi.set(__self__, "fw_policy_violations", fw_policy_violations)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log_full_warning_threshold is not None:
            pulumi.set(__self__, "log_full_warning_threshold", log_full_warning_threshold)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if replay_attempt_threshold is not None:
            pulumi.set(__self__, "replay_attempt_threshold", replay_attempt_threshold)
        if self_test_failure_threshold is not None:
            pulumi.set(__self__, "self_test_failure_threshold", self_test_failure_threshold)
        if user_auth_failure_threshold is not None:
            pulumi.set(__self__, "user_auth_failure_threshold", user_auth_failure_threshold)
        if user_auth_lockout_threshold is not None:
            pulumi.set(__self__, "user_auth_lockout_threshold", user_auth_lockout_threshold)

    @property
    @pulumi.getter(name="adminAuthFailureThreshold")
    def admin_auth_failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Admin authentication failure threshold.
        """
        return pulumi.get(self, "admin_auth_failure_threshold")

    @admin_auth_failure_threshold.setter
    def admin_auth_failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_auth_failure_threshold", value)

    @property
    @pulumi.getter(name="adminAuthLockoutThreshold")
    def admin_auth_lockout_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Admin authentication lockout threshold.
        """
        return pulumi.get(self, "admin_auth_lockout_threshold")

    @admin_auth_lockout_threshold.setter
    def admin_auth_lockout_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_auth_lockout_threshold", value)

    @property
    @pulumi.getter(name="decryptionFailureThreshold")
    def decryption_failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Decryption failure threshold.
        """
        return pulumi.get(self, "decryption_failure_threshold")

    @decryption_failure_threshold.setter
    def decryption_failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "decryption_failure_threshold", value)

    @property
    @pulumi.getter(name="encryptionFailureThreshold")
    def encryption_failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Encryption failure threshold.
        """
        return pulumi.get(self, "encryption_failure_threshold")

    @encryption_failure_threshold.setter
    def encryption_failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "encryption_failure_threshold", value)

    @property
    @pulumi.getter(name="fwPolicyId")
    def fw_policy_id(self) -> Optional[pulumi.Input[int]]:
        """
        Firewall policy ID.
        """
        return pulumi.get(self, "fw_policy_id")

    @fw_policy_id.setter
    def fw_policy_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fw_policy_id", value)

    @property
    @pulumi.getter(name="fwPolicyIdThreshold")
    def fw_policy_id_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Firewall policy ID threshold.
        """
        return pulumi.get(self, "fw_policy_id_threshold")

    @fw_policy_id_threshold.setter
    def fw_policy_id_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fw_policy_id_threshold", value)

    @property
    @pulumi.getter(name="fwPolicyViolations")
    def fw_policy_violations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemAlarmGroupFwPolicyViolationArgs']]]]:
        """
        Firewall policy violations. The structure of `fw_policy_violations` block is documented below.
        """
        return pulumi.get(self, "fw_policy_violations")

    @fw_policy_violations.setter
    def fw_policy_violations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemAlarmGroupFwPolicyViolationArgs']]]]):
        pulumi.set(self, "fw_policy_violations", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Firewall policy violations ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="logFullWarningThreshold")
    def log_full_warning_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Log full warning threshold.
        """
        return pulumi.get(self, "log_full_warning_threshold")

    @log_full_warning_threshold.setter
    def log_full_warning_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_full_warning_threshold", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        Time period in seconds (0 = from start up).
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="replayAttemptThreshold")
    def replay_attempt_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Replay attempt threshold.
        """
        return pulumi.get(self, "replay_attempt_threshold")

    @replay_attempt_threshold.setter
    def replay_attempt_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replay_attempt_threshold", value)

    @property
    @pulumi.getter(name="selfTestFailureThreshold")
    def self_test_failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Self-test failure threshold.
        """
        return pulumi.get(self, "self_test_failure_threshold")

    @self_test_failure_threshold.setter
    def self_test_failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "self_test_failure_threshold", value)

    @property
    @pulumi.getter(name="userAuthFailureThreshold")
    def user_auth_failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        User authentication failure threshold.
        """
        return pulumi.get(self, "user_auth_failure_threshold")

    @user_auth_failure_threshold.setter
    def user_auth_failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user_auth_failure_threshold", value)

    @property
    @pulumi.getter(name="userAuthLockoutThreshold")
    def user_auth_lockout_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        User authentication lockout threshold.
        """
        return pulumi.get(self, "user_auth_lockout_threshold")

    @user_auth_lockout_threshold.setter
    def user_auth_lockout_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user_auth_lockout_threshold", value)


@pulumi.input_type
class SystemAlarmGroupFwPolicyViolationArgs:
    def __init__(__self__, *,
                 dst_ip: Optional[pulumi.Input[str]] = None,
                 dst_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 src_ip: Optional[pulumi.Input[str]] = None,
                 src_port: Optional[pulumi.Input[int]] = None,
                 threshold: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] dst_ip: Destination IP (0=all).
        :param pulumi.Input[int] dst_port: Destination port (0=all).
        :param pulumi.Input[int] id: Firewall policy violations ID.
        :param pulumi.Input[str] src_ip: Source IP (0=all).
        :param pulumi.Input[int] src_port: Source port (0=all).
        :param pulumi.Input[int] threshold: Firewall policy violation threshold.
        """
        if dst_ip is not None:
            pulumi.set(__self__, "dst_ip", dst_ip)
        if dst_port is not None:
            pulumi.set(__self__, "dst_port", dst_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if src_ip is not None:
            pulumi.set(__self__, "src_ip", src_ip)
        if src_port is not None:
            pulumi.set(__self__, "src_port", src_port)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="dstIp")
    def dst_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Destination IP (0=all).
        """
        return pulumi.get(self, "dst_ip")

    @dst_ip.setter
    def dst_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_ip", value)

    @property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[pulumi.Input[int]]:
        """
        Destination port (0=all).
        """
        return pulumi.get(self, "dst_port")

    @dst_port.setter
    def dst_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dst_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Firewall policy violations ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP (0=all).
        """
        return pulumi.get(self, "src_ip")

    @src_ip.setter
    def src_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_ip", value)

    @property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[pulumi.Input[int]]:
        """
        Source port (0=all).
        """
        return pulumi.get(self, "src_port")

    @src_port.setter
    def src_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "src_port", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Firewall policy violation threshold.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class SystemApiUserTrusthostArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 ipv4_trusthost: Optional[pulumi.Input[str]] = None,
                 ipv6_trusthost: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Table ID.
        :param pulumi.Input[str] ipv4_trusthost: IPv4 trusted host address.
        :param pulumi.Input[str] ipv6_trusthost: IPv6 trusted host address.
        :param pulumi.Input[str] type: Trusthost type. Valid values: `ipv4-trusthost`, `ipv6-trusthost`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ipv4_trusthost is not None:
            pulumi.set(__self__, "ipv4_trusthost", ipv4_trusthost)
        if ipv6_trusthost is not None:
            pulumi.set(__self__, "ipv6_trusthost", ipv6_trusthost)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Table ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ipv4Trusthost")
    def ipv4_trusthost(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 trusted host address.
        """
        return pulumi.get(self, "ipv4_trusthost")

    @ipv4_trusthost.setter
    def ipv4_trusthost(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_trusthost", value)

    @property
    @pulumi.getter(name="ipv6Trusthost")
    def ipv6_trusthost(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 trusted host address.
        """
        return pulumi.get(self, "ipv6_trusthost")

    @ipv6_trusthost.setter
    def ipv6_trusthost(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_trusthost", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Trusthost type. Valid values: `ipv4-trusthost`, `ipv6-trusthost`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SystemApiUserVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual domain name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual domain name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemAutomationActionEmailToArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: SDN connector name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        SDN connector name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemAutomationActionHeaderArgs:
    def __init__(__self__, *,
                 header: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] header: Request header.
        """
        if header is not None:
            pulumi.set(__self__, "header", header)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Request header.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)


@pulumi.input_type
class SystemAutomationActionSdnConnectorArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: SDN connector name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        SDN connector name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemAutomationDestinationDestinationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Destination.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Destination.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemAutomationStitchActionArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 delay: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 required: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action name.
        :param pulumi.Input[int] delay: Delay before execution (in seconds).
        :param pulumi.Input[int] id: Entry ID.
        :param pulumi.Input[str] required: Required in action chain. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action name.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def delay(self) -> Optional[pulumi.Input[int]]:
        """
        Delay before execution (in seconds).
        """
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delay", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[str]]:
        """
        Required in action chain. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "required", value)


@pulumi.input_type
class SystemAutomationStitchDestinationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Destination name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Destination name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemAutomationTriggerFieldArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Log ID.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] value: Value.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Log ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SystemAutomationTriggerLogidBlockArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Log ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Log ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemCentralManagementServerListArgs:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 server_address: Optional[pulumi.Input[str]] = None,
                 server_address6: Optional[pulumi.Input[str]] = None,
                 server_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] addr_type: Indicate whether the FortiGate communicates with the override server using an IPv4 address, an IPv6 address or a FQDN. Valid values: `ipv4`, `ipv6`, `fqdn`.
        :param pulumi.Input[str] fqdn: FQDN address of override server.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] server_address: IPv4 address of override server.
        :param pulumi.Input[str] server_address6: IPv6 address of override server.
        :param pulumi.Input[str] server_type: FortiGuard service type. Valid values: `update`, `rating`.
        """
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if server_address is not None:
            pulumi.set(__self__, "server_address", server_address)
        if server_address6 is not None:
            pulumi.set(__self__, "server_address6", server_address6)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Indicate whether the FortiGate communicates with the override server using an IPv4 address, an IPv6 address or a FQDN. Valid values: `ipv4`, `ipv6`, `fqdn`.
        """
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        FQDN address of override server.
        """
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="serverAddress")
    def server_address(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of override server.
        """
        return pulumi.get(self, "server_address")

    @server_address.setter
    def server_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_address", value)

    @property
    @pulumi.getter(name="serverAddress6")
    def server_address6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of override server.
        """
        return pulumi.get(self, "server_address6")

    @server_address6.setter
    def server_address6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_address6", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[str]]:
        """
        FortiGuard service type. Valid values: `update`, `rating`.
        """
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_type", value)


@pulumi.input_type
class SystemClusterSyncDownIntfsBeforeSessSyncArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemClusterSyncSessionSyncFilterArgs:
    def __init__(__self__, *,
                 custom_services: Optional[pulumi.Input[Sequence[pulumi.Input['SystemClusterSyncSessionSyncFilterCustomServiceArgs']]]] = None,
                 dstaddr: Optional[pulumi.Input[str]] = None,
                 dstaddr6: Optional[pulumi.Input[str]] = None,
                 dstintf: Optional[pulumi.Input[str]] = None,
                 srcaddr: Optional[pulumi.Input[str]] = None,
                 srcaddr6: Optional[pulumi.Input[str]] = None,
                 srcintf: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SystemClusterSyncSessionSyncFilterCustomServiceArgs']]] custom_services: Only sessions using these custom services are synchronized. Use source and destination port ranges to define these custome services. The structure of `custom_service` block is documented below.
        :param pulumi.Input[str] dstaddr: Only sessions to this IPv4 address are synchronized. You can only enter one address. To synchronize sessions for multiple destination addresses, add multiple filters.
        :param pulumi.Input[str] dstaddr6: Only sessions to this IPv6 address are synchronized. You can only enter one address. To synchronize sessions for multiple destination addresses, add multiple filters.
        :param pulumi.Input[str] dstintf: Only sessions to this interface are synchronized. You can only enter one interface name. To synchronize sessions to multiple destination interfaces, add multiple filters.
        :param pulumi.Input[str] srcaddr: Only sessions from this IPv4 address are synchronized. You can only enter one address. To synchronize sessions from multiple source addresses, add multiple filters.
        :param pulumi.Input[str] srcaddr6: Only sessions from this IPv6 address are synchronized. You can only enter one address. To synchronize sessions from multiple source addresses, add multiple filters.
        :param pulumi.Input[str] srcintf: Only sessions from this interface are synchronized. You can only enter one interface name. To synchronize sessions for multiple source interfaces, add multiple filters.
        """
        if custom_services is not None:
            pulumi.set(__self__, "custom_services", custom_services)
        if dstaddr is not None:
            pulumi.set(__self__, "dstaddr", dstaddr)
        if dstaddr6 is not None:
            pulumi.set(__self__, "dstaddr6", dstaddr6)
        if dstintf is not None:
            pulumi.set(__self__, "dstintf", dstintf)
        if srcaddr is not None:
            pulumi.set(__self__, "srcaddr", srcaddr)
        if srcaddr6 is not None:
            pulumi.set(__self__, "srcaddr6", srcaddr6)
        if srcintf is not None:
            pulumi.set(__self__, "srcintf", srcintf)

    @property
    @pulumi.getter(name="customServices")
    def custom_services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemClusterSyncSessionSyncFilterCustomServiceArgs']]]]:
        """
        Only sessions using these custom services are synchronized. Use source and destination port ranges to define these custome services. The structure of `custom_service` block is documented below.
        """
        return pulumi.get(self, "custom_services")

    @custom_services.setter
    def custom_services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemClusterSyncSessionSyncFilterCustomServiceArgs']]]]):
        pulumi.set(self, "custom_services", value)

    @property
    @pulumi.getter
    def dstaddr(self) -> Optional[pulumi.Input[str]]:
        """
        Only sessions to this IPv4 address are synchronized. You can only enter one address. To synchronize sessions for multiple destination addresses, add multiple filters.
        """
        return pulumi.get(self, "dstaddr")

    @dstaddr.setter
    def dstaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr", value)

    @property
    @pulumi.getter
    def dstaddr6(self) -> Optional[pulumi.Input[str]]:
        """
        Only sessions to this IPv6 address are synchronized. You can only enter one address. To synchronize sessions for multiple destination addresses, add multiple filters.
        """
        return pulumi.get(self, "dstaddr6")

    @dstaddr6.setter
    def dstaddr6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr6", value)

    @property
    @pulumi.getter
    def dstintf(self) -> Optional[pulumi.Input[str]]:
        """
        Only sessions to this interface are synchronized. You can only enter one interface name. To synchronize sessions to multiple destination interfaces, add multiple filters.
        """
        return pulumi.get(self, "dstintf")

    @dstintf.setter
    def dstintf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstintf", value)

    @property
    @pulumi.getter
    def srcaddr(self) -> Optional[pulumi.Input[str]]:
        """
        Only sessions from this IPv4 address are synchronized. You can only enter one address. To synchronize sessions from multiple source addresses, add multiple filters.
        """
        return pulumi.get(self, "srcaddr")

    @srcaddr.setter
    def srcaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr", value)

    @property
    @pulumi.getter
    def srcaddr6(self) -> Optional[pulumi.Input[str]]:
        """
        Only sessions from this IPv6 address are synchronized. You can only enter one address. To synchronize sessions from multiple source addresses, add multiple filters.
        """
        return pulumi.get(self, "srcaddr6")

    @srcaddr6.setter
    def srcaddr6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr6", value)

    @property
    @pulumi.getter
    def srcintf(self) -> Optional[pulumi.Input[str]]:
        """
        Only sessions from this interface are synchronized. You can only enter one interface name. To synchronize sessions for multiple source interfaces, add multiple filters.
        """
        return pulumi.get(self, "srcintf")

    @srcintf.setter
    def srcintf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcintf", value)


@pulumi.input_type
class SystemClusterSyncSessionSyncFilterCustomServiceArgs:
    def __init__(__self__, *,
                 dst_port_range: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 src_port_range: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] dst_port_range: Custom service destination port range.
        :param pulumi.Input[int] id: Custom service ID.
        :param pulumi.Input[str] src_port_range: Custom service source port range.
        """
        if dst_port_range is not None:
            pulumi.set(__self__, "dst_port_range", dst_port_range)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if src_port_range is not None:
            pulumi.set(__self__, "src_port_range", src_port_range)

    @property
    @pulumi.getter(name="dstPortRange")
    def dst_port_range(self) -> Optional[pulumi.Input[str]]:
        """
        Custom service destination port range.
        """
        return pulumi.get(self, "dst_port_range")

    @dst_port_range.setter
    def dst_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_port_range", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Custom service ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="srcPortRange")
    def src_port_range(self) -> Optional[pulumi.Input[str]]:
        """
        Custom service source port range.
        """
        return pulumi.get(self, "src_port_range")

    @src_port_range.setter
    def src_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_port_range", value)


@pulumi.input_type
class SystemClusterSyncSyncvdArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Interface name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemCsfFabricConnectorArgs:
    def __init__(__self__, *,
                 accprofile: Optional[pulumi.Input[str]] = None,
                 configuration_write_access: Optional[pulumi.Input[str]] = None,
                 serial: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] accprofile: Override access profile.
        :param pulumi.Input[str] configuration_write_access: Enable/disable downstream device write access to configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] serial: Serial.
        """
        if accprofile is not None:
            pulumi.set(__self__, "accprofile", accprofile)
        if configuration_write_access is not None:
            pulumi.set(__self__, "configuration_write_access", configuration_write_access)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def accprofile(self) -> Optional[pulumi.Input[str]]:
        """
        Override access profile.
        """
        return pulumi.get(self, "accprofile")

    @accprofile.setter
    def accprofile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accprofile", value)

    @property
    @pulumi.getter(name="configurationWriteAccess")
    def configuration_write_access(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable downstream device write access to configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "configuration_write_access")

    @configuration_write_access.setter
    def configuration_write_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration_write_access", value)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        """
        Serial.
        """
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)


@pulumi.input_type
class SystemCsfFabricDeviceArgs:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input[str]] = None,
                 device_ip: Optional[pulumi.Input[str]] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 https_port: Optional[pulumi.Input[int]] = None,
                 login: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_token: Device access token.
        :param pulumi.Input[str] device_ip: Device IP.
        :param pulumi.Input[str] device_type: Device type. Valid values: `fortimail`.
        :param pulumi.Input[int] https_port: HTTPS port for fabric device.
        :param pulumi.Input[str] login: Device login name.
        :param pulumi.Input[str] name: Device name.
        :param pulumi.Input[str] password: Device login password.
        """
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if device_ip is not None:
            pulumi.set(__self__, "device_ip", device_ip)
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)
        if login is not None:
            pulumi.set(__self__, "login", login)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        Device access token.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="deviceIp")
    def device_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Device IP.
        """
        return pulumi.get(self, "device_ip")

    @device_ip.setter
    def device_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_ip", value)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[pulumi.Input[str]]:
        """
        Device type. Valid values: `fortimail`.
        """
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[pulumi.Input[int]]:
        """
        HTTPS port for fabric device.
        """
        return pulumi.get(self, "https_port")

    @https_port.setter
    def https_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "https_port", value)

    @property
    @pulumi.getter
    def login(self) -> Optional[pulumi.Input[str]]:
        """
        Device login name.
        """
        return pulumi.get(self, "login")

    @login.setter
    def login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Device name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Device login password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)


@pulumi.input_type
class SystemCsfTrustedListArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 authorization_type: Optional[pulumi.Input[str]] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 downstream_authorization: Optional[pulumi.Input[str]] = None,
                 ha_members: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 serial: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Security fabric authorization action. Valid values: `accept`, `deny`.
        :param pulumi.Input[str] authorization_type: Authorization type. Valid values: `serial`, `certificate`.
        :param pulumi.Input[str] certificate: Certificate.
        :param pulumi.Input[str] downstream_authorization: Trust authorizations by this node's administrator. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ha_members: HA members.
        :param pulumi.Input[str] name: Device name.
        :param pulumi.Input[str] serial: Serial.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if authorization_type is not None:
            pulumi.set(__self__, "authorization_type", authorization_type)
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if downstream_authorization is not None:
            pulumi.set(__self__, "downstream_authorization", downstream_authorization)
        if ha_members is not None:
            pulumi.set(__self__, "ha_members", ha_members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Security fabric authorization action. Valid values: `accept`, `deny`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="authorizationType")
    def authorization_type(self) -> Optional[pulumi.Input[str]]:
        """
        Authorization type. Valid values: `serial`, `certificate`.
        """
        return pulumi.get(self, "authorization_type")

    @authorization_type.setter
    def authorization_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_type", value)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="downstreamAuthorization")
    def downstream_authorization(self) -> Optional[pulumi.Input[str]]:
        """
        Trust authorizations by this node's administrator. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "downstream_authorization")

    @downstream_authorization.setter
    def downstream_authorization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "downstream_authorization", value)

    @property
    @pulumi.getter(name="haMembers")
    def ha_members(self) -> Optional[pulumi.Input[str]]:
        """
        HA members.
        """
        return pulumi.get(self, "ha_members")

    @ha_members.setter
    def ha_members(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_members", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Device name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        """
        Serial.
        """
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)


@pulumi.input_type
class SystemDdnsDdnsServerAddrArgs:
    def __init__(__self__, *,
                 addr: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] addr: IP address or FQDN of the server.
        """
        if addr is not None:
            pulumi.set(__self__, "addr", addr)

    @property
    @pulumi.getter
    def addr(self) -> Optional[pulumi.Input[str]]:
        """
        IP address or FQDN of the server.
        """
        return pulumi.get(self, "addr")

    @addr.setter
    def addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr", value)


@pulumi.input_type
class SystemDdnsMonitorInterfaceArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface_name: Interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class SystemDhcp6ServerIpRangeArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end_ip: End of IP range.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] start_ip: Start of IP range.
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        End of IP range.
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Start of IP range.
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class SystemDhcp6ServerPrefixRangeArgs:
    def __init__(__self__, *,
                 end_prefix: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 prefix_length: Optional[pulumi.Input[int]] = None,
                 start_prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end_prefix: End of prefix range.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[int] prefix_length: Prefix length.
        :param pulumi.Input[str] start_prefix: Start of prefix range.
        """
        if end_prefix is not None:
            pulumi.set(__self__, "end_prefix", end_prefix)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix_length is not None:
            pulumi.set(__self__, "prefix_length", prefix_length)
        if start_prefix is not None:
            pulumi.set(__self__, "start_prefix", start_prefix)

    @property
    @pulumi.getter(name="endPrefix")
    def end_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        End of prefix range.
        """
        return pulumi.get(self, "end_prefix")

    @end_prefix.setter
    def end_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_prefix", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="prefixLength")
    def prefix_length(self) -> Optional[pulumi.Input[int]]:
        """
        Prefix length.
        """
        return pulumi.get(self, "prefix_length")

    @prefix_length.setter
    def prefix_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prefix_length", value)

    @property
    @pulumi.getter(name="startPrefix")
    def start_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Start of prefix range.
        """
        return pulumi.get(self, "start_prefix")

    @start_prefix.setter
    def start_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_prefix", value)


@pulumi.input_type
class SystemDhcpServerExcludeRangeArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end_ip: End of IP range.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] start_ip: Start of IP range.
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        End of IP range.
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Start of IP range.
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class SystemDhcpServerIpRangeArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end_ip: End of IP range.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] start_ip: Start of IP range.
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        End of IP range.
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Start of IP range.
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class SystemDhcpServerOptionArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] code: DHCP option code.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] ip: IP address to be reserved for the MAC address.
        :param pulumi.Input[str] type: DHCP reserved-address type. Valid values: `mac`, `option82`.
        :param pulumi.Input[str] value: DHCP option value.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        """
        DHCP option code.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address to be reserved for the MAC address.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP reserved-address type. Valid values: `mac`, `option82`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP option value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SystemDhcpServerReservedAddressArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 circuit_id: Optional[pulumi.Input[str]] = None,
                 circuit_id_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 remote_id: Optional[pulumi.Input[str]] = None,
                 remote_id_type: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Options for the DHCP server to configure the client with the reserved MAC address. Valid values: `assign`, `block`, `reserved`.
        :param pulumi.Input[str] circuit_id: Option 82 circuit-ID of the client that will get the reserved IP address.
        :param pulumi.Input[str] circuit_id_type: DHCP option type. Valid values: `hex`, `string`.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] ip: IP address to be reserved for the MAC address.
        :param pulumi.Input[str] mac: MAC address of the client that will get the reserved IP address.
        :param pulumi.Input[str] remote_id: Option 82 remote-ID of the client that will get the reserved IP address.
        :param pulumi.Input[str] remote_id_type: DHCP option type. Valid values: `hex`, `string`.
        :param pulumi.Input[str] type: DHCP reserved-address type. Valid values: `mac`, `option82`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if circuit_id is not None:
            pulumi.set(__self__, "circuit_id", circuit_id)
        if circuit_id_type is not None:
            pulumi.set(__self__, "circuit_id_type", circuit_id_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if remote_id is not None:
            pulumi.set(__self__, "remote_id", remote_id)
        if remote_id_type is not None:
            pulumi.set(__self__, "remote_id_type", remote_id_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Options for the DHCP server to configure the client with the reserved MAC address. Valid values: `assign`, `block`, `reserved`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="circuitId")
    def circuit_id(self) -> Optional[pulumi.Input[str]]:
        """
        Option 82 circuit-ID of the client that will get the reserved IP address.
        """
        return pulumi.get(self, "circuit_id")

    @circuit_id.setter
    def circuit_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "circuit_id", value)

    @property
    @pulumi.getter(name="circuitIdType")
    def circuit_id_type(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP option type. Valid values: `hex`, `string`.
        """
        return pulumi.get(self, "circuit_id_type")

    @circuit_id_type.setter
    def circuit_id_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "circuit_id_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address to be reserved for the MAC address.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address of the client that will get the reserved IP address.
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter(name="remoteId")
    def remote_id(self) -> Optional[pulumi.Input[str]]:
        """
        Option 82 remote-ID of the client that will get the reserved IP address.
        """
        return pulumi.get(self, "remote_id")

    @remote_id.setter
    def remote_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_id", value)

    @property
    @pulumi.getter(name="remoteIdType")
    def remote_id_type(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP option type. Valid values: `hex`, `string`.
        """
        return pulumi.get(self, "remote_id_type")

    @remote_id_type.setter
    def remote_id_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_id_type", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP reserved-address type. Valid values: `mac`, `option82`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SystemDhcpServerTftpServerArgs:
    def __init__(__self__, *,
                 tftp_server: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] tftp_server: TFTP server.
        """
        if tftp_server is not None:
            pulumi.set(__self__, "tftp_server", tftp_server)

    @property
    @pulumi.getter(name="tftpServer")
    def tftp_server(self) -> Optional[pulumi.Input[str]]:
        """
        TFTP server.
        """
        return pulumi.get(self, "tftp_server")

    @tftp_server.setter
    def tftp_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tftp_server", value)


@pulumi.input_type
class SystemDhcpServerVciStringArgs:
    def __init__(__self__, *,
                 vci_string: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] vci_string: VCI strings.
        """
        if vci_string is not None:
            pulumi.set(__self__, "vci_string", vci_string)

    @property
    @pulumi.getter(name="vciString")
    def vci_string(self) -> Optional[pulumi.Input[str]]:
        """
        VCI strings.
        """
        return pulumi.get(self, "vci_string")

    @vci_string.setter
    def vci_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vci_string", value)


@pulumi.input_type
class SystemDnsDatabaseDnsEntryArgs:
    def __init__(__self__, *,
                 canonical_name: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ipv6: Optional[pulumi.Input[str]] = None,
                 preference: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] canonical_name: Canonical name of the host.
        :param pulumi.Input[str] hostname: Name of the host.
        :param pulumi.Input[int] id: DNS entry ID.
        :param pulumi.Input[str] ip: IPv4 address of the host.
        :param pulumi.Input[str] ipv6: IPv6 address of the host.
        :param pulumi.Input[int] preference: DNS entry preference, 0 is the highest preference (0 - 65535, default = 10)
        :param pulumi.Input[str] status: Enable/disable resource record status. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ttl: Time-to-live for this entry (0 to 2147483647 sec, default = 0).
        :param pulumi.Input[str] type: Resource record type. Valid values: `A`, `NS`, `CNAME`, `MX`, `AAAA`, `PTR`, `PTR_V6`.
        """
        if canonical_name is not None:
            pulumi.set(__self__, "canonical_name", canonical_name)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="canonicalName")
    def canonical_name(self) -> Optional[pulumi.Input[str]]:
        """
        Canonical name of the host.
        """
        return pulumi.get(self, "canonical_name")

    @canonical_name.setter
    def canonical_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "canonical_name", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the host.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        DNS entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of the host.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the host.
        """
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6", value)

    @property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[int]]:
        """
        DNS entry preference, 0 is the highest preference (0 - 65535, default = 10)
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable resource record status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Time-to-live for this entry (0 to 2147483647 sec, default = 0).
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Resource record type. Valid values: `A`, `NS`, `CNAME`, `MX`, `AAAA`, `PTR`, `PTR_V6`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SystemDnsDomainArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] domain: DNS search domain list separated by space (maximum 8 domains)
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        DNS search domain list separated by space (maximum 8 domains)
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)


@pulumi.input_type
class SystemDnsServerHostnameArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] hostname: DNS server host name list separated by space (maximum 4 domains).
        """
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        DNS server host name list separated by space (maximum 4 domains).
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)


@pulumi.input_type
class SystemFederatedUpgradeNodeListArgs:
    def __init__(__self__, *,
                 coordinating_fortigate: Optional[pulumi.Input[str]] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 setup_time: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 timing: Optional[pulumi.Input[str]] = None,
                 upgrade_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] coordinating_fortigate: The serial of the FortiGate that controls this device
        :param pulumi.Input[str] device_type: What type of device this node represents. Valid values: `fortigate`, `fortiswitch`, `fortiap`.
        :param pulumi.Input[str] serial: Serial number of the node to include.
        :param pulumi.Input[str] setup_time: When the upgrade was configured. Format hh:mm yyyy/mm/dd UTC.
        :param pulumi.Input[str] time: Scheduled time for the upgrade. Format hh:mm yyyy/mm/dd UTC.
        :param pulumi.Input[str] timing: Whether the upgrade should be run immediately, or at a scheduled time. Valid values: `immediate`, `scheduled`.
        :param pulumi.Input[str] upgrade_path: Image IDs to upgrade through.
        """
        if coordinating_fortigate is not None:
            pulumi.set(__self__, "coordinating_fortigate", coordinating_fortigate)
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if setup_time is not None:
            pulumi.set(__self__, "setup_time", setup_time)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if timing is not None:
            pulumi.set(__self__, "timing", timing)
        if upgrade_path is not None:
            pulumi.set(__self__, "upgrade_path", upgrade_path)

    @property
    @pulumi.getter(name="coordinatingFortigate")
    def coordinating_fortigate(self) -> Optional[pulumi.Input[str]]:
        """
        The serial of the FortiGate that controls this device
        """
        return pulumi.get(self, "coordinating_fortigate")

    @coordinating_fortigate.setter
    def coordinating_fortigate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinating_fortigate", value)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[pulumi.Input[str]]:
        """
        What type of device this node represents. Valid values: `fortigate`, `fortiswitch`, `fortiap`.
        """
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        """
        Serial number of the node to include.
        """
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)

    @property
    @pulumi.getter(name="setupTime")
    def setup_time(self) -> Optional[pulumi.Input[str]]:
        """
        When the upgrade was configured. Format hh:mm yyyy/mm/dd UTC.
        """
        return pulumi.get(self, "setup_time")

    @setup_time.setter
    def setup_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "setup_time", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        """
        Scheduled time for the upgrade. Format hh:mm yyyy/mm/dd UTC.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def timing(self) -> Optional[pulumi.Input[str]]:
        """
        Whether the upgrade should be run immediately, or at a scheduled time. Valid values: `immediate`, `scheduled`.
        """
        return pulumi.get(self, "timing")

    @timing.setter
    def timing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timing", value)

    @property
    @pulumi.getter(name="upgradePath")
    def upgrade_path(self) -> Optional[pulumi.Input[str]]:
        """
        Image IDs to upgrade through.
        """
        return pulumi.get(self, "upgrade_path")

    @upgrade_path.setter
    def upgrade_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upgrade_path", value)


@pulumi.input_type
class SystemGeoipOverrideIp6RangeArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end_ip: Ending IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
        :param pulumi.Input[int] id: ID of individual entry in the IPv6 range table.
        :param pulumi.Input[str] start_ip: Starting IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Ending IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of individual entry in the IPv6 range table.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Starting IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class SystemGeoipOverrideIpRangeArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end_ip: Ending IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
        :param pulumi.Input[int] id: ID of individual entry in the IPv6 range table.
        :param pulumi.Input[str] start_ip: Starting IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Ending IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of individual entry in the IPv6 range table.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Starting IP address, inclusive, of the address range (format: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class SystemHaHaMgmtInterfaceArgs:
    def __init__(__self__, *,
                 dst: Optional[pulumi.Input[str]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 gateway6: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None):
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)

    @property
    @pulumi.getter
    def dst(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dst")

    @dst.setter
    def dst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway6")

    @gateway6.setter
    def gateway6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway6", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)


@pulumi.input_type
class SystemHaSecondaryVclusterArgs:
    def __init__(__self__, *,
                 monitor: Optional[pulumi.Input[str]] = None,
                 override: Optional[pulumi.Input[str]] = None,
                 override_wait_time: Optional[pulumi.Input[int]] = None,
                 pingserver_failover_threshold: Optional[pulumi.Input[int]] = None,
                 pingserver_monitor_interface: Optional[pulumi.Input[str]] = None,
                 pingserver_secondary_force_reset: Optional[pulumi.Input[str]] = None,
                 pingserver_slave_force_reset: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 vcluster_id: Optional[pulumi.Input[int]] = None,
                 vdom: Optional[pulumi.Input[str]] = None):
        if monitor is not None:
            pulumi.set(__self__, "monitor", monitor)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if override_wait_time is not None:
            pulumi.set(__self__, "override_wait_time", override_wait_time)
        if pingserver_failover_threshold is not None:
            pulumi.set(__self__, "pingserver_failover_threshold", pingserver_failover_threshold)
        if pingserver_monitor_interface is not None:
            pulumi.set(__self__, "pingserver_monitor_interface", pingserver_monitor_interface)
        if pingserver_secondary_force_reset is not None:
            pulumi.set(__self__, "pingserver_secondary_force_reset", pingserver_secondary_force_reset)
        if pingserver_slave_force_reset is not None:
            pulumi.set(__self__, "pingserver_slave_force_reset", pingserver_slave_force_reset)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if vcluster_id is not None:
            pulumi.set(__self__, "vcluster_id", vcluster_id)
        if vdom is not None:
            pulumi.set(__self__, "vdom", vdom)

    @property
    @pulumi.getter
    def monitor(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "monitor")

    @monitor.setter
    def monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor", value)

    @property
    @pulumi.getter
    def override(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override", value)

    @property
    @pulumi.getter(name="overrideWaitTime")
    def override_wait_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "override_wait_time")

    @override_wait_time.setter
    def override_wait_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "override_wait_time", value)

    @property
    @pulumi.getter(name="pingserverFailoverThreshold")
    def pingserver_failover_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "pingserver_failover_threshold")

    @pingserver_failover_threshold.setter
    def pingserver_failover_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pingserver_failover_threshold", value)

    @property
    @pulumi.getter(name="pingserverMonitorInterface")
    def pingserver_monitor_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pingserver_monitor_interface")

    @pingserver_monitor_interface.setter
    def pingserver_monitor_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pingserver_monitor_interface", value)

    @property
    @pulumi.getter(name="pingserverSecondaryForceReset")
    def pingserver_secondary_force_reset(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pingserver_secondary_force_reset")

    @pingserver_secondary_force_reset.setter
    def pingserver_secondary_force_reset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pingserver_secondary_force_reset", value)

    @property
    @pulumi.getter(name="pingserverSlaveForceReset")
    def pingserver_slave_force_reset(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pingserver_slave_force_reset")

    @pingserver_slave_force_reset.setter
    def pingserver_slave_force_reset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pingserver_slave_force_reset", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="vclusterId")
    def vcluster_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vcluster_id")

    @vcluster_id.setter
    def vcluster_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vcluster_id", value)

    @property
    @pulumi.getter
    def vdom(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vdom")

    @vdom.setter
    def vdom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdom", value)


@pulumi.input_type
class SystemHaUnicastPeerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 peer_ip: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if peer_ip is not None:
            pulumi.set(__self__, "peer_ip", peer_ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="peerIp")
    def peer_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peer_ip")

    @peer_ip.setter
    def peer_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_ip", value)


@pulumi.input_type
class SystemIkeDhGroup14Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup15Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup16Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup17Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup18Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup19Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup1Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup20Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup21Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup27Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup28Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup29Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup2Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup30Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup31Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup32Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemIkeDhGroup5Args:
    def __init__(__self__, *,
                 keypair_cache: Optional[pulumi.Input[str]] = None,
                 keypair_count: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] keypair_cache: Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        :param pulumi.Input[int] keypair_count: Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        :param pulumi.Input[str] mode: Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        if keypair_cache is not None:
            pulumi.set(__self__, "keypair_cache", keypair_cache)
        if keypair_count is not None:
            pulumi.set(__self__, "keypair_count", keypair_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="keypairCache")
    def keypair_cache(self) -> Optional[pulumi.Input[str]]:
        """
        Configure custom key pair cache size for this Diffie-Hellman group. Valid values: `global`, `custom`.
        """
        return pulumi.get(self, "keypair_cache")

    @keypair_cache.setter
    def keypair_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_cache", value)

    @property
    @pulumi.getter(name="keypairCount")
    def keypair_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of key pairs to pre-generate for this Diffie-Hellman group (per-worker).
        """
        return pulumi.get(self, "keypair_count")

    @keypair_count.setter
    def keypair_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keypair_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Use software (CPU) or hardware (CPX) to perform calculations for this Diffie-Hellman group. Valid values: `software`, `hardware`, `global`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SystemInterfaceClientOptionArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] code: DHCP client option code.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] ip: Secondary IP address of the interface.
        :param pulumi.Input[str] type: DHCP client option type. Valid values: `hex`, `string`, `ip`, `fqdn`.
        :param pulumi.Input[str] value: DHCP client option value.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        """
        DHCP client option code.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary IP address of the interface.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP client option type. Valid values: `hex`, `string`, `ip`, `fqdn`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        DHCP client option value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SystemInterfaceDhcpSnoopingServerListArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 server_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        :param pulumi.Input[str] server_ip: IP address for DHCP server.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if server_ip is not None:
            pulumi.set(__self__, "server_ip", server_ip)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serverIp")
    def server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address for DHCP server.
        """
        return pulumi.get(self, "server_ip")

    @server_ip.setter
    def server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_ip", value)


@pulumi.input_type
class SystemInterfaceFailAlertInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemInterfaceIpv6Args:
    def __init__(__self__, *,
                 autoconf: Optional[pulumi.Input[str]] = None,
                 cli_conn6_status: Optional[pulumi.Input[int]] = None,
                 dhcp6_client_options: Optional[pulumi.Input[str]] = None,
                 dhcp6_iapd_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Dhcp6IapdListArgs']]]] = None,
                 dhcp6_information_request: Optional[pulumi.Input[str]] = None,
                 dhcp6_prefix_delegation: Optional[pulumi.Input[str]] = None,
                 dhcp6_prefix_hint: Optional[pulumi.Input[str]] = None,
                 dhcp6_prefix_hint_plt: Optional[pulumi.Input[int]] = None,
                 dhcp6_prefix_hint_vlt: Optional[pulumi.Input[int]] = None,
                 dhcp6_relay_ip: Optional[pulumi.Input[str]] = None,
                 dhcp6_relay_service: Optional[pulumi.Input[str]] = None,
                 dhcp6_relay_type: Optional[pulumi.Input[str]] = None,
                 icmp6_send_redirect: Optional[pulumi.Input[str]] = None,
                 interface_identifier: Optional[pulumi.Input[str]] = None,
                 ip6_address: Optional[pulumi.Input[str]] = None,
                 ip6_allowaccess: Optional[pulumi.Input[str]] = None,
                 ip6_default_life: Optional[pulumi.Input[int]] = None,
                 ip6_delegated_prefix_iaid: Optional[pulumi.Input[int]] = None,
                 ip6_delegated_prefix_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6DelegatedPrefixListArgs']]]] = None,
                 ip6_dns_server_override: Optional[pulumi.Input[str]] = None,
                 ip6_extra_addrs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6ExtraAddrArgs']]]] = None,
                 ip6_hop_limit: Optional[pulumi.Input[int]] = None,
                 ip6_link_mtu: Optional[pulumi.Input[int]] = None,
                 ip6_manage_flag: Optional[pulumi.Input[str]] = None,
                 ip6_max_interval: Optional[pulumi.Input[int]] = None,
                 ip6_min_interval: Optional[pulumi.Input[int]] = None,
                 ip6_mode: Optional[pulumi.Input[str]] = None,
                 ip6_other_flag: Optional[pulumi.Input[str]] = None,
                 ip6_prefix_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6PrefixListArgs']]]] = None,
                 ip6_prefix_mode: Optional[pulumi.Input[str]] = None,
                 ip6_reachable_time: Optional[pulumi.Input[int]] = None,
                 ip6_retrans_time: Optional[pulumi.Input[int]] = None,
                 ip6_send_adv: Optional[pulumi.Input[str]] = None,
                 ip6_subnet: Optional[pulumi.Input[str]] = None,
                 ip6_upstream_interface: Optional[pulumi.Input[str]] = None,
                 nd_cert: Optional[pulumi.Input[str]] = None,
                 nd_cga_modifier: Optional[pulumi.Input[str]] = None,
                 nd_mode: Optional[pulumi.Input[str]] = None,
                 nd_security_level: Optional[pulumi.Input[int]] = None,
                 nd_timestamp_delta: Optional[pulumi.Input[int]] = None,
                 nd_timestamp_fuzz: Optional[pulumi.Input[int]] = None,
                 ra_send_mtu: Optional[pulumi.Input[str]] = None,
                 unique_autoconf_addr: Optional[pulumi.Input[str]] = None,
                 vrip6_link_local: Optional[pulumi.Input[str]] = None,
                 vrrp6s: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Vrrp6Args']]]] = None,
                 vrrp_virtual_mac6: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] autoconf: Enable/disable address auto config. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] cli_conn6_status: CLI IPv6 connection status.
        :param pulumi.Input[str] dhcp6_client_options: DHCPv6 client options. Valid values: `rapid`, `iapd`, `iana`.
        :param pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Dhcp6IapdListArgs']]] dhcp6_iapd_lists: DHCPv6 IA-PD list The structure of `dhcp6_iapd_list` block is documented below.
        :param pulumi.Input[str] dhcp6_information_request: Enable/disable DHCPv6 information request. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dhcp6_prefix_delegation: Enable/disable DHCPv6 prefix delegation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dhcp6_prefix_hint: DHCPv6 prefix that will be used as a hint to the upstream DHCPv6 server.
        :param pulumi.Input[int] dhcp6_prefix_hint_plt: DHCPv6 prefix hint preferred life time (sec), 0 means unlimited lease time.
        :param pulumi.Input[int] dhcp6_prefix_hint_vlt: DHCPv6 prefix hint valid life time (sec).
        :param pulumi.Input[str] dhcp6_relay_ip: DHCPv6 relay IP address.
        :param pulumi.Input[str] dhcp6_relay_service: Enable/disable DHCPv6 relay. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dhcp6_relay_type: DHCPv6 relay type. Valid values: `regular`.
        :param pulumi.Input[str] icmp6_send_redirect: Enable/disable sending of ICMPv6 redirects. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] interface_identifier: IPv6 interface identifier.
        :param pulumi.Input[str] ip6_address: Primary IPv6 address prefix, syntax: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx
        :param pulumi.Input[str] ip6_allowaccess: Allow management access to the interface.
        :param pulumi.Input[int] ip6_default_life: Default life (sec).
        :param pulumi.Input[int] ip6_delegated_prefix_iaid: IAID of obtained delegated-prefix from the upstream interface.
        :param pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6DelegatedPrefixListArgs']]] ip6_delegated_prefix_lists: Advertised IPv6 delegated prefix list. The structure of `ip6_delegated_prefix_list` block is documented below.
        :param pulumi.Input[str] ip6_dns_server_override: Enable/disable using the DNS server acquired by DHCP. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6ExtraAddrArgs']]] ip6_extra_addrs: Extra IPv6 address prefixes of interface. The structure of `ip6_extra_addr` block is documented below.
        :param pulumi.Input[int] ip6_hop_limit: Hop limit (0 means unspecified).
        :param pulumi.Input[int] ip6_link_mtu: IPv6 link MTU.
        :param pulumi.Input[str] ip6_manage_flag: Enable/disable the managed flag. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ip6_max_interval: IPv6 maximum interval (4 to 1800 sec).
        :param pulumi.Input[int] ip6_min_interval: IPv6 minimum interval (3 to 1350 sec).
        :param pulumi.Input[str] ip6_mode: Addressing mode (static, DHCP, delegated). Valid values: `static`, `dhcp`, `pppoe`, `delegated`.
        :param pulumi.Input[str] ip6_other_flag: Enable/disable the other IPv6 flag. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6PrefixListArgs']]] ip6_prefix_lists: Advertised prefix list. The structure of `ip6_prefix_list` block is documented below.
        :param pulumi.Input[str] ip6_prefix_mode: Assigning a prefix from DHCP or RA. Valid values: `dhcp6`, `ra`.
        :param pulumi.Input[int] ip6_reachable_time: IPv6 reachable time (milliseconds; 0 means unspecified).
        :param pulumi.Input[int] ip6_retrans_time: IPv6 retransmit time (milliseconds; 0 means unspecified).
        :param pulumi.Input[str] ip6_send_adv: Enable/disable sending advertisements about the interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ip6_subnet: Subnet to routing prefix, syntax: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx
        :param pulumi.Input[str] ip6_upstream_interface: Interface name providing delegated information.
        :param pulumi.Input[str] nd_cert: Neighbor discovery certificate.
        :param pulumi.Input[str] nd_cga_modifier: Neighbor discovery CGA modifier.
        :param pulumi.Input[str] nd_mode: Neighbor discovery mode. Valid values: `basic`, `SEND-compatible`.
        :param pulumi.Input[int] nd_security_level: Neighbor discovery security level (0 - 7; 0 = least secure, default = 0).
        :param pulumi.Input[int] nd_timestamp_delta: Neighbor discovery timestamp delta value (1 - 3600 sec; default = 300).
        :param pulumi.Input[int] nd_timestamp_fuzz: Neighbor discovery timestamp fuzz factor (1 - 60 sec; default = 1).
        :param pulumi.Input[str] ra_send_mtu: Enable/disable sending link MTU in RA packet. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] unique_autoconf_addr: Enable/disable unique auto config address. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vrip6_link_local: Link-local IPv6 address of virtual router.
        :param pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Vrrp6Args']]] vrrp6s: IPv6 VRRP configuration. The structure of `vrrp6` block is documented below.
        :param pulumi.Input[str] vrrp_virtual_mac6: Enable/disable virtual MAC for VRRP. Valid values: `enable`, `disable`.
        """
        if autoconf is not None:
            pulumi.set(__self__, "autoconf", autoconf)
        if cli_conn6_status is not None:
            pulumi.set(__self__, "cli_conn6_status", cli_conn6_status)
        if dhcp6_client_options is not None:
            pulumi.set(__self__, "dhcp6_client_options", dhcp6_client_options)
        if dhcp6_iapd_lists is not None:
            pulumi.set(__self__, "dhcp6_iapd_lists", dhcp6_iapd_lists)
        if dhcp6_information_request is not None:
            pulumi.set(__self__, "dhcp6_information_request", dhcp6_information_request)
        if dhcp6_prefix_delegation is not None:
            pulumi.set(__self__, "dhcp6_prefix_delegation", dhcp6_prefix_delegation)
        if dhcp6_prefix_hint is not None:
            pulumi.set(__self__, "dhcp6_prefix_hint", dhcp6_prefix_hint)
        if dhcp6_prefix_hint_plt is not None:
            pulumi.set(__self__, "dhcp6_prefix_hint_plt", dhcp6_prefix_hint_plt)
        if dhcp6_prefix_hint_vlt is not None:
            pulumi.set(__self__, "dhcp6_prefix_hint_vlt", dhcp6_prefix_hint_vlt)
        if dhcp6_relay_ip is not None:
            pulumi.set(__self__, "dhcp6_relay_ip", dhcp6_relay_ip)
        if dhcp6_relay_service is not None:
            pulumi.set(__self__, "dhcp6_relay_service", dhcp6_relay_service)
        if dhcp6_relay_type is not None:
            pulumi.set(__self__, "dhcp6_relay_type", dhcp6_relay_type)
        if icmp6_send_redirect is not None:
            pulumi.set(__self__, "icmp6_send_redirect", icmp6_send_redirect)
        if interface_identifier is not None:
            pulumi.set(__self__, "interface_identifier", interface_identifier)
        if ip6_address is not None:
            pulumi.set(__self__, "ip6_address", ip6_address)
        if ip6_allowaccess is not None:
            pulumi.set(__self__, "ip6_allowaccess", ip6_allowaccess)
        if ip6_default_life is not None:
            pulumi.set(__self__, "ip6_default_life", ip6_default_life)
        if ip6_delegated_prefix_iaid is not None:
            pulumi.set(__self__, "ip6_delegated_prefix_iaid", ip6_delegated_prefix_iaid)
        if ip6_delegated_prefix_lists is not None:
            pulumi.set(__self__, "ip6_delegated_prefix_lists", ip6_delegated_prefix_lists)
        if ip6_dns_server_override is not None:
            pulumi.set(__self__, "ip6_dns_server_override", ip6_dns_server_override)
        if ip6_extra_addrs is not None:
            pulumi.set(__self__, "ip6_extra_addrs", ip6_extra_addrs)
        if ip6_hop_limit is not None:
            pulumi.set(__self__, "ip6_hop_limit", ip6_hop_limit)
        if ip6_link_mtu is not None:
            pulumi.set(__self__, "ip6_link_mtu", ip6_link_mtu)
        if ip6_manage_flag is not None:
            pulumi.set(__self__, "ip6_manage_flag", ip6_manage_flag)
        if ip6_max_interval is not None:
            pulumi.set(__self__, "ip6_max_interval", ip6_max_interval)
        if ip6_min_interval is not None:
            pulumi.set(__self__, "ip6_min_interval", ip6_min_interval)
        if ip6_mode is not None:
            pulumi.set(__self__, "ip6_mode", ip6_mode)
        if ip6_other_flag is not None:
            pulumi.set(__self__, "ip6_other_flag", ip6_other_flag)
        if ip6_prefix_lists is not None:
            pulumi.set(__self__, "ip6_prefix_lists", ip6_prefix_lists)
        if ip6_prefix_mode is not None:
            pulumi.set(__self__, "ip6_prefix_mode", ip6_prefix_mode)
        if ip6_reachable_time is not None:
            pulumi.set(__self__, "ip6_reachable_time", ip6_reachable_time)
        if ip6_retrans_time is not None:
            pulumi.set(__self__, "ip6_retrans_time", ip6_retrans_time)
        if ip6_send_adv is not None:
            pulumi.set(__self__, "ip6_send_adv", ip6_send_adv)
        if ip6_subnet is not None:
            pulumi.set(__self__, "ip6_subnet", ip6_subnet)
        if ip6_upstream_interface is not None:
            pulumi.set(__self__, "ip6_upstream_interface", ip6_upstream_interface)
        if nd_cert is not None:
            pulumi.set(__self__, "nd_cert", nd_cert)
        if nd_cga_modifier is not None:
            pulumi.set(__self__, "nd_cga_modifier", nd_cga_modifier)
        if nd_mode is not None:
            pulumi.set(__self__, "nd_mode", nd_mode)
        if nd_security_level is not None:
            pulumi.set(__self__, "nd_security_level", nd_security_level)
        if nd_timestamp_delta is not None:
            pulumi.set(__self__, "nd_timestamp_delta", nd_timestamp_delta)
        if nd_timestamp_fuzz is not None:
            pulumi.set(__self__, "nd_timestamp_fuzz", nd_timestamp_fuzz)
        if ra_send_mtu is not None:
            pulumi.set(__self__, "ra_send_mtu", ra_send_mtu)
        if unique_autoconf_addr is not None:
            pulumi.set(__self__, "unique_autoconf_addr", unique_autoconf_addr)
        if vrip6_link_local is not None:
            pulumi.set(__self__, "vrip6_link_local", vrip6_link_local)
        if vrrp6s is not None:
            pulumi.set(__self__, "vrrp6s", vrrp6s)
        if vrrp_virtual_mac6 is not None:
            pulumi.set(__self__, "vrrp_virtual_mac6", vrrp_virtual_mac6)

    @property
    @pulumi.getter
    def autoconf(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable address auto config. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "autoconf")

    @autoconf.setter
    def autoconf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autoconf", value)

    @property
    @pulumi.getter(name="cliConn6Status")
    def cli_conn6_status(self) -> Optional[pulumi.Input[int]]:
        """
        CLI IPv6 connection status.
        """
        return pulumi.get(self, "cli_conn6_status")

    @cli_conn6_status.setter
    def cli_conn6_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cli_conn6_status", value)

    @property
    @pulumi.getter(name="dhcp6ClientOptions")
    def dhcp6_client_options(self) -> Optional[pulumi.Input[str]]:
        """
        DHCPv6 client options. Valid values: `rapid`, `iapd`, `iana`.
        """
        return pulumi.get(self, "dhcp6_client_options")

    @dhcp6_client_options.setter
    def dhcp6_client_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_client_options", value)

    @property
    @pulumi.getter(name="dhcp6IapdLists")
    def dhcp6_iapd_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Dhcp6IapdListArgs']]]]:
        """
        DHCPv6 IA-PD list The structure of `dhcp6_iapd_list` block is documented below.
        """
        return pulumi.get(self, "dhcp6_iapd_lists")

    @dhcp6_iapd_lists.setter
    def dhcp6_iapd_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Dhcp6IapdListArgs']]]]):
        pulumi.set(self, "dhcp6_iapd_lists", value)

    @property
    @pulumi.getter(name="dhcp6InformationRequest")
    def dhcp6_information_request(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DHCPv6 information request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp6_information_request")

    @dhcp6_information_request.setter
    def dhcp6_information_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_information_request", value)

    @property
    @pulumi.getter(name="dhcp6PrefixDelegation")
    def dhcp6_prefix_delegation(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DHCPv6 prefix delegation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dhcp6_prefix_delegation")

    @dhcp6_prefix_delegation.setter
    def dhcp6_prefix_delegation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_prefix_delegation", value)

    @property
    @pulumi.getter(name="dhcp6PrefixHint")
    def dhcp6_prefix_hint(self) -> Optional[pulumi.Input[str]]:
        """
        DHCPv6 prefix that will be used as a hint to the upstream DHCPv6 server.
        """
        return pulumi.get(self, "dhcp6_prefix_hint")

    @dhcp6_prefix_hint.setter
    def dhcp6_prefix_hint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_prefix_hint", value)

    @property
    @pulumi.getter(name="dhcp6PrefixHintPlt")
    def dhcp6_prefix_hint_plt(self) -> Optional[pulumi.Input[int]]:
        """
        DHCPv6 prefix hint preferred life time (sec), 0 means unlimited lease time.
        """
        return pulumi.get(self, "dhcp6_prefix_hint_plt")

    @dhcp6_prefix_hint_plt.setter
    def dhcp6_prefix_hint_plt(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dhcp6_prefix_hint_plt", value)

    @property
    @pulumi.getter(name="dhcp6PrefixHintVlt")
    def dhcp6_prefix_hint_vlt(self) -> Optional[pulumi.Input[int]]:
        """
        DHCPv6 prefix hint valid life time (sec).
        """
        return pulumi.get(self, "dhcp6_prefix_hint_vlt")

    @dhcp6_prefix_hint_vlt.setter
    def dhcp6_prefix_hint_vlt(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dhcp6_prefix_hint_vlt", value)

    @property
    @pulumi.getter(name="dhcp6RelayIp")
    def dhcp6_relay_ip(self) -> Optional[pulumi.Input[str]]:
        """
        DHCPv6 relay IP address.
        """
        return pulumi.get(self, "dhcp6_relay_ip")

    @dhcp6_relay_ip.setter
    def dhcp6_relay_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_relay_ip", value)

    @property
    @pulumi.getter(name="dhcp6RelayService")
    def dhcp6_relay_service(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable DHCPv6 relay. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "dhcp6_relay_service")

    @dhcp6_relay_service.setter
    def dhcp6_relay_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_relay_service", value)

    @property
    @pulumi.getter(name="dhcp6RelayType")
    def dhcp6_relay_type(self) -> Optional[pulumi.Input[str]]:
        """
        DHCPv6 relay type. Valid values: `regular`.
        """
        return pulumi.get(self, "dhcp6_relay_type")

    @dhcp6_relay_type.setter
    def dhcp6_relay_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp6_relay_type", value)

    @property
    @pulumi.getter(name="icmp6SendRedirect")
    def icmp6_send_redirect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending of ICMPv6 redirects. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "icmp6_send_redirect")

    @icmp6_send_redirect.setter
    def icmp6_send_redirect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icmp6_send_redirect", value)

    @property
    @pulumi.getter(name="interfaceIdentifier")
    def interface_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 interface identifier.
        """
        return pulumi.get(self, "interface_identifier")

    @interface_identifier.setter
    def interface_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_identifier", value)

    @property
    @pulumi.getter(name="ip6Address")
    def ip6_address(self) -> Optional[pulumi.Input[str]]:
        """
        Primary IPv6 address prefix, syntax: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx
        """
        return pulumi.get(self, "ip6_address")

    @ip6_address.setter
    def ip6_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_address", value)

    @property
    @pulumi.getter(name="ip6Allowaccess")
    def ip6_allowaccess(self) -> Optional[pulumi.Input[str]]:
        """
        Allow management access to the interface.
        """
        return pulumi.get(self, "ip6_allowaccess")

    @ip6_allowaccess.setter
    def ip6_allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_allowaccess", value)

    @property
    @pulumi.getter(name="ip6DefaultLife")
    def ip6_default_life(self) -> Optional[pulumi.Input[int]]:
        """
        Default life (sec).
        """
        return pulumi.get(self, "ip6_default_life")

    @ip6_default_life.setter
    def ip6_default_life(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip6_default_life", value)

    @property
    @pulumi.getter(name="ip6DelegatedPrefixIaid")
    def ip6_delegated_prefix_iaid(self) -> Optional[pulumi.Input[int]]:
        """
        IAID of obtained delegated-prefix from the upstream interface.
        """
        return pulumi.get(self, "ip6_delegated_prefix_iaid")

    @ip6_delegated_prefix_iaid.setter
    def ip6_delegated_prefix_iaid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip6_delegated_prefix_iaid", value)

    @property
    @pulumi.getter(name="ip6DelegatedPrefixLists")
    def ip6_delegated_prefix_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6DelegatedPrefixListArgs']]]]:
        """
        Advertised IPv6 delegated prefix list. The structure of `ip6_delegated_prefix_list` block is documented below.
        """
        return pulumi.get(self, "ip6_delegated_prefix_lists")

    @ip6_delegated_prefix_lists.setter
    def ip6_delegated_prefix_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6DelegatedPrefixListArgs']]]]):
        pulumi.set(self, "ip6_delegated_prefix_lists", value)

    @property
    @pulumi.getter(name="ip6DnsServerOverride")
    def ip6_dns_server_override(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable using the DNS server acquired by DHCP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ip6_dns_server_override")

    @ip6_dns_server_override.setter
    def ip6_dns_server_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_dns_server_override", value)

    @property
    @pulumi.getter(name="ip6ExtraAddrs")
    def ip6_extra_addrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6ExtraAddrArgs']]]]:
        """
        Extra IPv6 address prefixes of interface. The structure of `ip6_extra_addr` block is documented below.
        """
        return pulumi.get(self, "ip6_extra_addrs")

    @ip6_extra_addrs.setter
    def ip6_extra_addrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6ExtraAddrArgs']]]]):
        pulumi.set(self, "ip6_extra_addrs", value)

    @property
    @pulumi.getter(name="ip6HopLimit")
    def ip6_hop_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Hop limit (0 means unspecified).
        """
        return pulumi.get(self, "ip6_hop_limit")

    @ip6_hop_limit.setter
    def ip6_hop_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip6_hop_limit", value)

    @property
    @pulumi.getter(name="ip6LinkMtu")
    def ip6_link_mtu(self) -> Optional[pulumi.Input[int]]:
        """
        IPv6 link MTU.
        """
        return pulumi.get(self, "ip6_link_mtu")

    @ip6_link_mtu.setter
    def ip6_link_mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip6_link_mtu", value)

    @property
    @pulumi.getter(name="ip6ManageFlag")
    def ip6_manage_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the managed flag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ip6_manage_flag")

    @ip6_manage_flag.setter
    def ip6_manage_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_manage_flag", value)

    @property
    @pulumi.getter(name="ip6MaxInterval")
    def ip6_max_interval(self) -> Optional[pulumi.Input[int]]:
        """
        IPv6 maximum interval (4 to 1800 sec).
        """
        return pulumi.get(self, "ip6_max_interval")

    @ip6_max_interval.setter
    def ip6_max_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip6_max_interval", value)

    @property
    @pulumi.getter(name="ip6MinInterval")
    def ip6_min_interval(self) -> Optional[pulumi.Input[int]]:
        """
        IPv6 minimum interval (3 to 1350 sec).
        """
        return pulumi.get(self, "ip6_min_interval")

    @ip6_min_interval.setter
    def ip6_min_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip6_min_interval", value)

    @property
    @pulumi.getter(name="ip6Mode")
    def ip6_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Addressing mode (static, DHCP, delegated). Valid values: `static`, `dhcp`, `pppoe`, `delegated`.
        """
        return pulumi.get(self, "ip6_mode")

    @ip6_mode.setter
    def ip6_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_mode", value)

    @property
    @pulumi.getter(name="ip6OtherFlag")
    def ip6_other_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the other IPv6 flag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ip6_other_flag")

    @ip6_other_flag.setter
    def ip6_other_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_other_flag", value)

    @property
    @pulumi.getter(name="ip6PrefixLists")
    def ip6_prefix_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6PrefixListArgs']]]]:
        """
        Advertised prefix list. The structure of `ip6_prefix_list` block is documented below.
        """
        return pulumi.get(self, "ip6_prefix_lists")

    @ip6_prefix_lists.setter
    def ip6_prefix_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6PrefixListArgs']]]]):
        pulumi.set(self, "ip6_prefix_lists", value)

    @property
    @pulumi.getter(name="ip6PrefixMode")
    def ip6_prefix_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Assigning a prefix from DHCP or RA. Valid values: `dhcp6`, `ra`.
        """
        return pulumi.get(self, "ip6_prefix_mode")

    @ip6_prefix_mode.setter
    def ip6_prefix_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_prefix_mode", value)

    @property
    @pulumi.getter(name="ip6ReachableTime")
    def ip6_reachable_time(self) -> Optional[pulumi.Input[int]]:
        """
        IPv6 reachable time (milliseconds; 0 means unspecified).
        """
        return pulumi.get(self, "ip6_reachable_time")

    @ip6_reachable_time.setter
    def ip6_reachable_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip6_reachable_time", value)

    @property
    @pulumi.getter(name="ip6RetransTime")
    def ip6_retrans_time(self) -> Optional[pulumi.Input[int]]:
        """
        IPv6 retransmit time (milliseconds; 0 means unspecified).
        """
        return pulumi.get(self, "ip6_retrans_time")

    @ip6_retrans_time.setter
    def ip6_retrans_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip6_retrans_time", value)

    @property
    @pulumi.getter(name="ip6SendAdv")
    def ip6_send_adv(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending advertisements about the interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ip6_send_adv")

    @ip6_send_adv.setter
    def ip6_send_adv(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_send_adv", value)

    @property
    @pulumi.getter(name="ip6Subnet")
    def ip6_subnet(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet to routing prefix, syntax: xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx
        """
        return pulumi.get(self, "ip6_subnet")

    @ip6_subnet.setter
    def ip6_subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_subnet", value)

    @property
    @pulumi.getter(name="ip6UpstreamInterface")
    def ip6_upstream_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name providing delegated information.
        """
        return pulumi.get(self, "ip6_upstream_interface")

    @ip6_upstream_interface.setter
    def ip6_upstream_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6_upstream_interface", value)

    @property
    @pulumi.getter(name="ndCert")
    def nd_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Neighbor discovery certificate.
        """
        return pulumi.get(self, "nd_cert")

    @nd_cert.setter
    def nd_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nd_cert", value)

    @property
    @pulumi.getter(name="ndCgaModifier")
    def nd_cga_modifier(self) -> Optional[pulumi.Input[str]]:
        """
        Neighbor discovery CGA modifier.
        """
        return pulumi.get(self, "nd_cga_modifier")

    @nd_cga_modifier.setter
    def nd_cga_modifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nd_cga_modifier", value)

    @property
    @pulumi.getter(name="ndMode")
    def nd_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Neighbor discovery mode. Valid values: `basic`, `SEND-compatible`.
        """
        return pulumi.get(self, "nd_mode")

    @nd_mode.setter
    def nd_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nd_mode", value)

    @property
    @pulumi.getter(name="ndSecurityLevel")
    def nd_security_level(self) -> Optional[pulumi.Input[int]]:
        """
        Neighbor discovery security level (0 - 7; 0 = least secure, default = 0).
        """
        return pulumi.get(self, "nd_security_level")

    @nd_security_level.setter
    def nd_security_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nd_security_level", value)

    @property
    @pulumi.getter(name="ndTimestampDelta")
    def nd_timestamp_delta(self) -> Optional[pulumi.Input[int]]:
        """
        Neighbor discovery timestamp delta value (1 - 3600 sec; default = 300).
        """
        return pulumi.get(self, "nd_timestamp_delta")

    @nd_timestamp_delta.setter
    def nd_timestamp_delta(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nd_timestamp_delta", value)

    @property
    @pulumi.getter(name="ndTimestampFuzz")
    def nd_timestamp_fuzz(self) -> Optional[pulumi.Input[int]]:
        """
        Neighbor discovery timestamp fuzz factor (1 - 60 sec; default = 1).
        """
        return pulumi.get(self, "nd_timestamp_fuzz")

    @nd_timestamp_fuzz.setter
    def nd_timestamp_fuzz(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nd_timestamp_fuzz", value)

    @property
    @pulumi.getter(name="raSendMtu")
    def ra_send_mtu(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending link MTU in RA packet. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ra_send_mtu")

    @ra_send_mtu.setter
    def ra_send_mtu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ra_send_mtu", value)

    @property
    @pulumi.getter(name="uniqueAutoconfAddr")
    def unique_autoconf_addr(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable unique auto config address. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "unique_autoconf_addr")

    @unique_autoconf_addr.setter
    def unique_autoconf_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_autoconf_addr", value)

    @property
    @pulumi.getter(name="vrip6LinkLocal")
    def vrip6_link_local(self) -> Optional[pulumi.Input[str]]:
        """
        Link-local IPv6 address of virtual router.
        """
        return pulumi.get(self, "vrip6_link_local")

    @vrip6_link_local.setter
    def vrip6_link_local(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrip6_link_local", value)

    @property
    @pulumi.getter
    def vrrp6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Vrrp6Args']]]]:
        """
        IPv6 VRRP configuration. The structure of `vrrp6` block is documented below.
        """
        return pulumi.get(self, "vrrp6s")

    @vrrp6s.setter
    def vrrp6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Vrrp6Args']]]]):
        pulumi.set(self, "vrrp6s", value)

    @property
    @pulumi.getter(name="vrrpVirtualMac6")
    def vrrp_virtual_mac6(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable virtual MAC for VRRP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "vrrp_virtual_mac6")

    @vrrp_virtual_mac6.setter
    def vrrp_virtual_mac6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrrp_virtual_mac6", value)


@pulumi.input_type
class SystemInterfaceIpv6Dhcp6IapdListArgs:
    def __init__(__self__, *,
                 iaid: Optional[pulumi.Input[int]] = None,
                 prefix_hint: Optional[pulumi.Input[str]] = None,
                 prefix_hint_plt: Optional[pulumi.Input[int]] = None,
                 prefix_hint_vlt: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] iaid: Identity association identifier.
        :param pulumi.Input[str] prefix_hint: DHCPv6 prefix that will be used as a hint to the upstream DHCPv6 server.
        :param pulumi.Input[int] prefix_hint_plt: DHCPv6 prefix hint preferred life time (sec), 0 means unlimited lease time.
        :param pulumi.Input[int] prefix_hint_vlt: DHCPv6 prefix hint valid life time (sec).
        """
        if iaid is not None:
            pulumi.set(__self__, "iaid", iaid)
        if prefix_hint is not None:
            pulumi.set(__self__, "prefix_hint", prefix_hint)
        if prefix_hint_plt is not None:
            pulumi.set(__self__, "prefix_hint_plt", prefix_hint_plt)
        if prefix_hint_vlt is not None:
            pulumi.set(__self__, "prefix_hint_vlt", prefix_hint_vlt)

    @property
    @pulumi.getter
    def iaid(self) -> Optional[pulumi.Input[int]]:
        """
        Identity association identifier.
        """
        return pulumi.get(self, "iaid")

    @iaid.setter
    def iaid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iaid", value)

    @property
    @pulumi.getter(name="prefixHint")
    def prefix_hint(self) -> Optional[pulumi.Input[str]]:
        """
        DHCPv6 prefix that will be used as a hint to the upstream DHCPv6 server.
        """
        return pulumi.get(self, "prefix_hint")

    @prefix_hint.setter
    def prefix_hint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix_hint", value)

    @property
    @pulumi.getter(name="prefixHintPlt")
    def prefix_hint_plt(self) -> Optional[pulumi.Input[int]]:
        """
        DHCPv6 prefix hint preferred life time (sec), 0 means unlimited lease time.
        """
        return pulumi.get(self, "prefix_hint_plt")

    @prefix_hint_plt.setter
    def prefix_hint_plt(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prefix_hint_plt", value)

    @property
    @pulumi.getter(name="prefixHintVlt")
    def prefix_hint_vlt(self) -> Optional[pulumi.Input[int]]:
        """
        DHCPv6 prefix hint valid life time (sec).
        """
        return pulumi.get(self, "prefix_hint_vlt")

    @prefix_hint_vlt.setter
    def prefix_hint_vlt(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prefix_hint_vlt", value)


@pulumi.input_type
class SystemInterfaceIpv6Ip6DelegatedPrefixListArgs:
    def __init__(__self__, *,
                 autonomous_flag: Optional[pulumi.Input[str]] = None,
                 delegated_prefix_iaid: Optional[pulumi.Input[int]] = None,
                 onlink_flag: Optional[pulumi.Input[str]] = None,
                 prefix_id: Optional[pulumi.Input[int]] = None,
                 rdnss: Optional[pulumi.Input[str]] = None,
                 rdnss_service: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 upstream_interface: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] autonomous_flag: Enable/disable the autonomous flag. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] delegated_prefix_iaid: IAID of obtained delegated-prefix from the upstream interface.
        :param pulumi.Input[str] onlink_flag: Enable/disable the onlink flag. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] prefix_id: Prefix ID.
        :param pulumi.Input[str] rdnss: Recursive DNS server option.
        :param pulumi.Input[str] rdnss_service: Recursive DNS service option. Valid values: `delegated`, `default`, `specify`.
        :param pulumi.Input[str] subnet: Add subnet ID to routing prefix.
        :param pulumi.Input[str] upstream_interface: Name of the interface that provides delegated information.
        """
        if autonomous_flag is not None:
            pulumi.set(__self__, "autonomous_flag", autonomous_flag)
        if delegated_prefix_iaid is not None:
            pulumi.set(__self__, "delegated_prefix_iaid", delegated_prefix_iaid)
        if onlink_flag is not None:
            pulumi.set(__self__, "onlink_flag", onlink_flag)
        if prefix_id is not None:
            pulumi.set(__self__, "prefix_id", prefix_id)
        if rdnss is not None:
            pulumi.set(__self__, "rdnss", rdnss)
        if rdnss_service is not None:
            pulumi.set(__self__, "rdnss_service", rdnss_service)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if upstream_interface is not None:
            pulumi.set(__self__, "upstream_interface", upstream_interface)

    @property
    @pulumi.getter(name="autonomousFlag")
    def autonomous_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the autonomous flag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "autonomous_flag")

    @autonomous_flag.setter
    def autonomous_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autonomous_flag", value)

    @property
    @pulumi.getter(name="delegatedPrefixIaid")
    def delegated_prefix_iaid(self) -> Optional[pulumi.Input[int]]:
        """
        IAID of obtained delegated-prefix from the upstream interface.
        """
        return pulumi.get(self, "delegated_prefix_iaid")

    @delegated_prefix_iaid.setter
    def delegated_prefix_iaid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delegated_prefix_iaid", value)

    @property
    @pulumi.getter(name="onlinkFlag")
    def onlink_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the onlink flag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "onlink_flag")

    @onlink_flag.setter
    def onlink_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "onlink_flag", value)

    @property
    @pulumi.getter(name="prefixId")
    def prefix_id(self) -> Optional[pulumi.Input[int]]:
        """
        Prefix ID.
        """
        return pulumi.get(self, "prefix_id")

    @prefix_id.setter
    def prefix_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prefix_id", value)

    @property
    @pulumi.getter
    def rdnss(self) -> Optional[pulumi.Input[str]]:
        """
        Recursive DNS server option.
        """
        return pulumi.get(self, "rdnss")

    @rdnss.setter
    def rdnss(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rdnss", value)

    @property
    @pulumi.getter(name="rdnssService")
    def rdnss_service(self) -> Optional[pulumi.Input[str]]:
        """
        Recursive DNS service option. Valid values: `delegated`, `default`, `specify`.
        """
        return pulumi.get(self, "rdnss_service")

    @rdnss_service.setter
    def rdnss_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rdnss_service", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        Add subnet ID to routing prefix.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter(name="upstreamInterface")
    def upstream_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the interface that provides delegated information.
        """
        return pulumi.get(self, "upstream_interface")

    @upstream_interface.setter
    def upstream_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_interface", value)


@pulumi.input_type
class SystemInterfaceIpv6Ip6ExtraAddrArgs:
    def __init__(__self__, *,
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] prefix: IPv6 prefix.
        """
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class SystemInterfaceIpv6Ip6PrefixListArgs:
    def __init__(__self__, *,
                 autonomous_flag: Optional[pulumi.Input[str]] = None,
                 dnssls: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6PrefixListDnsslArgs']]]] = None,
                 onlink_flag: Optional[pulumi.Input[str]] = None,
                 preferred_life_time: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 rdnss: Optional[pulumi.Input[str]] = None,
                 valid_life_time: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] autonomous_flag: Enable/disable the autonomous flag. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6PrefixListDnsslArgs']]] dnssls: DNS search list option. The structure of `dnssl` block is documented below.
        :param pulumi.Input[str] onlink_flag: Enable/disable the onlink flag. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] preferred_life_time: Preferred life time (sec).
        :param pulumi.Input[str] prefix: IPv6 prefix.
        :param pulumi.Input[str] rdnss: Recursive DNS server option.
        :param pulumi.Input[int] valid_life_time: Valid life time (sec).
        """
        if autonomous_flag is not None:
            pulumi.set(__self__, "autonomous_flag", autonomous_flag)
        if dnssls is not None:
            pulumi.set(__self__, "dnssls", dnssls)
        if onlink_flag is not None:
            pulumi.set(__self__, "onlink_flag", onlink_flag)
        if preferred_life_time is not None:
            pulumi.set(__self__, "preferred_life_time", preferred_life_time)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if rdnss is not None:
            pulumi.set(__self__, "rdnss", rdnss)
        if valid_life_time is not None:
            pulumi.set(__self__, "valid_life_time", valid_life_time)

    @property
    @pulumi.getter(name="autonomousFlag")
    def autonomous_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the autonomous flag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "autonomous_flag")

    @autonomous_flag.setter
    def autonomous_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "autonomous_flag", value)

    @property
    @pulumi.getter
    def dnssls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6PrefixListDnsslArgs']]]]:
        """
        DNS search list option. The structure of `dnssl` block is documented below.
        """
        return pulumi.get(self, "dnssls")

    @dnssls.setter
    def dnssls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceIpv6Ip6PrefixListDnsslArgs']]]]):
        pulumi.set(self, "dnssls", value)

    @property
    @pulumi.getter(name="onlinkFlag")
    def onlink_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the onlink flag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "onlink_flag")

    @onlink_flag.setter
    def onlink_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "onlink_flag", value)

    @property
    @pulumi.getter(name="preferredLifeTime")
    def preferred_life_time(self) -> Optional[pulumi.Input[int]]:
        """
        Preferred life time (sec).
        """
        return pulumi.get(self, "preferred_life_time")

    @preferred_life_time.setter
    def preferred_life_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preferred_life_time", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def rdnss(self) -> Optional[pulumi.Input[str]]:
        """
        Recursive DNS server option.
        """
        return pulumi.get(self, "rdnss")

    @rdnss.setter
    def rdnss(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rdnss", value)

    @property
    @pulumi.getter(name="validLifeTime")
    def valid_life_time(self) -> Optional[pulumi.Input[int]]:
        """
        Valid life time (sec).
        """
        return pulumi.get(self, "valid_life_time")

    @valid_life_time.setter
    def valid_life_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "valid_life_time", value)


@pulumi.input_type
class SystemInterfaceIpv6Ip6PrefixListDnsslArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] domain: Domain name.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)


@pulumi.input_type
class SystemInterfaceIpv6Vrrp6Args:
    def __init__(__self__, *,
                 accept_mode: Optional[pulumi.Input[str]] = None,
                 adv_interval: Optional[pulumi.Input[int]] = None,
                 preempt: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 start_time: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 vrdst6: Optional[pulumi.Input[str]] = None,
                 vrgrp: Optional[pulumi.Input[int]] = None,
                 vrid: Optional[pulumi.Input[int]] = None,
                 vrip6: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] accept_mode: Enable/disable accept mode. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] adv_interval: Advertisement interval (1 - 255 seconds).
        :param pulumi.Input[str] preempt: Enable/disable preempt mode. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] priority: Priority of the virtual router (1 - 255).
        :param pulumi.Input[int] start_time: Startup time (1 - 255 seconds).
        :param pulumi.Input[str] status: Enable/disable VRRP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vrdst6: Monitor the route to this destination.
        :param pulumi.Input[int] vrgrp: VRRP group ID (1 - 65535).
        :param pulumi.Input[int] vrid: Virtual router identifier (1 - 255).
        :param pulumi.Input[str] vrip6: IPv6 address of the virtual router.
        """
        if accept_mode is not None:
            pulumi.set(__self__, "accept_mode", accept_mode)
        if adv_interval is not None:
            pulumi.set(__self__, "adv_interval", adv_interval)
        if preempt is not None:
            pulumi.set(__self__, "preempt", preempt)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if vrdst6 is not None:
            pulumi.set(__self__, "vrdst6", vrdst6)
        if vrgrp is not None:
            pulumi.set(__self__, "vrgrp", vrgrp)
        if vrid is not None:
            pulumi.set(__self__, "vrid", vrid)
        if vrip6 is not None:
            pulumi.set(__self__, "vrip6", vrip6)

    @property
    @pulumi.getter(name="acceptMode")
    def accept_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable accept mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "accept_mode")

    @accept_mode.setter
    def accept_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accept_mode", value)

    @property
    @pulumi.getter(name="advInterval")
    def adv_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Advertisement interval (1 - 255 seconds).
        """
        return pulumi.get(self, "adv_interval")

    @adv_interval.setter
    def adv_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adv_interval", value)

    @property
    @pulumi.getter
    def preempt(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable preempt mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "preempt")

    @preempt.setter
    def preempt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preempt", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of the virtual router (1 - 255).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[int]]:
        """
        Startup time (1 - 255 seconds).
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VRRP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def vrdst6(self) -> Optional[pulumi.Input[str]]:
        """
        Monitor the route to this destination.
        """
        return pulumi.get(self, "vrdst6")

    @vrdst6.setter
    def vrdst6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrdst6", value)

    @property
    @pulumi.getter
    def vrgrp(self) -> Optional[pulumi.Input[int]]:
        """
        VRRP group ID (1 - 65535).
        """
        return pulumi.get(self, "vrgrp")

    @vrgrp.setter
    def vrgrp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrgrp", value)

    @property
    @pulumi.getter
    def vrid(self) -> Optional[pulumi.Input[int]]:
        """
        Virtual router identifier (1 - 255).
        """
        return pulumi.get(self, "vrid")

    @vrid.setter
    def vrid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrid", value)

    @property
    @pulumi.getter
    def vrip6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address of the virtual router.
        """
        return pulumi.get(self, "vrip6")

    @vrip6.setter
    def vrip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrip6", value)


@pulumi.input_type
class SystemInterfaceManagedDeviceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemInterfaceMemberArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface_name: Physical interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Physical interface name.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class SystemInterfaceSecondaryipArgs:
    def __init__(__self__, *,
                 allowaccess: Optional[pulumi.Input[str]] = None,
                 detectprotocol: Optional[pulumi.Input[str]] = None,
                 detectserver: Optional[pulumi.Input[str]] = None,
                 gwdetect: Optional[pulumi.Input[str]] = None,
                 ha_priority: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ping_serv_status: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] allowaccess: Management access settings for the secondary IP address.
        :param pulumi.Input[str] detectprotocol: Protocols used to detect the server. Valid values: `ping`, `tcp-echo`, `udp-echo`.
        :param pulumi.Input[str] detectserver: Gateway's ping server for this IP.
        :param pulumi.Input[str] gwdetect: Enable/disable detect gateway alive for first. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ha_priority: HA election priority for the PING server.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] ip: Secondary IP address of the interface.
        :param pulumi.Input[int] ping_serv_status: PING server status.
        """
        if allowaccess is not None:
            pulumi.set(__self__, "allowaccess", allowaccess)
        if detectprotocol is not None:
            pulumi.set(__self__, "detectprotocol", detectprotocol)
        if detectserver is not None:
            pulumi.set(__self__, "detectserver", detectserver)
        if gwdetect is not None:
            pulumi.set(__self__, "gwdetect", gwdetect)
        if ha_priority is not None:
            pulumi.set(__self__, "ha_priority", ha_priority)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ping_serv_status is not None:
            pulumi.set(__self__, "ping_serv_status", ping_serv_status)

    @property
    @pulumi.getter
    def allowaccess(self) -> Optional[pulumi.Input[str]]:
        """
        Management access settings for the secondary IP address.
        """
        return pulumi.get(self, "allowaccess")

    @allowaccess.setter
    def allowaccess(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowaccess", value)

    @property
    @pulumi.getter
    def detectprotocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocols used to detect the server. Valid values: `ping`, `tcp-echo`, `udp-echo`.
        """
        return pulumi.get(self, "detectprotocol")

    @detectprotocol.setter
    def detectprotocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detectprotocol", value)

    @property
    @pulumi.getter
    def detectserver(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway's ping server for this IP.
        """
        return pulumi.get(self, "detectserver")

    @detectserver.setter
    def detectserver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detectserver", value)

    @property
    @pulumi.getter
    def gwdetect(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable detect gateway alive for first. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gwdetect")

    @gwdetect.setter
    def gwdetect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gwdetect", value)

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> Optional[pulumi.Input[int]]:
        """
        HA election priority for the PING server.
        """
        return pulumi.get(self, "ha_priority")

    @ha_priority.setter
    def ha_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ha_priority", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary IP address of the interface.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="pingServStatus")
    def ping_serv_status(self) -> Optional[pulumi.Input[int]]:
        """
        PING server status.
        """
        return pulumi.get(self, "ping_serv_status")

    @ping_serv_status.setter
    def ping_serv_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ping_serv_status", value)


@pulumi.input_type
class SystemInterfaceSecurityGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemInterfaceTaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceTaggingTagArgs']]]] = None):
        """
        :param pulumi.Input[str] category: Tag category.
        :param pulumi.Input[str] name: Tag name.
        :param pulumi.Input[Sequence[pulumi.Input['SystemInterfaceTaggingTagArgs']]] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceTaggingTagArgs']]]]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceTaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class SystemInterfaceTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemInterfaceVrrpArgs:
    def __init__(__self__, *,
                 accept_mode: Optional[pulumi.Input[str]] = None,
                 adv_interval: Optional[pulumi.Input[int]] = None,
                 ignore_default_route: Optional[pulumi.Input[str]] = None,
                 preempt: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 proxy_arps: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceVrrpProxyArpArgs']]]] = None,
                 start_time: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 vrdst: Optional[pulumi.Input[str]] = None,
                 vrdst_priority: Optional[pulumi.Input[int]] = None,
                 vrgrp: Optional[pulumi.Input[int]] = None,
                 vrid: Optional[pulumi.Input[int]] = None,
                 vrip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] accept_mode: Enable/disable accept mode. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] adv_interval: Advertisement interval (1 - 255 seconds).
        :param pulumi.Input[str] ignore_default_route: Enable/disable ignoring of default route when checking destination. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] preempt: Enable/disable preempt mode. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] priority: Priority of the virtual router (1 - 255).
        :param pulumi.Input[Sequence[pulumi.Input['SystemInterfaceVrrpProxyArpArgs']]] proxy_arps: VRRP Proxy ARP configuration. The structure of `proxy_arp` block is documented below.
        :param pulumi.Input[int] start_time: Startup time (1 - 255 seconds).
        :param pulumi.Input[str] status: Enable/disable VRRP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] version: VRRP version. Valid values: `2`, `3`.
        :param pulumi.Input[str] vrdst: Monitor the route to this destination.
        :param pulumi.Input[int] vrdst_priority: Priority of the virtual router when the virtual router destination becomes unreachable (0 - 254).
        :param pulumi.Input[int] vrgrp: VRRP group ID (1 - 65535).
        :param pulumi.Input[int] vrid: Virtual router identifier (1 - 255).
        :param pulumi.Input[str] vrip: IP address of the virtual router.
        """
        if accept_mode is not None:
            pulumi.set(__self__, "accept_mode", accept_mode)
        if adv_interval is not None:
            pulumi.set(__self__, "adv_interval", adv_interval)
        if ignore_default_route is not None:
            pulumi.set(__self__, "ignore_default_route", ignore_default_route)
        if preempt is not None:
            pulumi.set(__self__, "preempt", preempt)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if proxy_arps is not None:
            pulumi.set(__self__, "proxy_arps", proxy_arps)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vrdst is not None:
            pulumi.set(__self__, "vrdst", vrdst)
        if vrdst_priority is not None:
            pulumi.set(__self__, "vrdst_priority", vrdst_priority)
        if vrgrp is not None:
            pulumi.set(__self__, "vrgrp", vrgrp)
        if vrid is not None:
            pulumi.set(__self__, "vrid", vrid)
        if vrip is not None:
            pulumi.set(__self__, "vrip", vrip)

    @property
    @pulumi.getter(name="acceptMode")
    def accept_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable accept mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "accept_mode")

    @accept_mode.setter
    def accept_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accept_mode", value)

    @property
    @pulumi.getter(name="advInterval")
    def adv_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Advertisement interval (1 - 255 seconds).
        """
        return pulumi.get(self, "adv_interval")

    @adv_interval.setter
    def adv_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adv_interval", value)

    @property
    @pulumi.getter(name="ignoreDefaultRoute")
    def ignore_default_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ignoring of default route when checking destination. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ignore_default_route")

    @ignore_default_route.setter
    def ignore_default_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_default_route", value)

    @property
    @pulumi.getter
    def preempt(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable preempt mode. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "preempt")

    @preempt.setter
    def preempt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preempt", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of the virtual router (1 - 255).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="proxyArps")
    def proxy_arps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceVrrpProxyArpArgs']]]]:
        """
        VRRP Proxy ARP configuration. The structure of `proxy_arp` block is documented below.
        """
        return pulumi.get(self, "proxy_arps")

    @proxy_arps.setter
    def proxy_arps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemInterfaceVrrpProxyArpArgs']]]]):
        pulumi.set(self, "proxy_arps", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[int]]:
        """
        Startup time (1 - 255 seconds).
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable VRRP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        VRRP version. Valid values: `2`, `3`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter
    def vrdst(self) -> Optional[pulumi.Input[str]]:
        """
        Monitor the route to this destination.
        """
        return pulumi.get(self, "vrdst")

    @vrdst.setter
    def vrdst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrdst", value)

    @property
    @pulumi.getter(name="vrdstPriority")
    def vrdst_priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of the virtual router when the virtual router destination becomes unreachable (0 - 254).
        """
        return pulumi.get(self, "vrdst_priority")

    @vrdst_priority.setter
    def vrdst_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrdst_priority", value)

    @property
    @pulumi.getter
    def vrgrp(self) -> Optional[pulumi.Input[int]]:
        """
        VRRP group ID (1 - 65535).
        """
        return pulumi.get(self, "vrgrp")

    @vrgrp.setter
    def vrgrp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrgrp", value)

    @property
    @pulumi.getter
    def vrid(self) -> Optional[pulumi.Input[int]]:
        """
        Virtual router identifier (1 - 255).
        """
        return pulumi.get(self, "vrid")

    @vrid.setter
    def vrid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrid", value)

    @property
    @pulumi.getter
    def vrip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the virtual router.
        """
        return pulumi.get(self, "vrip")

    @vrip.setter
    def vrip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrip", value)


@pulumi.input_type
class SystemInterfaceVrrpProxyArpArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] ip: Secondary IP address of the interface.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Secondary IP address of the interface.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class SystemIpsecAggregateMemberArgs:
    def __init__(__self__, *,
                 tunnel_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] tunnel_name: Tunnel name.
        """
        if tunnel_name is not None:
            pulumi.set(__self__, "tunnel_name", tunnel_name)

    @property
    @pulumi.getter(name="tunnelName")
    def tunnel_name(self) -> Optional[pulumi.Input[str]]:
        """
        Tunnel name.
        """
        return pulumi.get(self, "tunnel_name")

    @tunnel_name.setter
    def tunnel_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_name", value)


@pulumi.input_type
class SystemLinkMonitorRouteArgs:
    def __init__(__self__, *,
                 subnet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] subnet: IP and netmask (x.x.x.x/y).
        """
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IP and netmask (x.x.x.x/y).
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)


@pulumi.input_type
class SystemLinkMonitorServerArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] address: Server address.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Server address.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)


@pulumi.input_type
class SystemLinkMonitorServerListArgs:
    def __init__(__self__, *,
                 dst: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] dst: IP address of the server to be monitored.
        :param pulumi.Input[int] id: Server ID.
        :param pulumi.Input[int] port: Port number of the traffic to be used to monitor the server.
        :param pulumi.Input[str] protocol: Protocols used to monitor the server. Valid values: `ping`, `tcp-echo`, `udp-echo`, `http`, `twamp`.
        :param pulumi.Input[int] weight: Weight of the monitor to this dst (0 - 255).
        """
        if dst is not None:
            pulumi.set(__self__, "dst", dst)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def dst(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the server to be monitored.
        """
        return pulumi.get(self, "dst")

    @dst.setter
    def dst(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port number of the traffic to be used to monitor the server.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocols used to monitor the server. Valid values: `ping`, `tcp-echo`, `udp-echo`, `http`, `twamp`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight of the monitor to this dst (0 - 255).
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class SystemLldpNetworkPolicyGuestArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param pulumi.Input[int] priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param pulumi.Input[str] status: Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] tag: Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        :param pulumi.Input[int] vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class SystemLldpNetworkPolicyGuestVoiceSignalingArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param pulumi.Input[int] priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param pulumi.Input[str] status: Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] tag: Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        :param pulumi.Input[int] vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class SystemLldpNetworkPolicySoftphoneArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param pulumi.Input[int] priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param pulumi.Input[str] status: Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] tag: Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        :param pulumi.Input[int] vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class SystemLldpNetworkPolicyStreamingVideoArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param pulumi.Input[int] priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param pulumi.Input[str] status: Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] tag: Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        :param pulumi.Input[int] vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class SystemLldpNetworkPolicyVideoConferencingArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param pulumi.Input[int] priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param pulumi.Input[str] status: Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] tag: Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        :param pulumi.Input[int] vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class SystemLldpNetworkPolicyVideoSignalingArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param pulumi.Input[int] priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param pulumi.Input[str] status: Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] tag: Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        :param pulumi.Input[int] vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class SystemLldpNetworkPolicyVoiceArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param pulumi.Input[int] priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param pulumi.Input[str] status: Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] tag: Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        :param pulumi.Input[int] vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class SystemLldpNetworkPolicyVoiceSignalingArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] dscp: Differentiated Services Code Point (DSCP) value to advertise.
        :param pulumi.Input[int] priority: 802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        :param pulumi.Input[str] status: Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] tag: Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        :param pulumi.Input[int] vlan: 802.1Q VLAN ID to advertise (1 - 4094).
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Differentiated Services Code Point (DSCP) value to advertise.
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        802.1P CoS/PCP to advertise (0 - 7; from lowest to highest priority).
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable advertising this policy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        """
        Advertise tagged or untagged traffic. Valid values: `none`, `dot1q`, `dot1p`.
        """
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        802.1Q VLAN ID to advertise (1 - 4094).
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class SystemMobileTunnelNetworkArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Network entry ID.
        :param pulumi.Input[str] interface: Select the associated interface name from available options.
        :param pulumi.Input[str] prefix: Class IP and Netmask with correction (Format:xxx.xxx.xxx.xxx xxx.xxx.xxx.xxx or xxx.xxx.xxx.xxx/x).
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Network entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Select the associated interface name from available options.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Class IP and Netmask with correction (Format:xxx.xxx.xxx.xxx xxx.xxx.xxx.xxx or xxx.xxx.xxx.xxx/x).
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class SystemNat64SecondaryPrefixArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 nat64_prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: NAT64 prefix name.
        :param pulumi.Input[str] nat64_prefix: NAT64 prefix.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat64_prefix is not None:
            pulumi.set(__self__, "nat64_prefix", nat64_prefix)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        NAT64 prefix name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nat64Prefix")
    def nat64_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        NAT64 prefix.
        """
        return pulumi.get(self, "nat64_prefix")

    @nat64_prefix.setter
    def nat64_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat64_prefix", value)


@pulumi.input_type
class SystemNdProxyMemberArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface_name: Interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class SystemNpuPriorityProtocolArgs:
    def __init__(__self__, *,
                 bfd: Optional[pulumi.Input[str]] = None,
                 bgp: Optional[pulumi.Input[str]] = None,
                 slbc: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bfd: Enable/disable NPU BFD priority protocol. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] bgp: Enable/disable NPU BGP priority protocol. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] slbc: Enable/disable NPU SLBC priority protocol. Valid values: `enable`, `disable`.
        """
        if bfd is not None:
            pulumi.set(__self__, "bfd", bfd)
        if bgp is not None:
            pulumi.set(__self__, "bgp", bgp)
        if slbc is not None:
            pulumi.set(__self__, "slbc", slbc)

    @property
    @pulumi.getter
    def bfd(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NPU BFD priority protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bfd")

    @bfd.setter
    def bfd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd", value)

    @property
    @pulumi.getter
    def bgp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NPU BGP priority protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bgp")

    @bgp.setter
    def bgp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bgp", value)

    @property
    @pulumi.getter
    def slbc(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable NPU SLBC priority protocol. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "slbc")

    @slbc.setter
    def slbc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slbc", value)


@pulumi.input_type
class SystemNtpInterfaceArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface_name: Interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class SystemNtpNtpserverArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[int]] = None,
                 ntpv3: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] authentication: Enable/disable MD5/SHA1 authentication. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] id: NTP server ID.
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[str] key: Key for MD5/SHA1 authentication.
        :param pulumi.Input[int] key_id: Key ID for authentication.
        :param pulumi.Input[str] ntpv3: Enable to use NTPv3 instead of NTPv4. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] server: IP address or hostname of the NTP Server.
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if ntpv3 is not None:
            pulumi.set(__self__, "ntpv3", ntpv3)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable MD5/SHA1 authentication. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        NTP server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key for MD5/SHA1 authentication.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[int]]:
        """
        Key ID for authentication.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter
    def ntpv3(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to use NTPv3 instead of NTPv4. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ntpv3")

    @ntpv3.setter
    def ntpv3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ntpv3", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        IP address or hostname of the NTP Server.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)


@pulumi.input_type
class SystemObjectTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemPtpServerInterfaceArgs:
    def __init__(__self__, *,
                 delay_mechanism: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 server_interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] delay_mechanism: End to end delay detection or peer to peer delay detection. Valid values: `E2E`, `P2P`.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] server_interface_name: Interface name.
        """
        if delay_mechanism is not None:
            pulumi.set(__self__, "delay_mechanism", delay_mechanism)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if server_interface_name is not None:
            pulumi.set(__self__, "server_interface_name", server_interface_name)

    @property
    @pulumi.getter(name="delayMechanism")
    def delay_mechanism(self) -> Optional[pulumi.Input[str]]:
        """
        End to end delay detection or peer to peer delay detection. Valid values: `E2E`, `P2P`.
        """
        return pulumi.get(self, "delay_mechanism")

    @delay_mechanism.setter
    def delay_mechanism(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delay_mechanism", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="serverInterfaceName")
    def server_interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "server_interface_name")

    @server_interface_name.setter
    def server_interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_interface_name", value)


@pulumi.input_type
class SystemReplacemsgGroupAdminArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag. Valid values: `none`, `text`, `html`.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag. Valid values: `none`, `text`, `html`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupAlertmailArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag. Valid values: `none`, `text`, `html`.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag. Valid values: `none`, `text`, `html`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupAuthArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag. Valid values: `none`, `text`, `html`.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag. Valid values: `none`, `text`, `html`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupAutomationArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag. Valid values: `none`, `text`, `html`.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag. Valid values: `none`, `text`, `html`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupCustomMessageArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag. Valid values: `none`, `text`, `html`.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag. Valid values: `none`, `text`, `html`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupDeviceDetectionPortalArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag. Valid values: `none`, `text`, `html`.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag. Valid values: `none`, `text`, `html`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupEcArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag. Valid values: `none`, `text`, `html`.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag. Valid values: `none`, `text`, `html`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupFortiguardWfArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag. Valid values: `none`, `text`, `html`.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag. Valid values: `none`, `text`, `html`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupFtpArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag. Valid values: `none`, `text`, `html`.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag. Valid values: `none`, `text`, `html`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupHttpArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag. Valid values: `none`, `text`, `html`.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag. Valid values: `none`, `text`, `html`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupIcapArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag. Valid values: `none`, `text`, `html`.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag. Valid values: `none`, `text`, `html`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupMailArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag. Valid values: `none`, `text`, `html`.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag. Valid values: `none`, `text`, `html`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupNacQuarArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag. Valid values: `none`, `text`, `html`.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag. Valid values: `none`, `text`, `html`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupNntpArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag. Valid values: `none`, `text`, `html`.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag. Valid values: `none`, `text`, `html`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupSpamArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag. Valid values: `none`, `text`, `html`.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag. Valid values: `none`, `text`, `html`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupSslvpnArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag. Valid values: `none`, `text`, `html`.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag. Valid values: `none`, `text`, `html`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupTrafficQuotaArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag. Valid values: `none`, `text`, `html`.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag. Valid values: `none`, `text`, `html`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupUtmArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag. Valid values: `none`, `text`, `html`.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag. Valid values: `none`, `text`, `html`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemReplacemsgGroupWebproxyArgs:
    def __init__(__self__, *,
                 buffer: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 msg_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] buffer: Message string.
        :param pulumi.Input[str] format: Format flag. Valid values: `none`, `text`, `html`.
        :param pulumi.Input[str] header: Header flag. Valid values: `none`, `http`, `8bit`.
        :param pulumi.Input[str] msg_type: Message type.
        """
        if buffer is not None:
            pulumi.set(__self__, "buffer", buffer)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if msg_type is not None:
            pulumi.set(__self__, "msg_type", msg_type)

    @property
    @pulumi.getter
    def buffer(self) -> Optional[pulumi.Input[str]]:
        """
        Message string.
        """
        return pulumi.get(self, "buffer")

    @buffer.setter
    def buffer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffer", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format flag. Valid values: `none`, `text`, `html`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        Header flag. Valid values: `none`, `http`, `8bit`.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="msgType")
    def msg_type(self) -> Optional[pulumi.Input[str]]:
        """
        Message type.
        """
        return pulumi.get(self, "msg_type")

    @msg_type.setter
    def msg_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "msg_type", value)


@pulumi.input_type
class SystemSamlServiceProviderArgs:
    def __init__(__self__, *,
                 assertion_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSamlServiceProviderAssertionAttributeArgs']]]] = None,
                 idp_entity_id: Optional[pulumi.Input[str]] = None,
                 idp_single_logout_url: Optional[pulumi.Input[str]] = None,
                 idp_single_sign_on_url: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 sp_binding_protocol: Optional[pulumi.Input[str]] = None,
                 sp_cert: Optional[pulumi.Input[str]] = None,
                 sp_entity_id: Optional[pulumi.Input[str]] = None,
                 sp_portal_url: Optional[pulumi.Input[str]] = None,
                 sp_single_logout_url: Optional[pulumi.Input[str]] = None,
                 sp_single_sign_on_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SystemSamlServiceProviderAssertionAttributeArgs']]] assertion_attributes: Customized SAML attributes to send along with assertion. The structure of `assertion_attributes` block is documented below.
        :param pulumi.Input[str] idp_entity_id: IDP entity ID.
        :param pulumi.Input[str] idp_single_logout_url: IDP single logout URL.
        :param pulumi.Input[str] idp_single_sign_on_url: IDP single sign-on URL.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] prefix: Prefix.
        :param pulumi.Input[str] sp_binding_protocol: SP binding protocol. Valid values: `post`, `redirect`.
        :param pulumi.Input[str] sp_cert: SP certificate name.
        :param pulumi.Input[str] sp_entity_id: SP entity ID.
        :param pulumi.Input[str] sp_portal_url: SP portal URL.
        :param pulumi.Input[str] sp_single_logout_url: SP single logout URL.
        :param pulumi.Input[str] sp_single_sign_on_url: SP single sign-on URL.
        """
        if assertion_attributes is not None:
            pulumi.set(__self__, "assertion_attributes", assertion_attributes)
        if idp_entity_id is not None:
            pulumi.set(__self__, "idp_entity_id", idp_entity_id)
        if idp_single_logout_url is not None:
            pulumi.set(__self__, "idp_single_logout_url", idp_single_logout_url)
        if idp_single_sign_on_url is not None:
            pulumi.set(__self__, "idp_single_sign_on_url", idp_single_sign_on_url)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if sp_binding_protocol is not None:
            pulumi.set(__self__, "sp_binding_protocol", sp_binding_protocol)
        if sp_cert is not None:
            pulumi.set(__self__, "sp_cert", sp_cert)
        if sp_entity_id is not None:
            pulumi.set(__self__, "sp_entity_id", sp_entity_id)
        if sp_portal_url is not None:
            pulumi.set(__self__, "sp_portal_url", sp_portal_url)
        if sp_single_logout_url is not None:
            pulumi.set(__self__, "sp_single_logout_url", sp_single_logout_url)
        if sp_single_sign_on_url is not None:
            pulumi.set(__self__, "sp_single_sign_on_url", sp_single_sign_on_url)

    @property
    @pulumi.getter(name="assertionAttributes")
    def assertion_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSamlServiceProviderAssertionAttributeArgs']]]]:
        """
        Customized SAML attributes to send along with assertion. The structure of `assertion_attributes` block is documented below.
        """
        return pulumi.get(self, "assertion_attributes")

    @assertion_attributes.setter
    def assertion_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSamlServiceProviderAssertionAttributeArgs']]]]):
        pulumi.set(self, "assertion_attributes", value)

    @property
    @pulumi.getter(name="idpEntityId")
    def idp_entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        IDP entity ID.
        """
        return pulumi.get(self, "idp_entity_id")

    @idp_entity_id.setter
    def idp_entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_entity_id", value)

    @property
    @pulumi.getter(name="idpSingleLogoutUrl")
    def idp_single_logout_url(self) -> Optional[pulumi.Input[str]]:
        """
        IDP single logout URL.
        """
        return pulumi.get(self, "idp_single_logout_url")

    @idp_single_logout_url.setter
    def idp_single_logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_single_logout_url", value)

    @property
    @pulumi.getter(name="idpSingleSignOnUrl")
    def idp_single_sign_on_url(self) -> Optional[pulumi.Input[str]]:
        """
        IDP single sign-on URL.
        """
        return pulumi.get(self, "idp_single_sign_on_url")

    @idp_single_sign_on_url.setter
    def idp_single_sign_on_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_single_sign_on_url", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="spBindingProtocol")
    def sp_binding_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        SP binding protocol. Valid values: `post`, `redirect`.
        """
        return pulumi.get(self, "sp_binding_protocol")

    @sp_binding_protocol.setter
    def sp_binding_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sp_binding_protocol", value)

    @property
    @pulumi.getter(name="spCert")
    def sp_cert(self) -> Optional[pulumi.Input[str]]:
        """
        SP certificate name.
        """
        return pulumi.get(self, "sp_cert")

    @sp_cert.setter
    def sp_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sp_cert", value)

    @property
    @pulumi.getter(name="spEntityId")
    def sp_entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        SP entity ID.
        """
        return pulumi.get(self, "sp_entity_id")

    @sp_entity_id.setter
    def sp_entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sp_entity_id", value)

    @property
    @pulumi.getter(name="spPortalUrl")
    def sp_portal_url(self) -> Optional[pulumi.Input[str]]:
        """
        SP portal URL.
        """
        return pulumi.get(self, "sp_portal_url")

    @sp_portal_url.setter
    def sp_portal_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sp_portal_url", value)

    @property
    @pulumi.getter(name="spSingleLogoutUrl")
    def sp_single_logout_url(self) -> Optional[pulumi.Input[str]]:
        """
        SP single logout URL.
        """
        return pulumi.get(self, "sp_single_logout_url")

    @sp_single_logout_url.setter
    def sp_single_logout_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sp_single_logout_url", value)

    @property
    @pulumi.getter(name="spSingleSignOnUrl")
    def sp_single_sign_on_url(self) -> Optional[pulumi.Input[str]]:
        """
        SP single sign-on URL.
        """
        return pulumi.get(self, "sp_single_sign_on_url")

    @sp_single_sign_on_url.setter
    def sp_single_sign_on_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sp_single_sign_on_url", value)


@pulumi.input_type
class SystemSamlServiceProviderAssertionAttributeArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] type: Type.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SystemSdnConnectorExternalAccountListArgs:
    def __init__(__self__, *,
                 region_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorExternalAccountListRegionListArgs']]]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorExternalAccountListRegionListArgs']]] region_lists: AWS region name list. The structure of `region_list` block is documented below.
        :param pulumi.Input[str] role_arn: AWS role ARN to assume.
        """
        if region_lists is not None:
            pulumi.set(__self__, "region_lists", region_lists)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="regionLists")
    def region_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorExternalAccountListRegionListArgs']]]]:
        """
        AWS region name list. The structure of `region_list` block is documented below.
        """
        return pulumi.get(self, "region_lists")

    @region_lists.setter
    def region_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorExternalAccountListRegionListArgs']]]]):
        pulumi.set(self, "region_lists", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        AWS role ARN to assume.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class SystemSdnConnectorExternalAccountListRegionListArgs:
    def __init__(__self__, *,
                 region: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] region: AWS region name.
        """
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        AWS region name.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class SystemSdnConnectorExternalIpArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: GCP zone name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        GCP zone name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdnConnectorForwardingRuleArgs:
    def __init__(__self__, *,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] rule_name: Forwarding rule name.
        :param pulumi.Input[str] target: Target instance name.
        """
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[pulumi.Input[str]]:
        """
        Forwarding rule name.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        """
        Target instance name.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class SystemSdnConnectorGcpProjectListArgs:
    def __init__(__self__, *,
                 gcp_zone_lists: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorGcpProjectListGcpZoneListArgs']]]] = None,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorGcpProjectListGcpZoneListArgs']]] gcp_zone_lists: Configure GCP zone list. The structure of `gcp_zone_list` block is documented below.
        :param pulumi.Input[str] id: GCP project ID.
        """
        if gcp_zone_lists is not None:
            pulumi.set(__self__, "gcp_zone_lists", gcp_zone_lists)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="gcpZoneLists")
    def gcp_zone_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorGcpProjectListGcpZoneListArgs']]]]:
        """
        Configure GCP zone list. The structure of `gcp_zone_list` block is documented below.
        """
        return pulumi.get(self, "gcp_zone_lists")

    @gcp_zone_lists.setter
    def gcp_zone_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorGcpProjectListGcpZoneListArgs']]]]):
        pulumi.set(self, "gcp_zone_lists", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        GCP project ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemSdnConnectorGcpProjectListGcpZoneListArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: GCP zone name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        GCP zone name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdnConnectorNicArgs:
    def __init__(__self__, *,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorNicIpArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorNicIpArgs']]] ips: Configure IP configuration. The structure of `ip` block is documented below.
        :param pulumi.Input[str] name: GCP zone name.
        """
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorNicIpArgs']]]]:
        """
        Configure IP configuration. The structure of `ip` block is documented below.
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorNicIpArgs']]]]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        GCP zone name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdnConnectorNicIpArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 public_ip: Optional[pulumi.Input[str]] = None,
                 resource_group: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: GCP zone name.
        :param pulumi.Input[str] public_ip: Public IP name.
        :param pulumi.Input[str] resource_group: Resource group of Azure route table.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        GCP zone name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Public IP name.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        Resource group of Azure route table.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)


@pulumi.input_type
class SystemSdnConnectorRouteArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: GCP zone name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        GCP zone name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdnConnectorRouteTableArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_group: Optional[pulumi.Input[str]] = None,
                 routes: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorRouteTableRouteArgs']]]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: GCP zone name.
        :param pulumi.Input[str] resource_group: Resource group of Azure route table.
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorRouteTableRouteArgs']]] routes: Configure Azure route. The structure of `route` block is documented below.
        :param pulumi.Input[str] subscription_id: Subscription ID of Azure route table.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group is not None:
            pulumi.set(__self__, "resource_group", resource_group)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        GCP zone name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resourceGroup")
    def resource_group(self) -> Optional[pulumi.Input[str]]:
        """
        Resource group of Azure route table.
        """
        return pulumi.get(self, "resource_group")

    @resource_group.setter
    def resource_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_group", value)

    @property
    @pulumi.getter
    def routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorRouteTableRouteArgs']]]]:
        """
        Configure Azure route. The structure of `route` block is documented below.
        """
        return pulumi.get(self, "routes")

    @routes.setter
    def routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdnConnectorRouteTableRouteArgs']]]]):
        pulumi.set(self, "routes", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        Subscription ID of Azure route table.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)


@pulumi.input_type
class SystemSdnConnectorRouteTableRouteArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 next_hop: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: GCP zone name.
        :param pulumi.Input[str] next_hop: Next hop address.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_hop is not None:
            pulumi.set(__self__, "next_hop", next_hop)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        GCP zone name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> Optional[pulumi.Input[str]]:
        """
        Next hop address.
        """
        return pulumi.get(self, "next_hop")

    @next_hop.setter
    def next_hop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop", value)


@pulumi.input_type
class SystemSdnConnectorServerListArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ip: Configure IP configuration. The structure of `ip` block is documented below.
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Configure IP configuration. The structure of `ip` block is documented below.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class SystemSdwanDuplicationArgs:
    def __init__(__self__, *,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationDstaddr6Args']]]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationDstaddrArgs']]]] = None,
                 dstintfs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationDstintfArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 packet_de_duplication: Optional[pulumi.Input[str]] = None,
                 packet_duplication: Optional[pulumi.Input[str]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationServiceIdArgs']]]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationServiceArgs']]]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationSrcaddr6Args']]]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationSrcaddrArgs']]]] = None,
                 srcintfs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationSrcintfArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationDstaddr6Args']]] dstaddr6s: Destination address6 or address6 group names. The structure of `dstaddr6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationDstaddrArgs']]] dstaddrs: Destination address or address group names. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationDstintfArgs']]] dstintfs: Outgoing (egress) interfaces or zones. The structure of `dstintf` block is documented below.
        :param pulumi.Input[int] id: SD-WAN service rule ID.
        :param pulumi.Input[str] packet_de_duplication: Enable/disable discarding of packets that have been duplicated. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] packet_duplication: Configure packet duplication method. Valid values: `disable`, `force`, `on-demand`.
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationServiceIdArgs']]] service_ids: SD-WAN service rule ID list. The structure of `service_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationServiceArgs']]] services: Service and service group name. The structure of `service` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationSrcaddr6Args']]] srcaddr6s: Source address6 or address6 group names. The structure of `srcaddr6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationSrcaddrArgs']]] srcaddrs: Source address or address group names. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationSrcintfArgs']]] srcintfs: Incoming (ingress) interfaces or zones. The structure of `srcintf` block is documented below.
        """
        if dstaddr6s is not None:
            pulumi.set(__self__, "dstaddr6s", dstaddr6s)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if dstintfs is not None:
            pulumi.set(__self__, "dstintfs", dstintfs)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if packet_de_duplication is not None:
            pulumi.set(__self__, "packet_de_duplication", packet_de_duplication)
        if packet_duplication is not None:
            pulumi.set(__self__, "packet_duplication", packet_duplication)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if srcaddr6s is not None:
            pulumi.set(__self__, "srcaddr6s", srcaddr6s)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if srcintfs is not None:
            pulumi.set(__self__, "srcintfs", srcintfs)

    @property
    @pulumi.getter
    def dstaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationDstaddr6Args']]]]:
        """
        Destination address6 or address6 group names. The structure of `dstaddr6` block is documented below.
        """
        return pulumi.get(self, "dstaddr6s")

    @dstaddr6s.setter
    def dstaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationDstaddr6Args']]]]):
        pulumi.set(self, "dstaddr6s", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationDstaddrArgs']]]]:
        """
        Destination address or address group names. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationDstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter
    def dstintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationDstintfArgs']]]]:
        """
        Outgoing (egress) interfaces or zones. The structure of `dstintf` block is documented below.
        """
        return pulumi.get(self, "dstintfs")

    @dstintfs.setter
    def dstintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationDstintfArgs']]]]):
        pulumi.set(self, "dstintfs", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        SD-WAN service rule ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="packetDeDuplication")
    def packet_de_duplication(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable discarding of packets that have been duplicated. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "packet_de_duplication")

    @packet_de_duplication.setter
    def packet_de_duplication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "packet_de_duplication", value)

    @property
    @pulumi.getter(name="packetDuplication")
    def packet_duplication(self) -> Optional[pulumi.Input[str]]:
        """
        Configure packet duplication method. Valid values: `disable`, `force`, `on-demand`.
        """
        return pulumi.get(self, "packet_duplication")

    @packet_duplication.setter
    def packet_duplication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "packet_duplication", value)

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationServiceIdArgs']]]]:
        """
        SD-WAN service rule ID list. The structure of `service_id` block is documented below.
        """
        return pulumi.get(self, "service_ids")

    @service_ids.setter
    def service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationServiceIdArgs']]]]):
        pulumi.set(self, "service_ids", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationServiceArgs']]]]:
        """
        Service and service group name. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter
    def srcaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationSrcaddr6Args']]]]:
        """
        Source address6 or address6 group names. The structure of `srcaddr6` block is documented below.
        """
        return pulumi.get(self, "srcaddr6s")

    @srcaddr6s.setter
    def srcaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationSrcaddr6Args']]]]):
        pulumi.set(self, "srcaddr6s", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationSrcaddrArgs']]]]:
        """
        Source address or address group names. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationSrcaddrArgs']]]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter
    def srcintfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationSrcintfArgs']]]]:
        """
        Incoming (ingress) interfaces or zones. The structure of `srcintf` block is documented below.
        """
        return pulumi.get(self, "srcintfs")

    @srcintfs.setter
    def srcintfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanDuplicationSrcintfArgs']]]]):
        pulumi.set(self, "srcintfs", value)


@pulumi.input_type
class SystemSdwanDuplicationDstaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service and service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanDuplicationDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service and service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanDuplicationDstintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service and service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanDuplicationServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service and service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanDuplicationServiceIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: SD-WAN service rule ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        SD-WAN service rule ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemSdwanDuplicationSrcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service and service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanDuplicationSrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service and service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanDuplicationSrcintfArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service and service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanFailAlertInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service and service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanHealthCheckArgs:
    def __init__(__self__, *,
                 addr_mode: Optional[pulumi.Input[str]] = None,
                 detect_mode: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dns_match_ip: Optional[pulumi.Input[str]] = None,
                 dns_request_domain: Optional[pulumi.Input[str]] = None,
                 failtime: Optional[pulumi.Input[int]] = None,
                 ftp_file: Optional[pulumi.Input[str]] = None,
                 ftp_mode: Optional[pulumi.Input[str]] = None,
                 ha_priority: Optional[pulumi.Input[int]] = None,
                 http_agent: Optional[pulumi.Input[str]] = None,
                 http_get: Optional[pulumi.Input[str]] = None,
                 http_match: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanHealthCheckMemberArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packet_size: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 probe_count: Optional[pulumi.Input[int]] = None,
                 probe_packets: Optional[pulumi.Input[str]] = None,
                 probe_timeout: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 quality_measured_method: Optional[pulumi.Input[str]] = None,
                 recoverytime: Optional[pulumi.Input[int]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 sla_fail_log_period: Optional[pulumi.Input[int]] = None,
                 sla_pass_log_period: Optional[pulumi.Input[int]] = None,
                 slas: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanHealthCheckSlaArgs']]]] = None,
                 system_dns: Optional[pulumi.Input[str]] = None,
                 threshold_alert_jitter: Optional[pulumi.Input[int]] = None,
                 threshold_alert_latency: Optional[pulumi.Input[int]] = None,
                 threshold_alert_packetloss: Optional[pulumi.Input[int]] = None,
                 threshold_warning_jitter: Optional[pulumi.Input[int]] = None,
                 threshold_warning_latency: Optional[pulumi.Input[int]] = None,
                 threshold_warning_packetloss: Optional[pulumi.Input[int]] = None,
                 update_cascade_interface: Optional[pulumi.Input[str]] = None,
                 update_static_route: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] addr_mode: Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] detect_mode: The mode determining how to detect the server. Valid values: `active`, `passive`, `prefer-passive`.
        :param pulumi.Input[str] diffservcode: Differentiated services code point (DSCP) in the IP header of the probe packet.
        :param pulumi.Input[str] dns_match_ip: Response IP expected from DNS server if the protocol is DNS.
        :param pulumi.Input[str] dns_request_domain: Fully qualified domain name to resolve for the DNS probe.
        :param pulumi.Input[int] failtime: Number of failures before server is considered lost (1 - 3600, default = 5).
        :param pulumi.Input[str] ftp_file: Full path and file name on the FTP server to download for FTP health-check to probe.
        :param pulumi.Input[str] ftp_mode: FTP mode. Valid values: `passive`, `port`.
        :param pulumi.Input[int] ha_priority: HA election priority (1 - 50).
        :param pulumi.Input[str] http_agent: String in the http-agent field in the HTTP header.
        :param pulumi.Input[str] http_get: URL used to communicate with the server if the protocol if the protocol is HTTP.
        :param pulumi.Input[str] http_match: Response string expected from the server if the protocol is HTTP.
        :param pulumi.Input[int] interval: Status check interval in milliseconds, or the time between attempting to connect to the server (500 - 3600*1000 msec, default = 500).
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanHealthCheckMemberArgs']]] members: Member sequence number list. The structure of `members` block is documented below.
        :param pulumi.Input[str] name: Service and service group name.
        :param pulumi.Input[int] packet_size: Packet size of a twamp test session,
        :param pulumi.Input[str] password: Twamp controller password in authentication mode
        :param pulumi.Input[int] port: Port number used to communicate with the server over the selected protocol (0-65535, default = 0, auto select. http, twamp: 80, udp-echo, tcp-echo: 7, dns: 53, ftp: 21).
        :param pulumi.Input[int] probe_count: Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
        :param pulumi.Input[str] probe_packets: Enable/disable transmission of probe packets. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] probe_timeout: Time to wait before a probe packet is considered lost (500 - 3600*1000 msec, default = 500).
        :param pulumi.Input[str] protocol: Protocol number.
        :param pulumi.Input[str] quality_measured_method: Method to measure the quality of tcp-connect. Valid values: `half-open`, `half-close`.
        :param pulumi.Input[int] recoverytime: Number of successful responses received before server is considered recovered (1 - 3600, default = 5).
        :param pulumi.Input[str] security_mode: Twamp controller security mode. Valid values: `none`, `authentication`.
        :param pulumi.Input[str] server: IP address or FQDN name of the server.
        :param pulumi.Input[int] sla_fail_log_period: Time interval in seconds that SLA fail log messages will be generated (0 - 3600, default = 0).
        :param pulumi.Input[int] sla_pass_log_period: Time interval in seconds that SLA pass log messages will be generated (0 - 3600, default = 0).
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanHealthCheckSlaArgs']]] slas: Service level agreement (SLA). The structure of `sla` block is documented below.
        :param pulumi.Input[str] system_dns: Enable/disable system DNS as the probe server. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] threshold_alert_jitter: Alert threshold for jitter (ms, default = 0).
        :param pulumi.Input[int] threshold_alert_latency: Alert threshold for latency (ms, default = 0).
        :param pulumi.Input[int] threshold_alert_packetloss: Alert threshold for packet loss (percentage, default = 0).
        :param pulumi.Input[int] threshold_warning_jitter: Warning threshold for jitter (ms, default = 0).
        :param pulumi.Input[int] threshold_warning_latency: Warning threshold for latency (ms, default = 0).
        :param pulumi.Input[int] threshold_warning_packetloss: Warning threshold for packet loss (percentage, default = 0).
        :param pulumi.Input[str] update_cascade_interface: Enable/disable update cascade interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_static_route: Enable/disable updating the static route. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] user: The user name to access probe server.
        """
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if detect_mode is not None:
            pulumi.set(__self__, "detect_mode", detect_mode)
        if diffservcode is not None:
            pulumi.set(__self__, "diffservcode", diffservcode)
        if dns_match_ip is not None:
            pulumi.set(__self__, "dns_match_ip", dns_match_ip)
        if dns_request_domain is not None:
            pulumi.set(__self__, "dns_request_domain", dns_request_domain)
        if failtime is not None:
            pulumi.set(__self__, "failtime", failtime)
        if ftp_file is not None:
            pulumi.set(__self__, "ftp_file", ftp_file)
        if ftp_mode is not None:
            pulumi.set(__self__, "ftp_mode", ftp_mode)
        if ha_priority is not None:
            pulumi.set(__self__, "ha_priority", ha_priority)
        if http_agent is not None:
            pulumi.set(__self__, "http_agent", http_agent)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if http_match is not None:
            pulumi.set(__self__, "http_match", http_match)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_size is not None:
            pulumi.set(__self__, "packet_size", packet_size)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if probe_count is not None:
            pulumi.set(__self__, "probe_count", probe_count)
        if probe_packets is not None:
            pulumi.set(__self__, "probe_packets", probe_packets)
        if probe_timeout is not None:
            pulumi.set(__self__, "probe_timeout", probe_timeout)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quality_measured_method is not None:
            pulumi.set(__self__, "quality_measured_method", quality_measured_method)
        if recoverytime is not None:
            pulumi.set(__self__, "recoverytime", recoverytime)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if sla_fail_log_period is not None:
            pulumi.set(__self__, "sla_fail_log_period", sla_fail_log_period)
        if sla_pass_log_period is not None:
            pulumi.set(__self__, "sla_pass_log_period", sla_pass_log_period)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if system_dns is not None:
            pulumi.set(__self__, "system_dns", system_dns)
        if threshold_alert_jitter is not None:
            pulumi.set(__self__, "threshold_alert_jitter", threshold_alert_jitter)
        if threshold_alert_latency is not None:
            pulumi.set(__self__, "threshold_alert_latency", threshold_alert_latency)
        if threshold_alert_packetloss is not None:
            pulumi.set(__self__, "threshold_alert_packetloss", threshold_alert_packetloss)
        if threshold_warning_jitter is not None:
            pulumi.set(__self__, "threshold_warning_jitter", threshold_warning_jitter)
        if threshold_warning_latency is not None:
            pulumi.set(__self__, "threshold_warning_latency", threshold_warning_latency)
        if threshold_warning_packetloss is not None:
            pulumi.set(__self__, "threshold_warning_packetloss", threshold_warning_packetloss)
        if update_cascade_interface is not None:
            pulumi.set(__self__, "update_cascade_interface", update_cascade_interface)
        if update_static_route is not None:
            pulumi.set(__self__, "update_static_route", update_static_route)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_mode")

    @addr_mode.setter
    def addr_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_mode", value)

    @property
    @pulumi.getter(name="detectMode")
    def detect_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The mode determining how to detect the server. Valid values: `active`, `passive`, `prefer-passive`.
        """
        return pulumi.get(self, "detect_mode")

    @detect_mode.setter
    def detect_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detect_mode", value)

    @property
    @pulumi.getter
    def diffservcode(self) -> Optional[pulumi.Input[str]]:
        """
        Differentiated services code point (DSCP) in the IP header of the probe packet.
        """
        return pulumi.get(self, "diffservcode")

    @diffservcode.setter
    def diffservcode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode", value)

    @property
    @pulumi.getter(name="dnsMatchIp")
    def dns_match_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Response IP expected from DNS server if the protocol is DNS.
        """
        return pulumi.get(self, "dns_match_ip")

    @dns_match_ip.setter
    def dns_match_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_match_ip", value)

    @property
    @pulumi.getter(name="dnsRequestDomain")
    def dns_request_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Fully qualified domain name to resolve for the DNS probe.
        """
        return pulumi.get(self, "dns_request_domain")

    @dns_request_domain.setter
    def dns_request_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_request_domain", value)

    @property
    @pulumi.getter
    def failtime(self) -> Optional[pulumi.Input[int]]:
        """
        Number of failures before server is considered lost (1 - 3600, default = 5).
        """
        return pulumi.get(self, "failtime")

    @failtime.setter
    def failtime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failtime", value)

    @property
    @pulumi.getter(name="ftpFile")
    def ftp_file(self) -> Optional[pulumi.Input[str]]:
        """
        Full path and file name on the FTP server to download for FTP health-check to probe.
        """
        return pulumi.get(self, "ftp_file")

    @ftp_file.setter
    def ftp_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_file", value)

    @property
    @pulumi.getter(name="ftpMode")
    def ftp_mode(self) -> Optional[pulumi.Input[str]]:
        """
        FTP mode. Valid values: `passive`, `port`.
        """
        return pulumi.get(self, "ftp_mode")

    @ftp_mode.setter
    def ftp_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_mode", value)

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> Optional[pulumi.Input[int]]:
        """
        HA election priority (1 - 50).
        """
        return pulumi.get(self, "ha_priority")

    @ha_priority.setter
    def ha_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ha_priority", value)

    @property
    @pulumi.getter(name="httpAgent")
    def http_agent(self) -> Optional[pulumi.Input[str]]:
        """
        String in the http-agent field in the HTTP header.
        """
        return pulumi.get(self, "http_agent")

    @http_agent.setter
    def http_agent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_agent", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input[str]]:
        """
        URL used to communicate with the server if the protocol if the protocol is HTTP.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="httpMatch")
    def http_match(self) -> Optional[pulumi.Input[str]]:
        """
        Response string expected from the server if the protocol is HTTP.
        """
        return pulumi.get(self, "http_match")

    @http_match.setter
    def http_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_match", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Status check interval in milliseconds, or the time between attempting to connect to the server (500 - 3600*1000 msec, default = 500).
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanHealthCheckMemberArgs']]]]:
        """
        Member sequence number list. The structure of `members` block is documented below.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanHealthCheckMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packetSize")
    def packet_size(self) -> Optional[pulumi.Input[int]]:
        """
        Packet size of a twamp test session,
        """
        return pulumi.get(self, "packet_size")

    @packet_size.setter
    def packet_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_size", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Twamp controller password in authentication mode
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port number used to communicate with the server over the selected protocol (0-65535, default = 0, auto select. http, twamp: 80, udp-echo, tcp-echo: 7, dns: 53, ftp: 21).
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="probeCount")
    def probe_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
        """
        return pulumi.get(self, "probe_count")

    @probe_count.setter
    def probe_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "probe_count", value)

    @property
    @pulumi.getter(name="probePackets")
    def probe_packets(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable transmission of probe packets. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "probe_packets")

    @probe_packets.setter
    def probe_packets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "probe_packets", value)

    @property
    @pulumi.getter(name="probeTimeout")
    def probe_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time to wait before a probe packet is considered lost (500 - 3600*1000 msec, default = 500).
        """
        return pulumi.get(self, "probe_timeout")

    @probe_timeout.setter
    def probe_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "probe_timeout", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol number.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="qualityMeasuredMethod")
    def quality_measured_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method to measure the quality of tcp-connect. Valid values: `half-open`, `half-close`.
        """
        return pulumi.get(self, "quality_measured_method")

    @quality_measured_method.setter
    def quality_measured_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quality_measured_method", value)

    @property
    @pulumi.getter
    def recoverytime(self) -> Optional[pulumi.Input[int]]:
        """
        Number of successful responses received before server is considered recovered (1 - 3600, default = 5).
        """
        return pulumi.get(self, "recoverytime")

    @recoverytime.setter
    def recoverytime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recoverytime", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Twamp controller security mode. Valid values: `none`, `authentication`.
        """
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        IP address or FQDN name of the server.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="slaFailLogPeriod")
    def sla_fail_log_period(self) -> Optional[pulumi.Input[int]]:
        """
        Time interval in seconds that SLA fail log messages will be generated (0 - 3600, default = 0).
        """
        return pulumi.get(self, "sla_fail_log_period")

    @sla_fail_log_period.setter
    def sla_fail_log_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sla_fail_log_period", value)

    @property
    @pulumi.getter(name="slaPassLogPeriod")
    def sla_pass_log_period(self) -> Optional[pulumi.Input[int]]:
        """
        Time interval in seconds that SLA pass log messages will be generated (0 - 3600, default = 0).
        """
        return pulumi.get(self, "sla_pass_log_period")

    @sla_pass_log_period.setter
    def sla_pass_log_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sla_pass_log_period", value)

    @property
    @pulumi.getter
    def slas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanHealthCheckSlaArgs']]]]:
        """
        Service level agreement (SLA). The structure of `sla` block is documented below.
        """
        return pulumi.get(self, "slas")

    @slas.setter
    def slas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanHealthCheckSlaArgs']]]]):
        pulumi.set(self, "slas", value)

    @property
    @pulumi.getter(name="systemDns")
    def system_dns(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable system DNS as the probe server. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "system_dns")

    @system_dns.setter
    def system_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_dns", value)

    @property
    @pulumi.getter(name="thresholdAlertJitter")
    def threshold_alert_jitter(self) -> Optional[pulumi.Input[int]]:
        """
        Alert threshold for jitter (ms, default = 0).
        """
        return pulumi.get(self, "threshold_alert_jitter")

    @threshold_alert_jitter.setter
    def threshold_alert_jitter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_alert_jitter", value)

    @property
    @pulumi.getter(name="thresholdAlertLatency")
    def threshold_alert_latency(self) -> Optional[pulumi.Input[int]]:
        """
        Alert threshold for latency (ms, default = 0).
        """
        return pulumi.get(self, "threshold_alert_latency")

    @threshold_alert_latency.setter
    def threshold_alert_latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_alert_latency", value)

    @property
    @pulumi.getter(name="thresholdAlertPacketloss")
    def threshold_alert_packetloss(self) -> Optional[pulumi.Input[int]]:
        """
        Alert threshold for packet loss (percentage, default = 0).
        """
        return pulumi.get(self, "threshold_alert_packetloss")

    @threshold_alert_packetloss.setter
    def threshold_alert_packetloss(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_alert_packetloss", value)

    @property
    @pulumi.getter(name="thresholdWarningJitter")
    def threshold_warning_jitter(self) -> Optional[pulumi.Input[int]]:
        """
        Warning threshold for jitter (ms, default = 0).
        """
        return pulumi.get(self, "threshold_warning_jitter")

    @threshold_warning_jitter.setter
    def threshold_warning_jitter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_warning_jitter", value)

    @property
    @pulumi.getter(name="thresholdWarningLatency")
    def threshold_warning_latency(self) -> Optional[pulumi.Input[int]]:
        """
        Warning threshold for latency (ms, default = 0).
        """
        return pulumi.get(self, "threshold_warning_latency")

    @threshold_warning_latency.setter
    def threshold_warning_latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_warning_latency", value)

    @property
    @pulumi.getter(name="thresholdWarningPacketloss")
    def threshold_warning_packetloss(self) -> Optional[pulumi.Input[int]]:
        """
        Warning threshold for packet loss (percentage, default = 0).
        """
        return pulumi.get(self, "threshold_warning_packetloss")

    @threshold_warning_packetloss.setter
    def threshold_warning_packetloss(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_warning_packetloss", value)

    @property
    @pulumi.getter(name="updateCascadeInterface")
    def update_cascade_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable update cascade interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_cascade_interface")

    @update_cascade_interface.setter
    def update_cascade_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_cascade_interface", value)

    @property
    @pulumi.getter(name="updateStaticRoute")
    def update_static_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable updating the static route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_static_route")

    @update_static_route.setter
    def update_static_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_static_route", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        The user name to access probe server.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class SystemSdwanHealthCheckMemberArgs:
    def __init__(__self__, *,
                 seq_num: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] seq_num: Member sequence number.
        """
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)


@pulumi.input_type
class SystemSdwanHealthCheckSlaArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 jitter_threshold: Optional[pulumi.Input[int]] = None,
                 latency_threshold: Optional[pulumi.Input[int]] = None,
                 link_cost_factor: Optional[pulumi.Input[str]] = None,
                 packetloss_threshold: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: SD-WAN service rule ID.
        :param pulumi.Input[int] jitter_threshold: Jitter for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        :param pulumi.Input[int] latency_threshold: Latency for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        :param pulumi.Input[str] link_cost_factor: Link cost factor. Valid values: `latency`, `jitter`, `packet-loss`, `inbandwidth`, `outbandwidth`, `bibandwidth`, `custom-profile-1`.
        :param pulumi.Input[int] packetloss_threshold: Packet loss for SLA to make decision in percentage. (0 - 100, default = 0).
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if jitter_threshold is not None:
            pulumi.set(__self__, "jitter_threshold", jitter_threshold)
        if latency_threshold is not None:
            pulumi.set(__self__, "latency_threshold", latency_threshold)
        if link_cost_factor is not None:
            pulumi.set(__self__, "link_cost_factor", link_cost_factor)
        if packetloss_threshold is not None:
            pulumi.set(__self__, "packetloss_threshold", packetloss_threshold)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        SD-WAN service rule ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="jitterThreshold")
    def jitter_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Jitter for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        """
        return pulumi.get(self, "jitter_threshold")

    @jitter_threshold.setter
    def jitter_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "jitter_threshold", value)

    @property
    @pulumi.getter(name="latencyThreshold")
    def latency_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Latency for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        """
        return pulumi.get(self, "latency_threshold")

    @latency_threshold.setter
    def latency_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latency_threshold", value)

    @property
    @pulumi.getter(name="linkCostFactor")
    def link_cost_factor(self) -> Optional[pulumi.Input[str]]:
        """
        Link cost factor. Valid values: `latency`, `jitter`, `packet-loss`, `inbandwidth`, `outbandwidth`, `bibandwidth`, `custom-profile-1`.
        """
        return pulumi.get(self, "link_cost_factor")

    @link_cost_factor.setter
    def link_cost_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_cost_factor", value)

    @property
    @pulumi.getter(name="packetlossThreshold")
    def packetloss_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Packet loss for SLA to make decision in percentage. (0 - 100, default = 0).
        """
        return pulumi.get(self, "packetloss_threshold")

    @packetloss_threshold.setter
    def packetloss_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packetloss_threshold", value)


@pulumi.input_type
class SystemSdwanMemberArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 gateway6: Optional[pulumi.Input[str]] = None,
                 ingress_spillover_threshold: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 priority6: Optional[pulumi.Input[int]] = None,
                 seq_num: Optional[pulumi.Input[int]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source6: Optional[pulumi.Input[str]] = None,
                 spillover_threshold: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 volume_ratio: Optional[pulumi.Input[int]] = None,
                 weight: Optional[pulumi.Input[int]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comment: Comments.
        :param pulumi.Input[int] cost: Cost of this interface for services in SLA mode (0 - 4294967295, default = 0).
        :param pulumi.Input[str] gateway: Enable/disable SD-WAN service gateway. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gateway6: IPv6 gateway.
        :param pulumi.Input[int] ingress_spillover_threshold: Ingress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[int] priority: Priority of the interface (0 - 65535). Used for SD-WAN rules or priority rules.
        :param pulumi.Input[int] priority6: Priority of the interface for IPv6 (1 - 65535, default = 1024). Used for SD-WAN rules or priority rules.
        :param pulumi.Input[int] seq_num: Member sequence number.
        :param pulumi.Input[str] source: Source IP address used in the health-check packet to the server.
        :param pulumi.Input[str] source6: Source IPv6 address used in the health-check packet to the server.
        :param pulumi.Input[int] spillover_threshold: Egress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        :param pulumi.Input[str] status: Enable/disable SD-WAN service. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] volume_ratio: Measured volume ratio (this value / sum of all values = percentage of link volume, 1 - 255).
        :param pulumi.Input[int] weight: Weight of this interface for weighted load balancing. (1 - 255) More traffic is directed to interfaces with higher weights.
        :param pulumi.Input[str] zone: Zone name.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if ingress_spillover_threshold is not None:
            pulumi.set(__self__, "ingress_spillover_threshold", ingress_spillover_threshold)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if priority6 is not None:
            pulumi.set(__self__, "priority6", priority6)
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source6 is not None:
            pulumi.set(__self__, "source6", source6)
        if spillover_threshold is not None:
            pulumi.set(__self__, "spillover_threshold", spillover_threshold)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if volume_ratio is not None:
            pulumi.set(__self__, "volume_ratio", volume_ratio)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comments.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        """
        Cost of this interface for services in SLA mode (0 - 4294967295, default = 0).
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SD-WAN service gateway. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 gateway.
        """
        return pulumi.get(self, "gateway6")

    @gateway6.setter
    def gateway6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway6", value)

    @property
    @pulumi.getter(name="ingressSpilloverThreshold")
    def ingress_spillover_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Ingress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        """
        return pulumi.get(self, "ingress_spillover_threshold")

    @ingress_spillover_threshold.setter
    def ingress_spillover_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ingress_spillover_threshold", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of the interface (0 - 65535). Used for SD-WAN rules or priority rules.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def priority6(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of the interface for IPv6 (1 - 65535, default = 1024). Used for SD-WAN rules or priority rules.
        """
        return pulumi.get(self, "priority6")

    @priority6.setter
    def priority6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority6", value)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address used in the health-check packet to the server.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def source6(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv6 address used in the health-check packet to the server.
        """
        return pulumi.get(self, "source6")

    @source6.setter
    def source6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source6", value)

    @property
    @pulumi.getter(name="spilloverThreshold")
    def spillover_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Egress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        """
        return pulumi.get(self, "spillover_threshold")

    @spillover_threshold.setter
    def spillover_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spillover_threshold", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SD-WAN service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="volumeRatio")
    def volume_ratio(self) -> Optional[pulumi.Input[int]]:
        """
        Measured volume ratio (this value / sum of all values = percentage of link volume, 1 - 255).
        """
        return pulumi.get(self, "volume_ratio")

    @volume_ratio.setter
    def volume_ratio(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume_ratio", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight of this interface for weighted load balancing. (1 - 255) More traffic is directed to interfaces with higher weights.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Zone name.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class SystemSdwanNeighborArgs:
    def __init__(__self__, *,
                 health_check: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 member: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 sla_id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] health_check: SD-WAN health-check.
        :param pulumi.Input[str] ip: IP/IPv6 address of neighbor.
        :param pulumi.Input[int] member: Member sequence number.
        :param pulumi.Input[str] mode: Control how the SD-WAN rule sets the priority of interfaces in the SD-WAN. Valid values: `auto`, `manual`, `priority`, `sla`, `load-balance`.
        :param pulumi.Input[str] role: Service role to work with neighbor. Valid values: `standalone`, `primary`, `secondary`.
        :param pulumi.Input[int] sla_id: SLA ID.
        """
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if member is not None:
            pulumi.set(__self__, "member", member)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if sla_id is not None:
            pulumi.set(__self__, "sla_id", sla_id)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        """
        SD-WAN health-check.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP/IPv6 address of neighbor.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def member(self) -> Optional[pulumi.Input[int]]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "member")

    @member.setter
    def member(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "member", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Control how the SD-WAN rule sets the priority of interfaces in the SD-WAN. Valid values: `auto`, `manual`, `priority`, `sla`, `load-balance`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Service role to work with neighbor. Valid values: `standalone`, `primary`, `secondary`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> Optional[pulumi.Input[int]]:
        """
        SLA ID.
        """
        return pulumi.get(self, "sla_id")

    @sla_id.setter
    def sla_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sla_id", value)


@pulumi.input_type
class SystemSdwanServiceArgs:
    def __init__(__self__, *,
                 addr_mode: Optional[pulumi.Input[str]] = None,
                 bandwidth_weight: Optional[pulumi.Input[int]] = None,
                 default: Optional[pulumi.Input[str]] = None,
                 dscp_forward: Optional[pulumi.Input[str]] = None,
                 dscp_forward_tag: Optional[pulumi.Input[str]] = None,
                 dscp_reverse: Optional[pulumi.Input[str]] = None,
                 dscp_reverse_tag: Optional[pulumi.Input[str]] = None,
                 dst6s: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceDst6Args']]]] = None,
                 dst_negate: Optional[pulumi.Input[str]] = None,
                 dsts: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceDstArgs']]]] = None,
                 end_port: Optional[pulumi.Input[int]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceGroupArgs']]]] = None,
                 hash_mode: Optional[pulumi.Input[str]] = None,
                 health_checks: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceHealthCheckArgs']]]] = None,
                 hold_down_time: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 input_device_negate: Optional[pulumi.Input[str]] = None,
                 input_devices: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInputDeviceArgs']]]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service_app_ctrl_groups: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceAppCtrlGroupArgs']]]] = None,
                 internet_service_app_ctrls: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceAppCtrlArgs']]]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceCustomGroupArgs']]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceCustomArgs']]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceGroupArgs']]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceNameArgs']]]] = None,
                 jitter_weight: Optional[pulumi.Input[int]] = None,
                 latency_weight: Optional[pulumi.Input[int]] = None,
                 link_cost_factor: Optional[pulumi.Input[str]] = None,
                 link_cost_threshold: Optional[pulumi.Input[int]] = None,
                 minimum_sla_meet_members: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packet_loss_weight: Optional[pulumi.Input[int]] = None,
                 passive_measurement: Optional[pulumi.Input[str]] = None,
                 priority_members: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServicePriorityMemberArgs']]]] = None,
                 priority_zones: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServicePriorityZoneArgs']]]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 quality_link: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 route_tag: Optional[pulumi.Input[int]] = None,
                 sla_compare_method: Optional[pulumi.Input[str]] = None,
                 slas: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceSlaArgs']]]] = None,
                 src6s: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceSrc6Args']]]] = None,
                 src_negate: Optional[pulumi.Input[str]] = None,
                 srcs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceSrcArgs']]]] = None,
                 standalone_action: Optional[pulumi.Input[str]] = None,
                 start_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tie_break: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 use_shortcut_sla: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceUserArgs']]]] = None):
        """
        :param pulumi.Input[str] addr_mode: Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[int] bandwidth_weight: Coefficient of reciprocal of available bidirectional bandwidth in the formula of custom-profile-1.
        :param pulumi.Input[str] default: Enable/disable use of SD-WAN as default service. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dscp_forward: Enable/disable forward traffic DSCP tag. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dscp_forward_tag: Forward traffic DSCP tag.
        :param pulumi.Input[str] dscp_reverse: Enable/disable reverse traffic DSCP tag. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dscp_reverse_tag: Reverse traffic DSCP tag.
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceDst6Args']]] dst6s: Destination address6 name. The structure of `dst6` block is documented below.
        :param pulumi.Input[str] dst_negate: Enable/disable negation of destination address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceDstArgs']]] dsts: Destination address name. The structure of `dst` block is documented below.
        :param pulumi.Input[int] end_port: End destination port number.
        :param pulumi.Input[str] gateway: Enable/disable SD-WAN service gateway. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceGroupArgs']]] groups: User groups. The structure of `groups` block is documented below.
        :param pulumi.Input[str] hash_mode: Hash algorithm for selected priority members for load balance mode. Valid values: `round-robin`, `source-ip-based`, `source-dest-ip-based`, `inbandwidth`, `outbandwidth`, `bibandwidth`.
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceHealthCheckArgs']]] health_checks: SD-WAN health-check.
        :param pulumi.Input[int] hold_down_time: Waiting period in seconds when switching from the back-up member to the primary member (0 - 10000000, default = 0).
        :param pulumi.Input[int] id: SD-WAN service rule ID.
        :param pulumi.Input[str] input_device_negate: Enable/disable negation of input device match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInputDeviceArgs']]] input_devices: Source interface name. The structure of `input_device` block is documented below.
        :param pulumi.Input[str] internet_service: Enable/disable use of Internet service for application-based load balancing. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceAppCtrlGroupArgs']]] internet_service_app_ctrl_groups: Application control based Internet Service group list. The structure of `internet_service_app_ctrl_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceAppCtrlArgs']]] internet_service_app_ctrls: Application control based Internet Service ID list. The structure of `internet_service_app_ctrl` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceCustomGroupArgs']]] internet_service_custom_groups: Custom Internet Service group list. The structure of `internet_service_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceCustomArgs']]] internet_service_customs: Custom Internet service name list. The structure of `internet_service_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceGroupArgs']]] internet_service_groups: Internet Service group list. The structure of `internet_service_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceNameArgs']]] internet_service_names: Internet service name list. The structure of `internet_service_name` block is documented below.
        :param pulumi.Input[int] jitter_weight: Coefficient of jitter in the formula of custom-profile-1.
        :param pulumi.Input[int] latency_weight: Coefficient of latency in the formula of custom-profile-1.
        :param pulumi.Input[str] link_cost_factor: Link cost factor. Valid values: `latency`, `jitter`, `packet-loss`, `inbandwidth`, `outbandwidth`, `bibandwidth`, `custom-profile-1`.
        :param pulumi.Input[int] link_cost_threshold: Percentage threshold change of link cost values that will result in policy route regeneration (0 - 10000000, default = 10).
        :param pulumi.Input[int] minimum_sla_meet_members: Minimum number of members which meet SLA.
        :param pulumi.Input[str] mode: Control how the SD-WAN rule sets the priority of interfaces in the SD-WAN. Valid values: `auto`, `manual`, `priority`, `sla`, `load-balance`.
        :param pulumi.Input[str] name: Service and service group name.
        :param pulumi.Input[int] packet_loss_weight: Coefficient of packet-loss in the formula of custom-profile-1.
        :param pulumi.Input[str] passive_measurement: Enable/disable passive measurement based on the service criteria. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanServicePriorityMemberArgs']]] priority_members: Member sequence number list. The structure of `priority_members` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanServicePriorityZoneArgs']]] priority_zones: Priority zone name list. The structure of `priority_zone` block is documented below.
        :param pulumi.Input[int] protocol: Protocol number.
        :param pulumi.Input[int] quality_link: Quality grade.
        :param pulumi.Input[str] role: Service role to work with neighbor. Valid values: `standalone`, `primary`, `secondary`.
        :param pulumi.Input[int] route_tag: IPv4 route map route-tag.
        :param pulumi.Input[str] sla_compare_method: Method to compare SLA value for SLA mode. Valid values: `order`, `number`.
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceSlaArgs']]] slas: Service level agreement (SLA). The structure of `sla` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceSrc6Args']]] src6s: Source address6 name. The structure of `src6` block is documented below.
        :param pulumi.Input[str] src_negate: Enable/disable negation of source address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceSrcArgs']]] srcs: Source address name. The structure of `src` block is documented below.
        :param pulumi.Input[str] standalone_action: Enable/disable service when selected neighbor role is standalone while service role is not standalone. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] start_port: Start destination port number.
        :param pulumi.Input[str] status: Enable/disable SD-WAN service. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tie_break: Method of selecting member if more than one meets the SLA. Valid values: `zone`, `cfg-order`, `fib-best-match`.
        :param pulumi.Input[str] tos: Type of service bit pattern.
        :param pulumi.Input[str] tos_mask: Type of service evaluated bits.
        :param pulumi.Input[str] use_shortcut_sla: Enable/disable use of ADVPN shortcut for quality comparison. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceUserArgs']]] users: User name. The structure of `users` block is documented below.
        """
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if bandwidth_weight is not None:
            pulumi.set(__self__, "bandwidth_weight", bandwidth_weight)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if dscp_forward is not None:
            pulumi.set(__self__, "dscp_forward", dscp_forward)
        if dscp_forward_tag is not None:
            pulumi.set(__self__, "dscp_forward_tag", dscp_forward_tag)
        if dscp_reverse is not None:
            pulumi.set(__self__, "dscp_reverse", dscp_reverse)
        if dscp_reverse_tag is not None:
            pulumi.set(__self__, "dscp_reverse_tag", dscp_reverse_tag)
        if dst6s is not None:
            pulumi.set(__self__, "dst6s", dst6s)
        if dst_negate is not None:
            pulumi.set(__self__, "dst_negate", dst_negate)
        if dsts is not None:
            pulumi.set(__self__, "dsts", dsts)
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if hash_mode is not None:
            pulumi.set(__self__, "hash_mode", hash_mode)
        if health_checks is not None:
            pulumi.set(__self__, "health_checks", health_checks)
        if hold_down_time is not None:
            pulumi.set(__self__, "hold_down_time", hold_down_time)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if input_device_negate is not None:
            pulumi.set(__self__, "input_device_negate", input_device_negate)
        if input_devices is not None:
            pulumi.set(__self__, "input_devices", input_devices)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if internet_service_app_ctrl_groups is not None:
            pulumi.set(__self__, "internet_service_app_ctrl_groups", internet_service_app_ctrl_groups)
        if internet_service_app_ctrls is not None:
            pulumi.set(__self__, "internet_service_app_ctrls", internet_service_app_ctrls)
        if internet_service_custom_groups is not None:
            pulumi.set(__self__, "internet_service_custom_groups", internet_service_custom_groups)
        if internet_service_customs is not None:
            pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_groups is not None:
            pulumi.set(__self__, "internet_service_groups", internet_service_groups)
        if internet_service_names is not None:
            pulumi.set(__self__, "internet_service_names", internet_service_names)
        if jitter_weight is not None:
            pulumi.set(__self__, "jitter_weight", jitter_weight)
        if latency_weight is not None:
            pulumi.set(__self__, "latency_weight", latency_weight)
        if link_cost_factor is not None:
            pulumi.set(__self__, "link_cost_factor", link_cost_factor)
        if link_cost_threshold is not None:
            pulumi.set(__self__, "link_cost_threshold", link_cost_threshold)
        if minimum_sla_meet_members is not None:
            pulumi.set(__self__, "minimum_sla_meet_members", minimum_sla_meet_members)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_loss_weight is not None:
            pulumi.set(__self__, "packet_loss_weight", packet_loss_weight)
        if passive_measurement is not None:
            pulumi.set(__self__, "passive_measurement", passive_measurement)
        if priority_members is not None:
            pulumi.set(__self__, "priority_members", priority_members)
        if priority_zones is not None:
            pulumi.set(__self__, "priority_zones", priority_zones)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quality_link is not None:
            pulumi.set(__self__, "quality_link", quality_link)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if route_tag is not None:
            pulumi.set(__self__, "route_tag", route_tag)
        if sla_compare_method is not None:
            pulumi.set(__self__, "sla_compare_method", sla_compare_method)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if src6s is not None:
            pulumi.set(__self__, "src6s", src6s)
        if src_negate is not None:
            pulumi.set(__self__, "src_negate", src_negate)
        if srcs is not None:
            pulumi.set(__self__, "srcs", srcs)
        if standalone_action is not None:
            pulumi.set(__self__, "standalone_action", standalone_action)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tie_break is not None:
            pulumi.set(__self__, "tie_break", tie_break)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if tos_mask is not None:
            pulumi.set(__self__, "tos_mask", tos_mask)
        if use_shortcut_sla is not None:
            pulumi.set(__self__, "use_shortcut_sla", use_shortcut_sla)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_mode")

    @addr_mode.setter
    def addr_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_mode", value)

    @property
    @pulumi.getter(name="bandwidthWeight")
    def bandwidth_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Coefficient of reciprocal of available bidirectional bandwidth in the formula of custom-profile-1.
        """
        return pulumi.get(self, "bandwidth_weight")

    @bandwidth_weight.setter
    def bandwidth_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_weight", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of SD-WAN as default service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter(name="dscpForward")
    def dscp_forward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable forward traffic DSCP tag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dscp_forward")

    @dscp_forward.setter
    def dscp_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_forward", value)

    @property
    @pulumi.getter(name="dscpForwardTag")
    def dscp_forward_tag(self) -> Optional[pulumi.Input[str]]:
        """
        Forward traffic DSCP tag.
        """
        return pulumi.get(self, "dscp_forward_tag")

    @dscp_forward_tag.setter
    def dscp_forward_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_forward_tag", value)

    @property
    @pulumi.getter(name="dscpReverse")
    def dscp_reverse(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable reverse traffic DSCP tag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dscp_reverse")

    @dscp_reverse.setter
    def dscp_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_reverse", value)

    @property
    @pulumi.getter(name="dscpReverseTag")
    def dscp_reverse_tag(self) -> Optional[pulumi.Input[str]]:
        """
        Reverse traffic DSCP tag.
        """
        return pulumi.get(self, "dscp_reverse_tag")

    @dscp_reverse_tag.setter
    def dscp_reverse_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_reverse_tag", value)

    @property
    @pulumi.getter
    def dst6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceDst6Args']]]]:
        """
        Destination address6 name. The structure of `dst6` block is documented below.
        """
        return pulumi.get(self, "dst6s")

    @dst6s.setter
    def dst6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceDst6Args']]]]):
        pulumi.set(self, "dst6s", value)

    @property
    @pulumi.getter(name="dstNegate")
    def dst_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable negation of destination address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dst_negate")

    @dst_negate.setter
    def dst_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_negate", value)

    @property
    @pulumi.getter
    def dsts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceDstArgs']]]]:
        """
        Destination address name. The structure of `dst` block is documented below.
        """
        return pulumi.get(self, "dsts")

    @dsts.setter
    def dsts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceDstArgs']]]]):
        pulumi.set(self, "dsts", value)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        """
        End destination port number.
        """
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SD-WAN service gateway. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceGroupArgs']]]]:
        """
        User groups. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="hashMode")
    def hash_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Hash algorithm for selected priority members for load balance mode. Valid values: `round-robin`, `source-ip-based`, `source-dest-ip-based`, `inbandwidth`, `outbandwidth`, `bibandwidth`.
        """
        return pulumi.get(self, "hash_mode")

    @hash_mode.setter
    def hash_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hash_mode", value)

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceHealthCheckArgs']]]]:
        """
        SD-WAN health-check.
        """
        return pulumi.get(self, "health_checks")

    @health_checks.setter
    def health_checks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceHealthCheckArgs']]]]):
        pulumi.set(self, "health_checks", value)

    @property
    @pulumi.getter(name="holdDownTime")
    def hold_down_time(self) -> Optional[pulumi.Input[int]]:
        """
        Waiting period in seconds when switching from the back-up member to the primary member (0 - 10000000, default = 0).
        """
        return pulumi.get(self, "hold_down_time")

    @hold_down_time.setter
    def hold_down_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hold_down_time", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        SD-WAN service rule ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="inputDeviceNegate")
    def input_device_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable negation of input device match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "input_device_negate")

    @input_device_negate.setter
    def input_device_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_device_negate", value)

    @property
    @pulumi.getter(name="inputDevices")
    def input_devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInputDeviceArgs']]]]:
        """
        Source interface name. The structure of `input_device` block is documented below.
        """
        return pulumi.get(self, "input_devices")

    @input_devices.setter
    def input_devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInputDeviceArgs']]]]):
        pulumi.set(self, "input_devices", value)

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Internet service for application-based load balancing. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service")

    @internet_service.setter
    def internet_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service", value)

    @property
    @pulumi.getter(name="internetServiceAppCtrlGroups")
    def internet_service_app_ctrl_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceAppCtrlGroupArgs']]]]:
        """
        Application control based Internet Service group list. The structure of `internet_service_app_ctrl_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_app_ctrl_groups")

    @internet_service_app_ctrl_groups.setter
    def internet_service_app_ctrl_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceAppCtrlGroupArgs']]]]):
        pulumi.set(self, "internet_service_app_ctrl_groups", value)

    @property
    @pulumi.getter(name="internetServiceAppCtrls")
    def internet_service_app_ctrls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceAppCtrlArgs']]]]:
        """
        Application control based Internet Service ID list. The structure of `internet_service_app_ctrl` block is documented below.
        """
        return pulumi.get(self, "internet_service_app_ctrls")

    @internet_service_app_ctrls.setter
    def internet_service_app_ctrls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceAppCtrlArgs']]]]):
        pulumi.set(self, "internet_service_app_ctrls", value)

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceCustomGroupArgs']]]]:
        """
        Custom Internet Service group list. The structure of `internet_service_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_custom_groups")

    @internet_service_custom_groups.setter
    def internet_service_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service_custom_groups", value)

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceCustomArgs']]]]:
        """
        Custom Internet service name list. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @internet_service_customs.setter
    def internet_service_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceCustomArgs']]]]):
        pulumi.set(self, "internet_service_customs", value)

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceGroupArgs']]]]:
        """
        Internet Service group list. The structure of `internet_service_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_groups")

    @internet_service_groups.setter
    def internet_service_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceGroupArgs']]]]):
        pulumi.set(self, "internet_service_groups", value)

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceNameArgs']]]]:
        """
        Internet service name list. The structure of `internet_service_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_names")

    @internet_service_names.setter
    def internet_service_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceInternetServiceNameArgs']]]]):
        pulumi.set(self, "internet_service_names", value)

    @property
    @pulumi.getter(name="jitterWeight")
    def jitter_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Coefficient of jitter in the formula of custom-profile-1.
        """
        return pulumi.get(self, "jitter_weight")

    @jitter_weight.setter
    def jitter_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "jitter_weight", value)

    @property
    @pulumi.getter(name="latencyWeight")
    def latency_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Coefficient of latency in the formula of custom-profile-1.
        """
        return pulumi.get(self, "latency_weight")

    @latency_weight.setter
    def latency_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latency_weight", value)

    @property
    @pulumi.getter(name="linkCostFactor")
    def link_cost_factor(self) -> Optional[pulumi.Input[str]]:
        """
        Link cost factor. Valid values: `latency`, `jitter`, `packet-loss`, `inbandwidth`, `outbandwidth`, `bibandwidth`, `custom-profile-1`.
        """
        return pulumi.get(self, "link_cost_factor")

    @link_cost_factor.setter
    def link_cost_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_cost_factor", value)

    @property
    @pulumi.getter(name="linkCostThreshold")
    def link_cost_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Percentage threshold change of link cost values that will result in policy route regeneration (0 - 10000000, default = 10).
        """
        return pulumi.get(self, "link_cost_threshold")

    @link_cost_threshold.setter
    def link_cost_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "link_cost_threshold", value)

    @property
    @pulumi.getter(name="minimumSlaMeetMembers")
    def minimum_sla_meet_members(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of members which meet SLA.
        """
        return pulumi.get(self, "minimum_sla_meet_members")

    @minimum_sla_meet_members.setter
    def minimum_sla_meet_members(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_sla_meet_members", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Control how the SD-WAN rule sets the priority of interfaces in the SD-WAN. Valid values: `auto`, `manual`, `priority`, `sla`, `load-balance`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packetLossWeight")
    def packet_loss_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Coefficient of packet-loss in the formula of custom-profile-1.
        """
        return pulumi.get(self, "packet_loss_weight")

    @packet_loss_weight.setter
    def packet_loss_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_loss_weight", value)

    @property
    @pulumi.getter(name="passiveMeasurement")
    def passive_measurement(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable passive measurement based on the service criteria. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "passive_measurement")

    @passive_measurement.setter
    def passive_measurement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passive_measurement", value)

    @property
    @pulumi.getter(name="priorityMembers")
    def priority_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServicePriorityMemberArgs']]]]:
        """
        Member sequence number list. The structure of `priority_members` block is documented below.
        """
        return pulumi.get(self, "priority_members")

    @priority_members.setter
    def priority_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServicePriorityMemberArgs']]]]):
        pulumi.set(self, "priority_members", value)

    @property
    @pulumi.getter(name="priorityZones")
    def priority_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServicePriorityZoneArgs']]]]:
        """
        Priority zone name list. The structure of `priority_zone` block is documented below.
        """
        return pulumi.get(self, "priority_zones")

    @priority_zones.setter
    def priority_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServicePriorityZoneArgs']]]]):
        pulumi.set(self, "priority_zones", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Protocol number.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="qualityLink")
    def quality_link(self) -> Optional[pulumi.Input[int]]:
        """
        Quality grade.
        """
        return pulumi.get(self, "quality_link")

    @quality_link.setter
    def quality_link(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quality_link", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Service role to work with neighbor. Valid values: `standalone`, `primary`, `secondary`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="routeTag")
    def route_tag(self) -> Optional[pulumi.Input[int]]:
        """
        IPv4 route map route-tag.
        """
        return pulumi.get(self, "route_tag")

    @route_tag.setter
    def route_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "route_tag", value)

    @property
    @pulumi.getter(name="slaCompareMethod")
    def sla_compare_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method to compare SLA value for SLA mode. Valid values: `order`, `number`.
        """
        return pulumi.get(self, "sla_compare_method")

    @sla_compare_method.setter
    def sla_compare_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sla_compare_method", value)

    @property
    @pulumi.getter
    def slas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceSlaArgs']]]]:
        """
        Service level agreement (SLA). The structure of `sla` block is documented below.
        """
        return pulumi.get(self, "slas")

    @slas.setter
    def slas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceSlaArgs']]]]):
        pulumi.set(self, "slas", value)

    @property
    @pulumi.getter
    def src6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceSrc6Args']]]]:
        """
        Source address6 name. The structure of `src6` block is documented below.
        """
        return pulumi.get(self, "src6s")

    @src6s.setter
    def src6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceSrc6Args']]]]):
        pulumi.set(self, "src6s", value)

    @property
    @pulumi.getter(name="srcNegate")
    def src_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable negation of source address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "src_negate")

    @src_negate.setter
    def src_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_negate", value)

    @property
    @pulumi.getter
    def srcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceSrcArgs']]]]:
        """
        Source address name. The structure of `src` block is documented below.
        """
        return pulumi.get(self, "srcs")

    @srcs.setter
    def srcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceSrcArgs']]]]):
        pulumi.set(self, "srcs", value)

    @property
    @pulumi.getter(name="standaloneAction")
    def standalone_action(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable service when selected neighbor role is standalone while service role is not standalone. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "standalone_action")

    @standalone_action.setter
    def standalone_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "standalone_action", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        """
        Start destination port number.
        """
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SD-WAN service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tieBreak")
    def tie_break(self) -> Optional[pulumi.Input[str]]:
        """
        Method of selecting member if more than one meets the SLA. Valid values: `zone`, `cfg-order`, `fib-best-match`.
        """
        return pulumi.get(self, "tie_break")

    @tie_break.setter
    def tie_break(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tie_break", value)

    @property
    @pulumi.getter
    def tos(self) -> Optional[pulumi.Input[str]]:
        """
        Type of service bit pattern.
        """
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos", value)

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Type of service evaluated bits.
        """
        return pulumi.get(self, "tos_mask")

    @tos_mask.setter
    def tos_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_mask", value)

    @property
    @pulumi.getter(name="useShortcutSla")
    def use_shortcut_sla(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of ADVPN shortcut for quality comparison. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "use_shortcut_sla")

    @use_shortcut_sla.setter
    def use_shortcut_sla(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_shortcut_sla", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceUserArgs']]]]:
        """
        User name. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemSdwanServiceUserArgs']]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class SystemSdwanServiceDst6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service and service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServiceDstArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service and service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service and service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServiceHealthCheckArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service and service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServiceInputDeviceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service and service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServiceInternetServiceAppCtrlArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: SD-WAN service rule ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        SD-WAN service rule ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemSdwanServiceInternetServiceAppCtrlGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service and service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServiceInternetServiceCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service and service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServiceInternetServiceCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service and service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServiceInternetServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service and service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServiceInternetServiceNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service and service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServicePriorityMemberArgs:
    def __init__(__self__, *,
                 seq_num: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] seq_num: Member sequence number.
        """
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)


@pulumi.input_type
class SystemSdwanServicePriorityZoneArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service and service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServiceSlaArgs:
    def __init__(__self__, *,
                 health_check: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] health_check: SD-WAN health-check.
        :param pulumi.Input[int] id: SD-WAN service rule ID.
        """
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        """
        SD-WAN health-check.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        SD-WAN service rule ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemSdwanServiceSrc6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service and service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServiceSrcArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service and service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanServiceUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service and service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSdwanZoneArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 service_sla_tie_break: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service and service group name.
        :param pulumi.Input[str] service_sla_tie_break: Method of selecting member if more than one meets the SLA. Valid values: `cfg-order`, `fib-best-match`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_sla_tie_break is not None:
            pulumi.set(__self__, "service_sla_tie_break", service_sla_tie_break)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service and service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serviceSlaTieBreak")
    def service_sla_tie_break(self) -> Optional[pulumi.Input[str]]:
        """
        Method of selecting member if more than one meets the SLA. Valid values: `cfg-order`, `fib-best-match`.
        """
        return pulumi.get(self, "service_sla_tie_break")

    @service_sla_tie_break.setter
    def service_sla_tie_break(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_sla_tie_break", value)


@pulumi.input_type
class SystemSessionTtlPortArgs:
    def __init__(__self__, *,
                 end_port: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 start_port: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] end_port: End port number.
        :param pulumi.Input[int] id: Table entry ID.
        :param pulumi.Input[int] protocol: Protocol (0 - 255).
        :param pulumi.Input[int] start_port: Start port number.
        :param pulumi.Input[str] timeout: Session timeout (TTL).
        """
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        """
        End port number.
        """
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Table entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Protocol (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        """
        Start port number.
        """
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Session timeout (TTL).
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class SystemSettingsGuiDefaultPolicyColumnArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Select column name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Select column name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSnmpCommunityHostArgs:
    def __init__(__self__, *,
                 ha_direct: Optional[pulumi.Input[str]] = None,
                 host_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ha_direct: Enable/disable direct management of HA cluster members. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] host_type: Control whether the SNMP manager sends SNMP queries, receives SNMP traps, or both. Valid values: `any`, `query`, `trap`.
        :param pulumi.Input[int] id: Host6 entry ID.
        :param pulumi.Input[str] ip: IPv4 address of the SNMP manager (host).
        :param pulumi.Input[str] source_ip: Source IPv4 address for SNMP traps.
        """
        if ha_direct is not None:
            pulumi.set(__self__, "ha_direct", ha_direct)
        if host_type is not None:
            pulumi.set(__self__, "host_type", host_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="haDirect")
    def ha_direct(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable direct management of HA cluster members. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ha_direct")

    @ha_direct.setter
    def ha_direct(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_direct", value)

    @property
    @pulumi.getter(name="hostType")
    def host_type(self) -> Optional[pulumi.Input[str]]:
        """
        Control whether the SNMP manager sends SNMP queries, receives SNMP traps, or both. Valid values: `any`, `query`, `trap`.
        """
        return pulumi.get(self, "host_type")

    @host_type.setter
    def host_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Host6 entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of the SNMP manager (host).
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv4 address for SNMP traps.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)


@pulumi.input_type
class SystemSnmpCommunityHosts6Args:
    def __init__(__self__, *,
                 ha_direct: Optional[pulumi.Input[str]] = None,
                 host_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ipv6: Optional[pulumi.Input[str]] = None,
                 source_ipv6: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ha_direct: Enable/disable direct management of HA cluster members. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] host_type: Control whether the SNMP manager sends SNMP queries, receives SNMP traps, or both. Valid values: `any`, `query`, `trap`.
        :param pulumi.Input[int] id: Host6 entry ID.
        :param pulumi.Input[str] ipv6: SNMP manager IPv6 address prefix.
        :param pulumi.Input[str] source_ipv6: Source IPv6 address for SNMP traps.
        """
        if ha_direct is not None:
            pulumi.set(__self__, "ha_direct", ha_direct)
        if host_type is not None:
            pulumi.set(__self__, "host_type", host_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if source_ipv6 is not None:
            pulumi.set(__self__, "source_ipv6", source_ipv6)

    @property
    @pulumi.getter(name="haDirect")
    def ha_direct(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable direct management of HA cluster members. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ha_direct")

    @ha_direct.setter
    def ha_direct(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_direct", value)

    @property
    @pulumi.getter(name="hostType")
    def host_type(self) -> Optional[pulumi.Input[str]]:
        """
        Control whether the SNMP manager sends SNMP queries, receives SNMP traps, or both. Valid values: `any`, `query`, `trap`.
        """
        return pulumi.get(self, "host_type")

    @host_type.setter
    def host_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Host6 entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[pulumi.Input[str]]:
        """
        SNMP manager IPv6 address prefix.
        """
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6", value)

    @property
    @pulumi.getter(name="sourceIpv6")
    def source_ipv6(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv6 address for SNMP traps.
        """
        return pulumi.get(self, "source_ipv6")

    @source_ipv6.setter
    def source_ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ipv6", value)


@pulumi.input_type
class SystemSpeedTestScheduleScheduleArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of a firewall recurring schedule.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of a firewall recurring schedule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSpeedTestServerHostArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Server host ID.
        :param pulumi.Input[str] ip: Server host IPv4 address.
        :param pulumi.Input[str] password: Speed test host password.
        :param pulumi.Input[int] port: Server host port number to communicate with client.
        :param pulumi.Input[str] user: Speed test host user name.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Server host ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Server host IPv4 address.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Speed test host password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Server host port number to communicate with client.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        Speed test host user name.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class SystemSsoAdminVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual domain name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual domain name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSsoForticloudAdminVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual domain name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual domain name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemSwitchInterfaceMemberArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface_name: Physical interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Physical interface name.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class SystemSwitchInterfaceSpanSourcePortArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface_name: Physical interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Physical interface name.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class SystemVdomDnsServerHostnameArgs:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] hostname: DNS server host name list separated by space (maximum 4 domains).
        """
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        DNS server host name list separated by space (maximum 4 domains).
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)


@pulumi.input_type
class SystemVdomExceptionVdomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: VDOM name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VDOM name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualSwitchPortArgs:
    def __init__(__self__, *,
                 alias: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] alias: Alias.
        :param pulumi.Input[str] name: Physical interface name.
        """
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        Alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Physical interface name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkFailAlertInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Control-based Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkHealthCheckArgs:
    def __init__(__self__, *,
                 addr_mode: Optional[pulumi.Input[str]] = None,
                 diffservcode: Optional[pulumi.Input[str]] = None,
                 dns_request_domain: Optional[pulumi.Input[str]] = None,
                 failtime: Optional[pulumi.Input[int]] = None,
                 ha_priority: Optional[pulumi.Input[int]] = None,
                 http_agent: Optional[pulumi.Input[str]] = None,
                 http_get: Optional[pulumi.Input[str]] = None,
                 http_match: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkHealthCheckMemberArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packet_size: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 probe_count: Optional[pulumi.Input[int]] = None,
                 probe_packets: Optional[pulumi.Input[str]] = None,
                 probe_timeout: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 recoverytime: Optional[pulumi.Input[int]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 sla_fail_log_period: Optional[pulumi.Input[int]] = None,
                 sla_pass_log_period: Optional[pulumi.Input[int]] = None,
                 slas: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkHealthCheckSlaArgs']]]] = None,
                 system_dns: Optional[pulumi.Input[str]] = None,
                 threshold_alert_jitter: Optional[pulumi.Input[int]] = None,
                 threshold_alert_latency: Optional[pulumi.Input[int]] = None,
                 threshold_alert_packetloss: Optional[pulumi.Input[int]] = None,
                 threshold_warning_jitter: Optional[pulumi.Input[int]] = None,
                 threshold_warning_latency: Optional[pulumi.Input[int]] = None,
                 threshold_warning_packetloss: Optional[pulumi.Input[int]] = None,
                 update_cascade_interface: Optional[pulumi.Input[str]] = None,
                 update_static_route: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] addr_mode: Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[str] diffservcode: Differentiated services code point (DSCP) in the IP header of the probe packet.
        :param pulumi.Input[str] dns_request_domain: Fully qualified domain name to resolve for the DNS probe.
        :param pulumi.Input[int] failtime: Number of failures before server is considered lost (1 - 3600, default = 5).
        :param pulumi.Input[int] ha_priority: HA election priority (1 - 50).
        :param pulumi.Input[str] http_agent: String in the http-agent field in the HTTP header.
        :param pulumi.Input[str] http_get: URL used to communicate with the server if the protocol if the protocol is HTTP.
        :param pulumi.Input[str] http_match: Response string expected from the server if the protocol is HTTP.
        :param pulumi.Input[int] interval: Status check interval, or the time between attempting to connect to the server (1 - 3600 sec, default = 5).
        :param pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkHealthCheckMemberArgs']]] members: Member sequence number list. The structure of `members` block is documented below.
        :param pulumi.Input[str] name: Control-based Internet Service group name.
        :param pulumi.Input[int] packet_size: Packet size of a twamp test session,
        :param pulumi.Input[str] password: Twamp controller password in authentication mode
        :param pulumi.Input[int] port: Port number used to communicate with the server over the selected protocol.
        :param pulumi.Input[int] probe_count: Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
        :param pulumi.Input[str] probe_packets: Enable/disable transmission of probe packets. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] probe_timeout: Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
        :param pulumi.Input[str] protocol: Protocol number.
        :param pulumi.Input[int] recoverytime: Number of successful responses received before server is considered recovered (1 - 3600, default = 5).
        :param pulumi.Input[str] security_mode: Twamp controller security mode. Valid values: `none`, `authentication`.
        :param pulumi.Input[str] server: IP address or FQDN name of the server.
        :param pulumi.Input[int] sla_fail_log_period: Time interval in seconds that SLA fail log messages will be generated (0 - 3600, default = 0).
        :param pulumi.Input[int] sla_pass_log_period: Time interval in seconds that SLA pass log messages will be generated (0 - 3600, default = 0).
        :param pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkHealthCheckSlaArgs']]] slas: Service level agreement (SLA). The structure of `sla` block is documented below.
        :param pulumi.Input[str] system_dns: Enable/disable system DNS as the probe server. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] threshold_alert_jitter: Alert threshold for jitter (ms, default = 0).
        :param pulumi.Input[int] threshold_alert_latency: Alert threshold for latency (ms, default = 0).
        :param pulumi.Input[int] threshold_alert_packetloss: Alert threshold for packet loss (percentage, default = 0).
        :param pulumi.Input[int] threshold_warning_jitter: Warning threshold for jitter (ms, default = 0).
        :param pulumi.Input[int] threshold_warning_latency: Warning threshold for latency (ms, default = 0).
        :param pulumi.Input[int] threshold_warning_packetloss: Warning threshold for packet loss (percentage, default = 0).
        :param pulumi.Input[str] update_cascade_interface: Enable/disable update cascade interface. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] update_static_route: Enable/disable updating the static route. Valid values: `enable`, `disable`.
        """
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if diffservcode is not None:
            pulumi.set(__self__, "diffservcode", diffservcode)
        if dns_request_domain is not None:
            pulumi.set(__self__, "dns_request_domain", dns_request_domain)
        if failtime is not None:
            pulumi.set(__self__, "failtime", failtime)
        if ha_priority is not None:
            pulumi.set(__self__, "ha_priority", ha_priority)
        if http_agent is not None:
            pulumi.set(__self__, "http_agent", http_agent)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if http_match is not None:
            pulumi.set(__self__, "http_match", http_match)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_size is not None:
            pulumi.set(__self__, "packet_size", packet_size)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if probe_count is not None:
            pulumi.set(__self__, "probe_count", probe_count)
        if probe_packets is not None:
            pulumi.set(__self__, "probe_packets", probe_packets)
        if probe_timeout is not None:
            pulumi.set(__self__, "probe_timeout", probe_timeout)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if recoverytime is not None:
            pulumi.set(__self__, "recoverytime", recoverytime)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if sla_fail_log_period is not None:
            pulumi.set(__self__, "sla_fail_log_period", sla_fail_log_period)
        if sla_pass_log_period is not None:
            pulumi.set(__self__, "sla_pass_log_period", sla_pass_log_period)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if system_dns is not None:
            pulumi.set(__self__, "system_dns", system_dns)
        if threshold_alert_jitter is not None:
            pulumi.set(__self__, "threshold_alert_jitter", threshold_alert_jitter)
        if threshold_alert_latency is not None:
            pulumi.set(__self__, "threshold_alert_latency", threshold_alert_latency)
        if threshold_alert_packetloss is not None:
            pulumi.set(__self__, "threshold_alert_packetloss", threshold_alert_packetloss)
        if threshold_warning_jitter is not None:
            pulumi.set(__self__, "threshold_warning_jitter", threshold_warning_jitter)
        if threshold_warning_latency is not None:
            pulumi.set(__self__, "threshold_warning_latency", threshold_warning_latency)
        if threshold_warning_packetloss is not None:
            pulumi.set(__self__, "threshold_warning_packetloss", threshold_warning_packetloss)
        if update_cascade_interface is not None:
            pulumi.set(__self__, "update_cascade_interface", update_cascade_interface)
        if update_static_route is not None:
            pulumi.set(__self__, "update_static_route", update_static_route)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_mode")

    @addr_mode.setter
    def addr_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_mode", value)

    @property
    @pulumi.getter
    def diffservcode(self) -> Optional[pulumi.Input[str]]:
        """
        Differentiated services code point (DSCP) in the IP header of the probe packet.
        """
        return pulumi.get(self, "diffservcode")

    @diffservcode.setter
    def diffservcode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "diffservcode", value)

    @property
    @pulumi.getter(name="dnsRequestDomain")
    def dns_request_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Fully qualified domain name to resolve for the DNS probe.
        """
        return pulumi.get(self, "dns_request_domain")

    @dns_request_domain.setter
    def dns_request_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_request_domain", value)

    @property
    @pulumi.getter
    def failtime(self) -> Optional[pulumi.Input[int]]:
        """
        Number of failures before server is considered lost (1 - 3600, default = 5).
        """
        return pulumi.get(self, "failtime")

    @failtime.setter
    def failtime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failtime", value)

    @property
    @pulumi.getter(name="haPriority")
    def ha_priority(self) -> Optional[pulumi.Input[int]]:
        """
        HA election priority (1 - 50).
        """
        return pulumi.get(self, "ha_priority")

    @ha_priority.setter
    def ha_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ha_priority", value)

    @property
    @pulumi.getter(name="httpAgent")
    def http_agent(self) -> Optional[pulumi.Input[str]]:
        """
        String in the http-agent field in the HTTP header.
        """
        return pulumi.get(self, "http_agent")

    @http_agent.setter
    def http_agent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_agent", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input[str]]:
        """
        URL used to communicate with the server if the protocol if the protocol is HTTP.
        """
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="httpMatch")
    def http_match(self) -> Optional[pulumi.Input[str]]:
        """
        Response string expected from the server if the protocol is HTTP.
        """
        return pulumi.get(self, "http_match")

    @http_match.setter
    def http_match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_match", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Status check interval, or the time between attempting to connect to the server (1 - 3600 sec, default = 5).
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkHealthCheckMemberArgs']]]]:
        """
        Member sequence number list. The structure of `members` block is documented below.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkHealthCheckMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packetSize")
    def packet_size(self) -> Optional[pulumi.Input[int]]:
        """
        Packet size of a twamp test session,
        """
        return pulumi.get(self, "packet_size")

    @packet_size.setter
    def packet_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_size", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Twamp controller password in authentication mode
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port number used to communicate with the server over the selected protocol.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="probeCount")
    def probe_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of most recent probes that should be used to calculate latency and jitter (5 - 30, default = 30).
        """
        return pulumi.get(self, "probe_count")

    @probe_count.setter
    def probe_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "probe_count", value)

    @property
    @pulumi.getter(name="probePackets")
    def probe_packets(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable transmission of probe packets. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "probe_packets")

    @probe_packets.setter
    def probe_packets(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "probe_packets", value)

    @property
    @pulumi.getter(name="probeTimeout")
    def probe_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time to wait before a probe packet is considered lost (500 - 5000 msec, default = 500).
        """
        return pulumi.get(self, "probe_timeout")

    @probe_timeout.setter
    def probe_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "probe_timeout", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol number.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def recoverytime(self) -> Optional[pulumi.Input[int]]:
        """
        Number of successful responses received before server is considered recovered (1 - 3600, default = 5).
        """
        return pulumi.get(self, "recoverytime")

    @recoverytime.setter
    def recoverytime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recoverytime", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Twamp controller security mode. Valid values: `none`, `authentication`.
        """
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        IP address or FQDN name of the server.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="slaFailLogPeriod")
    def sla_fail_log_period(self) -> Optional[pulumi.Input[int]]:
        """
        Time interval in seconds that SLA fail log messages will be generated (0 - 3600, default = 0).
        """
        return pulumi.get(self, "sla_fail_log_period")

    @sla_fail_log_period.setter
    def sla_fail_log_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sla_fail_log_period", value)

    @property
    @pulumi.getter(name="slaPassLogPeriod")
    def sla_pass_log_period(self) -> Optional[pulumi.Input[int]]:
        """
        Time interval in seconds that SLA pass log messages will be generated (0 - 3600, default = 0).
        """
        return pulumi.get(self, "sla_pass_log_period")

    @sla_pass_log_period.setter
    def sla_pass_log_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sla_pass_log_period", value)

    @property
    @pulumi.getter
    def slas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkHealthCheckSlaArgs']]]]:
        """
        Service level agreement (SLA). The structure of `sla` block is documented below.
        """
        return pulumi.get(self, "slas")

    @slas.setter
    def slas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkHealthCheckSlaArgs']]]]):
        pulumi.set(self, "slas", value)

    @property
    @pulumi.getter(name="systemDns")
    def system_dns(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable system DNS as the probe server. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "system_dns")

    @system_dns.setter
    def system_dns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_dns", value)

    @property
    @pulumi.getter(name="thresholdAlertJitter")
    def threshold_alert_jitter(self) -> Optional[pulumi.Input[int]]:
        """
        Alert threshold for jitter (ms, default = 0).
        """
        return pulumi.get(self, "threshold_alert_jitter")

    @threshold_alert_jitter.setter
    def threshold_alert_jitter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_alert_jitter", value)

    @property
    @pulumi.getter(name="thresholdAlertLatency")
    def threshold_alert_latency(self) -> Optional[pulumi.Input[int]]:
        """
        Alert threshold for latency (ms, default = 0).
        """
        return pulumi.get(self, "threshold_alert_latency")

    @threshold_alert_latency.setter
    def threshold_alert_latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_alert_latency", value)

    @property
    @pulumi.getter(name="thresholdAlertPacketloss")
    def threshold_alert_packetloss(self) -> Optional[pulumi.Input[int]]:
        """
        Alert threshold for packet loss (percentage, default = 0).
        """
        return pulumi.get(self, "threshold_alert_packetloss")

    @threshold_alert_packetloss.setter
    def threshold_alert_packetloss(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_alert_packetloss", value)

    @property
    @pulumi.getter(name="thresholdWarningJitter")
    def threshold_warning_jitter(self) -> Optional[pulumi.Input[int]]:
        """
        Warning threshold for jitter (ms, default = 0).
        """
        return pulumi.get(self, "threshold_warning_jitter")

    @threshold_warning_jitter.setter
    def threshold_warning_jitter(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_warning_jitter", value)

    @property
    @pulumi.getter(name="thresholdWarningLatency")
    def threshold_warning_latency(self) -> Optional[pulumi.Input[int]]:
        """
        Warning threshold for latency (ms, default = 0).
        """
        return pulumi.get(self, "threshold_warning_latency")

    @threshold_warning_latency.setter
    def threshold_warning_latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_warning_latency", value)

    @property
    @pulumi.getter(name="thresholdWarningPacketloss")
    def threshold_warning_packetloss(self) -> Optional[pulumi.Input[int]]:
        """
        Warning threshold for packet loss (percentage, default = 0).
        """
        return pulumi.get(self, "threshold_warning_packetloss")

    @threshold_warning_packetloss.setter
    def threshold_warning_packetloss(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold_warning_packetloss", value)

    @property
    @pulumi.getter(name="updateCascadeInterface")
    def update_cascade_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable update cascade interface. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_cascade_interface")

    @update_cascade_interface.setter
    def update_cascade_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_cascade_interface", value)

    @property
    @pulumi.getter(name="updateStaticRoute")
    def update_static_route(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable updating the static route. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "update_static_route")

    @update_static_route.setter
    def update_static_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_static_route", value)


@pulumi.input_type
class SystemVirtualWanLinkHealthCheckMemberArgs:
    def __init__(__self__, *,
                 seq_num: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] seq_num: Member sequence number.
        """
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)


@pulumi.input_type
class SystemVirtualWanLinkHealthCheckSlaArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 jitter_threshold: Optional[pulumi.Input[int]] = None,
                 latency_threshold: Optional[pulumi.Input[int]] = None,
                 link_cost_factor: Optional[pulumi.Input[str]] = None,
                 packetloss_threshold: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: SLA ID.
        :param pulumi.Input[int] jitter_threshold: Jitter for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        :param pulumi.Input[int] latency_threshold: Latency for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        :param pulumi.Input[str] link_cost_factor: Link cost factor. Valid values: `latency`, `jitter`, `packet-loss`, `inbandwidth`, `outbandwidth`, `bibandwidth`, `custom-profile-1`.
        :param pulumi.Input[int] packetloss_threshold: Packet loss for SLA to make decision in percentage. (0 - 100, default = 0).
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if jitter_threshold is not None:
            pulumi.set(__self__, "jitter_threshold", jitter_threshold)
        if latency_threshold is not None:
            pulumi.set(__self__, "latency_threshold", latency_threshold)
        if link_cost_factor is not None:
            pulumi.set(__self__, "link_cost_factor", link_cost_factor)
        if packetloss_threshold is not None:
            pulumi.set(__self__, "packetloss_threshold", packetloss_threshold)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        SLA ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="jitterThreshold")
    def jitter_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Jitter for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        """
        return pulumi.get(self, "jitter_threshold")

    @jitter_threshold.setter
    def jitter_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "jitter_threshold", value)

    @property
    @pulumi.getter(name="latencyThreshold")
    def latency_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Latency for SLA to make decision in milliseconds. (0 - 10000000, default = 5).
        """
        return pulumi.get(self, "latency_threshold")

    @latency_threshold.setter
    def latency_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latency_threshold", value)

    @property
    @pulumi.getter(name="linkCostFactor")
    def link_cost_factor(self) -> Optional[pulumi.Input[str]]:
        """
        Link cost factor. Valid values: `latency`, `jitter`, `packet-loss`, `inbandwidth`, `outbandwidth`, `bibandwidth`, `custom-profile-1`.
        """
        return pulumi.get(self, "link_cost_factor")

    @link_cost_factor.setter
    def link_cost_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_cost_factor", value)

    @property
    @pulumi.getter(name="packetlossThreshold")
    def packetloss_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Packet loss for SLA to make decision in percentage. (0 - 100, default = 0).
        """
        return pulumi.get(self, "packetloss_threshold")

    @packetloss_threshold.setter
    def packetloss_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packetloss_threshold", value)


@pulumi.input_type
class SystemVirtualWanLinkMemberArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 cost: Optional[pulumi.Input[int]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 gateway6: Optional[pulumi.Input[str]] = None,
                 ingress_spillover_threshold: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 seq_num: Optional[pulumi.Input[int]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source6: Optional[pulumi.Input[str]] = None,
                 spillover_threshold: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 volume_ratio: Optional[pulumi.Input[int]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] comment: Comments.
        :param pulumi.Input[int] cost: Cost of this interface for services in SLA mode (0 - 4294967295, default = 0).
        :param pulumi.Input[str] gateway: Enable/disable SD-WAN service gateway. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] gateway6: IPv6 gateway.
        :param pulumi.Input[int] ingress_spillover_threshold: Ingress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        :param pulumi.Input[str] interface: Interface name.
        :param pulumi.Input[int] priority: Priority of the interface (0 - 4294967295). Used for SD-WAN rules or priority rules.
        :param pulumi.Input[int] seq_num: Member sequence number.
        :param pulumi.Input[str] source: Source IP address used in the health-check packet to the server.
        :param pulumi.Input[str] source6: Source IPv6 address used in the health-check packet to the server.
        :param pulumi.Input[int] spillover_threshold: Egress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        :param pulumi.Input[str] status: Enable/disable SD-WAN service. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] volume_ratio: Measured volume ratio (this value / sum of all values = percentage of link volume, 0 - 255).
        :param pulumi.Input[int] weight: Weight of this interface for weighted load balancing. (0 - 255) More traffic is directed to interfaces with higher weights.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway6 is not None:
            pulumi.set(__self__, "gateway6", gateway6)
        if ingress_spillover_threshold is not None:
            pulumi.set(__self__, "ingress_spillover_threshold", ingress_spillover_threshold)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source6 is not None:
            pulumi.set(__self__, "source6", source6)
        if spillover_threshold is not None:
            pulumi.set(__self__, "spillover_threshold", spillover_threshold)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if volume_ratio is not None:
            pulumi.set(__self__, "volume_ratio", volume_ratio)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comments.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        """
        Cost of this interface for services in SLA mode (0 - 4294967295, default = 0).
        """
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SD-WAN service gateway. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def gateway6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 gateway.
        """
        return pulumi.get(self, "gateway6")

    @gateway6.setter
    def gateway6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway6", value)

    @property
    @pulumi.getter(name="ingressSpilloverThreshold")
    def ingress_spillover_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Ingress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        """
        return pulumi.get(self, "ingress_spillover_threshold")

    @ingress_spillover_threshold.setter
    def ingress_spillover_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ingress_spillover_threshold", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority of the interface (0 - 4294967295). Used for SD-WAN rules or priority rules.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address used in the health-check packet to the server.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def source6(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv6 address used in the health-check packet to the server.
        """
        return pulumi.get(self, "source6")

    @source6.setter
    def source6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source6", value)

    @property
    @pulumi.getter(name="spilloverThreshold")
    def spillover_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Egress spillover threshold for this interface (0 - 16776000 kbit/s). When this traffic volume threshold is reached, new sessions spill over to other interfaces in the SD-WAN.
        """
        return pulumi.get(self, "spillover_threshold")

    @spillover_threshold.setter
    def spillover_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "spillover_threshold", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SD-WAN service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="volumeRatio")
    def volume_ratio(self) -> Optional[pulumi.Input[int]]:
        """
        Measured volume ratio (this value / sum of all values = percentage of link volume, 0 - 255).
        """
        return pulumi.get(self, "volume_ratio")

    @volume_ratio.setter
    def volume_ratio(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume_ratio", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight of this interface for weighted load balancing. (0 - 255) More traffic is directed to interfaces with higher weights.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class SystemVirtualWanLinkNeighborArgs:
    def __init__(__self__, *,
                 health_check: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 member: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 sla_id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] health_check: Virtual WAN Link health-check.
        :param pulumi.Input[str] ip: IP address of neighbor.
        :param pulumi.Input[int] member: Member sequence number.
        :param pulumi.Input[str] role: Service role to work with neighbor. Valid values: `standalone`, `primary`, `secondary`.
        :param pulumi.Input[int] sla_id: SLA ID.
        """
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if member is not None:
            pulumi.set(__self__, "member", member)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if sla_id is not None:
            pulumi.set(__self__, "sla_id", sla_id)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual WAN Link health-check.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of neighbor.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def member(self) -> Optional[pulumi.Input[int]]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "member")

    @member.setter
    def member(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "member", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Service role to work with neighbor. Valid values: `standalone`, `primary`, `secondary`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="slaId")
    def sla_id(self) -> Optional[pulumi.Input[int]]:
        """
        SLA ID.
        """
        return pulumi.get(self, "sla_id")

    @sla_id.setter
    def sla_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sla_id", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceArgs:
    def __init__(__self__, *,
                 addr_mode: Optional[pulumi.Input[str]] = None,
                 bandwidth_weight: Optional[pulumi.Input[int]] = None,
                 default: Optional[pulumi.Input[str]] = None,
                 dscp_forward: Optional[pulumi.Input[str]] = None,
                 dscp_forward_tag: Optional[pulumi.Input[str]] = None,
                 dscp_reverse: Optional[pulumi.Input[str]] = None,
                 dscp_reverse_tag: Optional[pulumi.Input[str]] = None,
                 dst6s: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceDst6Args']]]] = None,
                 dst_negate: Optional[pulumi.Input[str]] = None,
                 dsts: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceDstArgs']]]] = None,
                 end_port: Optional[pulumi.Input[int]] = None,
                 gateway: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceGroupArgs']]]] = None,
                 health_check: Optional[pulumi.Input[str]] = None,
                 hold_down_time: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 input_device_negate: Optional[pulumi.Input[str]] = None,
                 input_devices: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInputDeviceArgs']]]] = None,
                 internet_service: Optional[pulumi.Input[str]] = None,
                 internet_service_app_ctrl_groups: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceAppCtrlGroupArgs']]]] = None,
                 internet_service_app_ctrls: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceAppCtrlArgs']]]] = None,
                 internet_service_ctrl_groups: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCtrlGroupArgs']]]] = None,
                 internet_service_ctrls: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCtrlArgs']]]] = None,
                 internet_service_custom_groups: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCustomGroupArgs']]]] = None,
                 internet_service_customs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCustomArgs']]]] = None,
                 internet_service_groups: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceGroupArgs']]]] = None,
                 internet_service_ids: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceIdArgs']]]] = None,
                 internet_service_names: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceNameArgs']]]] = None,
                 jitter_weight: Optional[pulumi.Input[int]] = None,
                 latency_weight: Optional[pulumi.Input[int]] = None,
                 link_cost_factor: Optional[pulumi.Input[str]] = None,
                 link_cost_threshold: Optional[pulumi.Input[int]] = None,
                 member: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 packet_loss_weight: Optional[pulumi.Input[int]] = None,
                 priority_members: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServicePriorityMemberArgs']]]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 quality_link: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 route_tag: Optional[pulumi.Input[int]] = None,
                 sla_compare_method: Optional[pulumi.Input[str]] = None,
                 slas: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceSlaArgs']]]] = None,
                 src6s: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceSrc6Args']]]] = None,
                 src_negate: Optional[pulumi.Input[str]] = None,
                 srcs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceSrcArgs']]]] = None,
                 standalone_action: Optional[pulumi.Input[str]] = None,
                 start_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 tos_mask: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceUserArgs']]]] = None):
        """
        :param pulumi.Input[str] addr_mode: Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        :param pulumi.Input[int] bandwidth_weight: Coefficient of reciprocal of available bidirectional bandwidth in the formula of custom-profile-1.
        :param pulumi.Input[str] default: Enable/disable use of SD-WAN as default service. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dscp_forward: Enable/disable forward traffic DSCP tag. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dscp_forward_tag: Forward traffic DSCP tag.
        :param pulumi.Input[str] dscp_reverse: Enable/disable reverse traffic DSCP tag. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] dscp_reverse_tag: Reverse traffic DSCP tag.
        :param pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceDst6Args']]] dst6s: Destination address6 name. The structure of `dst6` block is documented below.
        :param pulumi.Input[str] dst_negate: Enable/disable negation of destination address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceDstArgs']]] dsts: Destination address name. The structure of `dst` block is documented below.
        :param pulumi.Input[int] end_port: End destination port number.
        :param pulumi.Input[str] gateway: Enable/disable SD-WAN service gateway. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceGroupArgs']]] groups: User groups. The structure of `groups` block is documented below.
        :param pulumi.Input[str] health_check: Virtual WAN Link health-check.
        :param pulumi.Input[int] hold_down_time: Waiting period in seconds when switching from the back-up member to the primary member (0 - 10000000, default = 0).
        :param pulumi.Input[int] id: SLA ID.
        :param pulumi.Input[str] input_device_negate: Enable/disable negation of input device match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInputDeviceArgs']]] input_devices: Source interface name. The structure of `input_device` block is documented below.
        :param pulumi.Input[str] internet_service: Enable/disable use of Internet service for application-based load balancing. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceAppCtrlGroupArgs']]] internet_service_app_ctrl_groups: Application control based Internet Service group list. The structure of `internet_service_app_ctrl_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceAppCtrlArgs']]] internet_service_app_ctrls: Application control based Internet Service ID list. The structure of `internet_service_app_ctrl` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCtrlGroupArgs']]] internet_service_ctrl_groups: Control-based Internet Service group list. The structure of `internet_service_ctrl_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCtrlArgs']]] internet_service_ctrls: Control-based Internet Service ID list. The structure of `internet_service_ctrl` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCustomGroupArgs']]] internet_service_custom_groups: Custom Internet Service group list. The structure of `internet_service_custom_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCustomArgs']]] internet_service_customs: Custom Internet service name list. The structure of `internet_service_custom` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceGroupArgs']]] internet_service_groups: Internet Service group list. The structure of `internet_service_group` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceIdArgs']]] internet_service_ids: Internet service ID list. The structure of `internet_service_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceNameArgs']]] internet_service_names: Internet service name list. The structure of `internet_service_name` block is documented below.
        :param pulumi.Input[int] jitter_weight: Coefficient of jitter in the formula of custom-profile-1.
        :param pulumi.Input[int] latency_weight: Coefficient of latency in the formula of custom-profile-1.
        :param pulumi.Input[str] link_cost_factor: Link cost factor. Valid values: `latency`, `jitter`, `packet-loss`, `inbandwidth`, `outbandwidth`, `bibandwidth`, `custom-profile-1`.
        :param pulumi.Input[int] link_cost_threshold: Percentage threshold change of link cost values that will result in policy route regeneration (0 - 10000000, default = 10).
        :param pulumi.Input[int] member: Member sequence number.
        :param pulumi.Input[str] mode: Control how the priority rule sets the priority of interfaces in the SD-WAN. Valid values: `auto`, `manual`, `priority`, `sla`, `load-balance`.
        :param pulumi.Input[str] name: Control-based Internet Service group name.
        :param pulumi.Input[int] packet_loss_weight: Coefficient of packet-loss in the formula of custom-profile-1.
        :param pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServicePriorityMemberArgs']]] priority_members: Member sequence number list. The structure of `priority_members` block is documented below.
        :param pulumi.Input[int] protocol: Protocol number.
        :param pulumi.Input[int] quality_link: Quality grade.
        :param pulumi.Input[str] role: Service role to work with neighbor. Valid values: `standalone`, `primary`, `secondary`.
        :param pulumi.Input[int] route_tag: IPv4 route map route-tag.
        :param pulumi.Input[str] sla_compare_method: Method to compare SLA value for sla and load balance mode.  Valid values: `order`, `number`.
        :param pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceSlaArgs']]] slas: Service level agreement (SLA). The structure of `sla` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceSrc6Args']]] src6s: Source address6 name. The structure of `src6` block is documented below.
        :param pulumi.Input[str] src_negate: Enable/disable negation of source address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceSrcArgs']]] srcs: Source address name. The structure of `src` block is documented below.
        :param pulumi.Input[str] standalone_action: Enable/disable service when selected neighbor role is standalone while service role is not standalone. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] start_port: Start destination port number.
        :param pulumi.Input[str] status: Enable/disable SD-WAN service. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tos: Type of service bit pattern.
        :param pulumi.Input[str] tos_mask: Type of service evaluated bits.
        :param pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceUserArgs']]] users: User name. The structure of `users` block is documented below.
        """
        if addr_mode is not None:
            pulumi.set(__self__, "addr_mode", addr_mode)
        if bandwidth_weight is not None:
            pulumi.set(__self__, "bandwidth_weight", bandwidth_weight)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if dscp_forward is not None:
            pulumi.set(__self__, "dscp_forward", dscp_forward)
        if dscp_forward_tag is not None:
            pulumi.set(__self__, "dscp_forward_tag", dscp_forward_tag)
        if dscp_reverse is not None:
            pulumi.set(__self__, "dscp_reverse", dscp_reverse)
        if dscp_reverse_tag is not None:
            pulumi.set(__self__, "dscp_reverse_tag", dscp_reverse_tag)
        if dst6s is not None:
            pulumi.set(__self__, "dst6s", dst6s)
        if dst_negate is not None:
            pulumi.set(__self__, "dst_negate", dst_negate)
        if dsts is not None:
            pulumi.set(__self__, "dsts", dsts)
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if hold_down_time is not None:
            pulumi.set(__self__, "hold_down_time", hold_down_time)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if input_device_negate is not None:
            pulumi.set(__self__, "input_device_negate", input_device_negate)
        if input_devices is not None:
            pulumi.set(__self__, "input_devices", input_devices)
        if internet_service is not None:
            pulumi.set(__self__, "internet_service", internet_service)
        if internet_service_app_ctrl_groups is not None:
            pulumi.set(__self__, "internet_service_app_ctrl_groups", internet_service_app_ctrl_groups)
        if internet_service_app_ctrls is not None:
            pulumi.set(__self__, "internet_service_app_ctrls", internet_service_app_ctrls)
        if internet_service_ctrl_groups is not None:
            pulumi.set(__self__, "internet_service_ctrl_groups", internet_service_ctrl_groups)
        if internet_service_ctrls is not None:
            pulumi.set(__self__, "internet_service_ctrls", internet_service_ctrls)
        if internet_service_custom_groups is not None:
            pulumi.set(__self__, "internet_service_custom_groups", internet_service_custom_groups)
        if internet_service_customs is not None:
            pulumi.set(__self__, "internet_service_customs", internet_service_customs)
        if internet_service_groups is not None:
            pulumi.set(__self__, "internet_service_groups", internet_service_groups)
        if internet_service_ids is not None:
            pulumi.set(__self__, "internet_service_ids", internet_service_ids)
        if internet_service_names is not None:
            pulumi.set(__self__, "internet_service_names", internet_service_names)
        if jitter_weight is not None:
            pulumi.set(__self__, "jitter_weight", jitter_weight)
        if latency_weight is not None:
            pulumi.set(__self__, "latency_weight", latency_weight)
        if link_cost_factor is not None:
            pulumi.set(__self__, "link_cost_factor", link_cost_factor)
        if link_cost_threshold is not None:
            pulumi.set(__self__, "link_cost_threshold", link_cost_threshold)
        if member is not None:
            pulumi.set(__self__, "member", member)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if packet_loss_weight is not None:
            pulumi.set(__self__, "packet_loss_weight", packet_loss_weight)
        if priority_members is not None:
            pulumi.set(__self__, "priority_members", priority_members)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if quality_link is not None:
            pulumi.set(__self__, "quality_link", quality_link)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if route_tag is not None:
            pulumi.set(__self__, "route_tag", route_tag)
        if sla_compare_method is not None:
            pulumi.set(__self__, "sla_compare_method", sla_compare_method)
        if slas is not None:
            pulumi.set(__self__, "slas", slas)
        if src6s is not None:
            pulumi.set(__self__, "src6s", src6s)
        if src_negate is not None:
            pulumi.set(__self__, "src_negate", src_negate)
        if srcs is not None:
            pulumi.set(__self__, "srcs", srcs)
        if standalone_action is not None:
            pulumi.set(__self__, "standalone_action", standalone_action)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if tos_mask is not None:
            pulumi.set(__self__, "tos_mask", tos_mask)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="addrMode")
    def addr_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Address mode (IPv4 or IPv6). Valid values: `ipv4`, `ipv6`.
        """
        return pulumi.get(self, "addr_mode")

    @addr_mode.setter
    def addr_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr_mode", value)

    @property
    @pulumi.getter(name="bandwidthWeight")
    def bandwidth_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Coefficient of reciprocal of available bidirectional bandwidth in the formula of custom-profile-1.
        """
        return pulumi.get(self, "bandwidth_weight")

    @bandwidth_weight.setter
    def bandwidth_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_weight", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of SD-WAN as default service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter(name="dscpForward")
    def dscp_forward(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable forward traffic DSCP tag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dscp_forward")

    @dscp_forward.setter
    def dscp_forward(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_forward", value)

    @property
    @pulumi.getter(name="dscpForwardTag")
    def dscp_forward_tag(self) -> Optional[pulumi.Input[str]]:
        """
        Forward traffic DSCP tag.
        """
        return pulumi.get(self, "dscp_forward_tag")

    @dscp_forward_tag.setter
    def dscp_forward_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_forward_tag", value)

    @property
    @pulumi.getter(name="dscpReverse")
    def dscp_reverse(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable reverse traffic DSCP tag. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dscp_reverse")

    @dscp_reverse.setter
    def dscp_reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_reverse", value)

    @property
    @pulumi.getter(name="dscpReverseTag")
    def dscp_reverse_tag(self) -> Optional[pulumi.Input[str]]:
        """
        Reverse traffic DSCP tag.
        """
        return pulumi.get(self, "dscp_reverse_tag")

    @dscp_reverse_tag.setter
    def dscp_reverse_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp_reverse_tag", value)

    @property
    @pulumi.getter
    def dst6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceDst6Args']]]]:
        """
        Destination address6 name. The structure of `dst6` block is documented below.
        """
        return pulumi.get(self, "dst6s")

    @dst6s.setter
    def dst6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceDst6Args']]]]):
        pulumi.set(self, "dst6s", value)

    @property
    @pulumi.getter(name="dstNegate")
    def dst_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable negation of destination address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "dst_negate")

    @dst_negate.setter
    def dst_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_negate", value)

    @property
    @pulumi.getter
    def dsts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceDstArgs']]]]:
        """
        Destination address name. The structure of `dst` block is documented below.
        """
        return pulumi.get(self, "dsts")

    @dsts.setter
    def dsts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceDstArgs']]]]):
        pulumi.set(self, "dsts", value)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        """
        End destination port number.
        """
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SD-WAN service gateway. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceGroupArgs']]]]:
        """
        User groups. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual WAN Link health-check.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="holdDownTime")
    def hold_down_time(self) -> Optional[pulumi.Input[int]]:
        """
        Waiting period in seconds when switching from the back-up member to the primary member (0 - 10000000, default = 0).
        """
        return pulumi.get(self, "hold_down_time")

    @hold_down_time.setter
    def hold_down_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hold_down_time", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        SLA ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="inputDeviceNegate")
    def input_device_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable negation of input device match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "input_device_negate")

    @input_device_negate.setter
    def input_device_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_device_negate", value)

    @property
    @pulumi.getter(name="inputDevices")
    def input_devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInputDeviceArgs']]]]:
        """
        Source interface name. The structure of `input_device` block is documented below.
        """
        return pulumi.get(self, "input_devices")

    @input_devices.setter
    def input_devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInputDeviceArgs']]]]):
        pulumi.set(self, "input_devices", value)

    @property
    @pulumi.getter(name="internetService")
    def internet_service(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of Internet service for application-based load balancing. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "internet_service")

    @internet_service.setter
    def internet_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service", value)

    @property
    @pulumi.getter(name="internetServiceAppCtrlGroups")
    def internet_service_app_ctrl_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceAppCtrlGroupArgs']]]]:
        """
        Application control based Internet Service group list. The structure of `internet_service_app_ctrl_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_app_ctrl_groups")

    @internet_service_app_ctrl_groups.setter
    def internet_service_app_ctrl_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceAppCtrlGroupArgs']]]]):
        pulumi.set(self, "internet_service_app_ctrl_groups", value)

    @property
    @pulumi.getter(name="internetServiceAppCtrls")
    def internet_service_app_ctrls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceAppCtrlArgs']]]]:
        """
        Application control based Internet Service ID list. The structure of `internet_service_app_ctrl` block is documented below.
        """
        return pulumi.get(self, "internet_service_app_ctrls")

    @internet_service_app_ctrls.setter
    def internet_service_app_ctrls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceAppCtrlArgs']]]]):
        pulumi.set(self, "internet_service_app_ctrls", value)

    @property
    @pulumi.getter(name="internetServiceCtrlGroups")
    def internet_service_ctrl_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCtrlGroupArgs']]]]:
        """
        Control-based Internet Service group list. The structure of `internet_service_ctrl_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_ctrl_groups")

    @internet_service_ctrl_groups.setter
    def internet_service_ctrl_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCtrlGroupArgs']]]]):
        pulumi.set(self, "internet_service_ctrl_groups", value)

    @property
    @pulumi.getter(name="internetServiceCtrls")
    def internet_service_ctrls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCtrlArgs']]]]:
        """
        Control-based Internet Service ID list. The structure of `internet_service_ctrl` block is documented below.
        """
        return pulumi.get(self, "internet_service_ctrls")

    @internet_service_ctrls.setter
    def internet_service_ctrls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCtrlArgs']]]]):
        pulumi.set(self, "internet_service_ctrls", value)

    @property
    @pulumi.getter(name="internetServiceCustomGroups")
    def internet_service_custom_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCustomGroupArgs']]]]:
        """
        Custom Internet Service group list. The structure of `internet_service_custom_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_custom_groups")

    @internet_service_custom_groups.setter
    def internet_service_custom_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCustomGroupArgs']]]]):
        pulumi.set(self, "internet_service_custom_groups", value)

    @property
    @pulumi.getter(name="internetServiceCustoms")
    def internet_service_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCustomArgs']]]]:
        """
        Custom Internet service name list. The structure of `internet_service_custom` block is documented below.
        """
        return pulumi.get(self, "internet_service_customs")

    @internet_service_customs.setter
    def internet_service_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceCustomArgs']]]]):
        pulumi.set(self, "internet_service_customs", value)

    @property
    @pulumi.getter(name="internetServiceGroups")
    def internet_service_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceGroupArgs']]]]:
        """
        Internet Service group list. The structure of `internet_service_group` block is documented below.
        """
        return pulumi.get(self, "internet_service_groups")

    @internet_service_groups.setter
    def internet_service_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceGroupArgs']]]]):
        pulumi.set(self, "internet_service_groups", value)

    @property
    @pulumi.getter(name="internetServiceIds")
    def internet_service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceIdArgs']]]]:
        """
        Internet service ID list. The structure of `internet_service_id` block is documented below.
        """
        return pulumi.get(self, "internet_service_ids")

    @internet_service_ids.setter
    def internet_service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceIdArgs']]]]):
        pulumi.set(self, "internet_service_ids", value)

    @property
    @pulumi.getter(name="internetServiceNames")
    def internet_service_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceNameArgs']]]]:
        """
        Internet service name list. The structure of `internet_service_name` block is documented below.
        """
        return pulumi.get(self, "internet_service_names")

    @internet_service_names.setter
    def internet_service_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceInternetServiceNameArgs']]]]):
        pulumi.set(self, "internet_service_names", value)

    @property
    @pulumi.getter(name="jitterWeight")
    def jitter_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Coefficient of jitter in the formula of custom-profile-1.
        """
        return pulumi.get(self, "jitter_weight")

    @jitter_weight.setter
    def jitter_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "jitter_weight", value)

    @property
    @pulumi.getter(name="latencyWeight")
    def latency_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Coefficient of latency in the formula of custom-profile-1.
        """
        return pulumi.get(self, "latency_weight")

    @latency_weight.setter
    def latency_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latency_weight", value)

    @property
    @pulumi.getter(name="linkCostFactor")
    def link_cost_factor(self) -> Optional[pulumi.Input[str]]:
        """
        Link cost factor. Valid values: `latency`, `jitter`, `packet-loss`, `inbandwidth`, `outbandwidth`, `bibandwidth`, `custom-profile-1`.
        """
        return pulumi.get(self, "link_cost_factor")

    @link_cost_factor.setter
    def link_cost_factor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_cost_factor", value)

    @property
    @pulumi.getter(name="linkCostThreshold")
    def link_cost_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Percentage threshold change of link cost values that will result in policy route regeneration (0 - 10000000, default = 10).
        """
        return pulumi.get(self, "link_cost_threshold")

    @link_cost_threshold.setter
    def link_cost_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "link_cost_threshold", value)

    @property
    @pulumi.getter
    def member(self) -> Optional[pulumi.Input[int]]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "member")

    @member.setter
    def member(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "member", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Control how the priority rule sets the priority of interfaces in the SD-WAN. Valid values: `auto`, `manual`, `priority`, `sla`, `load-balance`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="packetLossWeight")
    def packet_loss_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Coefficient of packet-loss in the formula of custom-profile-1.
        """
        return pulumi.get(self, "packet_loss_weight")

    @packet_loss_weight.setter
    def packet_loss_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_loss_weight", value)

    @property
    @pulumi.getter(name="priorityMembers")
    def priority_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServicePriorityMemberArgs']]]]:
        """
        Member sequence number list. The structure of `priority_members` block is documented below.
        """
        return pulumi.get(self, "priority_members")

    @priority_members.setter
    def priority_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServicePriorityMemberArgs']]]]):
        pulumi.set(self, "priority_members", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Protocol number.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="qualityLink")
    def quality_link(self) -> Optional[pulumi.Input[int]]:
        """
        Quality grade.
        """
        return pulumi.get(self, "quality_link")

    @quality_link.setter
    def quality_link(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quality_link", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Service role to work with neighbor. Valid values: `standalone`, `primary`, `secondary`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="routeTag")
    def route_tag(self) -> Optional[pulumi.Input[int]]:
        """
        IPv4 route map route-tag.
        """
        return pulumi.get(self, "route_tag")

    @route_tag.setter
    def route_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "route_tag", value)

    @property
    @pulumi.getter(name="slaCompareMethod")
    def sla_compare_method(self) -> Optional[pulumi.Input[str]]:
        """
        Method to compare SLA value for sla and load balance mode.  Valid values: `order`, `number`.
        """
        return pulumi.get(self, "sla_compare_method")

    @sla_compare_method.setter
    def sla_compare_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sla_compare_method", value)

    @property
    @pulumi.getter
    def slas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceSlaArgs']]]]:
        """
        Service level agreement (SLA). The structure of `sla` block is documented below.
        """
        return pulumi.get(self, "slas")

    @slas.setter
    def slas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceSlaArgs']]]]):
        pulumi.set(self, "slas", value)

    @property
    @pulumi.getter
    def src6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceSrc6Args']]]]:
        """
        Source address6 name. The structure of `src6` block is documented below.
        """
        return pulumi.get(self, "src6s")

    @src6s.setter
    def src6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceSrc6Args']]]]):
        pulumi.set(self, "src6s", value)

    @property
    @pulumi.getter(name="srcNegate")
    def src_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable negation of source address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "src_negate")

    @src_negate.setter
    def src_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_negate", value)

    @property
    @pulumi.getter
    def srcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceSrcArgs']]]]:
        """
        Source address name. The structure of `src` block is documented below.
        """
        return pulumi.get(self, "srcs")

    @srcs.setter
    def srcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceSrcArgs']]]]):
        pulumi.set(self, "srcs", value)

    @property
    @pulumi.getter(name="standaloneAction")
    def standalone_action(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable service when selected neighbor role is standalone while service role is not standalone. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "standalone_action")

    @standalone_action.setter
    def standalone_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "standalone_action", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        """
        Start destination port number.
        """
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SD-WAN service. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tos(self) -> Optional[pulumi.Input[str]]:
        """
        Type of service bit pattern.
        """
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos", value)

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> Optional[pulumi.Input[str]]:
        """
        Type of service evaluated bits.
        """
        return pulumi.get(self, "tos_mask")

    @tos_mask.setter
    def tos_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos_mask", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceUserArgs']]]]:
        """
        User name. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemVirtualWanLinkServiceUserArgs']]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceDst6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Control-based Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceDstArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Control-based Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Control-based Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceInputDeviceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Control-based Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceInternetServiceAppCtrlArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: SLA ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        SLA ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceInternetServiceAppCtrlGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Control-based Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceInternetServiceCtrlArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: SLA ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        SLA ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceInternetServiceCtrlGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Control-based Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceInternetServiceCustomArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Control-based Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceInternetServiceCustomGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Control-based Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceInternetServiceGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Control-based Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceInternetServiceIdArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: SLA ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        SLA ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceInternetServiceNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Control-based Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkServicePriorityMemberArgs:
    def __init__(__self__, *,
                 seq_num: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] seq_num: Member sequence number.
        """
        if seq_num is not None:
            pulumi.set(__self__, "seq_num", seq_num)

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> Optional[pulumi.Input[int]]:
        """
        Member sequence number.
        """
        return pulumi.get(self, "seq_num")

    @seq_num.setter
    def seq_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seq_num", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceSlaArgs:
    def __init__(__self__, *,
                 health_check: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] health_check: Virtual WAN Link health-check.
        :param pulumi.Input[int] id: SLA ID.
        """
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual WAN Link health-check.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        SLA ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceSrc6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Control-based Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceSrcArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Control-based Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkServiceUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Control-based Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWanLinkZoneArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Control-based Internet Service group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Control-based Internet Service group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SystemVirtualWirePairMemberArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface_name: Interface name.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Interface name.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class SystemVxlanRemoteIp6Args:
    def __init__(__self__, *,
                 ip6: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ip6: IPv6 address.
        """
        if ip6 is not None:
            pulumi.set(__self__, "ip6", ip6)

    @property
    @pulumi.getter
    def ip6(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 address.
        """
        return pulumi.get(self, "ip6")

    @ip6.setter
    def ip6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip6", value)


@pulumi.input_type
class SystemVxlanRemoteIpArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ip: IPv4 address.
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class SystemZoneInterfaceArgs:
    def __init__(__self__, *,
                 interface_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] interface_name: Select interfaces to add to the zone.
        """
        if interface_name is not None:
            pulumi.set(__self__, "interface_name", interface_name)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> Optional[pulumi.Input[str]]:
        """
        Select interfaces to add to the zone.
        """
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_name", value)


@pulumi.input_type
class SystemZoneTaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['SystemZoneTaggingTagArgs']]]] = None):
        """
        :param pulumi.Input[str] category: Tag category.
        :param pulumi.Input[str] name: Tag name.
        :param pulumi.Input[Sequence[pulumi.Input['SystemZoneTaggingTagArgs']]] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemZoneTaggingTagArgs']]]]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemZoneTaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class SystemZoneTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserDeviceAccessListDeviceListArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] action: Allow or block device. Valid values: `accept`, `deny`.
        :param pulumi.Input[str] device: Firewall device or device group.
        :param pulumi.Input[int] id: Entry ID.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Allow or block device. Valid values: `accept`, `deny`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        Firewall device or device group.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class UserDeviceGroupMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserDeviceGroupTaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['UserDeviceGroupTaggingTagArgs']]]] = None):
        """
        :param pulumi.Input[str] category: Tag category.
        :param pulumi.Input[str] name: Tag name.
        :param pulumi.Input[Sequence[pulumi.Input['UserDeviceGroupTaggingTagArgs']]] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserDeviceGroupTaggingTagArgs']]]]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserDeviceGroupTaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class UserDeviceGroupTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserDeviceTaggingArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['UserDeviceTaggingTagArgs']]]] = None):
        """
        :param pulumi.Input[str] category: Tag category.
        :param pulumi.Input[str] name: Tag name.
        :param pulumi.Input[Sequence[pulumi.Input['UserDeviceTaggingTagArgs']]] tags: Tags. The structure of `tags` block is documented below.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Tag category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserDeviceTaggingTagArgs']]]]:
        """
        Tags. The structure of `tags` block is documented below.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserDeviceTaggingTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class UserDeviceTaggingTagArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Tag name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Tag name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserDomainControllerExtraServerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 source_ip_address: Optional[pulumi.Input[str]] = None,
                 source_port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Server ID.
        :param pulumi.Input[str] ip_address: Domain controller IP address.
        :param pulumi.Input[int] port: Port to be used for communication with the domain controller (default = 445).
        :param pulumi.Input[str] source_ip_address: FortiGate IPv4 address to be used for communication with the domain controller.
        :param pulumi.Input[int] source_port: Source port to be used for communication with the domain controller.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if source_ip_address is not None:
            pulumi.set(__self__, "source_ip_address", source_ip_address)
        if source_port is not None:
            pulumi.set(__self__, "source_port", source_port)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Server ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        Domain controller IP address.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port to be used for communication with the domain controller (default = 445).
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sourceIpAddress")
    def source_ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        FortiGate IPv4 address to be used for communication with the domain controller.
        """
        return pulumi.get(self, "source_ip_address")

    @source_ip_address.setter
    def source_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip_address", value)

    @property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> Optional[pulumi.Input[int]]:
        """
        Source port to be used for communication with the domain controller.
        """
        return pulumi.get(self, "source_port")

    @source_port.setter
    def source_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_port", value)


@pulumi.input_type
class UserExchangeKdcIpArgs:
    def __init__(__self__, *,
                 ipv4: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ipv4: KDC IPv4 addresses for Kerberos authentication.
        """
        if ipv4 is not None:
            pulumi.set(__self__, "ipv4", ipv4)

    @property
    @pulumi.getter
    def ipv4(self) -> Optional[pulumi.Input[str]]:
        """
        KDC IPv4 addresses for Kerberos authentication.
        """
        return pulumi.get(self, "ipv4")

    @ipv4.setter
    def ipv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4", value)


@pulumi.input_type
class UserFssoPollingAdgrpArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserGroupGuestArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 company: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 expiration: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 mobile_phone: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 sponsor: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] company: Set the action for the company guest user field.
        :param pulumi.Input[str] email: Email.
        :param pulumi.Input[str] expiration: Expire time.
        :param pulumi.Input[int] id: Guest ID.
        :param pulumi.Input[str] mobile_phone: Mobile phone.
        :param pulumi.Input[str] name: Guest name.
        :param pulumi.Input[str] password: Guest password.
        :param pulumi.Input[str] sponsor: Set the action for the sponsor guest user field.
        :param pulumi.Input[str] user_id: Guest ID.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if company is not None:
            pulumi.set(__self__, "company", company)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mobile_phone is not None:
            pulumi.set(__self__, "mobile_phone", mobile_phone)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if sponsor is not None:
            pulumi.set(__self__, "sponsor", sponsor)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def company(self) -> Optional[pulumi.Input[str]]:
        """
        Set the action for the company guest user field.
        """
        return pulumi.get(self, "company")

    @company.setter
    def company(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def expiration(self) -> Optional[pulumi.Input[str]]:
        """
        Expire time.
        """
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiration", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Guest ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="mobilePhone")
    def mobile_phone(self) -> Optional[pulumi.Input[str]]:
        """
        Mobile phone.
        """
        return pulumi.get(self, "mobile_phone")

    @mobile_phone.setter
    def mobile_phone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mobile_phone", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Guest name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Guest password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def sponsor(self) -> Optional[pulumi.Input[str]]:
        """
        Set the action for the sponsor guest user field.
        """
        return pulumi.get(self, "sponsor")

    @sponsor.setter
    def sponsor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sponsor", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        """
        Guest ID.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)


@pulumi.input_type
class UserGroupMatchArgs:
    def __init__(__self__, *,
                 group_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 server_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] group_name: Name of matching group on remote auththentication server.
        :param pulumi.Input[int] id: Guest ID.
        :param pulumi.Input[str] server_name: Name of remote auth server.
        """
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of matching group on remote auththentication server.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Guest ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of remote auth server.
        """
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)


@pulumi.input_type
class UserGroupMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Guest name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Guest name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserNacPolicySwitchGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Managed FortiSwitch group name from available options.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Managed FortiSwitch group name from available options.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserNacPolicySwitchScopeArgs:
    def __init__(__self__, *,
                 switch_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] switch_id: Managed FortiSwitch name from available options.
        """
        if switch_id is not None:
            pulumi.set(__self__, "switch_id", switch_id)

    @property
    @pulumi.getter(name="switchId")
    def switch_id(self) -> Optional[pulumi.Input[str]]:
        """
        Managed FortiSwitch name from available options.
        """
        return pulumi.get(self, "switch_id")

    @switch_id.setter
    def switch_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_id", value)


@pulumi.input_type
class UserPeergrpMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Peer group member name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Peer group member name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserQuarantineTargetArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 entry: Optional[pulumi.Input[str]] = None,
                 macs: Optional[pulumi.Input[Sequence[pulumi.Input['UserQuarantineTargetMacArgs']]]] = None):
        """
        :param pulumi.Input[str] description: Description for the quarantine MAC.
        :param pulumi.Input[str] entry: Quarantine entry name.
        :param pulumi.Input[Sequence[pulumi.Input['UserQuarantineTargetMacArgs']]] macs: Quarantine MACs. The structure of `macs` block is documented below.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if entry is not None:
            pulumi.set(__self__, "entry", entry)
        if macs is not None:
            pulumi.set(__self__, "macs", macs)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for the quarantine MAC.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def entry(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine entry name.
        """
        return pulumi.get(self, "entry")

    @entry.setter
    def entry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entry", value)

    @property
    @pulumi.getter
    def macs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserQuarantineTargetMacArgs']]]]:
        """
        Quarantine MACs. The structure of `macs` block is documented below.
        """
        return pulumi.get(self, "macs")

    @macs.setter
    def macs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserQuarantineTargetMacArgs']]]]):
        pulumi.set(self, "macs", value)


@pulumi.input_type
class UserQuarantineTargetMacArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 drop: Optional[pulumi.Input[str]] = None,
                 entry_id: Optional[pulumi.Input[int]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 parent: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: Description for the quarantine MAC.
        :param pulumi.Input[str] drop: Enable/Disable dropping of quarantined device traffic Valid values: `disable`, `enable`.
        :param pulumi.Input[int] entry_id: FSW entry id for the quarantine MAC.
        :param pulumi.Input[str] mac: Quarantine MAC.
        :param pulumi.Input[str] parent: Parent entry name.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if drop is not None:
            pulumi.set(__self__, "drop", drop)
        if entry_id is not None:
            pulumi.set(__self__, "entry_id", entry_id)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if parent is not None:
            pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for the quarantine MAC.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def drop(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/Disable dropping of quarantined device traffic Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "drop")

    @drop.setter
    def drop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop", value)

    @property
    @pulumi.getter(name="entryId")
    def entry_id(self) -> Optional[pulumi.Input[int]]:
        """
        FSW entry id for the quarantine MAC.
        """
        return pulumi.get(self, "entry_id")

    @entry_id.setter
    def entry_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "entry_id", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        """
        Quarantine MAC.
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        Parent entry name.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)


@pulumi.input_type
class UserRadiusAccountingServerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_select_method: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: ID (0 - 4294967295).
        :param pulumi.Input[str] interface: Specify outgoing interface to reach server.
        :param pulumi.Input[str] interface_select_method: Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        :param pulumi.Input[int] port: RADIUS accounting port number.
        :param pulumi.Input[str] secret: Secret key.
        :param pulumi.Input[str] server: {<name_str|ip_str>} Server CN domain name or IP.
        :param pulumi.Input[str] source_ip: Source IP address for communications to the RADIUS server.
        :param pulumi.Input[str] status: Status. Valid values: `enable`, `disable`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_select_method is not None:
            pulumi.set(__self__, "interface_select_method", interface_select_method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID (0 - 4294967295).
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Specify outgoing interface to reach server.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceSelectMethod")
    def interface_select_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify how to select outgoing interface to reach server. Valid values: `auto`, `sdwan`, `specify`.
        """
        return pulumi.get(self, "interface_select_method")

    @interface_select_method.setter
    def interface_select_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface_select_method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        RADIUS accounting port number.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        Secret key.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        {<name_str|ip_str>} Server CN domain name or IP.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Source IP address for communications to the RADIUS server.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class UserRadiusClassArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Class name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Class name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserSecurityExemptListRuleArgs:
    def __init__(__self__, *,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleDeviceArgs']]]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleDstaddrArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleServiceArgs']]]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleSrcaddrArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleDeviceArgs']]] devices: Devices or device groups. The structure of `devices` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleDstaddrArgs']]] dstaddrs: Destination addresses or address groups. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleServiceArgs']]] services: Destination services. The structure of `service` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleSrcaddrArgs']]] srcaddrs: Source addresses or address groups. The structure of `srcaddr` block is documented below.
        """
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)

    @property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleDeviceArgs']]]]:
        """
        Devices or device groups. The structure of `devices` block is documented below.
        """
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleDeviceArgs']]]]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleDstaddrArgs']]]]:
        """
        Destination addresses or address groups. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleDstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleServiceArgs']]]]:
        """
        Destination services. The structure of `service` block is documented below.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleServiceArgs']]]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleSrcaddrArgs']]]]:
        """
        Source addresses or address groups. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserSecurityExemptListRuleSrcaddrArgs']]]]):
        pulumi.set(self, "srcaddrs", value)


@pulumi.input_type
class UserSecurityExemptListRuleDeviceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserSecurityExemptListRuleDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserSecurityExemptListRuleServiceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserSecurityExemptListRuleSrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Service name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserSettingAuthPortArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[int] port: Non-standard port for firewall user authentication.
        :param pulumi.Input[str] type: Service type. Valid values: `http`, `https`, `ftp`, `telnet`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Non-standard port for firewall user authentication.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Service type. Valid values: `http`, `https`, `ftp`, `telnet`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class VideofilterProfileFortiguardCategoryArgs:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['VideofilterProfileFortiguardCategoryFilterArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VideofilterProfileFortiguardCategoryFilterArgs']]] filters: Configure VideoFilter FortiGuard category. The structure of `filters` block is documented below.
        """
        if filters is not None:
            pulumi.set(__self__, "filters", filters)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VideofilterProfileFortiguardCategoryFilterArgs']]]]:
        """
        Configure VideoFilter FortiGuard category. The structure of `filters` block is documented below.
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VideofilterProfileFortiguardCategoryFilterArgs']]]]):
        pulumi.set(self, "filters", value)


@pulumi.input_type
class VideofilterProfileFortiguardCategoryFilterArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 category_id: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: VideoFilter action. Valid values: `allow`, `monitor`, `block`.
        :param pulumi.Input[int] category_id: Category ID.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if category_id is not None:
            pulumi.set(__self__, "category_id", category_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        VideoFilter action. Valid values: `allow`, `monitor`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="categoryId")
    def category_id(self) -> Optional[pulumi.Input[int]]:
        """
        Category ID.
        """
        return pulumi.get(self, "category_id")

    @category_id.setter
    def category_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "category_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)


@pulumi.input_type
class VideofilterYoutubeChannelFilterEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] action: YouTube channel filter action. Valid values: `allow`, `monitor`, `block`.
        :param pulumi.Input[str] channel_id: Channel ID.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[int] id: ID.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        YouTube channel filter action. Valid values: `allow`, `monitor`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[pulumi.Input[str]]:
        """
        Channel ID.
        """
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_id", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class VoipProfileMsrpArgs:
    def __init__(__self__, *,
                 log_violations: Optional[pulumi.Input[str]] = None,
                 max_msg_size: Optional[pulumi.Input[int]] = None,
                 max_msg_size_action: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] log_violations: Enable/disable logging of MSRP violations. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] max_msg_size: Maximum allowable MSRP message size (1-65535).
        :param pulumi.Input[str] max_msg_size_action: Action for violation of max-msg-size. Valid values: `pass`, `block`, `reset`, `monitor`.
        :param pulumi.Input[str] status: Enable/disable MSRP. Valid values: `disable`, `enable`.
        """
        if log_violations is not None:
            pulumi.set(__self__, "log_violations", log_violations)
        if max_msg_size is not None:
            pulumi.set(__self__, "max_msg_size", max_msg_size)
        if max_msg_size_action is not None:
            pulumi.set(__self__, "max_msg_size_action", max_msg_size_action)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="logViolations")
    def log_violations(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of MSRP violations. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_violations")

    @log_violations.setter
    def log_violations(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_violations", value)

    @property
    @pulumi.getter(name="maxMsgSize")
    def max_msg_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum allowable MSRP message size (1-65535).
        """
        return pulumi.get(self, "max_msg_size")

    @max_msg_size.setter
    def max_msg_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_msg_size", value)

    @property
    @pulumi.getter(name="maxMsgSizeAction")
    def max_msg_size_action(self) -> Optional[pulumi.Input[str]]:
        """
        Action for violation of max-msg-size. Valid values: `pass`, `block`, `reset`, `monitor`.
        """
        return pulumi.get(self, "max_msg_size_action")

    @max_msg_size_action.setter
    def max_msg_size_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_msg_size_action", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable MSRP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class VoipProfileSccpArgs:
    def __init__(__self__, *,
                 block_mcast: Optional[pulumi.Input[str]] = None,
                 log_call_summary: Optional[pulumi.Input[str]] = None,
                 log_violations: Optional[pulumi.Input[str]] = None,
                 max_calls: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 verify_header: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] block_mcast: Enable/disable block multicast RTP connections. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] log_call_summary: Enable/disable log summary of SCCP calls. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] log_violations: Enable/disable logging of MSRP violations. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] max_calls: Maximum calls per minute per SCCP client (max 65535).
        :param pulumi.Input[str] status: Enable/disable MSRP. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] verify_header: Enable/disable verify SCCP header content. Valid values: `disable`, `enable`.
        """
        if block_mcast is not None:
            pulumi.set(__self__, "block_mcast", block_mcast)
        if log_call_summary is not None:
            pulumi.set(__self__, "log_call_summary", log_call_summary)
        if log_violations is not None:
            pulumi.set(__self__, "log_violations", log_violations)
        if max_calls is not None:
            pulumi.set(__self__, "max_calls", max_calls)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if verify_header is not None:
            pulumi.set(__self__, "verify_header", verify_header)

    @property
    @pulumi.getter(name="blockMcast")
    def block_mcast(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block multicast RTP connections. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_mcast")

    @block_mcast.setter
    def block_mcast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_mcast", value)

    @property
    @pulumi.getter(name="logCallSummary")
    def log_call_summary(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable log summary of SCCP calls. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_call_summary")

    @log_call_summary.setter
    def log_call_summary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_call_summary", value)

    @property
    @pulumi.getter(name="logViolations")
    def log_violations(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of MSRP violations. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_violations")

    @log_violations.setter
    def log_violations(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_violations", value)

    @property
    @pulumi.getter(name="maxCalls")
    def max_calls(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum calls per minute per SCCP client (max 65535).
        """
        return pulumi.get(self, "max_calls")

    @max_calls.setter
    def max_calls(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_calls", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable MSRP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="verifyHeader")
    def verify_header(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable verify SCCP header content. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "verify_header")

    @verify_header.setter
    def verify_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verify_header", value)


@pulumi.input_type
class VoipProfileSipArgs:
    def __init__(__self__, *,
                 ack_rate: Optional[pulumi.Input[int]] = None,
                 ack_rate_track: Optional[pulumi.Input[str]] = None,
                 block_ack: Optional[pulumi.Input[str]] = None,
                 block_bye: Optional[pulumi.Input[str]] = None,
                 block_cancel: Optional[pulumi.Input[str]] = None,
                 block_geo_red_options: Optional[pulumi.Input[str]] = None,
                 block_info: Optional[pulumi.Input[str]] = None,
                 block_invite: Optional[pulumi.Input[str]] = None,
                 block_long_lines: Optional[pulumi.Input[str]] = None,
                 block_message: Optional[pulumi.Input[str]] = None,
                 block_notify: Optional[pulumi.Input[str]] = None,
                 block_options: Optional[pulumi.Input[str]] = None,
                 block_prack: Optional[pulumi.Input[str]] = None,
                 block_publish: Optional[pulumi.Input[str]] = None,
                 block_refer: Optional[pulumi.Input[str]] = None,
                 block_register: Optional[pulumi.Input[str]] = None,
                 block_subscribe: Optional[pulumi.Input[str]] = None,
                 block_unknown: Optional[pulumi.Input[str]] = None,
                 block_update: Optional[pulumi.Input[str]] = None,
                 bye_rate: Optional[pulumi.Input[int]] = None,
                 bye_rate_track: Optional[pulumi.Input[str]] = None,
                 call_keepalive: Optional[pulumi.Input[int]] = None,
                 cancel_rate: Optional[pulumi.Input[int]] = None,
                 cancel_rate_track: Optional[pulumi.Input[str]] = None,
                 contact_fixup: Optional[pulumi.Input[str]] = None,
                 hnt_restrict_source_ip: Optional[pulumi.Input[str]] = None,
                 hosted_nat_traversal: Optional[pulumi.Input[str]] = None,
                 info_rate: Optional[pulumi.Input[int]] = None,
                 info_rate_track: Optional[pulumi.Input[str]] = None,
                 invite_rate: Optional[pulumi.Input[int]] = None,
                 invite_rate_track: Optional[pulumi.Input[str]] = None,
                 ips_rtp: Optional[pulumi.Input[str]] = None,
                 log_call_summary: Optional[pulumi.Input[str]] = None,
                 log_violations: Optional[pulumi.Input[str]] = None,
                 malformed_header_allow: Optional[pulumi.Input[str]] = None,
                 malformed_header_call_id: Optional[pulumi.Input[str]] = None,
                 malformed_header_contact: Optional[pulumi.Input[str]] = None,
                 malformed_header_content_length: Optional[pulumi.Input[str]] = None,
                 malformed_header_content_type: Optional[pulumi.Input[str]] = None,
                 malformed_header_cseq: Optional[pulumi.Input[str]] = None,
                 malformed_header_expires: Optional[pulumi.Input[str]] = None,
                 malformed_header_from: Optional[pulumi.Input[str]] = None,
                 malformed_header_max_forwards: Optional[pulumi.Input[str]] = None,
                 malformed_header_no_proxy_require: Optional[pulumi.Input[str]] = None,
                 malformed_header_no_require: Optional[pulumi.Input[str]] = None,
                 malformed_header_passerted_identity: Optional[pulumi.Input[str]] = None,
                 malformed_header_rack: Optional[pulumi.Input[str]] = None,
                 malformed_header_record_route: Optional[pulumi.Input[str]] = None,
                 malformed_header_route: Optional[pulumi.Input[str]] = None,
                 malformed_header_rseq: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_a: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_b: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_c: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_i: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_k: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_m: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_o: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_r: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_s: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_t: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_v: Optional[pulumi.Input[str]] = None,
                 malformed_header_sdp_z: Optional[pulumi.Input[str]] = None,
                 malformed_header_to: Optional[pulumi.Input[str]] = None,
                 malformed_header_via: Optional[pulumi.Input[str]] = None,
                 malformed_request_line: Optional[pulumi.Input[str]] = None,
                 max_body_length: Optional[pulumi.Input[int]] = None,
                 max_dialogs: Optional[pulumi.Input[int]] = None,
                 max_idle_dialogs: Optional[pulumi.Input[int]] = None,
                 max_line_length: Optional[pulumi.Input[int]] = None,
                 message_rate: Optional[pulumi.Input[int]] = None,
                 message_rate_track: Optional[pulumi.Input[str]] = None,
                 nat_port_range: Optional[pulumi.Input[str]] = None,
                 nat_trace: Optional[pulumi.Input[str]] = None,
                 no_sdp_fixup: Optional[pulumi.Input[str]] = None,
                 notify_rate: Optional[pulumi.Input[int]] = None,
                 notify_rate_track: Optional[pulumi.Input[str]] = None,
                 open_contact_pinhole: Optional[pulumi.Input[str]] = None,
                 open_record_route_pinhole: Optional[pulumi.Input[str]] = None,
                 open_register_pinhole: Optional[pulumi.Input[str]] = None,
                 open_via_pinhole: Optional[pulumi.Input[str]] = None,
                 options_rate: Optional[pulumi.Input[int]] = None,
                 options_rate_track: Optional[pulumi.Input[str]] = None,
                 prack_rate: Optional[pulumi.Input[int]] = None,
                 prack_rate_track: Optional[pulumi.Input[str]] = None,
                 preserve_override: Optional[pulumi.Input[str]] = None,
                 provisional_invite_expiry_time: Optional[pulumi.Input[int]] = None,
                 publish_rate: Optional[pulumi.Input[int]] = None,
                 publish_rate_track: Optional[pulumi.Input[str]] = None,
                 refer_rate: Optional[pulumi.Input[int]] = None,
                 refer_rate_track: Optional[pulumi.Input[str]] = None,
                 register_contact_trace: Optional[pulumi.Input[str]] = None,
                 register_rate: Optional[pulumi.Input[int]] = None,
                 register_rate_track: Optional[pulumi.Input[str]] = None,
                 rfc2543_branch: Optional[pulumi.Input[str]] = None,
                 rtp: Optional[pulumi.Input[str]] = None,
                 ssl_algorithm: Optional[pulumi.Input[str]] = None,
                 ssl_auth_client: Optional[pulumi.Input[str]] = None,
                 ssl_auth_server: Optional[pulumi.Input[str]] = None,
                 ssl_client_certificate: Optional[pulumi.Input[str]] = None,
                 ssl_client_renegotiation: Optional[pulumi.Input[str]] = None,
                 ssl_max_version: Optional[pulumi.Input[str]] = None,
                 ssl_min_version: Optional[pulumi.Input[str]] = None,
                 ssl_mode: Optional[pulumi.Input[str]] = None,
                 ssl_pfs: Optional[pulumi.Input[str]] = None,
                 ssl_send_empty_frags: Optional[pulumi.Input[str]] = None,
                 ssl_server_certificate: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 strict_register: Optional[pulumi.Input[str]] = None,
                 subscribe_rate: Optional[pulumi.Input[int]] = None,
                 subscribe_rate_track: Optional[pulumi.Input[str]] = None,
                 unknown_header: Optional[pulumi.Input[str]] = None,
                 update_rate: Optional[pulumi.Input[int]] = None,
                 update_rate_track: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] ack_rate: ACK request rate limit (per second, per policy).
        :param pulumi.Input[str] ack_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[str] block_ack: Enable/disable block ACK requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_bye: Enable/disable block BYE requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_cancel: Enable/disable block CANCEL requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_geo_red_options: Enable/disable block OPTIONS requests, but OPTIONS requests still notify for redundancy. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_info: Enable/disable block INFO requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_invite: Enable/disable block INVITE requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_long_lines: Enable/disable block requests with headers exceeding max-line-length. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_message: Enable/disable block MESSAGE requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_notify: Enable/disable block NOTIFY requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_options: Enable/disable block OPTIONS requests and no OPTIONS as notifying message for redundancy either. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_prack: Enable/disable block prack requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_publish: Enable/disable block PUBLISH requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_refer: Enable/disable block REFER requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_register: Enable/disable block REGISTER requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_subscribe: Enable/disable block SUBSCRIBE requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_unknown: Block unrecognized SIP requests (enabled by default). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] block_update: Enable/disable block UPDATE requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] bye_rate: BYE request rate limit (per second, per policy).
        :param pulumi.Input[str] bye_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[int] call_keepalive: Continue tracking calls with no RTP for this many minutes.
        :param pulumi.Input[int] cancel_rate: CANCEL request rate limit (per second, per policy).
        :param pulumi.Input[str] cancel_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[str] contact_fixup: Fixup contact anyway even if contact's IP:port doesn't match session's IP:port. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] hnt_restrict_source_ip: Enable/disable restrict RTP source IP to be the same as SIP source IP when HNT is enabled. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] hosted_nat_traversal: Hosted NAT Traversal (HNT). Valid values: `disable`, `enable`.
        :param pulumi.Input[int] info_rate: INFO request rate limit (per second, per policy).
        :param pulumi.Input[str] info_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[int] invite_rate: INVITE request rate limit (per second, per policy).
        :param pulumi.Input[str] invite_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[str] ips_rtp: Enable/disable allow IPS on RTP. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] log_call_summary: Enable/disable log summary of SCCP calls. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] log_violations: Enable/disable logging of MSRP violations. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] malformed_header_allow: Action for malformed Allow header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_call_id: Action for malformed Call-ID header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_contact: Action for malformed Contact header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_content_length: Action for malformed Content-Length header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_content_type: Action for malformed Content-Type header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_cseq: Action for malformed CSeq header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_expires: Action for malformed Expires header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_from: Action for malformed From header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_max_forwards: Action for malformed Max-Forwards header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_no_proxy_require: Action for malformed SIP messages without Proxy-Require header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_no_require: Action for malformed SIP messages without Require header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_passerted_identity: Action for malformed P-Asserted-Identity header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_rack: Action for malformed RAck header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_record_route: Action for malformed Record-Route header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_route: Action for malformed Route header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_rseq: Action for malformed RSeq header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_sdp_a: Action for malformed SDP a line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_sdp_b: Action for malformed SDP b line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_sdp_c: Action for malformed SDP c line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_sdp_i: Action for malformed SDP i line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_sdp_k: Action for malformed SDP k line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_sdp_m: Action for malformed SDP m line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_sdp_o: Action for malformed SDP o line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_sdp_r: Action for malformed SDP r line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_sdp_s: Action for malformed SDP s line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_sdp_t: Action for malformed SDP t line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_sdp_v: Action for malformed SDP v line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_sdp_z: Action for malformed SDP z line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_to: Action for malformed To header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_header_via: Action for malformed VIA header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[str] malformed_request_line: Action for malformed request line. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[int] max_body_length: Maximum SIP message body length (0 meaning no limit).
        :param pulumi.Input[int] max_dialogs: Maximum number of concurrent calls/dialogs (per policy).
        :param pulumi.Input[int] max_idle_dialogs: Maximum number established but idle dialogs to retain (per policy).
        :param pulumi.Input[int] max_line_length: Maximum SIP header line length (78-4096).
        :param pulumi.Input[int] message_rate: MESSAGE request rate limit (per second, per policy).
        :param pulumi.Input[str] message_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[str] nat_port_range: RTP NAT port range.
        :param pulumi.Input[str] nat_trace: Enable/disable preservation of original IP in SDP i line. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] no_sdp_fixup: Enable/disable no SDP fix-up. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] notify_rate: NOTIFY request rate limit (per second, per policy).
        :param pulumi.Input[str] notify_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[str] open_contact_pinhole: Enable/disable open pinhole for non-REGISTER Contact port. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] open_record_route_pinhole: Enable/disable open pinhole for Record-Route port. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] open_register_pinhole: Enable/disable open pinhole for REGISTER Contact port. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] open_via_pinhole: Enable/disable open pinhole for Via port. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] options_rate: OPTIONS request rate limit (per second, per policy).
        :param pulumi.Input[str] options_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[int] prack_rate: PRACK request rate limit (per second, per policy).
        :param pulumi.Input[str] prack_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[str] preserve_override: Override i line to preserve original IPS (default: append). Valid values: `disable`, `enable`.
        :param pulumi.Input[int] provisional_invite_expiry_time: Expiry time for provisional INVITE (10 - 3600 sec).
        :param pulumi.Input[int] publish_rate: PUBLISH request rate limit (per second, per policy).
        :param pulumi.Input[str] publish_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[int] refer_rate: REFER request rate limit (per second, per policy).
        :param pulumi.Input[str] refer_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[str] register_contact_trace: Enable/disable trace original IP/port within the contact header of REGISTER requests. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] register_rate: REGISTER request rate limit (per second, per policy).
        :param pulumi.Input[str] register_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[str] rfc2543_branch: Enable/disable support via branch compliant with RFC 2543. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] rtp: Enable/disable create pinholes for RTP traffic to traverse firewall. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] ssl_algorithm: Relative strength of encryption algorithms accepted in negotiation. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] ssl_auth_client: Require a client certificate and authenticate it with the peer/peergrp.
        :param pulumi.Input[str] ssl_auth_server: Authenticate the server's certificate with the peer/peergrp.
        :param pulumi.Input[str] ssl_client_certificate: Name of Certificate to offer to server if requested.
        :param pulumi.Input[str] ssl_client_renegotiation: Allow/block client renegotiation by server. Valid values: `allow`, `deny`, `secure`.
        :param pulumi.Input[str] ssl_max_version: Highest SSL/TLS version to negotiate.
        :param pulumi.Input[str] ssl_min_version: Lowest SSL/TLS version to negotiate.
        :param pulumi.Input[str] ssl_mode: SSL/TLS mode for encryption & decryption of traffic. Valid values: `off`, `full`.
        :param pulumi.Input[str] ssl_pfs: SSL Perfect Forward Secrecy. Valid values: `require`, `deny`, `allow`.
        :param pulumi.Input[str] ssl_send_empty_frags: Send empty fragments to avoid attack on CBC IV (SSL 3.0 & TLS 1.0 only). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl_server_certificate: Name of Certificate return to the client in every SSL connection.
        :param pulumi.Input[str] status: Enable/disable MSRP. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] strict_register: Enable/disable only allow the registrar to connect. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] subscribe_rate: SUBSCRIBE request rate limit (per second, per policy).
        :param pulumi.Input[str] subscribe_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        :param pulumi.Input[str] unknown_header: Action for unknown SIP header. Valid values: `discard`, `pass`, `respond`.
        :param pulumi.Input[int] update_rate: UPDATE request rate limit (per second, per policy).
        :param pulumi.Input[str] update_rate_track: Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        if ack_rate is not None:
            pulumi.set(__self__, "ack_rate", ack_rate)
        if ack_rate_track is not None:
            pulumi.set(__self__, "ack_rate_track", ack_rate_track)
        if block_ack is not None:
            pulumi.set(__self__, "block_ack", block_ack)
        if block_bye is not None:
            pulumi.set(__self__, "block_bye", block_bye)
        if block_cancel is not None:
            pulumi.set(__self__, "block_cancel", block_cancel)
        if block_geo_red_options is not None:
            pulumi.set(__self__, "block_geo_red_options", block_geo_red_options)
        if block_info is not None:
            pulumi.set(__self__, "block_info", block_info)
        if block_invite is not None:
            pulumi.set(__self__, "block_invite", block_invite)
        if block_long_lines is not None:
            pulumi.set(__self__, "block_long_lines", block_long_lines)
        if block_message is not None:
            pulumi.set(__self__, "block_message", block_message)
        if block_notify is not None:
            pulumi.set(__self__, "block_notify", block_notify)
        if block_options is not None:
            pulumi.set(__self__, "block_options", block_options)
        if block_prack is not None:
            pulumi.set(__self__, "block_prack", block_prack)
        if block_publish is not None:
            pulumi.set(__self__, "block_publish", block_publish)
        if block_refer is not None:
            pulumi.set(__self__, "block_refer", block_refer)
        if block_register is not None:
            pulumi.set(__self__, "block_register", block_register)
        if block_subscribe is not None:
            pulumi.set(__self__, "block_subscribe", block_subscribe)
        if block_unknown is not None:
            pulumi.set(__self__, "block_unknown", block_unknown)
        if block_update is not None:
            pulumi.set(__self__, "block_update", block_update)
        if bye_rate is not None:
            pulumi.set(__self__, "bye_rate", bye_rate)
        if bye_rate_track is not None:
            pulumi.set(__self__, "bye_rate_track", bye_rate_track)
        if call_keepalive is not None:
            pulumi.set(__self__, "call_keepalive", call_keepalive)
        if cancel_rate is not None:
            pulumi.set(__self__, "cancel_rate", cancel_rate)
        if cancel_rate_track is not None:
            pulumi.set(__self__, "cancel_rate_track", cancel_rate_track)
        if contact_fixup is not None:
            pulumi.set(__self__, "contact_fixup", contact_fixup)
        if hnt_restrict_source_ip is not None:
            pulumi.set(__self__, "hnt_restrict_source_ip", hnt_restrict_source_ip)
        if hosted_nat_traversal is not None:
            pulumi.set(__self__, "hosted_nat_traversal", hosted_nat_traversal)
        if info_rate is not None:
            pulumi.set(__self__, "info_rate", info_rate)
        if info_rate_track is not None:
            pulumi.set(__self__, "info_rate_track", info_rate_track)
        if invite_rate is not None:
            pulumi.set(__self__, "invite_rate", invite_rate)
        if invite_rate_track is not None:
            pulumi.set(__self__, "invite_rate_track", invite_rate_track)
        if ips_rtp is not None:
            pulumi.set(__self__, "ips_rtp", ips_rtp)
        if log_call_summary is not None:
            pulumi.set(__self__, "log_call_summary", log_call_summary)
        if log_violations is not None:
            pulumi.set(__self__, "log_violations", log_violations)
        if malformed_header_allow is not None:
            pulumi.set(__self__, "malformed_header_allow", malformed_header_allow)
        if malformed_header_call_id is not None:
            pulumi.set(__self__, "malformed_header_call_id", malformed_header_call_id)
        if malformed_header_contact is not None:
            pulumi.set(__self__, "malformed_header_contact", malformed_header_contact)
        if malformed_header_content_length is not None:
            pulumi.set(__self__, "malformed_header_content_length", malformed_header_content_length)
        if malformed_header_content_type is not None:
            pulumi.set(__self__, "malformed_header_content_type", malformed_header_content_type)
        if malformed_header_cseq is not None:
            pulumi.set(__self__, "malformed_header_cseq", malformed_header_cseq)
        if malformed_header_expires is not None:
            pulumi.set(__self__, "malformed_header_expires", malformed_header_expires)
        if malformed_header_from is not None:
            pulumi.set(__self__, "malformed_header_from", malformed_header_from)
        if malformed_header_max_forwards is not None:
            pulumi.set(__self__, "malformed_header_max_forwards", malformed_header_max_forwards)
        if malformed_header_no_proxy_require is not None:
            pulumi.set(__self__, "malformed_header_no_proxy_require", malformed_header_no_proxy_require)
        if malformed_header_no_require is not None:
            pulumi.set(__self__, "malformed_header_no_require", malformed_header_no_require)
        if malformed_header_passerted_identity is not None:
            pulumi.set(__self__, "malformed_header_passerted_identity", malformed_header_passerted_identity)
        if malformed_header_rack is not None:
            pulumi.set(__self__, "malformed_header_rack", malformed_header_rack)
        if malformed_header_record_route is not None:
            pulumi.set(__self__, "malformed_header_record_route", malformed_header_record_route)
        if malformed_header_route is not None:
            pulumi.set(__self__, "malformed_header_route", malformed_header_route)
        if malformed_header_rseq is not None:
            pulumi.set(__self__, "malformed_header_rseq", malformed_header_rseq)
        if malformed_header_sdp_a is not None:
            pulumi.set(__self__, "malformed_header_sdp_a", malformed_header_sdp_a)
        if malformed_header_sdp_b is not None:
            pulumi.set(__self__, "malformed_header_sdp_b", malformed_header_sdp_b)
        if malformed_header_sdp_c is not None:
            pulumi.set(__self__, "malformed_header_sdp_c", malformed_header_sdp_c)
        if malformed_header_sdp_i is not None:
            pulumi.set(__self__, "malformed_header_sdp_i", malformed_header_sdp_i)
        if malformed_header_sdp_k is not None:
            pulumi.set(__self__, "malformed_header_sdp_k", malformed_header_sdp_k)
        if malformed_header_sdp_m is not None:
            pulumi.set(__self__, "malformed_header_sdp_m", malformed_header_sdp_m)
        if malformed_header_sdp_o is not None:
            pulumi.set(__self__, "malformed_header_sdp_o", malformed_header_sdp_o)
        if malformed_header_sdp_r is not None:
            pulumi.set(__self__, "malformed_header_sdp_r", malformed_header_sdp_r)
        if malformed_header_sdp_s is not None:
            pulumi.set(__self__, "malformed_header_sdp_s", malformed_header_sdp_s)
        if malformed_header_sdp_t is not None:
            pulumi.set(__self__, "malformed_header_sdp_t", malformed_header_sdp_t)
        if malformed_header_sdp_v is not None:
            pulumi.set(__self__, "malformed_header_sdp_v", malformed_header_sdp_v)
        if malformed_header_sdp_z is not None:
            pulumi.set(__self__, "malformed_header_sdp_z", malformed_header_sdp_z)
        if malformed_header_to is not None:
            pulumi.set(__self__, "malformed_header_to", malformed_header_to)
        if malformed_header_via is not None:
            pulumi.set(__self__, "malformed_header_via", malformed_header_via)
        if malformed_request_line is not None:
            pulumi.set(__self__, "malformed_request_line", malformed_request_line)
        if max_body_length is not None:
            pulumi.set(__self__, "max_body_length", max_body_length)
        if max_dialogs is not None:
            pulumi.set(__self__, "max_dialogs", max_dialogs)
        if max_idle_dialogs is not None:
            pulumi.set(__self__, "max_idle_dialogs", max_idle_dialogs)
        if max_line_length is not None:
            pulumi.set(__self__, "max_line_length", max_line_length)
        if message_rate is not None:
            pulumi.set(__self__, "message_rate", message_rate)
        if message_rate_track is not None:
            pulumi.set(__self__, "message_rate_track", message_rate_track)
        if nat_port_range is not None:
            pulumi.set(__self__, "nat_port_range", nat_port_range)
        if nat_trace is not None:
            pulumi.set(__self__, "nat_trace", nat_trace)
        if no_sdp_fixup is not None:
            pulumi.set(__self__, "no_sdp_fixup", no_sdp_fixup)
        if notify_rate is not None:
            pulumi.set(__self__, "notify_rate", notify_rate)
        if notify_rate_track is not None:
            pulumi.set(__self__, "notify_rate_track", notify_rate_track)
        if open_contact_pinhole is not None:
            pulumi.set(__self__, "open_contact_pinhole", open_contact_pinhole)
        if open_record_route_pinhole is not None:
            pulumi.set(__self__, "open_record_route_pinhole", open_record_route_pinhole)
        if open_register_pinhole is not None:
            pulumi.set(__self__, "open_register_pinhole", open_register_pinhole)
        if open_via_pinhole is not None:
            pulumi.set(__self__, "open_via_pinhole", open_via_pinhole)
        if options_rate is not None:
            pulumi.set(__self__, "options_rate", options_rate)
        if options_rate_track is not None:
            pulumi.set(__self__, "options_rate_track", options_rate_track)
        if prack_rate is not None:
            pulumi.set(__self__, "prack_rate", prack_rate)
        if prack_rate_track is not None:
            pulumi.set(__self__, "prack_rate_track", prack_rate_track)
        if preserve_override is not None:
            pulumi.set(__self__, "preserve_override", preserve_override)
        if provisional_invite_expiry_time is not None:
            pulumi.set(__self__, "provisional_invite_expiry_time", provisional_invite_expiry_time)
        if publish_rate is not None:
            pulumi.set(__self__, "publish_rate", publish_rate)
        if publish_rate_track is not None:
            pulumi.set(__self__, "publish_rate_track", publish_rate_track)
        if refer_rate is not None:
            pulumi.set(__self__, "refer_rate", refer_rate)
        if refer_rate_track is not None:
            pulumi.set(__self__, "refer_rate_track", refer_rate_track)
        if register_contact_trace is not None:
            pulumi.set(__self__, "register_contact_trace", register_contact_trace)
        if register_rate is not None:
            pulumi.set(__self__, "register_rate", register_rate)
        if register_rate_track is not None:
            pulumi.set(__self__, "register_rate_track", register_rate_track)
        if rfc2543_branch is not None:
            pulumi.set(__self__, "rfc2543_branch", rfc2543_branch)
        if rtp is not None:
            pulumi.set(__self__, "rtp", rtp)
        if ssl_algorithm is not None:
            pulumi.set(__self__, "ssl_algorithm", ssl_algorithm)
        if ssl_auth_client is not None:
            pulumi.set(__self__, "ssl_auth_client", ssl_auth_client)
        if ssl_auth_server is not None:
            pulumi.set(__self__, "ssl_auth_server", ssl_auth_server)
        if ssl_client_certificate is not None:
            pulumi.set(__self__, "ssl_client_certificate", ssl_client_certificate)
        if ssl_client_renegotiation is not None:
            pulumi.set(__self__, "ssl_client_renegotiation", ssl_client_renegotiation)
        if ssl_max_version is not None:
            pulumi.set(__self__, "ssl_max_version", ssl_max_version)
        if ssl_min_version is not None:
            pulumi.set(__self__, "ssl_min_version", ssl_min_version)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if ssl_pfs is not None:
            pulumi.set(__self__, "ssl_pfs", ssl_pfs)
        if ssl_send_empty_frags is not None:
            pulumi.set(__self__, "ssl_send_empty_frags", ssl_send_empty_frags)
        if ssl_server_certificate is not None:
            pulumi.set(__self__, "ssl_server_certificate", ssl_server_certificate)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if strict_register is not None:
            pulumi.set(__self__, "strict_register", strict_register)
        if subscribe_rate is not None:
            pulumi.set(__self__, "subscribe_rate", subscribe_rate)
        if subscribe_rate_track is not None:
            pulumi.set(__self__, "subscribe_rate_track", subscribe_rate_track)
        if unknown_header is not None:
            pulumi.set(__self__, "unknown_header", unknown_header)
        if update_rate is not None:
            pulumi.set(__self__, "update_rate", update_rate)
        if update_rate_track is not None:
            pulumi.set(__self__, "update_rate_track", update_rate_track)

    @property
    @pulumi.getter(name="ackRate")
    def ack_rate(self) -> Optional[pulumi.Input[int]]:
        """
        ACK request rate limit (per second, per policy).
        """
        return pulumi.get(self, "ack_rate")

    @ack_rate.setter
    def ack_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ack_rate", value)

    @property
    @pulumi.getter(name="ackRateTrack")
    def ack_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "ack_rate_track")

    @ack_rate_track.setter
    def ack_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ack_rate_track", value)

    @property
    @pulumi.getter(name="blockAck")
    def block_ack(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block ACK requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_ack")

    @block_ack.setter
    def block_ack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_ack", value)

    @property
    @pulumi.getter(name="blockBye")
    def block_bye(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block BYE requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_bye")

    @block_bye.setter
    def block_bye(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_bye", value)

    @property
    @pulumi.getter(name="blockCancel")
    def block_cancel(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block CANCEL requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_cancel")

    @block_cancel.setter
    def block_cancel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_cancel", value)

    @property
    @pulumi.getter(name="blockGeoRedOptions")
    def block_geo_red_options(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block OPTIONS requests, but OPTIONS requests still notify for redundancy. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_geo_red_options")

    @block_geo_red_options.setter
    def block_geo_red_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_geo_red_options", value)

    @property
    @pulumi.getter(name="blockInfo")
    def block_info(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block INFO requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_info")

    @block_info.setter
    def block_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_info", value)

    @property
    @pulumi.getter(name="blockInvite")
    def block_invite(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block INVITE requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_invite")

    @block_invite.setter
    def block_invite(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_invite", value)

    @property
    @pulumi.getter(name="blockLongLines")
    def block_long_lines(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block requests with headers exceeding max-line-length. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_long_lines")

    @block_long_lines.setter
    def block_long_lines(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_long_lines", value)

    @property
    @pulumi.getter(name="blockMessage")
    def block_message(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block MESSAGE requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_message")

    @block_message.setter
    def block_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_message", value)

    @property
    @pulumi.getter(name="blockNotify")
    def block_notify(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block NOTIFY requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_notify")

    @block_notify.setter
    def block_notify(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_notify", value)

    @property
    @pulumi.getter(name="blockOptions")
    def block_options(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block OPTIONS requests and no OPTIONS as notifying message for redundancy either. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_options")

    @block_options.setter
    def block_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_options", value)

    @property
    @pulumi.getter(name="blockPrack")
    def block_prack(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block prack requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_prack")

    @block_prack.setter
    def block_prack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_prack", value)

    @property
    @pulumi.getter(name="blockPublish")
    def block_publish(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block PUBLISH requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_publish")

    @block_publish.setter
    def block_publish(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_publish", value)

    @property
    @pulumi.getter(name="blockRefer")
    def block_refer(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block REFER requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_refer")

    @block_refer.setter
    def block_refer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_refer", value)

    @property
    @pulumi.getter(name="blockRegister")
    def block_register(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block REGISTER requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_register")

    @block_register.setter
    def block_register(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_register", value)

    @property
    @pulumi.getter(name="blockSubscribe")
    def block_subscribe(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block SUBSCRIBE requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_subscribe")

    @block_subscribe.setter
    def block_subscribe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_subscribe", value)

    @property
    @pulumi.getter(name="blockUnknown")
    def block_unknown(self) -> Optional[pulumi.Input[str]]:
        """
        Block unrecognized SIP requests (enabled by default). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_unknown")

    @block_unknown.setter
    def block_unknown(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_unknown", value)

    @property
    @pulumi.getter(name="blockUpdate")
    def block_update(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable block UPDATE requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "block_update")

    @block_update.setter
    def block_update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_update", value)

    @property
    @pulumi.getter(name="byeRate")
    def bye_rate(self) -> Optional[pulumi.Input[int]]:
        """
        BYE request rate limit (per second, per policy).
        """
        return pulumi.get(self, "bye_rate")

    @bye_rate.setter
    def bye_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bye_rate", value)

    @property
    @pulumi.getter(name="byeRateTrack")
    def bye_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "bye_rate_track")

    @bye_rate_track.setter
    def bye_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bye_rate_track", value)

    @property
    @pulumi.getter(name="callKeepalive")
    def call_keepalive(self) -> Optional[pulumi.Input[int]]:
        """
        Continue tracking calls with no RTP for this many minutes.
        """
        return pulumi.get(self, "call_keepalive")

    @call_keepalive.setter
    def call_keepalive(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "call_keepalive", value)

    @property
    @pulumi.getter(name="cancelRate")
    def cancel_rate(self) -> Optional[pulumi.Input[int]]:
        """
        CANCEL request rate limit (per second, per policy).
        """
        return pulumi.get(self, "cancel_rate")

    @cancel_rate.setter
    def cancel_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cancel_rate", value)

    @property
    @pulumi.getter(name="cancelRateTrack")
    def cancel_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "cancel_rate_track")

    @cancel_rate_track.setter
    def cancel_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cancel_rate_track", value)

    @property
    @pulumi.getter(name="contactFixup")
    def contact_fixup(self) -> Optional[pulumi.Input[str]]:
        """
        Fixup contact anyway even if contact's IP:port doesn't match session's IP:port. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "contact_fixup")

    @contact_fixup.setter
    def contact_fixup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact_fixup", value)

    @property
    @pulumi.getter(name="hntRestrictSourceIp")
    def hnt_restrict_source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable restrict RTP source IP to be the same as SIP source IP when HNT is enabled. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "hnt_restrict_source_ip")

    @hnt_restrict_source_ip.setter
    def hnt_restrict_source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hnt_restrict_source_ip", value)

    @property
    @pulumi.getter(name="hostedNatTraversal")
    def hosted_nat_traversal(self) -> Optional[pulumi.Input[str]]:
        """
        Hosted NAT Traversal (HNT). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "hosted_nat_traversal")

    @hosted_nat_traversal.setter
    def hosted_nat_traversal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_nat_traversal", value)

    @property
    @pulumi.getter(name="infoRate")
    def info_rate(self) -> Optional[pulumi.Input[int]]:
        """
        INFO request rate limit (per second, per policy).
        """
        return pulumi.get(self, "info_rate")

    @info_rate.setter
    def info_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "info_rate", value)

    @property
    @pulumi.getter(name="infoRateTrack")
    def info_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "info_rate_track")

    @info_rate_track.setter
    def info_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "info_rate_track", value)

    @property
    @pulumi.getter(name="inviteRate")
    def invite_rate(self) -> Optional[pulumi.Input[int]]:
        """
        INVITE request rate limit (per second, per policy).
        """
        return pulumi.get(self, "invite_rate")

    @invite_rate.setter
    def invite_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "invite_rate", value)

    @property
    @pulumi.getter(name="inviteRateTrack")
    def invite_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "invite_rate_track")

    @invite_rate_track.setter
    def invite_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invite_rate_track", value)

    @property
    @pulumi.getter(name="ipsRtp")
    def ips_rtp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allow IPS on RTP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "ips_rtp")

    @ips_rtp.setter
    def ips_rtp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ips_rtp", value)

    @property
    @pulumi.getter(name="logCallSummary")
    def log_call_summary(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable log summary of SCCP calls. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_call_summary")

    @log_call_summary.setter
    def log_call_summary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_call_summary", value)

    @property
    @pulumi.getter(name="logViolations")
    def log_violations(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging of MSRP violations. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "log_violations")

    @log_violations.setter
    def log_violations(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_violations", value)

    @property
    @pulumi.getter(name="malformedHeaderAllow")
    def malformed_header_allow(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed Allow header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_allow")

    @malformed_header_allow.setter
    def malformed_header_allow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_allow", value)

    @property
    @pulumi.getter(name="malformedHeaderCallId")
    def malformed_header_call_id(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed Call-ID header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_call_id")

    @malformed_header_call_id.setter
    def malformed_header_call_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_call_id", value)

    @property
    @pulumi.getter(name="malformedHeaderContact")
    def malformed_header_contact(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed Contact header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_contact")

    @malformed_header_contact.setter
    def malformed_header_contact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_contact", value)

    @property
    @pulumi.getter(name="malformedHeaderContentLength")
    def malformed_header_content_length(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed Content-Length header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_content_length")

    @malformed_header_content_length.setter
    def malformed_header_content_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_content_length", value)

    @property
    @pulumi.getter(name="malformedHeaderContentType")
    def malformed_header_content_type(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed Content-Type header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_content_type")

    @malformed_header_content_type.setter
    def malformed_header_content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_content_type", value)

    @property
    @pulumi.getter(name="malformedHeaderCseq")
    def malformed_header_cseq(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed CSeq header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_cseq")

    @malformed_header_cseq.setter
    def malformed_header_cseq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_cseq", value)

    @property
    @pulumi.getter(name="malformedHeaderExpires")
    def malformed_header_expires(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed Expires header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_expires")

    @malformed_header_expires.setter
    def malformed_header_expires(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_expires", value)

    @property
    @pulumi.getter(name="malformedHeaderFrom")
    def malformed_header_from(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed From header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_from")

    @malformed_header_from.setter
    def malformed_header_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_from", value)

    @property
    @pulumi.getter(name="malformedHeaderMaxForwards")
    def malformed_header_max_forwards(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed Max-Forwards header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_max_forwards")

    @malformed_header_max_forwards.setter
    def malformed_header_max_forwards(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_max_forwards", value)

    @property
    @pulumi.getter(name="malformedHeaderNoProxyRequire")
    def malformed_header_no_proxy_require(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SIP messages without Proxy-Require header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_no_proxy_require")

    @malformed_header_no_proxy_require.setter
    def malformed_header_no_proxy_require(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_no_proxy_require", value)

    @property
    @pulumi.getter(name="malformedHeaderNoRequire")
    def malformed_header_no_require(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SIP messages without Require header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_no_require")

    @malformed_header_no_require.setter
    def malformed_header_no_require(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_no_require", value)

    @property
    @pulumi.getter(name="malformedHeaderPAssertedIdentity")
    def malformed_header_passerted_identity(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed P-Asserted-Identity header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_passerted_identity")

    @malformed_header_passerted_identity.setter
    def malformed_header_passerted_identity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_passerted_identity", value)

    @property
    @pulumi.getter(name="malformedHeaderRack")
    def malformed_header_rack(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed RAck header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_rack")

    @malformed_header_rack.setter
    def malformed_header_rack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_rack", value)

    @property
    @pulumi.getter(name="malformedHeaderRecordRoute")
    def malformed_header_record_route(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed Record-Route header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_record_route")

    @malformed_header_record_route.setter
    def malformed_header_record_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_record_route", value)

    @property
    @pulumi.getter(name="malformedHeaderRoute")
    def malformed_header_route(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed Route header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_route")

    @malformed_header_route.setter
    def malformed_header_route(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_route", value)

    @property
    @pulumi.getter(name="malformedHeaderRseq")
    def malformed_header_rseq(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed RSeq header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_rseq")

    @malformed_header_rseq.setter
    def malformed_header_rseq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_rseq", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpA")
    def malformed_header_sdp_a(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SDP a line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_sdp_a")

    @malformed_header_sdp_a.setter
    def malformed_header_sdp_a(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_a", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpB")
    def malformed_header_sdp_b(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SDP b line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_sdp_b")

    @malformed_header_sdp_b.setter
    def malformed_header_sdp_b(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_b", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpC")
    def malformed_header_sdp_c(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SDP c line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_sdp_c")

    @malformed_header_sdp_c.setter
    def malformed_header_sdp_c(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_c", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpI")
    def malformed_header_sdp_i(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SDP i line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_sdp_i")

    @malformed_header_sdp_i.setter
    def malformed_header_sdp_i(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_i", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpK")
    def malformed_header_sdp_k(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SDP k line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_sdp_k")

    @malformed_header_sdp_k.setter
    def malformed_header_sdp_k(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_k", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpM")
    def malformed_header_sdp_m(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SDP m line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_sdp_m")

    @malformed_header_sdp_m.setter
    def malformed_header_sdp_m(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_m", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpO")
    def malformed_header_sdp_o(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SDP o line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_sdp_o")

    @malformed_header_sdp_o.setter
    def malformed_header_sdp_o(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_o", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpR")
    def malformed_header_sdp_r(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SDP r line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_sdp_r")

    @malformed_header_sdp_r.setter
    def malformed_header_sdp_r(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_r", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpS")
    def malformed_header_sdp_s(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SDP s line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_sdp_s")

    @malformed_header_sdp_s.setter
    def malformed_header_sdp_s(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_s", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpT")
    def malformed_header_sdp_t(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SDP t line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_sdp_t")

    @malformed_header_sdp_t.setter
    def malformed_header_sdp_t(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_t", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpV")
    def malformed_header_sdp_v(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SDP v line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_sdp_v")

    @malformed_header_sdp_v.setter
    def malformed_header_sdp_v(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_v", value)

    @property
    @pulumi.getter(name="malformedHeaderSdpZ")
    def malformed_header_sdp_z(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed SDP z line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_sdp_z")

    @malformed_header_sdp_z.setter
    def malformed_header_sdp_z(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_sdp_z", value)

    @property
    @pulumi.getter(name="malformedHeaderTo")
    def malformed_header_to(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed To header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_to")

    @malformed_header_to.setter
    def malformed_header_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_to", value)

    @property
    @pulumi.getter(name="malformedHeaderVia")
    def malformed_header_via(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed VIA header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_header_via")

    @malformed_header_via.setter
    def malformed_header_via(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_header_via", value)

    @property
    @pulumi.getter(name="malformedRequestLine")
    def malformed_request_line(self) -> Optional[pulumi.Input[str]]:
        """
        Action for malformed request line. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "malformed_request_line")

    @malformed_request_line.setter
    def malformed_request_line(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed_request_line", value)

    @property
    @pulumi.getter(name="maxBodyLength")
    def max_body_length(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum SIP message body length (0 meaning no limit).
        """
        return pulumi.get(self, "max_body_length")

    @max_body_length.setter
    def max_body_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_body_length", value)

    @property
    @pulumi.getter(name="maxDialogs")
    def max_dialogs(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of concurrent calls/dialogs (per policy).
        """
        return pulumi.get(self, "max_dialogs")

    @max_dialogs.setter
    def max_dialogs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_dialogs", value)

    @property
    @pulumi.getter(name="maxIdleDialogs")
    def max_idle_dialogs(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number established but idle dialogs to retain (per policy).
        """
        return pulumi.get(self, "max_idle_dialogs")

    @max_idle_dialogs.setter
    def max_idle_dialogs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_idle_dialogs", value)

    @property
    @pulumi.getter(name="maxLineLength")
    def max_line_length(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum SIP header line length (78-4096).
        """
        return pulumi.get(self, "max_line_length")

    @max_line_length.setter
    def max_line_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_line_length", value)

    @property
    @pulumi.getter(name="messageRate")
    def message_rate(self) -> Optional[pulumi.Input[int]]:
        """
        MESSAGE request rate limit (per second, per policy).
        """
        return pulumi.get(self, "message_rate")

    @message_rate.setter
    def message_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "message_rate", value)

    @property
    @pulumi.getter(name="messageRateTrack")
    def message_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "message_rate_track")

    @message_rate_track.setter
    def message_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_rate_track", value)

    @property
    @pulumi.getter(name="natPortRange")
    def nat_port_range(self) -> Optional[pulumi.Input[str]]:
        """
        RTP NAT port range.
        """
        return pulumi.get(self, "nat_port_range")

    @nat_port_range.setter
    def nat_port_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_port_range", value)

    @property
    @pulumi.getter(name="natTrace")
    def nat_trace(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable preservation of original IP in SDP i line. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "nat_trace")

    @nat_trace.setter
    def nat_trace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_trace", value)

    @property
    @pulumi.getter(name="noSdpFixup")
    def no_sdp_fixup(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable no SDP fix-up. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "no_sdp_fixup")

    @no_sdp_fixup.setter
    def no_sdp_fixup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "no_sdp_fixup", value)

    @property
    @pulumi.getter(name="notifyRate")
    def notify_rate(self) -> Optional[pulumi.Input[int]]:
        """
        NOTIFY request rate limit (per second, per policy).
        """
        return pulumi.get(self, "notify_rate")

    @notify_rate.setter
    def notify_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "notify_rate", value)

    @property
    @pulumi.getter(name="notifyRateTrack")
    def notify_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "notify_rate_track")

    @notify_rate_track.setter
    def notify_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_rate_track", value)

    @property
    @pulumi.getter(name="openContactPinhole")
    def open_contact_pinhole(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable open pinhole for non-REGISTER Contact port. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "open_contact_pinhole")

    @open_contact_pinhole.setter
    def open_contact_pinhole(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_contact_pinhole", value)

    @property
    @pulumi.getter(name="openRecordRoutePinhole")
    def open_record_route_pinhole(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable open pinhole for Record-Route port. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "open_record_route_pinhole")

    @open_record_route_pinhole.setter
    def open_record_route_pinhole(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_record_route_pinhole", value)

    @property
    @pulumi.getter(name="openRegisterPinhole")
    def open_register_pinhole(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable open pinhole for REGISTER Contact port. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "open_register_pinhole")

    @open_register_pinhole.setter
    def open_register_pinhole(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_register_pinhole", value)

    @property
    @pulumi.getter(name="openViaPinhole")
    def open_via_pinhole(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable open pinhole for Via port. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "open_via_pinhole")

    @open_via_pinhole.setter
    def open_via_pinhole(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_via_pinhole", value)

    @property
    @pulumi.getter(name="optionsRate")
    def options_rate(self) -> Optional[pulumi.Input[int]]:
        """
        OPTIONS request rate limit (per second, per policy).
        """
        return pulumi.get(self, "options_rate")

    @options_rate.setter
    def options_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "options_rate", value)

    @property
    @pulumi.getter(name="optionsRateTrack")
    def options_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "options_rate_track")

    @options_rate_track.setter
    def options_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options_rate_track", value)

    @property
    @pulumi.getter(name="prackRate")
    def prack_rate(self) -> Optional[pulumi.Input[int]]:
        """
        PRACK request rate limit (per second, per policy).
        """
        return pulumi.get(self, "prack_rate")

    @prack_rate.setter
    def prack_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prack_rate", value)

    @property
    @pulumi.getter(name="prackRateTrack")
    def prack_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "prack_rate_track")

    @prack_rate_track.setter
    def prack_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prack_rate_track", value)

    @property
    @pulumi.getter(name="preserveOverride")
    def preserve_override(self) -> Optional[pulumi.Input[str]]:
        """
        Override i line to preserve original IPS (default: append). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "preserve_override")

    @preserve_override.setter
    def preserve_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preserve_override", value)

    @property
    @pulumi.getter(name="provisionalInviteExpiryTime")
    def provisional_invite_expiry_time(self) -> Optional[pulumi.Input[int]]:
        """
        Expiry time for provisional INVITE (10 - 3600 sec).
        """
        return pulumi.get(self, "provisional_invite_expiry_time")

    @provisional_invite_expiry_time.setter
    def provisional_invite_expiry_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "provisional_invite_expiry_time", value)

    @property
    @pulumi.getter(name="publishRate")
    def publish_rate(self) -> Optional[pulumi.Input[int]]:
        """
        PUBLISH request rate limit (per second, per policy).
        """
        return pulumi.get(self, "publish_rate")

    @publish_rate.setter
    def publish_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "publish_rate", value)

    @property
    @pulumi.getter(name="publishRateTrack")
    def publish_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "publish_rate_track")

    @publish_rate_track.setter
    def publish_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "publish_rate_track", value)

    @property
    @pulumi.getter(name="referRate")
    def refer_rate(self) -> Optional[pulumi.Input[int]]:
        """
        REFER request rate limit (per second, per policy).
        """
        return pulumi.get(self, "refer_rate")

    @refer_rate.setter
    def refer_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "refer_rate", value)

    @property
    @pulumi.getter(name="referRateTrack")
    def refer_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "refer_rate_track")

    @refer_rate_track.setter
    def refer_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refer_rate_track", value)

    @property
    @pulumi.getter(name="registerContactTrace")
    def register_contact_trace(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable trace original IP/port within the contact header of REGISTER requests. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "register_contact_trace")

    @register_contact_trace.setter
    def register_contact_trace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "register_contact_trace", value)

    @property
    @pulumi.getter(name="registerRate")
    def register_rate(self) -> Optional[pulumi.Input[int]]:
        """
        REGISTER request rate limit (per second, per policy).
        """
        return pulumi.get(self, "register_rate")

    @register_rate.setter
    def register_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "register_rate", value)

    @property
    @pulumi.getter(name="registerRateTrack")
    def register_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "register_rate_track")

    @register_rate_track.setter
    def register_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "register_rate_track", value)

    @property
    @pulumi.getter(name="rfc2543Branch")
    def rfc2543_branch(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable support via branch compliant with RFC 2543. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "rfc2543_branch")

    @rfc2543_branch.setter
    def rfc2543_branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rfc2543_branch", value)

    @property
    @pulumi.getter
    def rtp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable create pinholes for RTP traffic to traverse firewall. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "rtp")

    @rtp.setter
    def rtp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rtp", value)

    @property
    @pulumi.getter(name="sslAlgorithm")
    def ssl_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Relative strength of encryption algorithms accepted in negotiation. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "ssl_algorithm")

    @ssl_algorithm.setter
    def ssl_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_algorithm", value)

    @property
    @pulumi.getter(name="sslAuthClient")
    def ssl_auth_client(self) -> Optional[pulumi.Input[str]]:
        """
        Require a client certificate and authenticate it with the peer/peergrp.
        """
        return pulumi.get(self, "ssl_auth_client")

    @ssl_auth_client.setter
    def ssl_auth_client(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_auth_client", value)

    @property
    @pulumi.getter(name="sslAuthServer")
    def ssl_auth_server(self) -> Optional[pulumi.Input[str]]:
        """
        Authenticate the server's certificate with the peer/peergrp.
        """
        return pulumi.get(self, "ssl_auth_server")

    @ssl_auth_server.setter
    def ssl_auth_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_auth_server", value)

    @property
    @pulumi.getter(name="sslClientCertificate")
    def ssl_client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Name of Certificate to offer to server if requested.
        """
        return pulumi.get(self, "ssl_client_certificate")

    @ssl_client_certificate.setter
    def ssl_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_client_certificate", value)

    @property
    @pulumi.getter(name="sslClientRenegotiation")
    def ssl_client_renegotiation(self) -> Optional[pulumi.Input[str]]:
        """
        Allow/block client renegotiation by server. Valid values: `allow`, `deny`, `secure`.
        """
        return pulumi.get(self, "ssl_client_renegotiation")

    @ssl_client_renegotiation.setter
    def ssl_client_renegotiation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_client_renegotiation", value)

    @property
    @pulumi.getter(name="sslMaxVersion")
    def ssl_max_version(self) -> Optional[pulumi.Input[str]]:
        """
        Highest SSL/TLS version to negotiate.
        """
        return pulumi.get(self, "ssl_max_version")

    @ssl_max_version.setter
    def ssl_max_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_max_version", value)

    @property
    @pulumi.getter(name="sslMinVersion")
    def ssl_min_version(self) -> Optional[pulumi.Input[str]]:
        """
        Lowest SSL/TLS version to negotiate.
        """
        return pulumi.get(self, "ssl_min_version")

    @ssl_min_version.setter
    def ssl_min_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_min_version", value)

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional[pulumi.Input[str]]:
        """
        SSL/TLS mode for encryption & decryption of traffic. Valid values: `off`, `full`.
        """
        return pulumi.get(self, "ssl_mode")

    @ssl_mode.setter
    def ssl_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_mode", value)

    @property
    @pulumi.getter(name="sslPfs")
    def ssl_pfs(self) -> Optional[pulumi.Input[str]]:
        """
        SSL Perfect Forward Secrecy. Valid values: `require`, `deny`, `allow`.
        """
        return pulumi.get(self, "ssl_pfs")

    @ssl_pfs.setter
    def ssl_pfs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_pfs", value)

    @property
    @pulumi.getter(name="sslSendEmptyFrags")
    def ssl_send_empty_frags(self) -> Optional[pulumi.Input[str]]:
        """
        Send empty fragments to avoid attack on CBC IV (SSL 3.0 & TLS 1.0 only). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl_send_empty_frags")

    @ssl_send_empty_frags.setter
    def ssl_send_empty_frags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_send_empty_frags", value)

    @property
    @pulumi.getter(name="sslServerCertificate")
    def ssl_server_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Name of Certificate return to the client in every SSL connection.
        """
        return pulumi.get(self, "ssl_server_certificate")

    @ssl_server_certificate.setter
    def ssl_server_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_server_certificate", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable MSRP. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="strictRegister")
    def strict_register(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable only allow the registrar to connect. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "strict_register")

    @strict_register.setter
    def strict_register(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strict_register", value)

    @property
    @pulumi.getter(name="subscribeRate")
    def subscribe_rate(self) -> Optional[pulumi.Input[int]]:
        """
        SUBSCRIBE request rate limit (per second, per policy).
        """
        return pulumi.get(self, "subscribe_rate")

    @subscribe_rate.setter
    def subscribe_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "subscribe_rate", value)

    @property
    @pulumi.getter(name="subscribeRateTrack")
    def subscribe_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "subscribe_rate_track")

    @subscribe_rate_track.setter
    def subscribe_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscribe_rate_track", value)

    @property
    @pulumi.getter(name="unknownHeader")
    def unknown_header(self) -> Optional[pulumi.Input[str]]:
        """
        Action for unknown SIP header. Valid values: `discard`, `pass`, `respond`.
        """
        return pulumi.get(self, "unknown_header")

    @unknown_header.setter
    def unknown_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_header", value)

    @property
    @pulumi.getter(name="updateRate")
    def update_rate(self) -> Optional[pulumi.Input[int]]:
        """
        UPDATE request rate limit (per second, per policy).
        """
        return pulumi.get(self, "update_rate")

    @update_rate.setter
    def update_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_rate", value)

    @property
    @pulumi.getter(name="updateRateTrack")
    def update_rate_track(self) -> Optional[pulumi.Input[str]]:
        """
        Track the packet protocol field. Valid values: `none`, `src-ip`, `dest-ip`.
        """
        return pulumi.get(self, "update_rate_track")

    @update_rate_track.setter
    def update_rate_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_rate_track", value)


@pulumi.input_type
class VpnCertificateSettingCrlVerificationArgs:
    def __init__(__self__, *,
                 chain_crl_absence: Optional[pulumi.Input[str]] = None,
                 expiry: Optional[pulumi.Input[str]] = None,
                 leaf_crl_absence: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] chain_crl_absence: CRL verification option when CRL of any certificate in chain is absent (default = ignore). Valid values: `ignore`, `revoke`.
        :param pulumi.Input[str] expiry: CRL verification option when CRL is expired (default = ignore). Valid values: `ignore`, `revoke`.
        :param pulumi.Input[str] leaf_crl_absence: CRL verification option when leaf CRL is absent (default = ignore). Valid values: `ignore`, `revoke`.
        """
        if chain_crl_absence is not None:
            pulumi.set(__self__, "chain_crl_absence", chain_crl_absence)
        if expiry is not None:
            pulumi.set(__self__, "expiry", expiry)
        if leaf_crl_absence is not None:
            pulumi.set(__self__, "leaf_crl_absence", leaf_crl_absence)

    @property
    @pulumi.getter(name="chainCrlAbsence")
    def chain_crl_absence(self) -> Optional[pulumi.Input[str]]:
        """
        CRL verification option when CRL of any certificate in chain is absent (default = ignore). Valid values: `ignore`, `revoke`.
        """
        return pulumi.get(self, "chain_crl_absence")

    @chain_crl_absence.setter
    def chain_crl_absence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chain_crl_absence", value)

    @property
    @pulumi.getter
    def expiry(self) -> Optional[pulumi.Input[str]]:
        """
        CRL verification option when CRL is expired (default = ignore). Valid values: `ignore`, `revoke`.
        """
        return pulumi.get(self, "expiry")

    @expiry.setter
    def expiry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiry", value)

    @property
    @pulumi.getter(name="leafCrlAbsence")
    def leaf_crl_absence(self) -> Optional[pulumi.Input[str]]:
        """
        CRL verification option when leaf CRL is absent (default = ignore). Valid values: `ignore`, `revoke`.
        """
        return pulumi.get(self, "leaf_crl_absence")

    @leaf_crl_absence.setter
    def leaf_crl_absence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "leaf_crl_absence", value)


@pulumi.input_type
class VpnIpsecConcentratorMemberArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Member name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Member name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnIpsecFecMappingArgs:
    def __init__(__self__, *,
                 bandwidth_bi_threshold: Optional[pulumi.Input[int]] = None,
                 bandwidth_down_threshold: Optional[pulumi.Input[int]] = None,
                 bandwidth_up_threshold: Optional[pulumi.Input[int]] = None,
                 base: Optional[pulumi.Input[int]] = None,
                 latency_threshold: Optional[pulumi.Input[int]] = None,
                 packet_loss_threshold: Optional[pulumi.Input[int]] = None,
                 redundant: Optional[pulumi.Input[int]] = None,
                 seqno: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] bandwidth_bi_threshold: Apply FEC parameters when available bi-bandwidth is >= threshold (kbps, 0 means no threshold).
        :param pulumi.Input[int] bandwidth_down_threshold: Apply FEC parameters when available down bandwidth is >= threshold (kbps, 0 means no threshold).
        :param pulumi.Input[int] bandwidth_up_threshold: Apply FEC parameters when available up bandwidth is >= threshold (kbps, 0 means no threshold).
        :param pulumi.Input[int] base: Number of base FEC packets (1 - 20).
        :param pulumi.Input[int] latency_threshold: Apply FEC parameters when latency is <= threshold (0 means no threshold).
        :param pulumi.Input[int] packet_loss_threshold: Apply FEC parameters when packet loss is >= threshold (0 - 100, 0 means no threshold).
        :param pulumi.Input[int] redundant: Number of redundant FEC packets (1 - 5).
        :param pulumi.Input[int] seqno: Sequence number (1 - 64).
        """
        if bandwidth_bi_threshold is not None:
            pulumi.set(__self__, "bandwidth_bi_threshold", bandwidth_bi_threshold)
        if bandwidth_down_threshold is not None:
            pulumi.set(__self__, "bandwidth_down_threshold", bandwidth_down_threshold)
        if bandwidth_up_threshold is not None:
            pulumi.set(__self__, "bandwidth_up_threshold", bandwidth_up_threshold)
        if base is not None:
            pulumi.set(__self__, "base", base)
        if latency_threshold is not None:
            pulumi.set(__self__, "latency_threshold", latency_threshold)
        if packet_loss_threshold is not None:
            pulumi.set(__self__, "packet_loss_threshold", packet_loss_threshold)
        if redundant is not None:
            pulumi.set(__self__, "redundant", redundant)
        if seqno is not None:
            pulumi.set(__self__, "seqno", seqno)

    @property
    @pulumi.getter(name="bandwidthBiThreshold")
    def bandwidth_bi_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Apply FEC parameters when available bi-bandwidth is >= threshold (kbps, 0 means no threshold).
        """
        return pulumi.get(self, "bandwidth_bi_threshold")

    @bandwidth_bi_threshold.setter
    def bandwidth_bi_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_bi_threshold", value)

    @property
    @pulumi.getter(name="bandwidthDownThreshold")
    def bandwidth_down_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Apply FEC parameters when available down bandwidth is >= threshold (kbps, 0 means no threshold).
        """
        return pulumi.get(self, "bandwidth_down_threshold")

    @bandwidth_down_threshold.setter
    def bandwidth_down_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_down_threshold", value)

    @property
    @pulumi.getter(name="bandwidthUpThreshold")
    def bandwidth_up_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Apply FEC parameters when available up bandwidth is >= threshold (kbps, 0 means no threshold).
        """
        return pulumi.get(self, "bandwidth_up_threshold")

    @bandwidth_up_threshold.setter
    def bandwidth_up_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_up_threshold", value)

    @property
    @pulumi.getter
    def base(self) -> Optional[pulumi.Input[int]]:
        """
        Number of base FEC packets (1 - 20).
        """
        return pulumi.get(self, "base")

    @base.setter
    def base(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "base", value)

    @property
    @pulumi.getter(name="latencyThreshold")
    def latency_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Apply FEC parameters when latency is <= threshold (0 means no threshold).
        """
        return pulumi.get(self, "latency_threshold")

    @latency_threshold.setter
    def latency_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latency_threshold", value)

    @property
    @pulumi.getter(name="packetLossThreshold")
    def packet_loss_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Apply FEC parameters when packet loss is >= threshold (0 - 100, 0 means no threshold).
        """
        return pulumi.get(self, "packet_loss_threshold")

    @packet_loss_threshold.setter
    def packet_loss_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packet_loss_threshold", value)

    @property
    @pulumi.getter
    def redundant(self) -> Optional[pulumi.Input[int]]:
        """
        Number of redundant FEC packets (1 - 5).
        """
        return pulumi.get(self, "redundant")

    @redundant.setter
    def redundant(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "redundant", value)

    @property
    @pulumi.getter
    def seqno(self) -> Optional[pulumi.Input[int]]:
        """
        Sequence number (1 - 64).
        """
        return pulumi.get(self, "seqno")

    @seqno.setter
    def seqno(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seqno", value)


@pulumi.input_type
class VpnIpsecPhase1BackupGatewayArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] address: Address of backup gateway.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Address of backup gateway.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)


@pulumi.input_type
class VpnIpsecPhase1CertificateArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Certificate name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnIpsecPhase1InterfaceBackupGatewayArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] address: Address of backup gateway.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Address of backup gateway.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)


@pulumi.input_type
class VpnIpsecPhase1InterfaceCertificateArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Certificate name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnIpsecPhase1InterfaceIpv4ExcludeRangeArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end_ip: End of IPv6 exclusive range.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] start_ip: Start of IPv6 exclusive range.
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        End of IPv6 exclusive range.
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Start of IPv6 exclusive range.
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class VpnIpsecPhase1InterfaceIpv6ExcludeRangeArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end_ip: End of IPv6 exclusive range.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] start_ip: Start of IPv6 exclusive range.
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        End of IPv6 exclusive range.
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Start of IPv6 exclusive range.
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class VpnIpsecPhase1Ipv4ExcludeRangeArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end_ip: End of IPv6 exclusive range.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] start_ip: Start of IPv6 exclusive range.
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        End of IPv6 exclusive range.
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Start of IPv6 exclusive range.
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class VpnIpsecPhase1Ipv6ExcludeRangeArgs:
    def __init__(__self__, *,
                 end_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 start_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end_ip: End of IPv6 exclusive range.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] start_ip: Start of IPv6 exclusive range.
        """
        if end_ip is not None:
            pulumi.set(__self__, "end_ip", end_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if start_ip is not None:
            pulumi.set(__self__, "start_ip", start_ip)

    @property
    @pulumi.getter(name="endIp")
    def end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        End of IPv6 exclusive range.
        """
        return pulumi.get(self, "end_ip")

    @end_ip.setter
    def end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startIp")
    def start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Start of IPv6 exclusive range.
        """
        return pulumi.get(self, "start_ip")

    @start_ip.setter
    def start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_ip", value)


@pulumi.input_type
class VpnOcvpnForticlientAccessArgs:
    def __init__(__self__, *,
                 auth_groups: Optional[pulumi.Input[Sequence[pulumi.Input['VpnOcvpnForticlientAccessAuthGroupArgs']]]] = None,
                 psksecret: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VpnOcvpnForticlientAccessAuthGroupArgs']]] auth_groups: FortiClient user authentication groups. The structure of `auth_groups` block is documented below.
        :param pulumi.Input[str] psksecret: Pre-shared secret for FortiClient PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
        :param pulumi.Input[str] status: Enable/disable FortiClient to access OCVPN networks. Valid values: `enable`, `disable`.
        """
        if auth_groups is not None:
            pulumi.set(__self__, "auth_groups", auth_groups)
        if psksecret is not None:
            pulumi.set(__self__, "psksecret", psksecret)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="authGroups")
    def auth_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnOcvpnForticlientAccessAuthGroupArgs']]]]:
        """
        FortiClient user authentication groups. The structure of `auth_groups` block is documented below.
        """
        return pulumi.get(self, "auth_groups")

    @auth_groups.setter
    def auth_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnOcvpnForticlientAccessAuthGroupArgs']]]]):
        pulumi.set(self, "auth_groups", value)

    @property
    @pulumi.getter
    def psksecret(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-shared secret for FortiClient PSK authentication (ASCII string or hexadecimal encoded with a leading 0x).
        """
        return pulumi.get(self, "psksecret")

    @psksecret.setter
    def psksecret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "psksecret", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiClient to access OCVPN networks. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class VpnOcvpnForticlientAccessAuthGroupArgs:
    def __init__(__self__, *,
                 auth_group: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 overlays: Optional[pulumi.Input[Sequence[pulumi.Input['VpnOcvpnForticlientAccessAuthGroupOverlayArgs']]]] = None):
        """
        :param pulumi.Input[str] auth_group: Authentication user group for FortiClient access.
        :param pulumi.Input[str] name: Group name.
        :param pulumi.Input[Sequence[pulumi.Input['VpnOcvpnForticlientAccessAuthGroupOverlayArgs']]] overlays: OCVPN overlays to allow access to. The structure of `overlays` block is documented below.
        """
        if auth_group is not None:
            pulumi.set(__self__, "auth_group", auth_group)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if overlays is not None:
            pulumi.set(__self__, "overlays", overlays)

    @property
    @pulumi.getter(name="authGroup")
    def auth_group(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication user group for FortiClient access.
        """
        return pulumi.get(self, "auth_group")

    @auth_group.setter
    def auth_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_group", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def overlays(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnOcvpnForticlientAccessAuthGroupOverlayArgs']]]]:
        """
        OCVPN overlays to allow access to. The structure of `overlays` block is documented below.
        """
        return pulumi.get(self, "overlays")

    @overlays.setter
    def overlays(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnOcvpnForticlientAccessAuthGroupOverlayArgs']]]]):
        pulumi.set(self, "overlays", value)


@pulumi.input_type
class VpnOcvpnForticlientAccessAuthGroupOverlayArgs:
    def __init__(__self__, *,
                 overlay_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] overlay_name: Overlay name.
        """
        if overlay_name is not None:
            pulumi.set(__self__, "overlay_name", overlay_name)

    @property
    @pulumi.getter(name="overlayName")
    def overlay_name(self) -> Optional[pulumi.Input[str]]:
        """
        Overlay name.
        """
        return pulumi.get(self, "overlay_name")

    @overlay_name.setter
    def overlay_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overlay_name", value)


@pulumi.input_type
class VpnOcvpnOverlayArgs:
    def __init__(__self__, *,
                 assign_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 inter_overlay: Optional[pulumi.Input[str]] = None,
                 ipv4_end_ip: Optional[pulumi.Input[str]] = None,
                 ipv4_start_ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 overlay_name: Optional[pulumi.Input[str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input['VpnOcvpnOverlaySubnetArgs']]]] = None):
        """
        :param pulumi.Input[str] assign_ip: Enable/disable client address assignment. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] inter_overlay: Allow or deny traffic from other overlays. Valid values: `allow`, `deny`.
        :param pulumi.Input[str] ipv4_end_ip: End of client IPv4 range.
        :param pulumi.Input[str] ipv4_start_ip: Start of client IPv4 range.
        :param pulumi.Input[str] name: Group name.
        :param pulumi.Input[str] overlay_name: Overlay name.
        :param pulumi.Input[Sequence[pulumi.Input['VpnOcvpnOverlaySubnetArgs']]] subnets: Internal subnets to register with OCVPN service. The structure of `subnets` block is documented below.
        """
        if assign_ip is not None:
            pulumi.set(__self__, "assign_ip", assign_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if inter_overlay is not None:
            pulumi.set(__self__, "inter_overlay", inter_overlay)
        if ipv4_end_ip is not None:
            pulumi.set(__self__, "ipv4_end_ip", ipv4_end_ip)
        if ipv4_start_ip is not None:
            pulumi.set(__self__, "ipv4_start_ip", ipv4_start_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if overlay_name is not None:
            pulumi.set(__self__, "overlay_name", overlay_name)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="assignIp")
    def assign_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable client address assignment. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "assign_ip")

    @assign_ip.setter
    def assign_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assign_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="interOverlay")
    def inter_overlay(self) -> Optional[pulumi.Input[str]]:
        """
        Allow or deny traffic from other overlays. Valid values: `allow`, `deny`.
        """
        return pulumi.get(self, "inter_overlay")

    @inter_overlay.setter
    def inter_overlay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inter_overlay", value)

    @property
    @pulumi.getter(name="ipv4EndIp")
    def ipv4_end_ip(self) -> Optional[pulumi.Input[str]]:
        """
        End of client IPv4 range.
        """
        return pulumi.get(self, "ipv4_end_ip")

    @ipv4_end_ip.setter
    def ipv4_end_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_end_ip", value)

    @property
    @pulumi.getter(name="ipv4StartIp")
    def ipv4_start_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Start of client IPv4 range.
        """
        return pulumi.get(self, "ipv4_start_ip")

    @ipv4_start_ip.setter
    def ipv4_start_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_start_ip", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overlayName")
    def overlay_name(self) -> Optional[pulumi.Input[str]]:
        """
        Overlay name.
        """
        return pulumi.get(self, "overlay_name")

    @overlay_name.setter
    def overlay_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overlay_name", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnOcvpnOverlaySubnetArgs']]]]:
        """
        Internal subnets to register with OCVPN service. The structure of `subnets` block is documented below.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnOcvpnOverlaySubnetArgs']]]]):
        pulumi.set(self, "subnets", value)


@pulumi.input_type
class VpnOcvpnOverlaySubnetArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 subnet: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] interface: LAN interface.
        :param pulumi.Input[str] subnet: IPv4 address and subnet mask.
        :param pulumi.Input[str] type: Subnet type. Valid values: `subnet`, `interface`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        LAN interface.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def subnet(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address and subnet mask.
        """
        return pulumi.get(self, "subnet")

    @subnet.setter
    def subnet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet type. Valid values: `subnet`, `interface`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class VpnOcvpnWanInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslSettingsAuthenticationRuleArgs:
    def __init__(__self__, *,
                 auth: Optional[pulumi.Input[str]] = None,
                 cipher: Optional[pulumi.Input[str]] = None,
                 client_cert: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleGroupArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 portal: Optional[pulumi.Input[str]] = None,
                 realm: Optional[pulumi.Input[str]] = None,
                 source_address6_negate: Optional[pulumi.Input[str]] = None,
                 source_address6s: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleSourceAddress6Args']]]] = None,
                 source_address_negate: Optional[pulumi.Input[str]] = None,
                 source_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleSourceAddressArgs']]]] = None,
                 source_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleSourceInterfaceArgs']]]] = None,
                 user_peer: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleUserArgs']]]] = None):
        """
        :param pulumi.Input[str] auth: SSL VPN authentication method restriction.
        :param pulumi.Input[str] cipher: SSL VPN cipher strength. Valid values: `any`, `high`, `medium`.
        :param pulumi.Input[str] client_cert: Enable/disable SSL VPN client certificate restrictive. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleGroupArgs']]] groups: User groups. The structure of `groups` block is documented below.
        :param pulumi.Input[int] id: ID (0 - 4294967295).
        :param pulumi.Input[str] portal: SSL VPN portal.
        :param pulumi.Input[str] realm: SSL VPN realm.
        :param pulumi.Input[str] source_address6_negate: Enable/disable negated source IPv6 address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleSourceAddress6Args']]] source_address6s: IPv6 source address of incoming traffic. The structure of `source_address6` block is documented below.
        :param pulumi.Input[str] source_address_negate: Enable/disable negated source address match. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleSourceAddressArgs']]] source_addresses: Source address of incoming traffic. The structure of `source_address` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleSourceInterfaceArgs']]] source_interfaces: SSL VPN source interface of incoming traffic. The structure of `source_interface` block is documented below.
        :param pulumi.Input[str] user_peer: Name of user peer.
        :param pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleUserArgs']]] users: User name. The structure of `users` block is documented below.
        """
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if cipher is not None:
            pulumi.set(__self__, "cipher", cipher)
        if client_cert is not None:
            pulumi.set(__self__, "client_cert", client_cert)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if portal is not None:
            pulumi.set(__self__, "portal", portal)
        if realm is not None:
            pulumi.set(__self__, "realm", realm)
        if source_address6_negate is not None:
            pulumi.set(__self__, "source_address6_negate", source_address6_negate)
        if source_address6s is not None:
            pulumi.set(__self__, "source_address6s", source_address6s)
        if source_address_negate is not None:
            pulumi.set(__self__, "source_address_negate", source_address_negate)
        if source_addresses is not None:
            pulumi.set(__self__, "source_addresses", source_addresses)
        if source_interfaces is not None:
            pulumi.set(__self__, "source_interfaces", source_interfaces)
        if user_peer is not None:
            pulumi.set(__self__, "user_peer", user_peer)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input[str]]:
        """
        SSL VPN authentication method restriction.
        """
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter
    def cipher(self) -> Optional[pulumi.Input[str]]:
        """
        SSL VPN cipher strength. Valid values: `any`, `high`, `medium`.
        """
        return pulumi.get(self, "cipher")

    @cipher.setter
    def cipher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cipher", value)

    @property
    @pulumi.getter(name="clientCert")
    def client_cert(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSL VPN client certificate restrictive. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "client_cert")

    @client_cert.setter
    def client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_cert", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleGroupArgs']]]]:
        """
        User groups. The structure of `groups` block is documented below.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID (0 - 4294967295).
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def portal(self) -> Optional[pulumi.Input[str]]:
        """
        SSL VPN portal.
        """
        return pulumi.get(self, "portal")

    @portal.setter
    def portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portal", value)

    @property
    @pulumi.getter
    def realm(self) -> Optional[pulumi.Input[str]]:
        """
        SSL VPN realm.
        """
        return pulumi.get(self, "realm")

    @realm.setter
    def realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "realm", value)

    @property
    @pulumi.getter(name="sourceAddress6Negate")
    def source_address6_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable negated source IPv6 address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "source_address6_negate")

    @source_address6_negate.setter
    def source_address6_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_address6_negate", value)

    @property
    @pulumi.getter(name="sourceAddress6s")
    def source_address6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleSourceAddress6Args']]]]:
        """
        IPv6 source address of incoming traffic. The structure of `source_address6` block is documented below.
        """
        return pulumi.get(self, "source_address6s")

    @source_address6s.setter
    def source_address6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleSourceAddress6Args']]]]):
        pulumi.set(self, "source_address6s", value)

    @property
    @pulumi.getter(name="sourceAddressNegate")
    def source_address_negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable negated source address match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "source_address_negate")

    @source_address_negate.setter
    def source_address_negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_address_negate", value)

    @property
    @pulumi.getter(name="sourceAddresses")
    def source_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleSourceAddressArgs']]]]:
        """
        Source address of incoming traffic. The structure of `source_address` block is documented below.
        """
        return pulumi.get(self, "source_addresses")

    @source_addresses.setter
    def source_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleSourceAddressArgs']]]]):
        pulumi.set(self, "source_addresses", value)

    @property
    @pulumi.getter(name="sourceInterfaces")
    def source_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleSourceInterfaceArgs']]]]:
        """
        SSL VPN source interface of incoming traffic. The structure of `source_interface` block is documented below.
        """
        return pulumi.get(self, "source_interfaces")

    @source_interfaces.setter
    def source_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleSourceInterfaceArgs']]]]):
        pulumi.set(self, "source_interfaces", value)

    @property
    @pulumi.getter(name="userPeer")
    def user_peer(self) -> Optional[pulumi.Input[str]]:
        """
        Name of user peer.
        """
        return pulumi.get(self, "user_peer")

    @user_peer.setter
    def user_peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_peer", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleUserArgs']]]]:
        """
        User name. The structure of `users` block is documented below.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslSettingsAuthenticationRuleUserArgs']]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class VpnSslSettingsAuthenticationRuleGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslSettingsAuthenticationRuleSourceAddress6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslSettingsAuthenticationRuleSourceAddressArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslSettingsAuthenticationRuleSourceInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslSettingsAuthenticationRuleUserArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslSettingsSourceAddress6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslSettingsSourceAddressArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslSettingsSourceInterfaceArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslSettingsTunnelIpPoolArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslSettingsTunnelIpv6PoolArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Group name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslWebHostCheckSoftwareCheckItemListArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 md5s: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebHostCheckSoftwareCheckItemListMd5Args']]]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `require`, `deny`.
        :param pulumi.Input[int] id: Hex string of MD5 checksum.
        :param pulumi.Input[Sequence[pulumi.Input['VpnSslWebHostCheckSoftwareCheckItemListMd5Args']]] md5s: MD5 checksum. The structure of `md5s` block is documented below.
        :param pulumi.Input[str] target: Target.
        :param pulumi.Input[str] type: Type. Valid values: `file`, `registry`, `process`.
        :param pulumi.Input[str] version: Version.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if md5s is not None:
            pulumi.set(__self__, "md5s", md5s)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `require`, `deny`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Hex string of MD5 checksum.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def md5s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebHostCheckSoftwareCheckItemListMd5Args']]]]:
        """
        MD5 checksum. The structure of `md5s` block is documented below.
        """
        return pulumi.get(self, "md5s")

    @md5s.setter
    def md5s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebHostCheckSoftwareCheckItemListMd5Args']]]]):
        pulumi.set(self, "md5s", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        """
        Target.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type. Valid values: `file`, `registry`, `process`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class VpnSslWebHostCheckSoftwareCheckItemListMd5Args:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Hex string of MD5 checksum.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Hex string of MD5 checksum.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class VpnSslWebPortalBookmarkGroupArgs:
    def __init__(__self__, *,
                 bookmarks: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalBookmarkGroupBookmarkArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalBookmarkGroupBookmarkArgs']]] bookmarks: Bookmark table. The structure of `bookmarks` block is documented below.
        :param pulumi.Input[str] name: Name.
        """
        if bookmarks is not None:
            pulumi.set(__self__, "bookmarks", bookmarks)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def bookmarks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalBookmarkGroupBookmarkArgs']]]]:
        """
        Bookmark table. The structure of `bookmarks` block is documented below.
        """
        return pulumi.get(self, "bookmarks")

    @bookmarks.setter
    def bookmarks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalBookmarkGroupBookmarkArgs']]]]):
        pulumi.set(self, "bookmarks", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslWebPortalBookmarkGroupBookmarkArgs:
    def __init__(__self__, *,
                 additional_params: Optional[pulumi.Input[str]] = None,
                 apptype: Optional[pulumi.Input[str]] = None,
                 color_depth: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 folder: Optional[pulumi.Input[str]] = None,
                 form_datas: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalBookmarkGroupBookmarkFormDataArgs']]]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 keyboard_layout: Optional[pulumi.Input[str]] = None,
                 listening_port: Optional[pulumi.Input[int]] = None,
                 load_balancing_info: Optional[pulumi.Input[str]] = None,
                 logon_password: Optional[pulumi.Input[str]] = None,
                 logon_user: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 preconnection_blob: Optional[pulumi.Input[str]] = None,
                 preconnection_id: Optional[pulumi.Input[int]] = None,
                 remote_port: Optional[pulumi.Input[int]] = None,
                 restricted_admin: Optional[pulumi.Input[str]] = None,
                 security: Optional[pulumi.Input[str]] = None,
                 send_preconnection_id: Optional[pulumi.Input[str]] = None,
                 server_layout: Optional[pulumi.Input[str]] = None,
                 show_status_window: Optional[pulumi.Input[str]] = None,
                 sso: Optional[pulumi.Input[str]] = None,
                 sso_credential: Optional[pulumi.Input[str]] = None,
                 sso_credential_sent_once: Optional[pulumi.Input[str]] = None,
                 sso_password: Optional[pulumi.Input[str]] = None,
                 sso_username: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] additional_params: Additional parameters.
        :param pulumi.Input[str] apptype: Application type.
        :param pulumi.Input[str] color_depth: Color depth per pixel. Valid values: `32`, `16`, `8`.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] domain: Login domain.
        :param pulumi.Input[str] folder: Network shared file folder parameter.
        :param pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalBookmarkGroupBookmarkFormDataArgs']]] form_datas: Form data. The structure of `form_data` block is documented below.
        :param pulumi.Input[int] height: Screen height (range from 480 - 65535, default = 768).
        :param pulumi.Input[str] host: Host name/IP parameter.
        :param pulumi.Input[str] keyboard_layout: Keyboard layout. Valid values: `ar-101`, `ar-102`, `ar-102-azerty`, `can-mul`, `cz`, `cz-qwerty`, `cz-pr`, `da`, `nl`, `de`, `de-ch`, `de-ibm`, `en-uk`, `en-uk-ext`, `en-us`, `en-us-dvorak`, `es`, `es-var`, `fi`, `fi-sami`, `fr`, `fr-ca`, `fr-ch`, `fr-be`, `hr`, `hu`, `hu-101`, `it`, `it-142`, `ja`, `ko`, `lt`, `lt-ibm`, `lt-std`, `lav-std`, `lav-leg`, `mk`, `mk-std`, `no`, `no-sami`, `pol-214`, `pol-pr`, `pt`, `pt-br`, `pt-br-abnt2`, `ru`, `ru-mne`, `ru-t`, `sl`, `sv`, `sv-sami`, `tuk`, `tur-f`, `tur-q`, `zh-sym-sg-us`, `zh-sym-us`, `zh-tr-hk`, `zh-tr-mo`, `zh-tr-us`.
        :param pulumi.Input[int] listening_port: Listening port (0 - 65535).
        :param pulumi.Input[str] load_balancing_info: The load balancing information or cookie which should be provided to the connection broker.
        :param pulumi.Input[str] logon_password: Logon password.
        :param pulumi.Input[str] logon_user: Logon user.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[int] port: Remote port.
        :param pulumi.Input[str] preconnection_blob: An arbitrary string which identifies the RDP source.
        :param pulumi.Input[int] preconnection_id: The numeric ID of the RDP source (0-2147483648).
        :param pulumi.Input[int] remote_port: Remote port (0 - 65535).
        :param pulumi.Input[str] restricted_admin: Enable/disable restricted admin mode for RDP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] security: Security mode for RDP connection. Valid values: `rdp`, `nla`, `tls`, `any`.
        :param pulumi.Input[str] send_preconnection_id: Enable/disable sending of preconnection ID. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] server_layout: Server side keyboard layout.
        :param pulumi.Input[str] show_status_window: Enable/disable showing of status window. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sso: Single Sign-On. Valid values: `disable`, `static`, `auto`.
        :param pulumi.Input[str] sso_credential: Single sign-on credentials. Valid values: `sslvpn-login`, `alternative`.
        :param pulumi.Input[str] sso_credential_sent_once: Single sign-on credentials are only sent once to remote server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sso_password: SSO password.
        :param pulumi.Input[str] sso_username: SSO user name.
        :param pulumi.Input[str] url: URL parameter.
        :param pulumi.Input[int] width: Screen width (range from 640 - 65535, default = 1024).
        """
        if additional_params is not None:
            pulumi.set(__self__, "additional_params", additional_params)
        if apptype is not None:
            pulumi.set(__self__, "apptype", apptype)
        if color_depth is not None:
            pulumi.set(__self__, "color_depth", color_depth)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if form_datas is not None:
            pulumi.set(__self__, "form_datas", form_datas)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if keyboard_layout is not None:
            pulumi.set(__self__, "keyboard_layout", keyboard_layout)
        if listening_port is not None:
            pulumi.set(__self__, "listening_port", listening_port)
        if load_balancing_info is not None:
            pulumi.set(__self__, "load_balancing_info", load_balancing_info)
        if logon_password is not None:
            pulumi.set(__self__, "logon_password", logon_password)
        if logon_user is not None:
            pulumi.set(__self__, "logon_user", logon_user)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if preconnection_blob is not None:
            pulumi.set(__self__, "preconnection_blob", preconnection_blob)
        if preconnection_id is not None:
            pulumi.set(__self__, "preconnection_id", preconnection_id)
        if remote_port is not None:
            pulumi.set(__self__, "remote_port", remote_port)
        if restricted_admin is not None:
            pulumi.set(__self__, "restricted_admin", restricted_admin)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if send_preconnection_id is not None:
            pulumi.set(__self__, "send_preconnection_id", send_preconnection_id)
        if server_layout is not None:
            pulumi.set(__self__, "server_layout", server_layout)
        if show_status_window is not None:
            pulumi.set(__self__, "show_status_window", show_status_window)
        if sso is not None:
            pulumi.set(__self__, "sso", sso)
        if sso_credential is not None:
            pulumi.set(__self__, "sso_credential", sso_credential)
        if sso_credential_sent_once is not None:
            pulumi.set(__self__, "sso_credential_sent_once", sso_credential_sent_once)
        if sso_password is not None:
            pulumi.set(__self__, "sso_password", sso_password)
        if sso_username is not None:
            pulumi.set(__self__, "sso_username", sso_username)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="additionalParams")
    def additional_params(self) -> Optional[pulumi.Input[str]]:
        """
        Additional parameters.
        """
        return pulumi.get(self, "additional_params")

    @additional_params.setter
    def additional_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_params", value)

    @property
    @pulumi.getter
    def apptype(self) -> Optional[pulumi.Input[str]]:
        """
        Application type.
        """
        return pulumi.get(self, "apptype")

    @apptype.setter
    def apptype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apptype", value)

    @property
    @pulumi.getter(name="colorDepth")
    def color_depth(self) -> Optional[pulumi.Input[str]]:
        """
        Color depth per pixel. Valid values: `32`, `16`, `8`.
        """
        return pulumi.get(self, "color_depth")

    @color_depth.setter
    def color_depth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color_depth", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Login domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[str]]:
        """
        Network shared file folder parameter.
        """
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder", value)

    @property
    @pulumi.getter(name="formDatas")
    def form_datas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalBookmarkGroupBookmarkFormDataArgs']]]]:
        """
        Form data. The structure of `form_data` block is documented below.
        """
        return pulumi.get(self, "form_datas")

    @form_datas.setter
    def form_datas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalBookmarkGroupBookmarkFormDataArgs']]]]):
        pulumi.set(self, "form_datas", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        Screen height (range from 480 - 65535, default = 768).
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name/IP parameter.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="keyboardLayout")
    def keyboard_layout(self) -> Optional[pulumi.Input[str]]:
        """
        Keyboard layout. Valid values: `ar-101`, `ar-102`, `ar-102-azerty`, `can-mul`, `cz`, `cz-qwerty`, `cz-pr`, `da`, `nl`, `de`, `de-ch`, `de-ibm`, `en-uk`, `en-uk-ext`, `en-us`, `en-us-dvorak`, `es`, `es-var`, `fi`, `fi-sami`, `fr`, `fr-ca`, `fr-ch`, `fr-be`, `hr`, `hu`, `hu-101`, `it`, `it-142`, `ja`, `ko`, `lt`, `lt-ibm`, `lt-std`, `lav-std`, `lav-leg`, `mk`, `mk-std`, `no`, `no-sami`, `pol-214`, `pol-pr`, `pt`, `pt-br`, `pt-br-abnt2`, `ru`, `ru-mne`, `ru-t`, `sl`, `sv`, `sv-sami`, `tuk`, `tur-f`, `tur-q`, `zh-sym-sg-us`, `zh-sym-us`, `zh-tr-hk`, `zh-tr-mo`, `zh-tr-us`.
        """
        return pulumi.get(self, "keyboard_layout")

    @keyboard_layout.setter
    def keyboard_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyboard_layout", value)

    @property
    @pulumi.getter(name="listeningPort")
    def listening_port(self) -> Optional[pulumi.Input[int]]:
        """
        Listening port (0 - 65535).
        """
        return pulumi.get(self, "listening_port")

    @listening_port.setter
    def listening_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "listening_port", value)

    @property
    @pulumi.getter(name="loadBalancingInfo")
    def load_balancing_info(self) -> Optional[pulumi.Input[str]]:
        """
        The load balancing information or cookie which should be provided to the connection broker.
        """
        return pulumi.get(self, "load_balancing_info")

    @load_balancing_info.setter
    def load_balancing_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancing_info", value)

    @property
    @pulumi.getter(name="logonPassword")
    def logon_password(self) -> Optional[pulumi.Input[str]]:
        """
        Logon password.
        """
        return pulumi.get(self, "logon_password")

    @logon_password.setter
    def logon_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logon_password", value)

    @property
    @pulumi.getter(name="logonUser")
    def logon_user(self) -> Optional[pulumi.Input[str]]:
        """
        Logon user.
        """
        return pulumi.get(self, "logon_user")

    @logon_user.setter
    def logon_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logon_user", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Remote port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="preconnectionBlob")
    def preconnection_blob(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary string which identifies the RDP source.
        """
        return pulumi.get(self, "preconnection_blob")

    @preconnection_blob.setter
    def preconnection_blob(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preconnection_blob", value)

    @property
    @pulumi.getter(name="preconnectionId")
    def preconnection_id(self) -> Optional[pulumi.Input[int]]:
        """
        The numeric ID of the RDP source (0-2147483648).
        """
        return pulumi.get(self, "preconnection_id")

    @preconnection_id.setter
    def preconnection_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preconnection_id", value)

    @property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> Optional[pulumi.Input[int]]:
        """
        Remote port (0 - 65535).
        """
        return pulumi.get(self, "remote_port")

    @remote_port.setter
    def remote_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remote_port", value)

    @property
    @pulumi.getter(name="restrictedAdmin")
    def restricted_admin(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable restricted admin mode for RDP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "restricted_admin")

    @restricted_admin.setter
    def restricted_admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restricted_admin", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input[str]]:
        """
        Security mode for RDP connection. Valid values: `rdp`, `nla`, `tls`, `any`.
        """
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter(name="sendPreconnectionId")
    def send_preconnection_id(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending of preconnection ID. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "send_preconnection_id")

    @send_preconnection_id.setter
    def send_preconnection_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_preconnection_id", value)

    @property
    @pulumi.getter(name="serverLayout")
    def server_layout(self) -> Optional[pulumi.Input[str]]:
        """
        Server side keyboard layout.
        """
        return pulumi.get(self, "server_layout")

    @server_layout.setter
    def server_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_layout", value)

    @property
    @pulumi.getter(name="showStatusWindow")
    def show_status_window(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable showing of status window. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "show_status_window")

    @show_status_window.setter
    def show_status_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "show_status_window", value)

    @property
    @pulumi.getter
    def sso(self) -> Optional[pulumi.Input[str]]:
        """
        Single Sign-On. Valid values: `disable`, `static`, `auto`.
        """
        return pulumi.get(self, "sso")

    @sso.setter
    def sso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso", value)

    @property
    @pulumi.getter(name="ssoCredential")
    def sso_credential(self) -> Optional[pulumi.Input[str]]:
        """
        Single sign-on credentials. Valid values: `sslvpn-login`, `alternative`.
        """
        return pulumi.get(self, "sso_credential")

    @sso_credential.setter
    def sso_credential(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_credential", value)

    @property
    @pulumi.getter(name="ssoCredentialSentOnce")
    def sso_credential_sent_once(self) -> Optional[pulumi.Input[str]]:
        """
        Single sign-on credentials are only sent once to remote server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sso_credential_sent_once")

    @sso_credential_sent_once.setter
    def sso_credential_sent_once(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_credential_sent_once", value)

    @property
    @pulumi.getter(name="ssoPassword")
    def sso_password(self) -> Optional[pulumi.Input[str]]:
        """
        SSO password.
        """
        return pulumi.get(self, "sso_password")

    @sso_password.setter
    def sso_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_password", value)

    @property
    @pulumi.getter(name="ssoUsername")
    def sso_username(self) -> Optional[pulumi.Input[str]]:
        """
        SSO user name.
        """
        return pulumi.get(self, "sso_username")

    @sso_username.setter
    def sso_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_username", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL parameter.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        Screen width (range from 640 - 65535, default = 1024).
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class VpnSslWebPortalBookmarkGroupBookmarkFormDataArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] value: Value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VpnSslWebPortalHostCheckPolicyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslWebPortalIpPoolArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslWebPortalIpv6PoolArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslWebPortalIpv6SplitTunnelingRoutingAddressArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslWebPortalMacAddrCheckRuleArgs:
    def __init__(__self__, *,
                 mac_addr_lists: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalMacAddrCheckRuleMacAddrListArgs']]]] = None,
                 mac_addr_mask: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalMacAddrCheckRuleMacAddrListArgs']]] mac_addr_lists: Client MAC address list. The structure of `mac_addr_list` block is documented below.
        :param pulumi.Input[int] mac_addr_mask: Client MAC address mask.
        :param pulumi.Input[str] name: Name.
        """
        if mac_addr_lists is not None:
            pulumi.set(__self__, "mac_addr_lists", mac_addr_lists)
        if mac_addr_mask is not None:
            pulumi.set(__self__, "mac_addr_mask", mac_addr_mask)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="macAddrLists")
    def mac_addr_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalMacAddrCheckRuleMacAddrListArgs']]]]:
        """
        Client MAC address list. The structure of `mac_addr_list` block is documented below.
        """
        return pulumi.get(self, "mac_addr_lists")

    @mac_addr_lists.setter
    def mac_addr_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebPortalMacAddrCheckRuleMacAddrListArgs']]]]):
        pulumi.set(self, "mac_addr_lists", value)

    @property
    @pulumi.getter(name="macAddrMask")
    def mac_addr_mask(self) -> Optional[pulumi.Input[int]]:
        """
        Client MAC address mask.
        """
        return pulumi.get(self, "mac_addr_mask")

    @mac_addr_mask.setter
    def mac_addr_mask(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mac_addr_mask", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslWebPortalMacAddrCheckRuleMacAddrListArgs:
    def __init__(__self__, *,
                 addr: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] addr: Client MAC address.
        """
        if addr is not None:
            pulumi.set(__self__, "addr", addr)

    @property
    @pulumi.getter
    def addr(self) -> Optional[pulumi.Input[str]]:
        """
        Client MAC address.
        """
        return pulumi.get(self, "addr")

    @addr.setter
    def addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "addr", value)


@pulumi.input_type
class VpnSslWebPortalOsCheckListArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 latest_patch_level: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tolerance: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] action: OS check options. Valid values: `deny`, `allow`, `check-up-to-date`.
        :param pulumi.Input[str] latest_patch_level: Latest OS patch level.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[int] tolerance: OS patch level tolerance.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if latest_patch_level is not None:
            pulumi.set(__self__, "latest_patch_level", latest_patch_level)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tolerance is not None:
            pulumi.set(__self__, "tolerance", tolerance)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        OS check options. Valid values: `deny`, `allow`, `check-up-to-date`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="latestPatchLevel")
    def latest_patch_level(self) -> Optional[pulumi.Input[str]]:
        """
        Latest OS patch level.
        """
        return pulumi.get(self, "latest_patch_level")

    @latest_patch_level.setter
    def latest_patch_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latest_patch_level", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tolerance(self) -> Optional[pulumi.Input[int]]:
        """
        OS patch level tolerance.
        """
        return pulumi.get(self, "tolerance")

    @tolerance.setter
    def tolerance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tolerance", value)


@pulumi.input_type
class VpnSslWebPortalSplitDnArgs:
    def __init__(__self__, *,
                 dns_server1: Optional[pulumi.Input[str]] = None,
                 dns_server2: Optional[pulumi.Input[str]] = None,
                 domains: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ipv6_dns_server1: Optional[pulumi.Input[str]] = None,
                 ipv6_dns_server2: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] dns_server1: DNS server 1.
        :param pulumi.Input[str] dns_server2: DNS server 2.
        :param pulumi.Input[str] domains: Split DNS domains used for SSL-VPN clients separated by comma(,).
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] ipv6_dns_server1: IPv6 DNS server 1.
        :param pulumi.Input[str] ipv6_dns_server2: IPv6 DNS server 2.
        """
        if dns_server1 is not None:
            pulumi.set(__self__, "dns_server1", dns_server1)
        if dns_server2 is not None:
            pulumi.set(__self__, "dns_server2", dns_server2)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ipv6_dns_server1 is not None:
            pulumi.set(__self__, "ipv6_dns_server1", ipv6_dns_server1)
        if ipv6_dns_server2 is not None:
            pulumi.set(__self__, "ipv6_dns_server2", ipv6_dns_server2)

    @property
    @pulumi.getter(name="dnsServer1")
    def dns_server1(self) -> Optional[pulumi.Input[str]]:
        """
        DNS server 1.
        """
        return pulumi.get(self, "dns_server1")

    @dns_server1.setter
    def dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server1", value)

    @property
    @pulumi.getter(name="dnsServer2")
    def dns_server2(self) -> Optional[pulumi.Input[str]]:
        """
        DNS server 2.
        """
        return pulumi.get(self, "dns_server2")

    @dns_server2.setter
    def dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server2", value)

    @property
    @pulumi.getter
    def domains(self) -> Optional[pulumi.Input[str]]:
        """
        Split DNS domains used for SSL-VPN clients separated by comma(,).
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ipv6DnsServer1")
    def ipv6_dns_server1(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 DNS server 1.
        """
        return pulumi.get(self, "ipv6_dns_server1")

    @ipv6_dns_server1.setter
    def ipv6_dns_server1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server1", value)

    @property
    @pulumi.getter(name="ipv6DnsServer2")
    def ipv6_dns_server2(self) -> Optional[pulumi.Input[str]]:
        """
        IPv6 DNS server 2.
        """
        return pulumi.get(self, "ipv6_dns_server2")

    @ipv6_dns_server2.setter
    def ipv6_dns_server2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_dns_server2", value)


@pulumi.input_type
class VpnSslWebPortalSplitTunnelingRoutingAddressArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class VpnSslWebUserBookmarkBookmarkArgs:
    def __init__(__self__, *,
                 additional_params: Optional[pulumi.Input[str]] = None,
                 apptype: Optional[pulumi.Input[str]] = None,
                 color_depth: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 folder: Optional[pulumi.Input[str]] = None,
                 form_datas: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebUserBookmarkBookmarkFormDataArgs']]]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 keyboard_layout: Optional[pulumi.Input[str]] = None,
                 listening_port: Optional[pulumi.Input[int]] = None,
                 load_balancing_info: Optional[pulumi.Input[str]] = None,
                 logon_password: Optional[pulumi.Input[str]] = None,
                 logon_user: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 preconnection_blob: Optional[pulumi.Input[str]] = None,
                 preconnection_id: Optional[pulumi.Input[int]] = None,
                 remote_port: Optional[pulumi.Input[int]] = None,
                 restricted_admin: Optional[pulumi.Input[str]] = None,
                 security: Optional[pulumi.Input[str]] = None,
                 send_preconnection_id: Optional[pulumi.Input[str]] = None,
                 server_layout: Optional[pulumi.Input[str]] = None,
                 show_status_window: Optional[pulumi.Input[str]] = None,
                 sso: Optional[pulumi.Input[str]] = None,
                 sso_credential: Optional[pulumi.Input[str]] = None,
                 sso_credential_sent_once: Optional[pulumi.Input[str]] = None,
                 sso_password: Optional[pulumi.Input[str]] = None,
                 sso_username: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] additional_params: Additional parameters.
        :param pulumi.Input[str] apptype: Application type.
        :param pulumi.Input[str] color_depth: Color depth per pixel. Valid values: `32`, `16`, `8`.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] domain: Login domain.
        :param pulumi.Input[str] folder: Network shared file folder parameter.
        :param pulumi.Input[Sequence[pulumi.Input['VpnSslWebUserBookmarkBookmarkFormDataArgs']]] form_datas: Form data. The structure of `form_data` block is documented below.
        :param pulumi.Input[int] height: Screen height (range from 480 - 65535, default = 768).
        :param pulumi.Input[str] host: Host name/IP parameter.
        :param pulumi.Input[str] keyboard_layout: Keyboard layout. Valid values: `ar-101`, `ar-102`, `ar-102-azerty`, `can-mul`, `cz`, `cz-qwerty`, `cz-pr`, `da`, `nl`, `de`, `de-ch`, `de-ibm`, `en-uk`, `en-uk-ext`, `en-us`, `en-us-dvorak`, `es`, `es-var`, `fi`, `fi-sami`, `fr`, `fr-ca`, `fr-ch`, `fr-be`, `hr`, `hu`, `hu-101`, `it`, `it-142`, `ja`, `ko`, `lt`, `lt-ibm`, `lt-std`, `lav-std`, `lav-leg`, `mk`, `mk-std`, `no`, `no-sami`, `pol-214`, `pol-pr`, `pt`, `pt-br`, `pt-br-abnt2`, `ru`, `ru-mne`, `ru-t`, `sl`, `sv`, `sv-sami`, `tuk`, `tur-f`, `tur-q`, `zh-sym-sg-us`, `zh-sym-us`, `zh-tr-hk`, `zh-tr-mo`, `zh-tr-us`.
        :param pulumi.Input[int] listening_port: Listening port (0 - 65535).
        :param pulumi.Input[str] load_balancing_info: The load balancing information or cookie which should be provided to the connection broker.
        :param pulumi.Input[str] logon_password: Logon password.
        :param pulumi.Input[str] logon_user: Logon user.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[int] port: Remote port.
        :param pulumi.Input[str] preconnection_blob: An arbitrary string which identifies the RDP source.
        :param pulumi.Input[int] preconnection_id: The numeric ID of the RDP source (0-2147483648).
        :param pulumi.Input[int] remote_port: Remote port (0 - 65535).
        :param pulumi.Input[str] restricted_admin: Enable/disable restricted admin mode for RDP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] security: Security mode for RDP connection. Valid values: `rdp`, `nla`, `tls`, `any`.
        :param pulumi.Input[str] send_preconnection_id: Enable/disable sending of preconnection ID. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] server_layout: Server side keyboard layout.
        :param pulumi.Input[str] show_status_window: Enable/disable showing of status window. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sso: Single Sign-On. Valid values: `disable`, `static`, `auto`.
        :param pulumi.Input[str] sso_credential: Single sign-on credentials. Valid values: `sslvpn-login`, `alternative`.
        :param pulumi.Input[str] sso_credential_sent_once: Single sign-on credentials are only sent once to remote server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sso_password: SSO password.
        :param pulumi.Input[str] sso_username: SSO user name.
        :param pulumi.Input[str] url: URL parameter.
        :param pulumi.Input[int] width: Screen width (range from 640 - 65535, default = 1024).
        """
        if additional_params is not None:
            pulumi.set(__self__, "additional_params", additional_params)
        if apptype is not None:
            pulumi.set(__self__, "apptype", apptype)
        if color_depth is not None:
            pulumi.set(__self__, "color_depth", color_depth)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if form_datas is not None:
            pulumi.set(__self__, "form_datas", form_datas)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if keyboard_layout is not None:
            pulumi.set(__self__, "keyboard_layout", keyboard_layout)
        if listening_port is not None:
            pulumi.set(__self__, "listening_port", listening_port)
        if load_balancing_info is not None:
            pulumi.set(__self__, "load_balancing_info", load_balancing_info)
        if logon_password is not None:
            pulumi.set(__self__, "logon_password", logon_password)
        if logon_user is not None:
            pulumi.set(__self__, "logon_user", logon_user)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if preconnection_blob is not None:
            pulumi.set(__self__, "preconnection_blob", preconnection_blob)
        if preconnection_id is not None:
            pulumi.set(__self__, "preconnection_id", preconnection_id)
        if remote_port is not None:
            pulumi.set(__self__, "remote_port", remote_port)
        if restricted_admin is not None:
            pulumi.set(__self__, "restricted_admin", restricted_admin)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if send_preconnection_id is not None:
            pulumi.set(__self__, "send_preconnection_id", send_preconnection_id)
        if server_layout is not None:
            pulumi.set(__self__, "server_layout", server_layout)
        if show_status_window is not None:
            pulumi.set(__self__, "show_status_window", show_status_window)
        if sso is not None:
            pulumi.set(__self__, "sso", sso)
        if sso_credential is not None:
            pulumi.set(__self__, "sso_credential", sso_credential)
        if sso_credential_sent_once is not None:
            pulumi.set(__self__, "sso_credential_sent_once", sso_credential_sent_once)
        if sso_password is not None:
            pulumi.set(__self__, "sso_password", sso_password)
        if sso_username is not None:
            pulumi.set(__self__, "sso_username", sso_username)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="additionalParams")
    def additional_params(self) -> Optional[pulumi.Input[str]]:
        """
        Additional parameters.
        """
        return pulumi.get(self, "additional_params")

    @additional_params.setter
    def additional_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_params", value)

    @property
    @pulumi.getter
    def apptype(self) -> Optional[pulumi.Input[str]]:
        """
        Application type.
        """
        return pulumi.get(self, "apptype")

    @apptype.setter
    def apptype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apptype", value)

    @property
    @pulumi.getter(name="colorDepth")
    def color_depth(self) -> Optional[pulumi.Input[str]]:
        """
        Color depth per pixel. Valid values: `32`, `16`, `8`.
        """
        return pulumi.get(self, "color_depth")

    @color_depth.setter
    def color_depth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color_depth", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Login domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[str]]:
        """
        Network shared file folder parameter.
        """
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder", value)

    @property
    @pulumi.getter(name="formDatas")
    def form_datas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebUserBookmarkBookmarkFormDataArgs']]]]:
        """
        Form data. The structure of `form_data` block is documented below.
        """
        return pulumi.get(self, "form_datas")

    @form_datas.setter
    def form_datas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebUserBookmarkBookmarkFormDataArgs']]]]):
        pulumi.set(self, "form_datas", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        Screen height (range from 480 - 65535, default = 768).
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name/IP parameter.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="keyboardLayout")
    def keyboard_layout(self) -> Optional[pulumi.Input[str]]:
        """
        Keyboard layout. Valid values: `ar-101`, `ar-102`, `ar-102-azerty`, `can-mul`, `cz`, `cz-qwerty`, `cz-pr`, `da`, `nl`, `de`, `de-ch`, `de-ibm`, `en-uk`, `en-uk-ext`, `en-us`, `en-us-dvorak`, `es`, `es-var`, `fi`, `fi-sami`, `fr`, `fr-ca`, `fr-ch`, `fr-be`, `hr`, `hu`, `hu-101`, `it`, `it-142`, `ja`, `ko`, `lt`, `lt-ibm`, `lt-std`, `lav-std`, `lav-leg`, `mk`, `mk-std`, `no`, `no-sami`, `pol-214`, `pol-pr`, `pt`, `pt-br`, `pt-br-abnt2`, `ru`, `ru-mne`, `ru-t`, `sl`, `sv`, `sv-sami`, `tuk`, `tur-f`, `tur-q`, `zh-sym-sg-us`, `zh-sym-us`, `zh-tr-hk`, `zh-tr-mo`, `zh-tr-us`.
        """
        return pulumi.get(self, "keyboard_layout")

    @keyboard_layout.setter
    def keyboard_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyboard_layout", value)

    @property
    @pulumi.getter(name="listeningPort")
    def listening_port(self) -> Optional[pulumi.Input[int]]:
        """
        Listening port (0 - 65535).
        """
        return pulumi.get(self, "listening_port")

    @listening_port.setter
    def listening_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "listening_port", value)

    @property
    @pulumi.getter(name="loadBalancingInfo")
    def load_balancing_info(self) -> Optional[pulumi.Input[str]]:
        """
        The load balancing information or cookie which should be provided to the connection broker.
        """
        return pulumi.get(self, "load_balancing_info")

    @load_balancing_info.setter
    def load_balancing_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancing_info", value)

    @property
    @pulumi.getter(name="logonPassword")
    def logon_password(self) -> Optional[pulumi.Input[str]]:
        """
        Logon password.
        """
        return pulumi.get(self, "logon_password")

    @logon_password.setter
    def logon_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logon_password", value)

    @property
    @pulumi.getter(name="logonUser")
    def logon_user(self) -> Optional[pulumi.Input[str]]:
        """
        Logon user.
        """
        return pulumi.get(self, "logon_user")

    @logon_user.setter
    def logon_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logon_user", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Remote port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="preconnectionBlob")
    def preconnection_blob(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary string which identifies the RDP source.
        """
        return pulumi.get(self, "preconnection_blob")

    @preconnection_blob.setter
    def preconnection_blob(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preconnection_blob", value)

    @property
    @pulumi.getter(name="preconnectionId")
    def preconnection_id(self) -> Optional[pulumi.Input[int]]:
        """
        The numeric ID of the RDP source (0-2147483648).
        """
        return pulumi.get(self, "preconnection_id")

    @preconnection_id.setter
    def preconnection_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preconnection_id", value)

    @property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> Optional[pulumi.Input[int]]:
        """
        Remote port (0 - 65535).
        """
        return pulumi.get(self, "remote_port")

    @remote_port.setter
    def remote_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remote_port", value)

    @property
    @pulumi.getter(name="restrictedAdmin")
    def restricted_admin(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable restricted admin mode for RDP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "restricted_admin")

    @restricted_admin.setter
    def restricted_admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restricted_admin", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input[str]]:
        """
        Security mode for RDP connection. Valid values: `rdp`, `nla`, `tls`, `any`.
        """
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter(name="sendPreconnectionId")
    def send_preconnection_id(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending of preconnection ID. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "send_preconnection_id")

    @send_preconnection_id.setter
    def send_preconnection_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_preconnection_id", value)

    @property
    @pulumi.getter(name="serverLayout")
    def server_layout(self) -> Optional[pulumi.Input[str]]:
        """
        Server side keyboard layout.
        """
        return pulumi.get(self, "server_layout")

    @server_layout.setter
    def server_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_layout", value)

    @property
    @pulumi.getter(name="showStatusWindow")
    def show_status_window(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable showing of status window. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "show_status_window")

    @show_status_window.setter
    def show_status_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "show_status_window", value)

    @property
    @pulumi.getter
    def sso(self) -> Optional[pulumi.Input[str]]:
        """
        Single Sign-On. Valid values: `disable`, `static`, `auto`.
        """
        return pulumi.get(self, "sso")

    @sso.setter
    def sso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso", value)

    @property
    @pulumi.getter(name="ssoCredential")
    def sso_credential(self) -> Optional[pulumi.Input[str]]:
        """
        Single sign-on credentials. Valid values: `sslvpn-login`, `alternative`.
        """
        return pulumi.get(self, "sso_credential")

    @sso_credential.setter
    def sso_credential(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_credential", value)

    @property
    @pulumi.getter(name="ssoCredentialSentOnce")
    def sso_credential_sent_once(self) -> Optional[pulumi.Input[str]]:
        """
        Single sign-on credentials are only sent once to remote server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sso_credential_sent_once")

    @sso_credential_sent_once.setter
    def sso_credential_sent_once(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_credential_sent_once", value)

    @property
    @pulumi.getter(name="ssoPassword")
    def sso_password(self) -> Optional[pulumi.Input[str]]:
        """
        SSO password.
        """
        return pulumi.get(self, "sso_password")

    @sso_password.setter
    def sso_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_password", value)

    @property
    @pulumi.getter(name="ssoUsername")
    def sso_username(self) -> Optional[pulumi.Input[str]]:
        """
        SSO user name.
        """
        return pulumi.get(self, "sso_username")

    @sso_username.setter
    def sso_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_username", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL parameter.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        Screen width (range from 640 - 65535, default = 1024).
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class VpnSslWebUserBookmarkBookmarkFormDataArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] value: Value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VpnSslWebUserGroupBookmarkBookmarkArgs:
    def __init__(__self__, *,
                 additional_params: Optional[pulumi.Input[str]] = None,
                 apptype: Optional[pulumi.Input[str]] = None,
                 color_depth: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 folder: Optional[pulumi.Input[str]] = None,
                 form_datas: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebUserGroupBookmarkBookmarkFormDataArgs']]]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 keyboard_layout: Optional[pulumi.Input[str]] = None,
                 listening_port: Optional[pulumi.Input[int]] = None,
                 load_balancing_info: Optional[pulumi.Input[str]] = None,
                 logon_password: Optional[pulumi.Input[str]] = None,
                 logon_user: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 preconnection_blob: Optional[pulumi.Input[str]] = None,
                 preconnection_id: Optional[pulumi.Input[int]] = None,
                 remote_port: Optional[pulumi.Input[int]] = None,
                 restricted_admin: Optional[pulumi.Input[str]] = None,
                 security: Optional[pulumi.Input[str]] = None,
                 send_preconnection_id: Optional[pulumi.Input[str]] = None,
                 server_layout: Optional[pulumi.Input[str]] = None,
                 show_status_window: Optional[pulumi.Input[str]] = None,
                 sso: Optional[pulumi.Input[str]] = None,
                 sso_credential: Optional[pulumi.Input[str]] = None,
                 sso_credential_sent_once: Optional[pulumi.Input[str]] = None,
                 sso_password: Optional[pulumi.Input[str]] = None,
                 sso_username: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] additional_params: Additional parameters.
        :param pulumi.Input[str] apptype: Application type.
        :param pulumi.Input[str] color_depth: Color depth per pixel. Valid values: `32`, `16`, `8`.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] domain: Login domain.
        :param pulumi.Input[str] folder: Network shared file folder parameter.
        :param pulumi.Input[Sequence[pulumi.Input['VpnSslWebUserGroupBookmarkBookmarkFormDataArgs']]] form_datas: Form data. The structure of `form_data` block is documented below.
        :param pulumi.Input[int] height: Screen height (range from 480 - 65535, default = 768).
        :param pulumi.Input[str] host: Host name/IP parameter.
        :param pulumi.Input[str] keyboard_layout: Keyboard layout. Valid values: `ar-101`, `ar-102`, `ar-102-azerty`, `can-mul`, `cz`, `cz-qwerty`, `cz-pr`, `da`, `nl`, `de`, `de-ch`, `de-ibm`, `en-uk`, `en-uk-ext`, `en-us`, `en-us-dvorak`, `es`, `es-var`, `fi`, `fi-sami`, `fr`, `fr-ca`, `fr-ch`, `fr-be`, `hr`, `hu`, `hu-101`, `it`, `it-142`, `ja`, `ko`, `lt`, `lt-ibm`, `lt-std`, `lav-std`, `lav-leg`, `mk`, `mk-std`, `no`, `no-sami`, `pol-214`, `pol-pr`, `pt`, `pt-br`, `pt-br-abnt2`, `ru`, `ru-mne`, `ru-t`, `sl`, `sv`, `sv-sami`, `tuk`, `tur-f`, `tur-q`, `zh-sym-sg-us`, `zh-sym-us`, `zh-tr-hk`, `zh-tr-mo`, `zh-tr-us`.
        :param pulumi.Input[int] listening_port: Listening port (0 - 65535).
        :param pulumi.Input[str] load_balancing_info: The load balancing information or cookie which should be provided to the connection broker.
        :param pulumi.Input[str] logon_password: Logon password.
        :param pulumi.Input[str] logon_user: Logon user.
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[int] port: Remote port.
        :param pulumi.Input[str] preconnection_blob: An arbitrary string which identifies the RDP source.
        :param pulumi.Input[int] preconnection_id: The numeric ID of the RDP source (0-2147483648).
        :param pulumi.Input[int] remote_port: Remote port (0 - 65535).
        :param pulumi.Input[str] restricted_admin: Enable/disable restricted admin mode for RDP. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] security: Security mode for RDP connection. Valid values: `rdp`, `nla`, `tls`, `any`.
        :param pulumi.Input[str] send_preconnection_id: Enable/disable sending of preconnection ID. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] server_layout: Server side keyboard layout.
        :param pulumi.Input[str] show_status_window: Enable/disable showing of status window. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sso: Single Sign-On. Valid values: `disable`, `static`, `auto`.
        :param pulumi.Input[str] sso_credential: Single sign-on credentials. Valid values: `sslvpn-login`, `alternative`.
        :param pulumi.Input[str] sso_credential_sent_once: Single sign-on credentials are only sent once to remote server. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sso_password: SSO password.
        :param pulumi.Input[str] sso_username: SSO user name.
        :param pulumi.Input[str] url: URL parameter.
        :param pulumi.Input[int] width: Screen width (range from 640 - 65535, default = 1024).
        """
        if additional_params is not None:
            pulumi.set(__self__, "additional_params", additional_params)
        if apptype is not None:
            pulumi.set(__self__, "apptype", apptype)
        if color_depth is not None:
            pulumi.set(__self__, "color_depth", color_depth)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if folder is not None:
            pulumi.set(__self__, "folder", folder)
        if form_datas is not None:
            pulumi.set(__self__, "form_datas", form_datas)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if keyboard_layout is not None:
            pulumi.set(__self__, "keyboard_layout", keyboard_layout)
        if listening_port is not None:
            pulumi.set(__self__, "listening_port", listening_port)
        if load_balancing_info is not None:
            pulumi.set(__self__, "load_balancing_info", load_balancing_info)
        if logon_password is not None:
            pulumi.set(__self__, "logon_password", logon_password)
        if logon_user is not None:
            pulumi.set(__self__, "logon_user", logon_user)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if preconnection_blob is not None:
            pulumi.set(__self__, "preconnection_blob", preconnection_blob)
        if preconnection_id is not None:
            pulumi.set(__self__, "preconnection_id", preconnection_id)
        if remote_port is not None:
            pulumi.set(__self__, "remote_port", remote_port)
        if restricted_admin is not None:
            pulumi.set(__self__, "restricted_admin", restricted_admin)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if send_preconnection_id is not None:
            pulumi.set(__self__, "send_preconnection_id", send_preconnection_id)
        if server_layout is not None:
            pulumi.set(__self__, "server_layout", server_layout)
        if show_status_window is not None:
            pulumi.set(__self__, "show_status_window", show_status_window)
        if sso is not None:
            pulumi.set(__self__, "sso", sso)
        if sso_credential is not None:
            pulumi.set(__self__, "sso_credential", sso_credential)
        if sso_credential_sent_once is not None:
            pulumi.set(__self__, "sso_credential_sent_once", sso_credential_sent_once)
        if sso_password is not None:
            pulumi.set(__self__, "sso_password", sso_password)
        if sso_username is not None:
            pulumi.set(__self__, "sso_username", sso_username)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="additionalParams")
    def additional_params(self) -> Optional[pulumi.Input[str]]:
        """
        Additional parameters.
        """
        return pulumi.get(self, "additional_params")

    @additional_params.setter
    def additional_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_params", value)

    @property
    @pulumi.getter
    def apptype(self) -> Optional[pulumi.Input[str]]:
        """
        Application type.
        """
        return pulumi.get(self, "apptype")

    @apptype.setter
    def apptype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apptype", value)

    @property
    @pulumi.getter(name="colorDepth")
    def color_depth(self) -> Optional[pulumi.Input[str]]:
        """
        Color depth per pixel. Valid values: `32`, `16`, `8`.
        """
        return pulumi.get(self, "color_depth")

    @color_depth.setter
    def color_depth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color_depth", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Login domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def folder(self) -> Optional[pulumi.Input[str]]:
        """
        Network shared file folder parameter.
        """
        return pulumi.get(self, "folder")

    @folder.setter
    def folder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder", value)

    @property
    @pulumi.getter(name="formDatas")
    def form_datas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebUserGroupBookmarkBookmarkFormDataArgs']]]]:
        """
        Form data. The structure of `form_data` block is documented below.
        """
        return pulumi.get(self, "form_datas")

    @form_datas.setter
    def form_datas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpnSslWebUserGroupBookmarkBookmarkFormDataArgs']]]]):
        pulumi.set(self, "form_datas", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        Screen height (range from 480 - 65535, default = 768).
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name/IP parameter.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="keyboardLayout")
    def keyboard_layout(self) -> Optional[pulumi.Input[str]]:
        """
        Keyboard layout. Valid values: `ar-101`, `ar-102`, `ar-102-azerty`, `can-mul`, `cz`, `cz-qwerty`, `cz-pr`, `da`, `nl`, `de`, `de-ch`, `de-ibm`, `en-uk`, `en-uk-ext`, `en-us`, `en-us-dvorak`, `es`, `es-var`, `fi`, `fi-sami`, `fr`, `fr-ca`, `fr-ch`, `fr-be`, `hr`, `hu`, `hu-101`, `it`, `it-142`, `ja`, `ko`, `lt`, `lt-ibm`, `lt-std`, `lav-std`, `lav-leg`, `mk`, `mk-std`, `no`, `no-sami`, `pol-214`, `pol-pr`, `pt`, `pt-br`, `pt-br-abnt2`, `ru`, `ru-mne`, `ru-t`, `sl`, `sv`, `sv-sami`, `tuk`, `tur-f`, `tur-q`, `zh-sym-sg-us`, `zh-sym-us`, `zh-tr-hk`, `zh-tr-mo`, `zh-tr-us`.
        """
        return pulumi.get(self, "keyboard_layout")

    @keyboard_layout.setter
    def keyboard_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyboard_layout", value)

    @property
    @pulumi.getter(name="listeningPort")
    def listening_port(self) -> Optional[pulumi.Input[int]]:
        """
        Listening port (0 - 65535).
        """
        return pulumi.get(self, "listening_port")

    @listening_port.setter
    def listening_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "listening_port", value)

    @property
    @pulumi.getter(name="loadBalancingInfo")
    def load_balancing_info(self) -> Optional[pulumi.Input[str]]:
        """
        The load balancing information or cookie which should be provided to the connection broker.
        """
        return pulumi.get(self, "load_balancing_info")

    @load_balancing_info.setter
    def load_balancing_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancing_info", value)

    @property
    @pulumi.getter(name="logonPassword")
    def logon_password(self) -> Optional[pulumi.Input[str]]:
        """
        Logon password.
        """
        return pulumi.get(self, "logon_password")

    @logon_password.setter
    def logon_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logon_password", value)

    @property
    @pulumi.getter(name="logonUser")
    def logon_user(self) -> Optional[pulumi.Input[str]]:
        """
        Logon user.
        """
        return pulumi.get(self, "logon_user")

    @logon_user.setter
    def logon_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logon_user", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Remote port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="preconnectionBlob")
    def preconnection_blob(self) -> Optional[pulumi.Input[str]]:
        """
        An arbitrary string which identifies the RDP source.
        """
        return pulumi.get(self, "preconnection_blob")

    @preconnection_blob.setter
    def preconnection_blob(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preconnection_blob", value)

    @property
    @pulumi.getter(name="preconnectionId")
    def preconnection_id(self) -> Optional[pulumi.Input[int]]:
        """
        The numeric ID of the RDP source (0-2147483648).
        """
        return pulumi.get(self, "preconnection_id")

    @preconnection_id.setter
    def preconnection_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preconnection_id", value)

    @property
    @pulumi.getter(name="remotePort")
    def remote_port(self) -> Optional[pulumi.Input[int]]:
        """
        Remote port (0 - 65535).
        """
        return pulumi.get(self, "remote_port")

    @remote_port.setter
    def remote_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remote_port", value)

    @property
    @pulumi.getter(name="restrictedAdmin")
    def restricted_admin(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable restricted admin mode for RDP. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "restricted_admin")

    @restricted_admin.setter
    def restricted_admin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restricted_admin", value)

    @property
    @pulumi.getter
    def security(self) -> Optional[pulumi.Input[str]]:
        """
        Security mode for RDP connection. Valid values: `rdp`, `nla`, `tls`, `any`.
        """
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security", value)

    @property
    @pulumi.getter(name="sendPreconnectionId")
    def send_preconnection_id(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sending of preconnection ID. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "send_preconnection_id")

    @send_preconnection_id.setter
    def send_preconnection_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send_preconnection_id", value)

    @property
    @pulumi.getter(name="serverLayout")
    def server_layout(self) -> Optional[pulumi.Input[str]]:
        """
        Server side keyboard layout.
        """
        return pulumi.get(self, "server_layout")

    @server_layout.setter
    def server_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_layout", value)

    @property
    @pulumi.getter(name="showStatusWindow")
    def show_status_window(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable showing of status window. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "show_status_window")

    @show_status_window.setter
    def show_status_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "show_status_window", value)

    @property
    @pulumi.getter
    def sso(self) -> Optional[pulumi.Input[str]]:
        """
        Single Sign-On. Valid values: `disable`, `static`, `auto`.
        """
        return pulumi.get(self, "sso")

    @sso.setter
    def sso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso", value)

    @property
    @pulumi.getter(name="ssoCredential")
    def sso_credential(self) -> Optional[pulumi.Input[str]]:
        """
        Single sign-on credentials. Valid values: `sslvpn-login`, `alternative`.
        """
        return pulumi.get(self, "sso_credential")

    @sso_credential.setter
    def sso_credential(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_credential", value)

    @property
    @pulumi.getter(name="ssoCredentialSentOnce")
    def sso_credential_sent_once(self) -> Optional[pulumi.Input[str]]:
        """
        Single sign-on credentials are only sent once to remote server. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sso_credential_sent_once")

    @sso_credential_sent_once.setter
    def sso_credential_sent_once(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_credential_sent_once", value)

    @property
    @pulumi.getter(name="ssoPassword")
    def sso_password(self) -> Optional[pulumi.Input[str]]:
        """
        SSO password.
        """
        return pulumi.get(self, "sso_password")

    @sso_password.setter
    def sso_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_password", value)

    @property
    @pulumi.getter(name="ssoUsername")
    def sso_username(self) -> Optional[pulumi.Input[str]]:
        """
        SSO user name.
        """
        return pulumi.get(self, "sso_username")

    @sso_username.setter
    def sso_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_username", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL parameter.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        Screen width (range from 640 - 65535, default = 1024).
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class VpnSslWebUserGroupBookmarkBookmarkFormDataArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name.
        :param pulumi.Input[str] value: Value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class WafProfileAddressListArgs:
    def __init__(__self__, *,
                 blocked_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileAddressListBlockedAddressArgs']]]] = None,
                 blocked_log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trusted_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileAddressListTrustedAddressArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WafProfileAddressListBlockedAddressArgs']]] blocked_addresses: Blocked address. The structure of `blocked_address` block is documented below.
        :param pulumi.Input[str] blocked_log: Enable/disable logging on blocked addresses. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Status. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['WafProfileAddressListTrustedAddressArgs']]] trusted_addresses: Trusted address. The structure of `trusted_address` block is documented below.
        """
        if blocked_addresses is not None:
            pulumi.set(__self__, "blocked_addresses", blocked_addresses)
        if blocked_log is not None:
            pulumi.set(__self__, "blocked_log", blocked_log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trusted_addresses is not None:
            pulumi.set(__self__, "trusted_addresses", trusted_addresses)

    @property
    @pulumi.getter(name="blockedAddresses")
    def blocked_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileAddressListBlockedAddressArgs']]]]:
        """
        Blocked address. The structure of `blocked_address` block is documented below.
        """
        return pulumi.get(self, "blocked_addresses")

    @blocked_addresses.setter
    def blocked_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileAddressListBlockedAddressArgs']]]]):
        pulumi.set(self, "blocked_addresses", value)

    @property
    @pulumi.getter(name="blockedLog")
    def blocked_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging on blocked addresses. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "blocked_log")

    @blocked_log.setter
    def blocked_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blocked_log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trustedAddresses")
    def trusted_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileAddressListTrustedAddressArgs']]]]:
        """
        Trusted address. The structure of `trusted_address` block is documented below.
        """
        return pulumi.get(self, "trusted_addresses")

    @trusted_addresses.setter
    def trusted_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileAddressListTrustedAddressArgs']]]]):
        pulumi.set(self, "trusted_addresses", value)


@pulumi.input_type
class WafProfileAddressListBlockedAddressArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WafProfileAddressListTrustedAddressArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WafProfileConstraintArgs:
    def __init__(__self__, *,
                 content_length: Optional[pulumi.Input['WafProfileConstraintContentLengthArgs']] = None,
                 exceptions: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileConstraintExceptionArgs']]]] = None,
                 header_length: Optional[pulumi.Input['WafProfileConstraintHeaderLengthArgs']] = None,
                 hostname: Optional[pulumi.Input['WafProfileConstraintHostnameArgs']] = None,
                 line_length: Optional[pulumi.Input['WafProfileConstraintLineLengthArgs']] = None,
                 malformed: Optional[pulumi.Input['WafProfileConstraintMalformedArgs']] = None,
                 max_cookie: Optional[pulumi.Input['WafProfileConstraintMaxCookieArgs']] = None,
                 max_header_line: Optional[pulumi.Input['WafProfileConstraintMaxHeaderLineArgs']] = None,
                 max_range_segment: Optional[pulumi.Input['WafProfileConstraintMaxRangeSegmentArgs']] = None,
                 max_url_param: Optional[pulumi.Input['WafProfileConstraintMaxUrlParamArgs']] = None,
                 method: Optional[pulumi.Input['WafProfileConstraintMethodArgs']] = None,
                 param_length: Optional[pulumi.Input['WafProfileConstraintParamLengthArgs']] = None,
                 url_param_length: Optional[pulumi.Input['WafProfileConstraintUrlParamLengthArgs']] = None,
                 version: Optional[pulumi.Input['WafProfileConstraintVersionArgs']] = None):
        """
        :param pulumi.Input['WafProfileConstraintContentLengthArgs'] content_length: HTTP content length in request. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['WafProfileConstraintExceptionArgs']]] exceptions: HTTP constraint exception. The structure of `exception` block is documented below.
        :param pulumi.Input['WafProfileConstraintHeaderLengthArgs'] header_length: HTTP header length in request. Valid values: `enable`, `disable`.
        :param pulumi.Input['WafProfileConstraintHostnameArgs'] hostname: Enable/disable hostname check. Valid values: `enable`, `disable`.
        :param pulumi.Input['WafProfileConstraintLineLengthArgs'] line_length: HTTP line length in request. Valid values: `enable`, `disable`.
        :param pulumi.Input['WafProfileConstraintMalformedArgs'] malformed: Enable/disable malformed HTTP request check. Valid values: `enable`, `disable`.
        :param pulumi.Input['WafProfileConstraintMaxCookieArgs'] max_cookie: Maximum number of cookies in HTTP request. Valid values: `enable`, `disable`.
        :param pulumi.Input['WafProfileConstraintMaxHeaderLineArgs'] max_header_line: Maximum number of HTTP header line. Valid values: `enable`, `disable`.
        :param pulumi.Input['WafProfileConstraintMaxRangeSegmentArgs'] max_range_segment: Maximum number of range segments in HTTP range line. Valid values: `enable`, `disable`.
        :param pulumi.Input['WafProfileConstraintMaxUrlParamArgs'] max_url_param: Maximum number of parameters in URL. Valid values: `enable`, `disable`.
        :param pulumi.Input['WafProfileConstraintMethodArgs'] method: Enable/disable HTTP method check. Valid values: `enable`, `disable`.
        :param pulumi.Input['WafProfileConstraintParamLengthArgs'] param_length: Maximum length of parameter in URL, HTTP POST request or HTTP body. Valid values: `enable`, `disable`.
        :param pulumi.Input['WafProfileConstraintUrlParamLengthArgs'] url_param_length: Maximum length of parameter in URL. Valid values: `enable`, `disable`.
        :param pulumi.Input['WafProfileConstraintVersionArgs'] version: Enable/disable HTTP version check. Valid values: `enable`, `disable`.
        """
        if content_length is not None:
            pulumi.set(__self__, "content_length", content_length)
        if exceptions is not None:
            pulumi.set(__self__, "exceptions", exceptions)
        if header_length is not None:
            pulumi.set(__self__, "header_length", header_length)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if line_length is not None:
            pulumi.set(__self__, "line_length", line_length)
        if malformed is not None:
            pulumi.set(__self__, "malformed", malformed)
        if max_cookie is not None:
            pulumi.set(__self__, "max_cookie", max_cookie)
        if max_header_line is not None:
            pulumi.set(__self__, "max_header_line", max_header_line)
        if max_range_segment is not None:
            pulumi.set(__self__, "max_range_segment", max_range_segment)
        if max_url_param is not None:
            pulumi.set(__self__, "max_url_param", max_url_param)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if param_length is not None:
            pulumi.set(__self__, "param_length", param_length)
        if url_param_length is not None:
            pulumi.set(__self__, "url_param_length", url_param_length)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="contentLength")
    def content_length(self) -> Optional[pulumi.Input['WafProfileConstraintContentLengthArgs']]:
        """
        HTTP content length in request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "content_length")

    @content_length.setter
    def content_length(self, value: Optional[pulumi.Input['WafProfileConstraintContentLengthArgs']]):
        pulumi.set(self, "content_length", value)

    @property
    @pulumi.getter
    def exceptions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileConstraintExceptionArgs']]]]:
        """
        HTTP constraint exception. The structure of `exception` block is documented below.
        """
        return pulumi.get(self, "exceptions")

    @exceptions.setter
    def exceptions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileConstraintExceptionArgs']]]]):
        pulumi.set(self, "exceptions", value)

    @property
    @pulumi.getter(name="headerLength")
    def header_length(self) -> Optional[pulumi.Input['WafProfileConstraintHeaderLengthArgs']]:
        """
        HTTP header length in request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "header_length")

    @header_length.setter
    def header_length(self, value: Optional[pulumi.Input['WafProfileConstraintHeaderLengthArgs']]):
        pulumi.set(self, "header_length", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input['WafProfileConstraintHostnameArgs']]:
        """
        Enable/disable hostname check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input['WafProfileConstraintHostnameArgs']]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="lineLength")
    def line_length(self) -> Optional[pulumi.Input['WafProfileConstraintLineLengthArgs']]:
        """
        HTTP line length in request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "line_length")

    @line_length.setter
    def line_length(self, value: Optional[pulumi.Input['WafProfileConstraintLineLengthArgs']]):
        pulumi.set(self, "line_length", value)

    @property
    @pulumi.getter
    def malformed(self) -> Optional[pulumi.Input['WafProfileConstraintMalformedArgs']]:
        """
        Enable/disable malformed HTTP request check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "malformed")

    @malformed.setter
    def malformed(self, value: Optional[pulumi.Input['WafProfileConstraintMalformedArgs']]):
        pulumi.set(self, "malformed", value)

    @property
    @pulumi.getter(name="maxCookie")
    def max_cookie(self) -> Optional[pulumi.Input['WafProfileConstraintMaxCookieArgs']]:
        """
        Maximum number of cookies in HTTP request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "max_cookie")

    @max_cookie.setter
    def max_cookie(self, value: Optional[pulumi.Input['WafProfileConstraintMaxCookieArgs']]):
        pulumi.set(self, "max_cookie", value)

    @property
    @pulumi.getter(name="maxHeaderLine")
    def max_header_line(self) -> Optional[pulumi.Input['WafProfileConstraintMaxHeaderLineArgs']]:
        """
        Maximum number of HTTP header line. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "max_header_line")

    @max_header_line.setter
    def max_header_line(self, value: Optional[pulumi.Input['WafProfileConstraintMaxHeaderLineArgs']]):
        pulumi.set(self, "max_header_line", value)

    @property
    @pulumi.getter(name="maxRangeSegment")
    def max_range_segment(self) -> Optional[pulumi.Input['WafProfileConstraintMaxRangeSegmentArgs']]:
        """
        Maximum number of range segments in HTTP range line. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "max_range_segment")

    @max_range_segment.setter
    def max_range_segment(self, value: Optional[pulumi.Input['WafProfileConstraintMaxRangeSegmentArgs']]):
        pulumi.set(self, "max_range_segment", value)

    @property
    @pulumi.getter(name="maxUrlParam")
    def max_url_param(self) -> Optional[pulumi.Input['WafProfileConstraintMaxUrlParamArgs']]:
        """
        Maximum number of parameters in URL. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "max_url_param")

    @max_url_param.setter
    def max_url_param(self, value: Optional[pulumi.Input['WafProfileConstraintMaxUrlParamArgs']]):
        pulumi.set(self, "max_url_param", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input['WafProfileConstraintMethodArgs']]:
        """
        Enable/disable HTTP method check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input['WafProfileConstraintMethodArgs']]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="paramLength")
    def param_length(self) -> Optional[pulumi.Input['WafProfileConstraintParamLengthArgs']]:
        """
        Maximum length of parameter in URL, HTTP POST request or HTTP body. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "param_length")

    @param_length.setter
    def param_length(self, value: Optional[pulumi.Input['WafProfileConstraintParamLengthArgs']]):
        pulumi.set(self, "param_length", value)

    @property
    @pulumi.getter(name="urlParamLength")
    def url_param_length(self) -> Optional[pulumi.Input['WafProfileConstraintUrlParamLengthArgs']]:
        """
        Maximum length of parameter in URL. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "url_param_length")

    @url_param_length.setter
    def url_param_length(self, value: Optional[pulumi.Input['WafProfileConstraintUrlParamLengthArgs']]):
        pulumi.set(self, "url_param_length", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input['WafProfileConstraintVersionArgs']]:
        """
        Enable/disable HTTP version check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input['WafProfileConstraintVersionArgs']]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class WafProfileConstraintContentLengthArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 length: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `bypass`, `permit`, `block`.
        :param pulumi.Input[int] length: Maximum length of URL parameter in bytes (0 to 2147483647).
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Status. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `bypass`, `permit`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum length of URL parameter in bytes (0 to 2147483647).
        """
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileConstraintExceptionArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 content_length: Optional[pulumi.Input[str]] = None,
                 header_length: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 line_length: Optional[pulumi.Input[str]] = None,
                 malformed: Optional[pulumi.Input[str]] = None,
                 max_cookie: Optional[pulumi.Input[str]] = None,
                 max_header_line: Optional[pulumi.Input[str]] = None,
                 max_range_segment: Optional[pulumi.Input[str]] = None,
                 max_url_param: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 param_length: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[str]] = None,
                 url_param_length: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] address: Host address.
        :param pulumi.Input[str] content_length: HTTP content length in request. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] header_length: HTTP header length in request. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] hostname: Enable/disable hostname check. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] id: URL access pattern ID.
        :param pulumi.Input[str] line_length: HTTP line length in request. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] malformed: Enable/disable malformed HTTP request check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] max_cookie: Maximum number of cookies in HTTP request. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] max_header_line: Maximum number of HTTP header line. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] max_range_segment: Maximum number of range segments in HTTP range line. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] max_url_param: Maximum number of parameters in URL. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] method: Enable/disable HTTP method check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] param_length: Maximum length of parameter in URL, HTTP POST request or HTTP body. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pattern: URL pattern.
        :param pulumi.Input[str] regex: Enable/disable regular expression based pattern match. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] url_param_length: Maximum length of parameter in URL. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] version: Enable/disable HTTP version check. Valid values: `enable`, `disable`.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if content_length is not None:
            pulumi.set(__self__, "content_length", content_length)
        if header_length is not None:
            pulumi.set(__self__, "header_length", header_length)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if line_length is not None:
            pulumi.set(__self__, "line_length", line_length)
        if malformed is not None:
            pulumi.set(__self__, "malformed", malformed)
        if max_cookie is not None:
            pulumi.set(__self__, "max_cookie", max_cookie)
        if max_header_line is not None:
            pulumi.set(__self__, "max_header_line", max_header_line)
        if max_range_segment is not None:
            pulumi.set(__self__, "max_range_segment", max_range_segment)
        if max_url_param is not None:
            pulumi.set(__self__, "max_url_param", max_url_param)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if param_length is not None:
            pulumi.set(__self__, "param_length", param_length)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if url_param_length is not None:
            pulumi.set(__self__, "url_param_length", url_param_length)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Host address.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="contentLength")
    def content_length(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP content length in request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "content_length")

    @content_length.setter
    def content_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_length", value)

    @property
    @pulumi.getter(name="headerLength")
    def header_length(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP header length in request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "header_length")

    @header_length.setter
    def header_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_length", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable hostname check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL access pattern ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="lineLength")
    def line_length(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP line length in request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "line_length")

    @line_length.setter
    def line_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line_length", value)

    @property
    @pulumi.getter
    def malformed(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable malformed HTTP request check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "malformed")

    @malformed.setter
    def malformed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "malformed", value)

    @property
    @pulumi.getter(name="maxCookie")
    def max_cookie(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum number of cookies in HTTP request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "max_cookie")

    @max_cookie.setter
    def max_cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_cookie", value)

    @property
    @pulumi.getter(name="maxHeaderLine")
    def max_header_line(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum number of HTTP header line. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "max_header_line")

    @max_header_line.setter
    def max_header_line(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_header_line", value)

    @property
    @pulumi.getter(name="maxRangeSegment")
    def max_range_segment(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum number of range segments in HTTP range line. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "max_range_segment")

    @max_range_segment.setter
    def max_range_segment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_range_segment", value)

    @property
    @pulumi.getter(name="maxUrlParam")
    def max_url_param(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum number of parameters in URL. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "max_url_param")

    @max_url_param.setter
    def max_url_param(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_url_param", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable HTTP method check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="paramLength")
    def param_length(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum length of parameter in URL, HTTP POST request or HTTP body. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "param_length")

    @param_length.setter
    def param_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "param_length", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        URL pattern.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable regular expression based pattern match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter(name="urlParamLength")
    def url_param_length(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum length of parameter in URL. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "url_param_length")

    @url_param_length.setter
    def url_param_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_param_length", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable HTTP version check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class WafProfileConstraintHeaderLengthArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 length: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `bypass`, `permit`, `block`.
        :param pulumi.Input[int] length: Maximum length of URL parameter in bytes (0 to 2147483647).
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Status. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `bypass`, `permit`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum length of URL parameter in bytes (0 to 2147483647).
        """
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileConstraintHostnameArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `bypass`, `permit`, `block`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Status. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `bypass`, `permit`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileConstraintLineLengthArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 length: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `bypass`, `permit`, `block`.
        :param pulumi.Input[int] length: Maximum length of URL parameter in bytes (0 to 2147483647).
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Status. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `bypass`, `permit`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum length of URL parameter in bytes (0 to 2147483647).
        """
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileConstraintMalformedArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `bypass`, `permit`, `block`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Status. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `bypass`, `permit`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileConstraintMaxCookieArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 max_cookie: Optional[pulumi.Input[int]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `bypass`, `permit`, `block`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] max_cookie: Maximum number of cookies in HTTP request. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Status. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if max_cookie is not None:
            pulumi.set(__self__, "max_cookie", max_cookie)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `bypass`, `permit`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="maxCookie")
    def max_cookie(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of cookies in HTTP request. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "max_cookie")

    @max_cookie.setter
    def max_cookie(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_cookie", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileConstraintMaxHeaderLineArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 max_header_line: Optional[pulumi.Input[int]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `bypass`, `permit`, `block`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] max_header_line: Maximum number of HTTP header line. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Status. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if max_header_line is not None:
            pulumi.set(__self__, "max_header_line", max_header_line)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `bypass`, `permit`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="maxHeaderLine")
    def max_header_line(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of HTTP header line. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "max_header_line")

    @max_header_line.setter
    def max_header_line(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_header_line", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileConstraintMaxRangeSegmentArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 max_range_segment: Optional[pulumi.Input[int]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `bypass`, `permit`, `block`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] max_range_segment: Maximum number of range segments in HTTP range line. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Status. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if max_range_segment is not None:
            pulumi.set(__self__, "max_range_segment", max_range_segment)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `bypass`, `permit`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="maxRangeSegment")
    def max_range_segment(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of range segments in HTTP range line. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "max_range_segment")

    @max_range_segment.setter
    def max_range_segment(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_range_segment", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileConstraintMaxUrlParamArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 max_url_param: Optional[pulumi.Input[int]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `bypass`, `permit`, `block`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] max_url_param: Maximum number of parameters in URL. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Status. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if max_url_param is not None:
            pulumi.set(__self__, "max_url_param", max_url_param)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `bypass`, `permit`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="maxUrlParam")
    def max_url_param(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of parameters in URL. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "max_url_param")

    @max_url_param.setter
    def max_url_param(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_url_param", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileConstraintMethodArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `bypass`, `permit`, `block`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Status. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `bypass`, `permit`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileConstraintParamLengthArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 length: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `bypass`, `permit`, `block`.
        :param pulumi.Input[int] length: Maximum length of URL parameter in bytes (0 to 2147483647).
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Status. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `bypass`, `permit`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum length of URL parameter in bytes (0 to 2147483647).
        """
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileConstraintUrlParamLengthArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 length: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `bypass`, `permit`, `block`.
        :param pulumi.Input[int] length: Maximum length of URL parameter in bytes (0 to 2147483647).
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Status. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `bypass`, `permit`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum length of URL parameter in bytes (0 to 2147483647).
        """
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileConstraintVersionArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `bypass`, `permit`, `block`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Status. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `bypass`, `permit`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileMethodArgs:
    def __init__(__self__, *,
                 default_allowed_methods: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 method_policies: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileMethodMethodPolicyArgs']]]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] default_allowed_methods: Methods. Valid values: `get`, `post`, `put`, `head`, `connect`, `trace`, `options`, `delete`, `others`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['WafProfileMethodMethodPolicyArgs']]] method_policies: HTTP method policy. The structure of `method_policy` block is documented below.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Status. Valid values: `enable`, `disable`.
        """
        if default_allowed_methods is not None:
            pulumi.set(__self__, "default_allowed_methods", default_allowed_methods)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if method_policies is not None:
            pulumi.set(__self__, "method_policies", method_policies)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="defaultAllowedMethods")
    def default_allowed_methods(self) -> Optional[pulumi.Input[str]]:
        """
        Methods. Valid values: `get`, `post`, `put`, `head`, `connect`, `trace`, `options`, `delete`, `others`.
        """
        return pulumi.get(self, "default_allowed_methods")

    @default_allowed_methods.setter
    def default_allowed_methods(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_allowed_methods", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="methodPolicies")
    def method_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileMethodMethodPolicyArgs']]]]:
        """
        HTTP method policy. The structure of `method_policy` block is documented below.
        """
        return pulumi.get(self, "method_policies")

    @method_policies.setter
    def method_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileMethodMethodPolicyArgs']]]]):
        pulumi.set(self, "method_policies", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileMethodMethodPolicyArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 allowed_methods: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] address: Host address.
        :param pulumi.Input[str] allowed_methods: Allowed Methods. Valid values: `get`, `post`, `put`, `head`, `connect`, `trace`, `options`, `delete`, `others`.
        :param pulumi.Input[int] id: URL access pattern ID.
        :param pulumi.Input[str] pattern: URL pattern.
        :param pulumi.Input[str] regex: Enable/disable regular expression based pattern match. Valid values: `enable`, `disable`.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if allowed_methods is not None:
            pulumi.set(__self__, "allowed_methods", allowed_methods)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Host address.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed Methods. Valid values: `get`, `post`, `put`, `head`, `connect`, `trace`, `options`, `delete`, `others`.
        """
        return pulumi.get(self, "allowed_methods")

    @allowed_methods.setter
    def allowed_methods(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowed_methods", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL access pattern ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        URL pattern.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable regular expression based pattern match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class WafProfileSignatureArgs:
    def __init__(__self__, *,
                 credit_card_detection_threshold: Optional[pulumi.Input[int]] = None,
                 custom_signatures: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureCustomSignatureArgs']]]] = None,
                 disabled_signatures: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureDisabledSignatureArgs']]]] = None,
                 disabled_sub_classes: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureDisabledSubClassArgs']]]] = None,
                 main_classes: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureMainClassArgs']]]] = None):
        """
        :param pulumi.Input[int] credit_card_detection_threshold: The minimum number of Credit cards to detect violation.
        :param pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureCustomSignatureArgs']]] custom_signatures: Custom signature. The structure of `custom_signature` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureDisabledSignatureArgs']]] disabled_signatures: Disabled signatures The structure of `disabled_signature` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureDisabledSubClassArgs']]] disabled_sub_classes: Disabled signature subclasses. The structure of `disabled_sub_class` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureMainClassArgs']]] main_classes: Main signature class. The structure of `main_class` block is documented below.
        """
        if credit_card_detection_threshold is not None:
            pulumi.set(__self__, "credit_card_detection_threshold", credit_card_detection_threshold)
        if custom_signatures is not None:
            pulumi.set(__self__, "custom_signatures", custom_signatures)
        if disabled_signatures is not None:
            pulumi.set(__self__, "disabled_signatures", disabled_signatures)
        if disabled_sub_classes is not None:
            pulumi.set(__self__, "disabled_sub_classes", disabled_sub_classes)
        if main_classes is not None:
            pulumi.set(__self__, "main_classes", main_classes)

    @property
    @pulumi.getter(name="creditCardDetectionThreshold")
    def credit_card_detection_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum number of Credit cards to detect violation.
        """
        return pulumi.get(self, "credit_card_detection_threshold")

    @credit_card_detection_threshold.setter
    def credit_card_detection_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "credit_card_detection_threshold", value)

    @property
    @pulumi.getter(name="customSignatures")
    def custom_signatures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureCustomSignatureArgs']]]]:
        """
        Custom signature. The structure of `custom_signature` block is documented below.
        """
        return pulumi.get(self, "custom_signatures")

    @custom_signatures.setter
    def custom_signatures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureCustomSignatureArgs']]]]):
        pulumi.set(self, "custom_signatures", value)

    @property
    @pulumi.getter(name="disabledSignatures")
    def disabled_signatures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureDisabledSignatureArgs']]]]:
        """
        Disabled signatures The structure of `disabled_signature` block is documented below.
        """
        return pulumi.get(self, "disabled_signatures")

    @disabled_signatures.setter
    def disabled_signatures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureDisabledSignatureArgs']]]]):
        pulumi.set(self, "disabled_signatures", value)

    @property
    @pulumi.getter(name="disabledSubClasses")
    def disabled_sub_classes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureDisabledSubClassArgs']]]]:
        """
        Disabled signature subclasses. The structure of `disabled_sub_class` block is documented below.
        """
        return pulumi.get(self, "disabled_sub_classes")

    @disabled_sub_classes.setter
    def disabled_sub_classes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureDisabledSubClassArgs']]]]):
        pulumi.set(self, "disabled_sub_classes", value)

    @property
    @pulumi.getter(name="mainClasses")
    def main_classes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureMainClassArgs']]]]:
        """
        Main signature class. The structure of `main_class` block is documented below.
        """
        return pulumi.get(self, "main_classes")

    @main_classes.setter
    def main_classes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileSignatureMainClassArgs']]]]):
        pulumi.set(self, "main_classes", value)


@pulumi.input_type
class WafProfileSignatureCustomSignatureArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 case_sensitivity: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `bypass`, `permit`, `block`.
        :param pulumi.Input[str] case_sensitivity: Case sensitivity in pattern. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] direction: Traffic direction. Valid values: `request`, `response`.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Address name.
        :param pulumi.Input[str] pattern: URL pattern.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Status. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] target: Match HTTP target. Valid values: `arg`, `arg-name`, `req-body`, `req-cookie`, `req-cookie-name`, `req-filename`, `req-header`, `req-header-name`, `req-raw-uri`, `req-uri`, `resp-body`, `resp-hdr`, `resp-status`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if case_sensitivity is not None:
            pulumi.set(__self__, "case_sensitivity", case_sensitivity)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `bypass`, `permit`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="caseSensitivity")
    def case_sensitivity(self) -> Optional[pulumi.Input[str]]:
        """
        Case sensitivity in pattern. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "case_sensitivity")

    @case_sensitivity.setter
    def case_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "case_sensitivity", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic direction. Valid values: `request`, `response`.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        URL pattern.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        """
        Match HTTP target. Valid values: `arg`, `arg-name`, `req-body`, `req-cookie`, `req-cookie-name`, `req-filename`, `req-header`, `req-header-name`, `req-raw-uri`, `req-uri`, `resp-body`, `resp-hdr`, `resp-status`.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class WafProfileSignatureDisabledSignatureArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: URL access pattern ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL access pattern ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class WafProfileSignatureDisabledSubClassArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: URL access pattern ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL access pattern ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class WafProfileSignatureMainClassArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action. Valid values: `bypass`, `permit`, `block`.
        :param pulumi.Input[int] id: URL access pattern ID.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        :param pulumi.Input[str] status: Status. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `bypass`, `permit`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL access pattern ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WafProfileUrlAccessArgs:
    def __init__(__self__, *,
                 access_patterns: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileUrlAccessAccessPatternArgs']]]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WafProfileUrlAccessAccessPatternArgs']]] access_patterns: URL access pattern. The structure of `access_pattern` block is documented below.
        :param pulumi.Input[str] action: Action. Valid values: `bypass`, `permit`, `block`.
        :param pulumi.Input[str] address: Host address.
        :param pulumi.Input[int] id: URL access pattern ID.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] severity: Severity. Valid values: `high`, `medium`, `low`.
        """
        if access_patterns is not None:
            pulumi.set(__self__, "access_patterns", access_patterns)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="accessPatterns")
    def access_patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileUrlAccessAccessPatternArgs']]]]:
        """
        URL access pattern. The structure of `access_pattern` block is documented below.
        """
        return pulumi.get(self, "access_patterns")

    @access_patterns.setter
    def access_patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileUrlAccessAccessPatternArgs']]]]):
        pulumi.set(self, "access_patterns", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action. Valid values: `bypass`, `permit`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Host address.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL access pattern ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Severity. Valid values: `high`, `medium`, `low`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)


@pulumi.input_type
class WafProfileUrlAccessAccessPatternArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 negate: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[str]] = None,
                 srcaddr: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: URL access pattern ID.
        :param pulumi.Input[str] negate: Enable/disable match negation. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] pattern: URL pattern.
        :param pulumi.Input[str] regex: Enable/disable regular expression based pattern match. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] srcaddr: Source address.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if srcaddr is not None:
            pulumi.set(__self__, "srcaddr", srcaddr)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        URL access pattern ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable match negation. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        URL pattern.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable regular expression based pattern match. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def srcaddr(self) -> Optional[pulumi.Input[str]]:
        """
        Source address.
        """
        return pulumi.get(self, "srcaddr")

    @srcaddr.setter
    def srcaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr", value)


@pulumi.input_type
class WanoptCacheServiceDstPeerArgs:
    def __init__(__self__, *,
                 auth_type: Optional[pulumi.Input[int]] = None,
                 device_id: Optional[pulumi.Input[str]] = None,
                 encode_type: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] auth_type: Set authentication type for this peer.
        :param pulumi.Input[str] device_id: Device ID of this peer.
        :param pulumi.Input[int] encode_type: Set encode type for this peer.
        :param pulumi.Input[str] ip: Set cluster IP address of this peer.
        :param pulumi.Input[int] priority: Set priority for this peer.
        """
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if encode_type is not None:
            pulumi.set(__self__, "encode_type", encode_type)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[int]]:
        """
        Set authentication type for this peer.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[str]]:
        """
        Device ID of this peer.
        """
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_id", value)

    @property
    @pulumi.getter(name="encodeType")
    def encode_type(self) -> Optional[pulumi.Input[int]]:
        """
        Set encode type for this peer.
        """
        return pulumi.get(self, "encode_type")

    @encode_type.setter
    def encode_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "encode_type", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Set cluster IP address of this peer.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Set priority for this peer.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class WanoptCacheServiceSrcPeerArgs:
    def __init__(__self__, *,
                 auth_type: Optional[pulumi.Input[int]] = None,
                 device_id: Optional[pulumi.Input[str]] = None,
                 encode_type: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] auth_type: Set authentication type for this peer.
        :param pulumi.Input[str] device_id: Device ID of this peer.
        :param pulumi.Input[int] encode_type: Set encode type for this peer.
        :param pulumi.Input[str] ip: Set cluster IP address of this peer.
        :param pulumi.Input[int] priority: Set priority for this peer.
        """
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if encode_type is not None:
            pulumi.set(__self__, "encode_type", encode_type)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[int]]:
        """
        Set authentication type for this peer.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[str]]:
        """
        Device ID of this peer.
        """
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_id", value)

    @property
    @pulumi.getter(name="encodeType")
    def encode_type(self) -> Optional[pulumi.Input[int]]:
        """
        Set encode type for this peer.
        """
        return pulumi.get(self, "encode_type")

    @encode_type.setter
    def encode_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "encode_type", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Set cluster IP address of this peer.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Set priority for this peer.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class WanoptContentDeliveryNetworkRuleHostDomainNameSuffixArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: WAN optimization content delivery network rule name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        WAN optimization content delivery network rule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WanoptContentDeliveryNetworkRuleRuleArgs:
    def __init__(__self__, *,
                 content_id: Optional[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleContentIdArgs']] = None,
                 match_entries: Optional[pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleMatchEntryArgs']]]] = None,
                 match_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 skip_entries: Optional[pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleSkipEntryArgs']]]] = None,
                 skip_rule_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['WanoptContentDeliveryNetworkRuleRuleContentIdArgs'] content_id: Content ID settings. The structure of `content_id` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleMatchEntryArgs']]] match_entries: List of entries to match. The structure of `match_entries` block is documented below.
        :param pulumi.Input[str] match_mode: Match criteria for collecting content ID. Valid values: `all`, `any`.
        :param pulumi.Input[str] name: WAN optimization content delivery network rule name.
        :param pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleSkipEntryArgs']]] skip_entries: List of entries to skip. The structure of `skip_entries` block is documented below.
        :param pulumi.Input[str] skip_rule_mode: Skip mode when evaluating skip-rules. Valid values: `all`, `any`.
        """
        if content_id is not None:
            pulumi.set(__self__, "content_id", content_id)
        if match_entries is not None:
            pulumi.set(__self__, "match_entries", match_entries)
        if match_mode is not None:
            pulumi.set(__self__, "match_mode", match_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if skip_entries is not None:
            pulumi.set(__self__, "skip_entries", skip_entries)
        if skip_rule_mode is not None:
            pulumi.set(__self__, "skip_rule_mode", skip_rule_mode)

    @property
    @pulumi.getter(name="contentId")
    def content_id(self) -> Optional[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleContentIdArgs']]:
        """
        Content ID settings. The structure of `content_id` block is documented below.
        """
        return pulumi.get(self, "content_id")

    @content_id.setter
    def content_id(self, value: Optional[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleContentIdArgs']]):
        pulumi.set(self, "content_id", value)

    @property
    @pulumi.getter(name="matchEntries")
    def match_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleMatchEntryArgs']]]]:
        """
        List of entries to match. The structure of `match_entries` block is documented below.
        """
        return pulumi.get(self, "match_entries")

    @match_entries.setter
    def match_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleMatchEntryArgs']]]]):
        pulumi.set(self, "match_entries", value)

    @property
    @pulumi.getter(name="matchMode")
    def match_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Match criteria for collecting content ID. Valid values: `all`, `any`.
        """
        return pulumi.get(self, "match_mode")

    @match_mode.setter
    def match_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        WAN optimization content delivery network rule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="skipEntries")
    def skip_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleSkipEntryArgs']]]]:
        """
        List of entries to skip. The structure of `skip_entries` block is documented below.
        """
        return pulumi.get(self, "skip_entries")

    @skip_entries.setter
    def skip_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleSkipEntryArgs']]]]):
        pulumi.set(self, "skip_entries", value)

    @property
    @pulumi.getter(name="skipRuleMode")
    def skip_rule_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Skip mode when evaluating skip-rules. Valid values: `all`, `any`.
        """
        return pulumi.get(self, "skip_rule_mode")

    @skip_rule_mode.setter
    def skip_rule_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skip_rule_mode", value)


@pulumi.input_type
class WanoptContentDeliveryNetworkRuleRuleContentIdArgs:
    def __init__(__self__, *,
                 end_direction: Optional[pulumi.Input[str]] = None,
                 end_skip: Optional[pulumi.Input[int]] = None,
                 end_str: Optional[pulumi.Input[str]] = None,
                 range_str: Optional[pulumi.Input[str]] = None,
                 start_direction: Optional[pulumi.Input[str]] = None,
                 start_skip: Optional[pulumi.Input[int]] = None,
                 start_str: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end_direction: Search direction from end-str match. Valid values: `forward`, `backward`.
        :param pulumi.Input[int] end_skip: Number of characters in URL to skip after end-str has been matched.
        :param pulumi.Input[str] end_str: String from which to end search.
        :param pulumi.Input[str] range_str: Name of content ID within the start string and end string.
        :param pulumi.Input[str] start_direction: Search direction from start-str match. Valid values: `forward`, `backward`.
        :param pulumi.Input[int] start_skip: Number of characters in URL to skip after start-str has been matched.
        :param pulumi.Input[str] start_str: String from which to start search.
        :param pulumi.Input[str] target: Option in HTTP header or URL parameter to match. Valid values: `path`, `parameter`, `referrer`, `youtube-map`, `youtube-id`, `youku-id`, `hls-manifest`, `dash-manifest`, `hls-fragment`, `dash-fragment`.
        """
        if end_direction is not None:
            pulumi.set(__self__, "end_direction", end_direction)
        if end_skip is not None:
            pulumi.set(__self__, "end_skip", end_skip)
        if end_str is not None:
            pulumi.set(__self__, "end_str", end_str)
        if range_str is not None:
            pulumi.set(__self__, "range_str", range_str)
        if start_direction is not None:
            pulumi.set(__self__, "start_direction", start_direction)
        if start_skip is not None:
            pulumi.set(__self__, "start_skip", start_skip)
        if start_str is not None:
            pulumi.set(__self__, "start_str", start_str)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="endDirection")
    def end_direction(self) -> Optional[pulumi.Input[str]]:
        """
        Search direction from end-str match. Valid values: `forward`, `backward`.
        """
        return pulumi.get(self, "end_direction")

    @end_direction.setter
    def end_direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_direction", value)

    @property
    @pulumi.getter(name="endSkip")
    def end_skip(self) -> Optional[pulumi.Input[int]]:
        """
        Number of characters in URL to skip after end-str has been matched.
        """
        return pulumi.get(self, "end_skip")

    @end_skip.setter
    def end_skip(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_skip", value)

    @property
    @pulumi.getter(name="endStr")
    def end_str(self) -> Optional[pulumi.Input[str]]:
        """
        String from which to end search.
        """
        return pulumi.get(self, "end_str")

    @end_str.setter
    def end_str(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_str", value)

    @property
    @pulumi.getter(name="rangeStr")
    def range_str(self) -> Optional[pulumi.Input[str]]:
        """
        Name of content ID within the start string and end string.
        """
        return pulumi.get(self, "range_str")

    @range_str.setter
    def range_str(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "range_str", value)

    @property
    @pulumi.getter(name="startDirection")
    def start_direction(self) -> Optional[pulumi.Input[str]]:
        """
        Search direction from start-str match. Valid values: `forward`, `backward`.
        """
        return pulumi.get(self, "start_direction")

    @start_direction.setter
    def start_direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_direction", value)

    @property
    @pulumi.getter(name="startSkip")
    def start_skip(self) -> Optional[pulumi.Input[int]]:
        """
        Number of characters in URL to skip after start-str has been matched.
        """
        return pulumi.get(self, "start_skip")

    @start_skip.setter
    def start_skip(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_skip", value)

    @property
    @pulumi.getter(name="startStr")
    def start_str(self) -> Optional[pulumi.Input[str]]:
        """
        String from which to start search.
        """
        return pulumi.get(self, "start_str")

    @start_str.setter
    def start_str(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_str", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        """
        Option in HTTP header or URL parameter to match. Valid values: `path`, `parameter`, `referrer`, `youtube-map`, `youtube-id`, `youku-id`, `hls-manifest`, `dash-manifest`, `hls-fragment`, `dash-fragment`.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class WanoptContentDeliveryNetworkRuleRuleMatchEntryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 patterns: Optional[pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleMatchEntryPatternArgs']]]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Rule ID.
        :param pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleMatchEntryPatternArgs']]] patterns: Pattern string for matching target (Referrer or URL pattern, eg. "a", "a*c", "*a*", "a*c*e", and "*"). The structure of `pattern` block is documented below.
        :param pulumi.Input[str] target: Option in HTTP header or URL parameter to match. Valid values: `path`, `parameter`, `referrer`, `youtube-map`, `youtube-id`, `youku-id`, `hls-manifest`, `dash-manifest`, `hls-fragment`, `dash-fragment`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if patterns is not None:
            pulumi.set(__self__, "patterns", patterns)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Rule ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleMatchEntryPatternArgs']]]]:
        """
        Pattern string for matching target (Referrer or URL pattern, eg. "a", "a*c", "*a*", "a*c*e", and "*"). The structure of `pattern` block is documented below.
        """
        return pulumi.get(self, "patterns")

    @patterns.setter
    def patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleMatchEntryPatternArgs']]]]):
        pulumi.set(self, "patterns", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        """
        Option in HTTP header or URL parameter to match. Valid values: `path`, `parameter`, `referrer`, `youtube-map`, `youtube-id`, `youku-id`, `hls-manifest`, `dash-manifest`, `hls-fragment`, `dash-fragment`.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class WanoptContentDeliveryNetworkRuleRuleMatchEntryPatternArgs:
    def __init__(__self__, *,
                 string: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] string: Pattern strings.
        """
        if string is not None:
            pulumi.set(__self__, "string", string)

    @property
    @pulumi.getter
    def string(self) -> Optional[pulumi.Input[str]]:
        """
        Pattern strings.
        """
        return pulumi.get(self, "string")

    @string.setter
    def string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string", value)


@pulumi.input_type
class WanoptContentDeliveryNetworkRuleRuleSkipEntryArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 patterns: Optional[pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleSkipEntryPatternArgs']]]] = None,
                 target: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Rule ID.
        :param pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleSkipEntryPatternArgs']]] patterns: Pattern string for matching target (Referrer or URL pattern, eg. "a", "a*c", "*a*", "a*c*e", and "*"). The structure of `pattern` block is documented below.
        :param pulumi.Input[str] target: Option in HTTP header or URL parameter to match. Valid values: `path`, `parameter`, `referrer`, `youtube-map`, `youtube-id`, `youku-id`, `hls-manifest`, `dash-manifest`, `hls-fragment`, `dash-fragment`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if patterns is not None:
            pulumi.set(__self__, "patterns", patterns)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Rule ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleSkipEntryPatternArgs']]]]:
        """
        Pattern string for matching target (Referrer or URL pattern, eg. "a", "a*c", "*a*", "a*c*e", and "*"). The structure of `pattern` block is documented below.
        """
        return pulumi.get(self, "patterns")

    @patterns.setter
    def patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WanoptContentDeliveryNetworkRuleRuleSkipEntryPatternArgs']]]]):
        pulumi.set(self, "patterns", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        """
        Option in HTTP header or URL parameter to match. Valid values: `path`, `parameter`, `referrer`, `youtube-map`, `youtube-id`, `youku-id`, `hls-manifest`, `dash-manifest`, `hls-fragment`, `dash-fragment`.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class WanoptContentDeliveryNetworkRuleRuleSkipEntryPatternArgs:
    def __init__(__self__, *,
                 string: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] string: Pattern strings.
        """
        if string is not None:
            pulumi.set(__self__, "string", string)

    @property
    @pulumi.getter
    def string(self) -> Optional[pulumi.Input[str]]:
        """
        Pattern strings.
        """
        return pulumi.get(self, "string")

    @string.setter
    def string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string", value)


@pulumi.input_type
class WanoptProfileCifsArgs:
    def __init__(__self__, *,
                 byte_caching: Optional[pulumi.Input[str]] = None,
                 log_traffic: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 prefer_chunking: Optional[pulumi.Input[str]] = None,
                 protocol_opt: Optional[pulumi.Input[str]] = None,
                 secure_tunnel: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tunnel_sharing: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] byte_caching: Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_traffic: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] port: Single port number or port number range for TCP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
        :param pulumi.Input[str] prefer_chunking: Select dynamic or fixed-size data chunking for HTTP WAN Optimization. Valid values: `dynamic`, `fix`.
        :param pulumi.Input[str] protocol_opt: Select Protocol specific optimitation or generic TCP optimization. Valid values: `protocol`, `tcp`.
        :param pulumi.Input[str] secure_tunnel: Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tunnel_sharing: Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
        """
        if byte_caching is not None:
            pulumi.set(__self__, "byte_caching", byte_caching)
        if log_traffic is not None:
            pulumi.set(__self__, "log_traffic", log_traffic)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if prefer_chunking is not None:
            pulumi.set(__self__, "prefer_chunking", prefer_chunking)
        if protocol_opt is not None:
            pulumi.set(__self__, "protocol_opt", protocol_opt)
        if secure_tunnel is not None:
            pulumi.set(__self__, "secure_tunnel", secure_tunnel)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tunnel_sharing is not None:
            pulumi.set(__self__, "tunnel_sharing", tunnel_sharing)

    @property
    @pulumi.getter(name="byteCaching")
    def byte_caching(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "byte_caching")

    @byte_caching.setter
    def byte_caching(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "byte_caching", value)

    @property
    @pulumi.getter(name="logTraffic")
    def log_traffic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_traffic")

    @log_traffic.setter
    def log_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_traffic", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Single port number or port number range for TCP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="preferChunking")
    def prefer_chunking(self) -> Optional[pulumi.Input[str]]:
        """
        Select dynamic or fixed-size data chunking for HTTP WAN Optimization. Valid values: `dynamic`, `fix`.
        """
        return pulumi.get(self, "prefer_chunking")

    @prefer_chunking.setter
    def prefer_chunking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefer_chunking", value)

    @property
    @pulumi.getter(name="protocolOpt")
    def protocol_opt(self) -> Optional[pulumi.Input[str]]:
        """
        Select Protocol specific optimitation or generic TCP optimization. Valid values: `protocol`, `tcp`.
        """
        return pulumi.get(self, "protocol_opt")

    @protocol_opt.setter
    def protocol_opt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol_opt", value)

    @property
    @pulumi.getter(name="secureTunnel")
    def secure_tunnel(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "secure_tunnel")

    @secure_tunnel.setter
    def secure_tunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secure_tunnel", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tunnelSharing")
    def tunnel_sharing(self) -> Optional[pulumi.Input[str]]:
        """
        Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
        """
        return pulumi.get(self, "tunnel_sharing")

    @tunnel_sharing.setter
    def tunnel_sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_sharing", value)


@pulumi.input_type
class WanoptProfileFtpArgs:
    def __init__(__self__, *,
                 byte_caching: Optional[pulumi.Input[str]] = None,
                 log_traffic: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 prefer_chunking: Optional[pulumi.Input[str]] = None,
                 protocol_opt: Optional[pulumi.Input[str]] = None,
                 secure_tunnel: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tunnel_sharing: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] byte_caching: Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_traffic: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] port: Single port number or port number range for TCP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
        :param pulumi.Input[str] prefer_chunking: Select dynamic or fixed-size data chunking for HTTP WAN Optimization. Valid values: `dynamic`, `fix`.
        :param pulumi.Input[str] protocol_opt: Select Protocol specific optimitation or generic TCP optimization. Valid values: `protocol`, `tcp`.
        :param pulumi.Input[str] secure_tunnel: Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl: Enable/disable SSL/TLS offloading. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tunnel_sharing: Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
        """
        if byte_caching is not None:
            pulumi.set(__self__, "byte_caching", byte_caching)
        if log_traffic is not None:
            pulumi.set(__self__, "log_traffic", log_traffic)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if prefer_chunking is not None:
            pulumi.set(__self__, "prefer_chunking", prefer_chunking)
        if protocol_opt is not None:
            pulumi.set(__self__, "protocol_opt", protocol_opt)
        if secure_tunnel is not None:
            pulumi.set(__self__, "secure_tunnel", secure_tunnel)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tunnel_sharing is not None:
            pulumi.set(__self__, "tunnel_sharing", tunnel_sharing)

    @property
    @pulumi.getter(name="byteCaching")
    def byte_caching(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "byte_caching")

    @byte_caching.setter
    def byte_caching(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "byte_caching", value)

    @property
    @pulumi.getter(name="logTraffic")
    def log_traffic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_traffic")

    @log_traffic.setter
    def log_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_traffic", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Single port number or port number range for TCP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="preferChunking")
    def prefer_chunking(self) -> Optional[pulumi.Input[str]]:
        """
        Select dynamic or fixed-size data chunking for HTTP WAN Optimization. Valid values: `dynamic`, `fix`.
        """
        return pulumi.get(self, "prefer_chunking")

    @prefer_chunking.setter
    def prefer_chunking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefer_chunking", value)

    @property
    @pulumi.getter(name="protocolOpt")
    def protocol_opt(self) -> Optional[pulumi.Input[str]]:
        """
        Select Protocol specific optimitation or generic TCP optimization. Valid values: `protocol`, `tcp`.
        """
        return pulumi.get(self, "protocol_opt")

    @protocol_opt.setter
    def protocol_opt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol_opt", value)

    @property
    @pulumi.getter(name="secureTunnel")
    def secure_tunnel(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "secure_tunnel")

    @secure_tunnel.setter
    def secure_tunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secure_tunnel", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSL/TLS offloading. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tunnelSharing")
    def tunnel_sharing(self) -> Optional[pulumi.Input[str]]:
        """
        Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
        """
        return pulumi.get(self, "tunnel_sharing")

    @tunnel_sharing.setter
    def tunnel_sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_sharing", value)


@pulumi.input_type
class WanoptProfileHttpArgs:
    def __init__(__self__, *,
                 byte_caching: Optional[pulumi.Input[str]] = None,
                 log_traffic: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 prefer_chunking: Optional[pulumi.Input[str]] = None,
                 protocol_opt: Optional[pulumi.Input[str]] = None,
                 secure_tunnel: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[str]] = None,
                 ssl_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tunnel_non_http: Optional[pulumi.Input[str]] = None,
                 tunnel_sharing: Optional[pulumi.Input[str]] = None,
                 unknown_http_version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] byte_caching: Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_traffic: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] port: Single port number or port number range for TCP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
        :param pulumi.Input[str] prefer_chunking: Select dynamic or fixed-size data chunking for HTTP WAN Optimization. Valid values: `dynamic`, `fix`.
        :param pulumi.Input[str] protocol_opt: Select Protocol specific optimitation or generic TCP optimization. Valid values: `protocol`, `tcp`.
        :param pulumi.Input[str] secure_tunnel: Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl: Enable/disable SSL/TLS offloading. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ssl_port: Port on which to expect HTTPS traffic for SSL/TLS offloading.
        :param pulumi.Input[str] status: Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tunnel_non_http: Configure how to process non-HTTP traffic when a profile configured for HTTP traffic accepts a non-HTTP session. Can occur if an application sends non-HTTP traffic using an HTTP destination port. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tunnel_sharing: Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
        :param pulumi.Input[str] unknown_http_version: How to handle HTTP sessions that do not comply with HTTP 0.9, 1.0, or 1.1. Valid values: `reject`, `tunnel`, `best-effort`.
        """
        if byte_caching is not None:
            pulumi.set(__self__, "byte_caching", byte_caching)
        if log_traffic is not None:
            pulumi.set(__self__, "log_traffic", log_traffic)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if prefer_chunking is not None:
            pulumi.set(__self__, "prefer_chunking", prefer_chunking)
        if protocol_opt is not None:
            pulumi.set(__self__, "protocol_opt", protocol_opt)
        if secure_tunnel is not None:
            pulumi.set(__self__, "secure_tunnel", secure_tunnel)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if ssl_port is not None:
            pulumi.set(__self__, "ssl_port", ssl_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tunnel_non_http is not None:
            pulumi.set(__self__, "tunnel_non_http", tunnel_non_http)
        if tunnel_sharing is not None:
            pulumi.set(__self__, "tunnel_sharing", tunnel_sharing)
        if unknown_http_version is not None:
            pulumi.set(__self__, "unknown_http_version", unknown_http_version)

    @property
    @pulumi.getter(name="byteCaching")
    def byte_caching(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "byte_caching")

    @byte_caching.setter
    def byte_caching(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "byte_caching", value)

    @property
    @pulumi.getter(name="logTraffic")
    def log_traffic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_traffic")

    @log_traffic.setter
    def log_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_traffic", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Single port number or port number range for TCP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="preferChunking")
    def prefer_chunking(self) -> Optional[pulumi.Input[str]]:
        """
        Select dynamic or fixed-size data chunking for HTTP WAN Optimization. Valid values: `dynamic`, `fix`.
        """
        return pulumi.get(self, "prefer_chunking")

    @prefer_chunking.setter
    def prefer_chunking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefer_chunking", value)

    @property
    @pulumi.getter(name="protocolOpt")
    def protocol_opt(self) -> Optional[pulumi.Input[str]]:
        """
        Select Protocol specific optimitation or generic TCP optimization. Valid values: `protocol`, `tcp`.
        """
        return pulumi.get(self, "protocol_opt")

    @protocol_opt.setter
    def protocol_opt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol_opt", value)

    @property
    @pulumi.getter(name="secureTunnel")
    def secure_tunnel(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "secure_tunnel")

    @secure_tunnel.setter
    def secure_tunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secure_tunnel", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSL/TLS offloading. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter(name="sslPort")
    def ssl_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port on which to expect HTTPS traffic for SSL/TLS offloading.
        """
        return pulumi.get(self, "ssl_port")

    @ssl_port.setter
    def ssl_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tunnelNonHttp")
    def tunnel_non_http(self) -> Optional[pulumi.Input[str]]:
        """
        Configure how to process non-HTTP traffic when a profile configured for HTTP traffic accepts a non-HTTP session. Can occur if an application sends non-HTTP traffic using an HTTP destination port. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tunnel_non_http")

    @tunnel_non_http.setter
    def tunnel_non_http(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_non_http", value)

    @property
    @pulumi.getter(name="tunnelSharing")
    def tunnel_sharing(self) -> Optional[pulumi.Input[str]]:
        """
        Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
        """
        return pulumi.get(self, "tunnel_sharing")

    @tunnel_sharing.setter
    def tunnel_sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_sharing", value)

    @property
    @pulumi.getter(name="unknownHttpVersion")
    def unknown_http_version(self) -> Optional[pulumi.Input[str]]:
        """
        How to handle HTTP sessions that do not comply with HTTP 0.9, 1.0, or 1.1. Valid values: `reject`, `tunnel`, `best-effort`.
        """
        return pulumi.get(self, "unknown_http_version")

    @unknown_http_version.setter
    def unknown_http_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown_http_version", value)


@pulumi.input_type
class WanoptProfileMapiArgs:
    def __init__(__self__, *,
                 byte_caching: Optional[pulumi.Input[str]] = None,
                 log_traffic: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 secure_tunnel: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tunnel_sharing: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] byte_caching: Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] log_traffic: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] port: Single port number or port number range for TCP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
        :param pulumi.Input[str] secure_tunnel: Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tunnel_sharing: Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
        """
        if byte_caching is not None:
            pulumi.set(__self__, "byte_caching", byte_caching)
        if log_traffic is not None:
            pulumi.set(__self__, "log_traffic", log_traffic)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if secure_tunnel is not None:
            pulumi.set(__self__, "secure_tunnel", secure_tunnel)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tunnel_sharing is not None:
            pulumi.set(__self__, "tunnel_sharing", tunnel_sharing)

    @property
    @pulumi.getter(name="byteCaching")
    def byte_caching(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "byte_caching")

    @byte_caching.setter
    def byte_caching(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "byte_caching", value)

    @property
    @pulumi.getter(name="logTraffic")
    def log_traffic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_traffic")

    @log_traffic.setter
    def log_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_traffic", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Single port number or port number range for TCP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="secureTunnel")
    def secure_tunnel(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "secure_tunnel")

    @secure_tunnel.setter
    def secure_tunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secure_tunnel", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tunnelSharing")
    def tunnel_sharing(self) -> Optional[pulumi.Input[str]]:
        """
        Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
        """
        return pulumi.get(self, "tunnel_sharing")

    @tunnel_sharing.setter
    def tunnel_sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_sharing", value)


@pulumi.input_type
class WanoptProfileTcpArgs:
    def __init__(__self__, *,
                 byte_caching: Optional[pulumi.Input[str]] = None,
                 byte_caching_opt: Optional[pulumi.Input[str]] = None,
                 log_traffic: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 secure_tunnel: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[str]] = None,
                 ssl_port: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tunnel_sharing: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] byte_caching: Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] byte_caching_opt: Select whether TCP byte-caching uses system memory only or both memory and disk space. Valid values: `mem-only`, `mem-disk`.
        :param pulumi.Input[str] log_traffic: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] port: Single port number or port number range for TCP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
        :param pulumi.Input[str] secure_tunnel: Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ssl: Enable/disable SSL/TLS offloading. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] ssl_port: Port on which to expect HTTPS traffic for SSL/TLS offloading.
        :param pulumi.Input[str] status: Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tunnel_sharing: Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
        """
        if byte_caching is not None:
            pulumi.set(__self__, "byte_caching", byte_caching)
        if byte_caching_opt is not None:
            pulumi.set(__self__, "byte_caching_opt", byte_caching_opt)
        if log_traffic is not None:
            pulumi.set(__self__, "log_traffic", log_traffic)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if secure_tunnel is not None:
            pulumi.set(__self__, "secure_tunnel", secure_tunnel)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if ssl_port is not None:
            pulumi.set(__self__, "ssl_port", ssl_port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tunnel_sharing is not None:
            pulumi.set(__self__, "tunnel_sharing", tunnel_sharing)

    @property
    @pulumi.getter(name="byteCaching")
    def byte_caching(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable byte-caching for HTTP. Byte caching reduces the amount of traffic by caching file data sent across the WAN and in future serving if from the cache. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "byte_caching")

    @byte_caching.setter
    def byte_caching(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "byte_caching", value)

    @property
    @pulumi.getter(name="byteCachingOpt")
    def byte_caching_opt(self) -> Optional[pulumi.Input[str]]:
        """
        Select whether TCP byte-caching uses system memory only or both memory and disk space. Valid values: `mem-only`, `mem-disk`.
        """
        return pulumi.get(self, "byte_caching_opt")

    @byte_caching_opt.setter
    def byte_caching_opt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "byte_caching_opt", value)

    @property
    @pulumi.getter(name="logTraffic")
    def log_traffic(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_traffic")

    @log_traffic.setter
    def log_traffic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_traffic", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        Single port number or port number range for TCP. Only packets with a destination port number that matches this port number or range are accepted by this profile.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="secureTunnel")
    def secure_tunnel(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable securing the WAN Opt tunnel using SSL. Secure and non-secure tunnels use the same TCP port (7810). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "secure_tunnel")

    @secure_tunnel.setter
    def secure_tunnel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secure_tunnel", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SSL/TLS offloading. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter(name="sslPort")
    def ssl_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port on which to expect HTTPS traffic for SSL/TLS offloading.
        """
        return pulumi.get(self, "ssl_port")

    @ssl_port.setter
    def ssl_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ssl_port", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable HTTP WAN Optimization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tunnelSharing")
    def tunnel_sharing(self) -> Optional[pulumi.Input[str]]:
        """
        Tunnel sharing mode for aggressive/non-aggressive and/or interactive/non-interactive protocols. Valid values: `private`, `shared`, `express-shared`.
        """
        return pulumi.get(self, "tunnel_sharing")

    @tunnel_sharing.setter
    def tunnel_sharing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_sharing", value)


@pulumi.input_type
class WebProxyExplicitPacPolicyArgs:
    def __init__(__self__, *,
                 comments: Optional[pulumi.Input[str]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicyDstaddrArgs']]]] = None,
                 pac_file_data: Optional[pulumi.Input[str]] = None,
                 pac_file_name: Optional[pulumi.Input[str]] = None,
                 policyid: Optional[pulumi.Input[int]] = None,
                 srcaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicySrcaddr6Args']]]] = None,
                 srcaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicySrcaddrArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comments: Optional comments.
        :param pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicyDstaddrArgs']]] dstaddrs: Destination address objects. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[str] pac_file_data: PAC file contents enclosed in quotes (maximum of 256K bytes).
        :param pulumi.Input[str] pac_file_name: Pac file name.
        :param pulumi.Input[int] policyid: Policy ID.
        :param pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicySrcaddr6Args']]] srcaddr6s: Source address6 objects. The structure of `srcaddr6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicySrcaddrArgs']]] srcaddrs: Source address objects. The structure of `srcaddr` block is documented below.
        :param pulumi.Input[str] status: Enable/disable policy. Valid values: `enable`, `disable`.
        """
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if pac_file_data is not None:
            pulumi.set(__self__, "pac_file_data", pac_file_data)
        if pac_file_name is not None:
            pulumi.set(__self__, "pac_file_name", pac_file_name)
        if policyid is not None:
            pulumi.set(__self__, "policyid", policyid)
        if srcaddr6s is not None:
            pulumi.set(__self__, "srcaddr6s", srcaddr6s)
        if srcaddrs is not None:
            pulumi.set(__self__, "srcaddrs", srcaddrs)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Optional comments.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicyDstaddrArgs']]]]:
        """
        Destination address objects. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicyDstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter(name="pacFileData")
    def pac_file_data(self) -> Optional[pulumi.Input[str]]:
        """
        PAC file contents enclosed in quotes (maximum of 256K bytes).
        """
        return pulumi.get(self, "pac_file_data")

    @pac_file_data.setter
    def pac_file_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_data", value)

    @property
    @pulumi.getter(name="pacFileName")
    def pac_file_name(self) -> Optional[pulumi.Input[str]]:
        """
        Pac file name.
        """
        return pulumi.get(self, "pac_file_name")

    @pac_file_name.setter
    def pac_file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_file_name", value)

    @property
    @pulumi.getter
    def policyid(self) -> Optional[pulumi.Input[int]]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policyid")

    @policyid.setter
    def policyid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policyid", value)

    @property
    @pulumi.getter
    def srcaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicySrcaddr6Args']]]]:
        """
        Source address6 objects. The structure of `srcaddr6` block is documented below.
        """
        return pulumi.get(self, "srcaddr6s")

    @srcaddr6s.setter
    def srcaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicySrcaddr6Args']]]]):
        pulumi.set(self, "srcaddr6s", value)

    @property
    @pulumi.getter
    def srcaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicySrcaddrArgs']]]]:
        """
        Source address objects. The structure of `srcaddr` block is documented below.
        """
        return pulumi.get(self, "srcaddrs")

    @srcaddrs.setter
    def srcaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyExplicitPacPolicySrcaddrArgs']]]]):
        pulumi.set(self, "srcaddrs", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable policy. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WebProxyExplicitPacPolicyDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebProxyExplicitPacPolicySrcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebProxyExplicitPacPolicySrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebProxyForwardServerGroupServerListArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: Forward server name.
        :param pulumi.Input[int] weight: Optionally assign a weight of the forwarding server for weighted load balancing (1 - 100, default = 10)
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Forward server name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Optionally assign a weight of the forwarding server for weighted load balancing (1 - 100, default = 10)
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class WebProxyGlobalLearnClientIpSrcaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebProxyGlobalLearnClientIpSrcaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebProxyProfileHeaderArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 add_option: Optional[pulumi.Input[str]] = None,
                 base64_encoding: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 dstaddr6s: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyProfileHeaderDstaddr6Args']]]] = None,
                 dstaddrs: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyProfileHeaderDstaddrArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action when the HTTP header is forwarded. Valid values: `add-to-request`, `add-to-response`, `remove-from-request`, `remove-from-response`.
        :param pulumi.Input[str] add_option: Configure options to append content to existing HTTP header or add new HTTP header. Valid values: `append`, `new-on-not-found`, `new`.
        :param pulumi.Input[str] base64_encoding: Enable/disable use of base64 encoding of HTTP content. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] content: HTTP header content.
        :param pulumi.Input[Sequence[pulumi.Input['WebProxyProfileHeaderDstaddr6Args']]] dstaddr6s: Destination address and address group names (IPv6). The structure of `dstaddr6` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['WebProxyProfileHeaderDstaddrArgs']]] dstaddrs: Destination address and address group names. The structure of `dstaddr` block is documented below.
        :param pulumi.Input[int] id: HTTP forwarded header id.
        :param pulumi.Input[str] name: Address name.
        :param pulumi.Input[str] protocol: Configure protocol(s) to take add-option action on (HTTP, HTTPS, or both). Valid values: `https`, `http`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if add_option is not None:
            pulumi.set(__self__, "add_option", add_option)
        if base64_encoding is not None:
            pulumi.set(__self__, "base64_encoding", base64_encoding)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if dstaddr6s is not None:
            pulumi.set(__self__, "dstaddr6s", dstaddr6s)
        if dstaddrs is not None:
            pulumi.set(__self__, "dstaddrs", dstaddrs)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action when the HTTP header is forwarded. Valid values: `add-to-request`, `add-to-response`, `remove-from-request`, `remove-from-response`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="addOption")
    def add_option(self) -> Optional[pulumi.Input[str]]:
        """
        Configure options to append content to existing HTTP header or add new HTTP header. Valid values: `append`, `new-on-not-found`, `new`.
        """
        return pulumi.get(self, "add_option")

    @add_option.setter
    def add_option(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "add_option", value)

    @property
    @pulumi.getter(name="base64Encoding")
    def base64_encoding(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of base64 encoding of HTTP content. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "base64_encoding")

    @base64_encoding.setter
    def base64_encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base64_encoding", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP header content.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def dstaddr6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyProfileHeaderDstaddr6Args']]]]:
        """
        Destination address and address group names (IPv6). The structure of `dstaddr6` block is documented below.
        """
        return pulumi.get(self, "dstaddr6s")

    @dstaddr6s.setter
    def dstaddr6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyProfileHeaderDstaddr6Args']]]]):
        pulumi.set(self, "dstaddr6s", value)

    @property
    @pulumi.getter
    def dstaddrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyProfileHeaderDstaddrArgs']]]]:
        """
        Destination address and address group names. The structure of `dstaddr` block is documented below.
        """
        return pulumi.get(self, "dstaddrs")

    @dstaddrs.setter
    def dstaddrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebProxyProfileHeaderDstaddrArgs']]]]):
        pulumi.set(self, "dstaddrs", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        HTTP forwarded header id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Configure protocol(s) to take add-option action on (HTTP, HTTPS, or both). Valid values: `https`, `http`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class WebProxyProfileHeaderDstaddr6Args:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebProxyProfileHeaderDstaddrArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Address name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebfilterContentEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 lang: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pattern_type: Optional[pulumi.Input[str]] = None,
                 score: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Block or exempt word when a match is found. Valid values: `block`, `exempt`.
        :param pulumi.Input[str] lang: Language of banned word. Valid values: `western`, `simch`, `trach`, `japanese`, `korean`, `french`, `thai`, `spanish`, `cyrillic`.
        :param pulumi.Input[str] name: Banned word.
        :param pulumi.Input[str] pattern_type: Banned word pattern type: wildcard pattern or Perl regular expression. Valid values: `wildcard`, `regexp`.
        :param pulumi.Input[int] score: Score, to be applied every time the word appears on a web page (0 - 4294967295, default = 10).
        :param pulumi.Input[str] status: Enable/disable banned word. Valid values: `enable`, `disable`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pattern_type is not None:
            pulumi.set(__self__, "pattern_type", pattern_type)
        if score is not None:
            pulumi.set(__self__, "score", score)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Block or exempt word when a match is found. Valid values: `block`, `exempt`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def lang(self) -> Optional[pulumi.Input[str]]:
        """
        Language of banned word. Valid values: `western`, `simch`, `trach`, `japanese`, `korean`, `french`, `thai`, `spanish`, `cyrillic`.
        """
        return pulumi.get(self, "lang")

    @lang.setter
    def lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lang", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Banned word.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="patternType")
    def pattern_type(self) -> Optional[pulumi.Input[str]]:
        """
        Banned word pattern type: wildcard pattern or Perl regular expression. Valid values: `wildcard`, `regexp`.
        """
        return pulumi.get(self, "pattern_type")

    @pattern_type.setter
    def pattern_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_type", value)

    @property
    @pulumi.getter
    def score(self) -> Optional[pulumi.Input[int]]:
        """
        Score, to be applied every time the word appears on a web page (0 - 4294967295, default = 10).
        """
        return pulumi.get(self, "score")

    @score.setter
    def score(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "score", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable banned word. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WebfilterContentHeaderEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action to take for this content type. Valid values: `block`, `allow`, `exempt`.
        :param pulumi.Input[str] category: Categories that this content type applies to.
        :param pulumi.Input[str] pattern: Content type (regular expression).
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take for this content type. Valid values: `block`, `allow`, `exempt`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Categories that this content type applies to.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Content type (regular expression).
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class WebfilterProfileAntiphishArgs:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input[str]] = None,
                 check_basic_auth: Optional[pulumi.Input[str]] = None,
                 check_uri: Optional[pulumi.Input[str]] = None,
                 check_username_only: Optional[pulumi.Input[str]] = None,
                 custom_patterns: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileAntiphishCustomPatternArgs']]]] = None,
                 default_action: Optional[pulumi.Input[str]] = None,
                 domain_controller: Optional[pulumi.Input[str]] = None,
                 inspection_entries: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileAntiphishInspectionEntryArgs']]]] = None,
                 ldap: Optional[pulumi.Input[str]] = None,
                 max_body_len: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] authentication: Authentication methods. Valid values: `domain-controller`, `ldap`.
        :param pulumi.Input[str] check_basic_auth: Enable/disable checking of HTTP Basic Auth field for known credentials. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] check_uri: Enable/disable checking of GET URI parameters for known credentials. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] check_username_only: Enable/disable username only matching of credentials. Action will be taken for valid usernames regardless of password validity. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['WebfilterProfileAntiphishCustomPatternArgs']]] custom_patterns: Custom username and password regex patterns. The structure of `custom_patterns` block is documented below.
        :param pulumi.Input[str] default_action: Action to be taken when there is no matching rule. Valid values: `exempt`, `log`, `block`.
        :param pulumi.Input[str] domain_controller: Domain for which to verify received credentials against.
        :param pulumi.Input[Sequence[pulumi.Input['WebfilterProfileAntiphishInspectionEntryArgs']]] inspection_entries: AntiPhishing entries. The structure of `inspection_entries` block is documented below.
        :param pulumi.Input[str] ldap: LDAP server for which to verify received credentials against.
        :param pulumi.Input[int] max_body_len: Maximum size of a POST body to check for credentials.
        :param pulumi.Input[str] status: Toggle AntiPhishing functionality. Valid values: `enable`, `disable`.
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if check_basic_auth is not None:
            pulumi.set(__self__, "check_basic_auth", check_basic_auth)
        if check_uri is not None:
            pulumi.set(__self__, "check_uri", check_uri)
        if check_username_only is not None:
            pulumi.set(__self__, "check_username_only", check_username_only)
        if custom_patterns is not None:
            pulumi.set(__self__, "custom_patterns", custom_patterns)
        if default_action is not None:
            pulumi.set(__self__, "default_action", default_action)
        if domain_controller is not None:
            pulumi.set(__self__, "domain_controller", domain_controller)
        if inspection_entries is not None:
            pulumi.set(__self__, "inspection_entries", inspection_entries)
        if ldap is not None:
            pulumi.set(__self__, "ldap", ldap)
        if max_body_len is not None:
            pulumi.set(__self__, "max_body_len", max_body_len)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication methods. Valid values: `domain-controller`, `ldap`.
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="checkBasicAuth")
    def check_basic_auth(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable checking of HTTP Basic Auth field for known credentials. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "check_basic_auth")

    @check_basic_auth.setter
    def check_basic_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_basic_auth", value)

    @property
    @pulumi.getter(name="checkUri")
    def check_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable checking of GET URI parameters for known credentials. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "check_uri")

    @check_uri.setter
    def check_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_uri", value)

    @property
    @pulumi.getter(name="checkUsernameOnly")
    def check_username_only(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable username only matching of credentials. Action will be taken for valid usernames regardless of password validity. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "check_username_only")

    @check_username_only.setter
    def check_username_only(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_username_only", value)

    @property
    @pulumi.getter(name="customPatterns")
    def custom_patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileAntiphishCustomPatternArgs']]]]:
        """
        Custom username and password regex patterns. The structure of `custom_patterns` block is documented below.
        """
        return pulumi.get(self, "custom_patterns")

    @custom_patterns.setter
    def custom_patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileAntiphishCustomPatternArgs']]]]):
        pulumi.set(self, "custom_patterns", value)

    @property
    @pulumi.getter(name="defaultAction")
    def default_action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to be taken when there is no matching rule. Valid values: `exempt`, `log`, `block`.
        """
        return pulumi.get(self, "default_action")

    @default_action.setter
    def default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_action", value)

    @property
    @pulumi.getter(name="domainController")
    def domain_controller(self) -> Optional[pulumi.Input[str]]:
        """
        Domain for which to verify received credentials against.
        """
        return pulumi.get(self, "domain_controller")

    @domain_controller.setter
    def domain_controller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_controller", value)

    @property
    @pulumi.getter(name="inspectionEntries")
    def inspection_entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileAntiphishInspectionEntryArgs']]]]:
        """
        AntiPhishing entries. The structure of `inspection_entries` block is documented below.
        """
        return pulumi.get(self, "inspection_entries")

    @inspection_entries.setter
    def inspection_entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileAntiphishInspectionEntryArgs']]]]):
        pulumi.set(self, "inspection_entries", value)

    @property
    @pulumi.getter
    def ldap(self) -> Optional[pulumi.Input[str]]:
        """
        LDAP server for which to verify received credentials against.
        """
        return pulumi.get(self, "ldap")

    @ldap.setter
    def ldap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ldap", value)

    @property
    @pulumi.getter(name="maxBodyLen")
    def max_body_len(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size of a POST body to check for credentials.
        """
        return pulumi.get(self, "max_body_len")

    @max_body_len.setter
    def max_body_len(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_body_len", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Toggle AntiPhishing functionality. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WebfilterProfileAntiphishCustomPatternArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] category: Category that the pattern matches. Valid values: `username`, `password`.
        :param pulumi.Input[str] pattern: Target pattern.
        :param pulumi.Input[str] type: Pattern will be treated either as a regex pattern or literal string. Valid values: `regex`, `literal`.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Category that the pattern matches. Valid values: `username`, `password`.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Target pattern.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Pattern will be treated either as a regex pattern or literal string. Valid values: `regex`, `literal`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class WebfilterProfileAntiphishInspectionEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 fortiguard_category: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action to be taken upon an AntiPhishing match. Valid values: `exempt`, `log`, `block`.
        :param pulumi.Input[str] fortiguard_category: FortiGuard category to match.
        :param pulumi.Input[str] name: Server name.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if fortiguard_category is not None:
            pulumi.set(__self__, "fortiguard_category", fortiguard_category)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to be taken upon an AntiPhishing match. Valid values: `exempt`, `log`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="fortiguardCategory")
    def fortiguard_category(self) -> Optional[pulumi.Input[str]]:
        """
        FortiGuard category to match.
        """
        return pulumi.get(self, "fortiguard_category")

    @fortiguard_category.setter
    def fortiguard_category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortiguard_category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Server name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebfilterProfileFileFilterArgs:
    def __init__(__self__, *,
                 entries: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFileFilterEntryArgs']]]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 scan_archive_contents: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFileFilterEntryArgs']]] entries: File filter entries. The structure of `entries` block is documented below.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] scan_archive_contents: Enable/disable file filter archive contents scan. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: Toggle AntiPhishing functionality. Valid values: `enable`, `disable`.
        """
        if entries is not None:
            pulumi.set(__self__, "entries", entries)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if scan_archive_contents is not None:
            pulumi.set(__self__, "scan_archive_contents", scan_archive_contents)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def entries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFileFilterEntryArgs']]]]:
        """
        File filter entries. The structure of `entries` block is documented below.
        """
        return pulumi.get(self, "entries")

    @entries.setter
    def entries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFileFilterEntryArgs']]]]):
        pulumi.set(self, "entries", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="scanArchiveContents")
    def scan_archive_contents(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable file filter archive contents scan. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scan_archive_contents")

    @scan_archive_contents.setter
    def scan_archive_contents(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scan_archive_contents", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Toggle AntiPhishing functionality. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class WebfilterProfileFileFilterEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFileFilterEntryFileTypeArgs']]]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 password_protected: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action to be taken upon an AntiPhishing match. Valid values: `exempt`, `log`, `block`.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] direction: Match files transmitted in the session's originating or reply direction. Valid values: `incoming`, `outgoing`, `any`.
        :param pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFileFilterEntryFileTypeArgs']]] file_types: Select file type. The structure of `file_type` block is documented below.
        :param pulumi.Input[str] filter: Add a file filter.
        :param pulumi.Input[str] password_protected: Match password-protected files. Valid values: `yes`, `any`.
        :param pulumi.Input[str] protocol: Protocols to apply with. Valid values: `http`, `ftp`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if password_protected is not None:
            pulumi.set(__self__, "password_protected", password_protected)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to be taken upon an AntiPhishing match. Valid values: `exempt`, `log`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        """
        Match files transmitted in the session's originating or reply direction. Valid values: `incoming`, `outgoing`, `any`.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFileFilterEntryFileTypeArgs']]]]:
        """
        Select file type. The structure of `file_type` block is documented below.
        """
        return pulumi.get(self, "file_types")

    @file_types.setter
    def file_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFileFilterEntryFileTypeArgs']]]]):
        pulumi.set(self, "file_types", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        """
        Add a file filter.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="passwordProtected")
    def password_protected(self) -> Optional[pulumi.Input[str]]:
        """
        Match password-protected files. Valid values: `yes`, `any`.
        """
        return pulumi.get(self, "password_protected")

    @password_protected.setter
    def password_protected(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_protected", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocols to apply with. Valid values: `http`, `ftp`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class WebfilterProfileFileFilterEntryFileTypeArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Server name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Server name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebfilterProfileFtgdWfArgs:
    def __init__(__self__, *,
                 exempt_quota: Optional[pulumi.Input[str]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFtgdWfFilterArgs']]]] = None,
                 max_quota_timeout: Optional[pulumi.Input[int]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 ovrd: Optional[pulumi.Input[str]] = None,
                 quotas: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFtgdWfQuotaArgs']]]] = None,
                 rate_crl_urls: Optional[pulumi.Input[str]] = None,
                 rate_css_urls: Optional[pulumi.Input[str]] = None,
                 rate_image_urls: Optional[pulumi.Input[str]] = None,
                 rate_javascript_urls: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] exempt_quota: Do not stop quota for these categories.
        :param pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFtgdWfFilterArgs']]] filters: FortiGuard filters. The structure of `filters` block is documented below.
        :param pulumi.Input[int] max_quota_timeout: Maximum FortiGuard quota used by single page view in seconds (excludes streams).
        :param pulumi.Input[str] options: Options for FortiGuard Web Filter. Valid values: `error-allow`, `rate-server-ip`, `connect-request-bypass`, `ftgd-disable`.
        :param pulumi.Input[str] ovrd: Allow web filter profile overrides.
        :param pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFtgdWfQuotaArgs']]] quotas: FortiGuard traffic quota settings. The structure of `quota` block is documented below.
        :param pulumi.Input[str] rate_crl_urls: Enable/disable rating CRL by URL. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] rate_css_urls: Enable/disable rating CSS by URL. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] rate_image_urls: Enable/disable rating images by URL. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] rate_javascript_urls: Enable/disable rating JavaScript by URL. Valid values: `disable`, `enable`.
        """
        if exempt_quota is not None:
            pulumi.set(__self__, "exempt_quota", exempt_quota)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if max_quota_timeout is not None:
            pulumi.set(__self__, "max_quota_timeout", max_quota_timeout)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if ovrd is not None:
            pulumi.set(__self__, "ovrd", ovrd)
        if quotas is not None:
            pulumi.set(__self__, "quotas", quotas)
        if rate_crl_urls is not None:
            pulumi.set(__self__, "rate_crl_urls", rate_crl_urls)
        if rate_css_urls is not None:
            pulumi.set(__self__, "rate_css_urls", rate_css_urls)
        if rate_image_urls is not None:
            pulumi.set(__self__, "rate_image_urls", rate_image_urls)
        if rate_javascript_urls is not None:
            pulumi.set(__self__, "rate_javascript_urls", rate_javascript_urls)

    @property
    @pulumi.getter(name="exemptQuota")
    def exempt_quota(self) -> Optional[pulumi.Input[str]]:
        """
        Do not stop quota for these categories.
        """
        return pulumi.get(self, "exempt_quota")

    @exempt_quota.setter
    def exempt_quota(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exempt_quota", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFtgdWfFilterArgs']]]]:
        """
        FortiGuard filters. The structure of `filters` block is documented below.
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFtgdWfFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="maxQuotaTimeout")
    def max_quota_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum FortiGuard quota used by single page view in seconds (excludes streams).
        """
        return pulumi.get(self, "max_quota_timeout")

    @max_quota_timeout.setter
    def max_quota_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_quota_timeout", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        """
        Options for FortiGuard Web Filter. Valid values: `error-allow`, `rate-server-ip`, `connect-request-bypass`, `ftgd-disable`.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def ovrd(self) -> Optional[pulumi.Input[str]]:
        """
        Allow web filter profile overrides.
        """
        return pulumi.get(self, "ovrd")

    @ovrd.setter
    def ovrd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovrd", value)

    @property
    @pulumi.getter
    def quotas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFtgdWfQuotaArgs']]]]:
        """
        FortiGuard traffic quota settings. The structure of `quota` block is documented below.
        """
        return pulumi.get(self, "quotas")

    @quotas.setter
    def quotas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFtgdWfQuotaArgs']]]]):
        pulumi.set(self, "quotas", value)

    @property
    @pulumi.getter(name="rateCrlUrls")
    def rate_crl_urls(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable rating CRL by URL. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "rate_crl_urls")

    @rate_crl_urls.setter
    def rate_crl_urls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_crl_urls", value)

    @property
    @pulumi.getter(name="rateCssUrls")
    def rate_css_urls(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable rating CSS by URL. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "rate_css_urls")

    @rate_css_urls.setter
    def rate_css_urls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_css_urls", value)

    @property
    @pulumi.getter(name="rateImageUrls")
    def rate_image_urls(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable rating images by URL. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "rate_image_urls")

    @rate_image_urls.setter
    def rate_image_urls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_image_urls", value)

    @property
    @pulumi.getter(name="rateJavascriptUrls")
    def rate_javascript_urls(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable rating JavaScript by URL. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "rate_javascript_urls")

    @rate_javascript_urls.setter
    def rate_javascript_urls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_javascript_urls", value)


@pulumi.input_type
class WebfilterProfileFtgdWfFilterArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 auth_usr_grps: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFtgdWfFilterAuthUsrGrpArgs']]]] = None,
                 category: Optional[pulumi.Input[int]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 log: Optional[pulumi.Input[str]] = None,
                 override_replacemsg: Optional[pulumi.Input[str]] = None,
                 warn_duration: Optional[pulumi.Input[str]] = None,
                 warning_duration_type: Optional[pulumi.Input[str]] = None,
                 warning_prompt: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action to be taken upon an AntiPhishing match. Valid values: `exempt`, `log`, `block`.
        :param pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFtgdWfFilterAuthUsrGrpArgs']]] auth_usr_grps: Groups with permission to authenticate. The structure of `auth_usr_grp` block is documented below.
        :param pulumi.Input[int] category: Category that the pattern matches. Valid values: `username`, `password`.
        :param pulumi.Input[int] id: ID number.
        :param pulumi.Input[str] log: Enable/disable logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_replacemsg: Override replacement message.
        :param pulumi.Input[str] warn_duration: Duration of warnings.
        :param pulumi.Input[str] warning_duration_type: Re-display warning after closing browser or after a timeout. Valid values: `session`, `timeout`.
        :param pulumi.Input[str] warning_prompt: Warning prompts in each category or each domain. Valid values: `per-domain`, `per-category`.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if auth_usr_grps is not None:
            pulumi.set(__self__, "auth_usr_grps", auth_usr_grps)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if override_replacemsg is not None:
            pulumi.set(__self__, "override_replacemsg", override_replacemsg)
        if warn_duration is not None:
            pulumi.set(__self__, "warn_duration", warn_duration)
        if warning_duration_type is not None:
            pulumi.set(__self__, "warning_duration_type", warning_duration_type)
        if warning_prompt is not None:
            pulumi.set(__self__, "warning_prompt", warning_prompt)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to be taken upon an AntiPhishing match. Valid values: `exempt`, `log`, `block`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="authUsrGrps")
    def auth_usr_grps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFtgdWfFilterAuthUsrGrpArgs']]]]:
        """
        Groups with permission to authenticate. The structure of `auth_usr_grp` block is documented below.
        """
        return pulumi.get(self, "auth_usr_grps")

    @auth_usr_grps.setter
    def auth_usr_grps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileFtgdWfFilterAuthUsrGrpArgs']]]]):
        pulumi.set(self, "auth_usr_grps", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[int]]:
        """
        Category that the pattern matches. Valid values: `username`, `password`.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID number.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="overrideReplacemsg")
    def override_replacemsg(self) -> Optional[pulumi.Input[str]]:
        """
        Override replacement message.
        """
        return pulumi.get(self, "override_replacemsg")

    @override_replacemsg.setter
    def override_replacemsg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_replacemsg", value)

    @property
    @pulumi.getter(name="warnDuration")
    def warn_duration(self) -> Optional[pulumi.Input[str]]:
        """
        Duration of warnings.
        """
        return pulumi.get(self, "warn_duration")

    @warn_duration.setter
    def warn_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warn_duration", value)

    @property
    @pulumi.getter(name="warningDurationType")
    def warning_duration_type(self) -> Optional[pulumi.Input[str]]:
        """
        Re-display warning after closing browser or after a timeout. Valid values: `session`, `timeout`.
        """
        return pulumi.get(self, "warning_duration_type")

    @warning_duration_type.setter
    def warning_duration_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning_duration_type", value)

    @property
    @pulumi.getter(name="warningPrompt")
    def warning_prompt(self) -> Optional[pulumi.Input[str]]:
        """
        Warning prompts in each category or each domain. Valid values: `per-domain`, `per-category`.
        """
        return pulumi.get(self, "warning_prompt")

    @warning_prompt.setter
    def warning_prompt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning_prompt", value)


@pulumi.input_type
class WebfilterProfileFtgdWfFilterAuthUsrGrpArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Server name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Server name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebfilterProfileFtgdWfQuotaArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 duration: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 override_replacemsg: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] category: Category that the pattern matches. Valid values: `username`, `password`.
        :param pulumi.Input[str] duration: Duration of quota.
        :param pulumi.Input[int] id: ID number.
        :param pulumi.Input[str] override_replacemsg: Override replacement message.
        :param pulumi.Input[str] type: Pattern will be treated either as a regex pattern or literal string. Valid values: `regex`, `literal`.
        :param pulumi.Input[str] unit: Traffic quota unit of measurement. Valid values: `B`, `KB`, `MB`, `GB`.
        :param pulumi.Input[int] value: Traffic quota value.
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if override_replacemsg is not None:
            pulumi.set(__self__, "override_replacemsg", override_replacemsg)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        Category that the pattern matches. Valid values: `username`, `password`.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        """
        Duration of quota.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID number.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="overrideReplacemsg")
    def override_replacemsg(self) -> Optional[pulumi.Input[str]]:
        """
        Override replacement message.
        """
        return pulumi.get(self, "override_replacemsg")

    @override_replacemsg.setter
    def override_replacemsg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_replacemsg", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Pattern will be treated either as a regex pattern or literal string. Valid values: `regex`, `literal`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic quota unit of measurement. Valid values: `B`, `KB`, `MB`, `GB`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        """
        Traffic quota value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class WebfilterProfileOverrideArgs:
    def __init__(__self__, *,
                 ovrd_cookie: Optional[pulumi.Input[str]] = None,
                 ovrd_dur: Optional[pulumi.Input[str]] = None,
                 ovrd_dur_mode: Optional[pulumi.Input[str]] = None,
                 ovrd_scope: Optional[pulumi.Input[str]] = None,
                 ovrd_user_groups: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileOverrideOvrdUserGroupArgs']]]] = None,
                 profile_attribute: Optional[pulumi.Input[str]] = None,
                 profile_type: Optional[pulumi.Input[str]] = None,
                 profiles: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileOverrideProfileArgs']]]] = None):
        """
        :param pulumi.Input[str] ovrd_cookie: Allow/deny browser-based (cookie) overrides. Valid values: `allow`, `deny`.
        :param pulumi.Input[str] ovrd_dur: Override duration.
        :param pulumi.Input[str] ovrd_dur_mode: Override duration mode. Valid values: `constant`, `ask`.
        :param pulumi.Input[str] ovrd_scope: Override scope. Valid values: `user`, `user-group`, `ip`, `browser`, `ask`.
        :param pulumi.Input[Sequence[pulumi.Input['WebfilterProfileOverrideOvrdUserGroupArgs']]] ovrd_user_groups: User groups with permission to use the override. The structure of `ovrd_user_group` block is documented below.
        :param pulumi.Input[str] profile_attribute: Profile attribute to retrieve from the RADIUS server. Valid values: `User-Name`, `NAS-IP-Address`, `Framed-IP-Address`, `Framed-IP-Netmask`, `Filter-Id`, `Login-IP-Host`, `Reply-Message`, `Callback-Number`, `Callback-Id`, `Framed-Route`, `Framed-IPX-Network`, `Class`, `Called-Station-Id`, `Calling-Station-Id`, `NAS-Identifier`, `Proxy-State`, `Login-LAT-Service`, `Login-LAT-Node`, `Login-LAT-Group`, `Framed-AppleTalk-Zone`, `Acct-Session-Id`, `Acct-Multi-Session-Id`.
        :param pulumi.Input[str] profile_type: Override profile type. Valid values: `list`, `radius`.
        :param pulumi.Input[Sequence[pulumi.Input['WebfilterProfileOverrideProfileArgs']]] profiles: Web filter profile with permission to create overrides. The structure of `profile` block is documented below.
        """
        if ovrd_cookie is not None:
            pulumi.set(__self__, "ovrd_cookie", ovrd_cookie)
        if ovrd_dur is not None:
            pulumi.set(__self__, "ovrd_dur", ovrd_dur)
        if ovrd_dur_mode is not None:
            pulumi.set(__self__, "ovrd_dur_mode", ovrd_dur_mode)
        if ovrd_scope is not None:
            pulumi.set(__self__, "ovrd_scope", ovrd_scope)
        if ovrd_user_groups is not None:
            pulumi.set(__self__, "ovrd_user_groups", ovrd_user_groups)
        if profile_attribute is not None:
            pulumi.set(__self__, "profile_attribute", profile_attribute)
        if profile_type is not None:
            pulumi.set(__self__, "profile_type", profile_type)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)

    @property
    @pulumi.getter(name="ovrdCookie")
    def ovrd_cookie(self) -> Optional[pulumi.Input[str]]:
        """
        Allow/deny browser-based (cookie) overrides. Valid values: `allow`, `deny`.
        """
        return pulumi.get(self, "ovrd_cookie")

    @ovrd_cookie.setter
    def ovrd_cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovrd_cookie", value)

    @property
    @pulumi.getter(name="ovrdDur")
    def ovrd_dur(self) -> Optional[pulumi.Input[str]]:
        """
        Override duration.
        """
        return pulumi.get(self, "ovrd_dur")

    @ovrd_dur.setter
    def ovrd_dur(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovrd_dur", value)

    @property
    @pulumi.getter(name="ovrdDurMode")
    def ovrd_dur_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Override duration mode. Valid values: `constant`, `ask`.
        """
        return pulumi.get(self, "ovrd_dur_mode")

    @ovrd_dur_mode.setter
    def ovrd_dur_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovrd_dur_mode", value)

    @property
    @pulumi.getter(name="ovrdScope")
    def ovrd_scope(self) -> Optional[pulumi.Input[str]]:
        """
        Override scope. Valid values: `user`, `user-group`, `ip`, `browser`, `ask`.
        """
        return pulumi.get(self, "ovrd_scope")

    @ovrd_scope.setter
    def ovrd_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovrd_scope", value)

    @property
    @pulumi.getter(name="ovrdUserGroups")
    def ovrd_user_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileOverrideOvrdUserGroupArgs']]]]:
        """
        User groups with permission to use the override. The structure of `ovrd_user_group` block is documented below.
        """
        return pulumi.get(self, "ovrd_user_groups")

    @ovrd_user_groups.setter
    def ovrd_user_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileOverrideOvrdUserGroupArgs']]]]):
        pulumi.set(self, "ovrd_user_groups", value)

    @property
    @pulumi.getter(name="profileAttribute")
    def profile_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Profile attribute to retrieve from the RADIUS server. Valid values: `User-Name`, `NAS-IP-Address`, `Framed-IP-Address`, `Framed-IP-Netmask`, `Filter-Id`, `Login-IP-Host`, `Reply-Message`, `Callback-Number`, `Callback-Id`, `Framed-Route`, `Framed-IPX-Network`, `Class`, `Called-Station-Id`, `Calling-Station-Id`, `NAS-Identifier`, `Proxy-State`, `Login-LAT-Service`, `Login-LAT-Node`, `Login-LAT-Group`, `Framed-AppleTalk-Zone`, `Acct-Session-Id`, `Acct-Multi-Session-Id`.
        """
        return pulumi.get(self, "profile_attribute")

    @profile_attribute.setter
    def profile_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_attribute", value)

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> Optional[pulumi.Input[str]]:
        """
        Override profile type. Valid values: `list`, `radius`.
        """
        return pulumi.get(self, "profile_type")

    @profile_type.setter
    def profile_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile_type", value)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileOverrideProfileArgs']]]]:
        """
        Web filter profile with permission to create overrides. The structure of `profile` block is documented below.
        """
        return pulumi.get(self, "profiles")

    @profiles.setter
    def profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileOverrideProfileArgs']]]]):
        pulumi.set(self, "profiles", value)


@pulumi.input_type
class WebfilterProfileOverrideOvrdUserGroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Server name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Server name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebfilterProfileOverrideProfileArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Server name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Server name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebfilterProfileWebArgs:
    def __init__(__self__, *,
                 allowlist: Optional[pulumi.Input[str]] = None,
                 blacklist: Optional[pulumi.Input[str]] = None,
                 blocklist: Optional[pulumi.Input[str]] = None,
                 bword_table: Optional[pulumi.Input[int]] = None,
                 bword_threshold: Optional[pulumi.Input[int]] = None,
                 content_header_list: Optional[pulumi.Input[int]] = None,
                 keyword_matches: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileWebKeywordMatchArgs']]]] = None,
                 log_search: Optional[pulumi.Input[str]] = None,
                 safe_search: Optional[pulumi.Input[str]] = None,
                 urlfilter_table: Optional[pulumi.Input[int]] = None,
                 vimeo_restrict: Optional[pulumi.Input[str]] = None,
                 whitelist: Optional[pulumi.Input[str]] = None,
                 youtube_restrict: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] allowlist: FortiGuard allowlist settings. Valid values: `exempt-av`, `exempt-webcontent`, `exempt-activex-java-cookie`, `exempt-dlp`, `exempt-rangeblock`, `extended-log-others`.
        :param pulumi.Input[str] blacklist: Enable/disable automatic addition of URLs detected by FortiSandbox to blacklist. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] blocklist: Enable/disable automatic addition of URLs detected by FortiSandbox to blocklist. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] bword_table: Banned word table ID.
        :param pulumi.Input[int] bword_threshold: Banned word score threshold.
        :param pulumi.Input[int] content_header_list: Content header list.
        :param pulumi.Input[Sequence[pulumi.Input['WebfilterProfileWebKeywordMatchArgs']]] keyword_matches: Search keywords to log when match is found. The structure of `keyword_match` block is documented below.
        :param pulumi.Input[str] log_search: Enable/disable logging all search phrases. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] safe_search: Safe search type. Valid values: `url`, `header`.
        :param pulumi.Input[int] urlfilter_table: URL filter table ID.
        :param pulumi.Input[str] vimeo_restrict: Set Vimeo-restrict ("7" = don't show mature content, "134" = don't show unrated and mature content). A value of cookie "content_rating".
        :param pulumi.Input[str] whitelist: FortiGuard whitelist settings. Valid values: `exempt-av`, `exempt-webcontent`, `exempt-activex-java-cookie`, `exempt-dlp`, `exempt-rangeblock`, `extended-log-others`.
        :param pulumi.Input[str] youtube_restrict: YouTube EDU filter level. Valid values: `none`, `strict`, `moderate`.
        """
        if allowlist is not None:
            pulumi.set(__self__, "allowlist", allowlist)
        if blacklist is not None:
            pulumi.set(__self__, "blacklist", blacklist)
        if blocklist is not None:
            pulumi.set(__self__, "blocklist", blocklist)
        if bword_table is not None:
            pulumi.set(__self__, "bword_table", bword_table)
        if bword_threshold is not None:
            pulumi.set(__self__, "bword_threshold", bword_threshold)
        if content_header_list is not None:
            pulumi.set(__self__, "content_header_list", content_header_list)
        if keyword_matches is not None:
            pulumi.set(__self__, "keyword_matches", keyword_matches)
        if log_search is not None:
            pulumi.set(__self__, "log_search", log_search)
        if safe_search is not None:
            pulumi.set(__self__, "safe_search", safe_search)
        if urlfilter_table is not None:
            pulumi.set(__self__, "urlfilter_table", urlfilter_table)
        if vimeo_restrict is not None:
            pulumi.set(__self__, "vimeo_restrict", vimeo_restrict)
        if whitelist is not None:
            pulumi.set(__self__, "whitelist", whitelist)
        if youtube_restrict is not None:
            pulumi.set(__self__, "youtube_restrict", youtube_restrict)

    @property
    @pulumi.getter
    def allowlist(self) -> Optional[pulumi.Input[str]]:
        """
        FortiGuard allowlist settings. Valid values: `exempt-av`, `exempt-webcontent`, `exempt-activex-java-cookie`, `exempt-dlp`, `exempt-rangeblock`, `extended-log-others`.
        """
        return pulumi.get(self, "allowlist")

    @allowlist.setter
    def allowlist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allowlist", value)

    @property
    @pulumi.getter
    def blacklist(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic addition of URLs detected by FortiSandbox to blacklist. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "blacklist")

    @blacklist.setter
    def blacklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blacklist", value)

    @property
    @pulumi.getter
    def blocklist(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic addition of URLs detected by FortiSandbox to blocklist. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "blocklist")

    @blocklist.setter
    def blocklist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blocklist", value)

    @property
    @pulumi.getter(name="bwordTable")
    def bword_table(self) -> Optional[pulumi.Input[int]]:
        """
        Banned word table ID.
        """
        return pulumi.get(self, "bword_table")

    @bword_table.setter
    def bword_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bword_table", value)

    @property
    @pulumi.getter(name="bwordThreshold")
    def bword_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Banned word score threshold.
        """
        return pulumi.get(self, "bword_threshold")

    @bword_threshold.setter
    def bword_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bword_threshold", value)

    @property
    @pulumi.getter(name="contentHeaderList")
    def content_header_list(self) -> Optional[pulumi.Input[int]]:
        """
        Content header list.
        """
        return pulumi.get(self, "content_header_list")

    @content_header_list.setter
    def content_header_list(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "content_header_list", value)

    @property
    @pulumi.getter(name="keywordMatches")
    def keyword_matches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileWebKeywordMatchArgs']]]]:
        """
        Search keywords to log when match is found. The structure of `keyword_match` block is documented below.
        """
        return pulumi.get(self, "keyword_matches")

    @keyword_matches.setter
    def keyword_matches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebfilterProfileWebKeywordMatchArgs']]]]):
        pulumi.set(self, "keyword_matches", value)

    @property
    @pulumi.getter(name="logSearch")
    def log_search(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable logging all search phrases. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "log_search")

    @log_search.setter
    def log_search(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_search", value)

    @property
    @pulumi.getter(name="safeSearch")
    def safe_search(self) -> Optional[pulumi.Input[str]]:
        """
        Safe search type. Valid values: `url`, `header`.
        """
        return pulumi.get(self, "safe_search")

    @safe_search.setter
    def safe_search(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "safe_search", value)

    @property
    @pulumi.getter(name="urlfilterTable")
    def urlfilter_table(self) -> Optional[pulumi.Input[int]]:
        """
        URL filter table ID.
        """
        return pulumi.get(self, "urlfilter_table")

    @urlfilter_table.setter
    def urlfilter_table(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "urlfilter_table", value)

    @property
    @pulumi.getter(name="vimeoRestrict")
    def vimeo_restrict(self) -> Optional[pulumi.Input[str]]:
        """
        Set Vimeo-restrict ("7" = don't show mature content, "134" = don't show unrated and mature content). A value of cookie "content_rating".
        """
        return pulumi.get(self, "vimeo_restrict")

    @vimeo_restrict.setter
    def vimeo_restrict(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vimeo_restrict", value)

    @property
    @pulumi.getter
    def whitelist(self) -> Optional[pulumi.Input[str]]:
        """
        FortiGuard whitelist settings. Valid values: `exempt-av`, `exempt-webcontent`, `exempt-activex-java-cookie`, `exempt-dlp`, `exempt-rangeblock`, `extended-log-others`.
        """
        return pulumi.get(self, "whitelist")

    @whitelist.setter
    def whitelist(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "whitelist", value)

    @property
    @pulumi.getter(name="youtubeRestrict")
    def youtube_restrict(self) -> Optional[pulumi.Input[str]]:
        """
        YouTube EDU filter level. Valid values: `none`, `strict`, `moderate`.
        """
        return pulumi.get(self, "youtube_restrict")

    @youtube_restrict.setter
    def youtube_restrict(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "youtube_restrict", value)


@pulumi.input_type
class WebfilterProfileWebKeywordMatchArgs:
    def __init__(__self__, *,
                 pattern: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] pattern: Target pattern.
        """
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Target pattern.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class WebfilterProfileWispServerArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Server name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Server name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WebfilterProfileYoutubeChannelFilterArgs:
    def __init__(__self__, *,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] channel_id: YouTube channel ID to be filtered.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[int] id: ID number.
        """
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[pulumi.Input[str]]:
        """
        YouTube channel ID to be filtered.
        """
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_id", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID number.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class WebfilterUrlfilterEntryArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 antiphish_action: Optional[pulumi.Input[str]] = None,
                 dns_address_family: Optional[pulumi.Input[str]] = None,
                 exempt: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 referrer_host: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 web_proxy_profile: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Action to take for URL filter matches. Valid values: `exempt`, `block`, `allow`, `monitor`.
        :param pulumi.Input[str] antiphish_action: Action to take for AntiPhishing matches. Valid values: `block`, `log`.
        :param pulumi.Input[str] dns_address_family: Resolve IPv4 address, IPv6 address, or both from DNS server. Valid values: `ipv4`, `ipv6`, `both`.
        :param pulumi.Input[str] exempt: If action is set to exempt, select the security profile operations that exempt URLs skip. Separate multiple options with a space.
        :param pulumi.Input[int] id: Id.
        :param pulumi.Input[str] referrer_host: Referrer host name.
        :param pulumi.Input[str] status: Enable/disable this URL filter. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] type: Filter type (simple, regex, or wildcard). Valid values: `simple`, `regex`, `wildcard`.
        :param pulumi.Input[str] url: URL to be filtered.
        :param pulumi.Input[str] web_proxy_profile: Web proxy profile.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if antiphish_action is not None:
            pulumi.set(__self__, "antiphish_action", antiphish_action)
        if dns_address_family is not None:
            pulumi.set(__self__, "dns_address_family", dns_address_family)
        if exempt is not None:
            pulumi.set(__self__, "exempt", exempt)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if referrer_host is not None:
            pulumi.set(__self__, "referrer_host", referrer_host)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if web_proxy_profile is not None:
            pulumi.set(__self__, "web_proxy_profile", web_proxy_profile)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take for URL filter matches. Valid values: `exempt`, `block`, `allow`, `monitor`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="antiphishAction")
    def antiphish_action(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take for AntiPhishing matches. Valid values: `block`, `log`.
        """
        return pulumi.get(self, "antiphish_action")

    @antiphish_action.setter
    def antiphish_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "antiphish_action", value)

    @property
    @pulumi.getter(name="dnsAddressFamily")
    def dns_address_family(self) -> Optional[pulumi.Input[str]]:
        """
        Resolve IPv4 address, IPv6 address, or both from DNS server. Valid values: `ipv4`, `ipv6`, `both`.
        """
        return pulumi.get(self, "dns_address_family")

    @dns_address_family.setter
    def dns_address_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_address_family", value)

    @property
    @pulumi.getter
    def exempt(self) -> Optional[pulumi.Input[str]]:
        """
        If action is set to exempt, select the security profile operations that exempt URLs skip. Separate multiple options with a space.
        """
        return pulumi.get(self, "exempt")

    @exempt.setter
    def exempt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exempt", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="referrerHost")
    def referrer_host(self) -> Optional[pulumi.Input[str]]:
        """
        Referrer host name.
        """
        return pulumi.get(self, "referrer_host")

    @referrer_host.setter
    def referrer_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "referrer_host", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable this URL filter. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Filter type (simple, regex, or wildcard). Valid values: `simple`, `regex`, `wildcard`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL to be filtered.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="webProxyProfile")
    def web_proxy_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Web proxy profile.
        """
        return pulumi.get(self, "web_proxy_profile")

    @web_proxy_profile.setter
    def web_proxy_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_proxy_profile", value)


@pulumi.input_type
class WirelessControllerAccessControlListLayer3Ipv4RuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dstaddr: Optional[pulumi.Input[str]] = None,
                 dstport: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 rule_id: Optional[pulumi.Input[int]] = None,
                 srcaddr: Optional[pulumi.Input[str]] = None,
                 srcport: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] action: Policy action (allow | deny). Valid values: `allow`, `deny`.
        :param pulumi.Input[str] comment: Description.
        :param pulumi.Input[str] dstaddr: Destination IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
        :param pulumi.Input[int] dstport: Destination port (0 - 65535, default = 0, meaning any).
        :param pulumi.Input[int] protocol: Protocol type as defined by IANA (0 - 255, default = 255, meaning any).
        :param pulumi.Input[int] rule_id: Rule ID (1 - 65535).
        :param pulumi.Input[str] srcaddr: Source IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
        :param pulumi.Input[int] srcport: Source port (0 - 65535, default = 0, meaning any).
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dstaddr is not None:
            pulumi.set(__self__, "dstaddr", dstaddr)
        if dstport is not None:
            pulumi.set(__self__, "dstport", dstport)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if srcaddr is not None:
            pulumi.set(__self__, "srcaddr", srcaddr)
        if srcport is not None:
            pulumi.set(__self__, "srcport", srcport)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Policy action (allow | deny). Valid values: `allow`, `deny`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def dstaddr(self) -> Optional[pulumi.Input[str]]:
        """
        Destination IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
        """
        return pulumi.get(self, "dstaddr")

    @dstaddr.setter
    def dstaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr", value)

    @property
    @pulumi.getter
    def dstport(self) -> Optional[pulumi.Input[int]]:
        """
        Destination port (0 - 65535, default = 0, meaning any).
        """
        return pulumi.get(self, "dstport")

    @dstport.setter
    def dstport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dstport", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Protocol type as defined by IANA (0 - 255, default = 255, meaning any).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[int]]:
        """
        Rule ID (1 - 65535).
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter
    def srcaddr(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
        """
        return pulumi.get(self, "srcaddr")

    @srcaddr.setter
    def srcaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr", value)

    @property
    @pulumi.getter
    def srcport(self) -> Optional[pulumi.Input[int]]:
        """
        Source port (0 - 65535, default = 0, meaning any).
        """
        return pulumi.get(self, "srcport")

    @srcport.setter
    def srcport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "srcport", value)


@pulumi.input_type
class WirelessControllerAccessControlListLayer3Ipv6RuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dstaddr: Optional[pulumi.Input[str]] = None,
                 dstport: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[int]] = None,
                 rule_id: Optional[pulumi.Input[int]] = None,
                 srcaddr: Optional[pulumi.Input[str]] = None,
                 srcport: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] action: Policy action (allow | deny). Valid values: `allow`, `deny`.
        :param pulumi.Input[str] comment: Description.
        :param pulumi.Input[str] dstaddr: Destination IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
        :param pulumi.Input[int] dstport: Destination port (0 - 65535, default = 0, meaning any).
        :param pulumi.Input[int] protocol: Protocol type as defined by IANA (0 - 255, default = 255, meaning any).
        :param pulumi.Input[int] rule_id: Rule ID (1 - 65535).
        :param pulumi.Input[str] srcaddr: Source IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
        :param pulumi.Input[int] srcport: Source port (0 - 65535, default = 0, meaning any).
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dstaddr is not None:
            pulumi.set(__self__, "dstaddr", dstaddr)
        if dstport is not None:
            pulumi.set(__self__, "dstport", dstport)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if srcaddr is not None:
            pulumi.set(__self__, "srcaddr", srcaddr)
        if srcport is not None:
            pulumi.set(__self__, "srcport", srcport)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Policy action (allow | deny). Valid values: `allow`, `deny`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def dstaddr(self) -> Optional[pulumi.Input[str]]:
        """
        Destination IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
        """
        return pulumi.get(self, "dstaddr")

    @dstaddr.setter
    def dstaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dstaddr", value)

    @property
    @pulumi.getter
    def dstport(self) -> Optional[pulumi.Input[int]]:
        """
        Destination port (0 - 65535, default = 0, meaning any).
        """
        return pulumi.get(self, "dstport")

    @dstport.setter
    def dstport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dstport", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[int]]:
        """
        Protocol type as defined by IANA (0 - 255, default = 255, meaning any).
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[int]]:
        """
        Rule ID (1 - 65535).
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter
    def srcaddr(self) -> Optional[pulumi.Input[str]]:
        """
        Source IPv6 address (any | local-LAN | IPv6 address[/prefix length]), default = any.
        """
        return pulumi.get(self, "srcaddr")

    @srcaddr.setter
    def srcaddr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "srcaddr", value)

    @property
    @pulumi.getter
    def srcport(self) -> Optional[pulumi.Input[int]]:
        """
        Source port (0 - 65535, default = 0, meaning any).
        """
        return pulumi.get(self, "srcport")

    @srcport.setter
    def srcport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "srcport", value)


@pulumi.input_type
class WirelessControllerAddrgrpAddressArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Address ID.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Address ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class WirelessControllerApcfgProfileCommandListArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passwd_value: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Command ID.
        :param pulumi.Input[str] name: AP local configuration command name.
        :param pulumi.Input[str] passwd_value: AP local configuration command password value.
        :param pulumi.Input[str] type: The command type (default = non-password). Valid values: `non-password`, `password`.
        :param pulumi.Input[str] value: AP local configuration command value.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if passwd_value is not None:
            pulumi.set(__self__, "passwd_value", passwd_value)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Command ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        AP local configuration command name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="passwdValue")
    def passwd_value(self) -> Optional[pulumi.Input[str]]:
        """
        AP local configuration command password value.
        """
        return pulumi.get(self, "passwd_value")

    @passwd_value.setter
    def passwd_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passwd_value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The command type (default = non-password). Valid values: `non-password`, `password`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        AP local configuration command value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class WirelessControllerArrpProfileDarrpOptimizeScheduleArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Schedule name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerBonjourProfilePolicyListArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 from_vlan: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[int]] = None,
                 services: Optional[pulumi.Input[str]] = None,
                 to_vlan: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] from_vlan: VLAN ID from which the Bonjour service is advertised (0 - 4094, default = 0).
        :param pulumi.Input[int] policy_id: Policy ID.
        :param pulumi.Input[str] services: Bonjour services for the VLAN connecting to the Bonjour network. Valid values: `all`, `airplay`, `afp`, `bit-torrent`, `ftp`, `ichat`, `itunes`, `printers`, `samba`, `scanners`, `ssh`, `chromecast`.
        :param pulumi.Input[str] to_vlan: VLAN ID to which the Bonjour service is made available (0 - 4094, default = all).
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if from_vlan is not None:
            pulumi.set(__self__, "from_vlan", from_vlan)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if to_vlan is not None:
            pulumi.set(__self__, "to_vlan", to_vlan)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="fromVlan")
    def from_vlan(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN ID from which the Bonjour service is advertised (0 - 4094, default = 0).
        """
        return pulumi.get(self, "from_vlan")

    @from_vlan.setter
    def from_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_vlan", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[int]]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[str]]:
        """
        Bonjour services for the VLAN connecting to the Bonjour network. Valid values: `all`, `airplay`, `afp`, `bit-torrent`, `ftp`, `ichat`, `itunes`, `printers`, `samba`, `scanners`, `ssh`, `chromecast`.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "services", value)

    @property
    @pulumi.getter(name="toVlan")
    def to_vlan(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN ID to which the Bonjour service is made available (0 - 4094, default = all).
        """
        return pulumi.get(self, "to_vlan")

    @to_vlan.setter
    def to_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "to_vlan", value)


@pulumi.input_type
class WirelessControllerHotspot20Anqp3GppCellularMccMncListArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 mcc: Optional[pulumi.Input[str]] = None,
                 mnc: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] mcc: Mobile country code.
        :param pulumi.Input[str] mnc: Mobile network code.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mcc is not None:
            pulumi.set(__self__, "mcc", mcc)
        if mnc is not None:
            pulumi.set(__self__, "mnc", mnc)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mcc(self) -> Optional[pulumi.Input[str]]:
        """
        Mobile country code.
        """
        return pulumi.get(self, "mcc")

    @mcc.setter
    def mcc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mcc", value)

    @property
    @pulumi.getter
    def mnc(self) -> Optional[pulumi.Input[str]]:
        """
        Mobile network code.
        """
        return pulumi.get(self, "mnc")

    @mnc.setter
    def mnc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mnc", value)


@pulumi.input_type
class WirelessControllerHotspot20AnqpNaiRealmNaiListArgs:
    def __init__(__self__, *,
                 eap_methods: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodArgs']]]] = None,
                 encoding: Optional[pulumi.Input[str]] = None,
                 nai_realm: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodArgs']]] eap_methods: EAP Methods. The structure of `eap_method` block is documented below.
        :param pulumi.Input[str] encoding: Enable/disable format in accordance with IETF RFC 4282. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] nai_realm: Configure NAI realms (delimited by a semi-colon character).
        :param pulumi.Input[str] name: NAI realm name.
        """
        if eap_methods is not None:
            pulumi.set(__self__, "eap_methods", eap_methods)
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)
        if nai_realm is not None:
            pulumi.set(__self__, "nai_realm", nai_realm)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="eapMethods")
    def eap_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodArgs']]]]:
        """
        EAP Methods. The structure of `eap_method` block is documented below.
        """
        return pulumi.get(self, "eap_methods")

    @eap_methods.setter
    def eap_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodArgs']]]]):
        pulumi.set(self, "eap_methods", value)

    @property
    @pulumi.getter
    def encoding(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable format in accordance with IETF RFC 4282. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "encoding")

    @encoding.setter
    def encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoding", value)

    @property
    @pulumi.getter(name="naiRealm")
    def nai_realm(self) -> Optional[pulumi.Input[str]]:
        """
        Configure NAI realms (delimited by a semi-colon character).
        """
        return pulumi.get(self, "nai_realm")

    @nai_realm.setter
    def nai_realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nai_realm", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        NAI realm name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodArgs:
    def __init__(__self__, *,
                 auth_params: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParamArgs']]]] = None,
                 index: Optional[pulumi.Input[int]] = None,
                 method: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParamArgs']]] auth_params: EAP auth param. The structure of `auth_param` block is documented below.
        :param pulumi.Input[int] index: Param index.
        :param pulumi.Input[str] method: EAP method type. Valid values: `eap-identity`, `eap-md5`, `eap-tls`, `eap-ttls`, `eap-peap`, `eap-sim`, `eap-aka`, `eap-aka-prime`.
        """
        if auth_params is not None:
            pulumi.set(__self__, "auth_params", auth_params)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if method is not None:
            pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter(name="authParams")
    def auth_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParamArgs']]]]:
        """
        EAP auth param. The structure of `auth_param` block is documented below.
        """
        return pulumi.get(self, "auth_params")

    @auth_params.setter
    def auth_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParamArgs']]]]):
        pulumi.set(self, "auth_params", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        """
        Param index.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        """
        EAP method type. Valid values: `eap-identity`, `eap-md5`, `eap-tls`, `eap-ttls`, `eap-peap`, `eap-sim`, `eap-aka`, `eap-aka-prime`.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class WirelessControllerHotspot20AnqpNaiRealmNaiListEapMethodAuthParamArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 index: Optional[pulumi.Input[int]] = None,
                 val: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: ID of authentication parameter. Valid values: `non-eap-inner-auth`, `inner-auth-eap`, `credential`, `tunneled-credential`.
        :param pulumi.Input[int] index: Param index.
        :param pulumi.Input[str] val: Value of authentication parameter. Valid values: `eap-identity`, `eap-md5`, `eap-tls`, `eap-ttls`, `eap-peap`, `eap-sim`, `eap-aka`, `eap-aka-prime`, `non-eap-pap`, `non-eap-chap`, `non-eap-mschap`, `non-eap-mschapv2`, `cred-sim`, `cred-usim`, `cred-nfc`, `cred-hardware-token`, `cred-softoken`, `cred-certificate`, `cred-user-pwd`, `cred-none`, `cred-vendor-specific`, `tun-cred-sim`, `tun-cred-usim`, `tun-cred-nfc`, `tun-cred-hardware-token`, `tun-cred-softoken`, `tun-cred-certificate`, `tun-cred-user-pwd`, `tun-cred-anonymous`, `tun-cred-vendor-specific`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if val is not None:
            pulumi.set(__self__, "val", val)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of authentication parameter. Valid values: `non-eap-inner-auth`, `inner-auth-eap`, `credential`, `tunneled-credential`.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        """
        Param index.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def val(self) -> Optional[pulumi.Input[str]]:
        """
        Value of authentication parameter. Valid values: `eap-identity`, `eap-md5`, `eap-tls`, `eap-ttls`, `eap-peap`, `eap-sim`, `eap-aka`, `eap-aka-prime`, `non-eap-pap`, `non-eap-chap`, `non-eap-mschap`, `non-eap-mschapv2`, `cred-sim`, `cred-usim`, `cred-nfc`, `cred-hardware-token`, `cred-softoken`, `cred-certificate`, `cred-user-pwd`, `cred-none`, `cred-vendor-specific`, `tun-cred-sim`, `tun-cred-usim`, `tun-cred-nfc`, `tun-cred-hardware-token`, `tun-cred-softoken`, `tun-cred-certificate`, `tun-cred-user-pwd`, `tun-cred-anonymous`, `tun-cred-vendor-specific`.
        """
        return pulumi.get(self, "val")

    @val.setter
    def val(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "val", value)


@pulumi.input_type
class WirelessControllerHotspot20AnqpRoamingConsortiumOiListArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 index: Optional[pulumi.Input[int]] = None,
                 oi: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[int] index: OI index.
        :param pulumi.Input[str] oi: Organization identifier.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if oi is not None:
            pulumi.set(__self__, "oi", oi)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        """
        OI index.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def oi(self) -> Optional[pulumi.Input[str]]:
        """
        Organization identifier.
        """
        return pulumi.get(self, "oi")

    @oi.setter
    def oi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oi", value)


@pulumi.input_type
class WirelessControllerHotspot20AnqpVenueNameValueListArgs:
    def __init__(__self__, *,
                 index: Optional[pulumi.Input[int]] = None,
                 lang: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] index: Value index.
        :param pulumi.Input[str] lang: Language code.
        :param pulumi.Input[str] value: Venue name value.
        """
        if index is not None:
            pulumi.set(__self__, "index", index)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        """
        Value index.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def lang(self) -> Optional[pulumi.Input[str]]:
        """
        Language code.
        """
        return pulumi.get(self, "lang")

    @lang.setter
    def lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lang", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Venue name value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class WirelessControllerHotspot20AnqpVenueUrlValueListArgs:
    def __init__(__self__, *,
                 index: Optional[pulumi.Input[int]] = None,
                 number: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] index: URL index.
        :param pulumi.Input[int] number: Venue number.
        :param pulumi.Input[str] value: Venue URL value.
        """
        if index is not None:
            pulumi.set(__self__, "index", index)
        if number is not None:
            pulumi.set(__self__, "number", number)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        """
        URL index.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def number(self) -> Optional[pulumi.Input[int]]:
        """
        Venue number.
        """
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Venue URL value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class WirelessControllerHotspot20H2QpAdviceOfChargeAocListArgs:
    def __init__(__self__, *,
                 nai_realm: Optional[pulumi.Input[str]] = None,
                 nai_realm_encoding: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 plan_infos: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfoArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] nai_realm: NAI realm list name.
        :param pulumi.Input[str] nai_realm_encoding: NAI realm encoding.
        :param pulumi.Input[str] name: Plan name.
        :param pulumi.Input[Sequence[pulumi.Input['WirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfoArgs']]] plan_infos: Plan info. The structure of `plan_info` block is documented below.
        :param pulumi.Input[str] type: Usage charge type. Valid values: `time-based`, `volume-based`, `time-and-volume-based`, `unlimited`.
        """
        if nai_realm is not None:
            pulumi.set(__self__, "nai_realm", nai_realm)
        if nai_realm_encoding is not None:
            pulumi.set(__self__, "nai_realm_encoding", nai_realm_encoding)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if plan_infos is not None:
            pulumi.set(__self__, "plan_infos", plan_infos)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="naiRealm")
    def nai_realm(self) -> Optional[pulumi.Input[str]]:
        """
        NAI realm list name.
        """
        return pulumi.get(self, "nai_realm")

    @nai_realm.setter
    def nai_realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nai_realm", value)

    @property
    @pulumi.getter(name="naiRealmEncoding")
    def nai_realm_encoding(self) -> Optional[pulumi.Input[str]]:
        """
        NAI realm encoding.
        """
        return pulumi.get(self, "nai_realm_encoding")

    @nai_realm_encoding.setter
    def nai_realm_encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nai_realm_encoding", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Plan name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="planInfos")
    def plan_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfoArgs']]]]:
        """
        Plan info. The structure of `plan_info` block is documented below.
        """
        return pulumi.get(self, "plan_infos")

    @plan_infos.setter
    def plan_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfoArgs']]]]):
        pulumi.set(self, "plan_infos", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Usage charge type. Valid values: `time-based`, `volume-based`, `time-and-volume-based`, `unlimited`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class WirelessControllerHotspot20H2QpAdviceOfChargeAocListPlanInfoArgs:
    def __init__(__self__, *,
                 currency: Optional[pulumi.Input[str]] = None,
                 info_file: Optional[pulumi.Input[str]] = None,
                 lang: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] currency: Currency code.
        :param pulumi.Input[str] info_file: Info file.
        :param pulumi.Input[str] lang: Languague code.
        :param pulumi.Input[str] name: Plan name.
        """
        if currency is not None:
            pulumi.set(__self__, "currency", currency)
        if info_file is not None:
            pulumi.set(__self__, "info_file", info_file)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def currency(self) -> Optional[pulumi.Input[str]]:
        """
        Currency code.
        """
        return pulumi.get(self, "currency")

    @currency.setter
    def currency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "currency", value)

    @property
    @pulumi.getter(name="infoFile")
    def info_file(self) -> Optional[pulumi.Input[str]]:
        """
        Info file.
        """
        return pulumi.get(self, "info_file")

    @info_file.setter
    def info_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "info_file", value)

    @property
    @pulumi.getter
    def lang(self) -> Optional[pulumi.Input[str]]:
        """
        Languague code.
        """
        return pulumi.get(self, "lang")

    @lang.setter
    def lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lang", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Plan name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerHotspot20H2QpOperatorNameValueListArgs:
    def __init__(__self__, *,
                 index: Optional[pulumi.Input[int]] = None,
                 lang: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] index: Value index.
        :param pulumi.Input[str] lang: Language code.
        :param pulumi.Input[str] value: Friendly name value.
        """
        if index is not None:
            pulumi.set(__self__, "index", index)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        """
        Value index.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def lang(self) -> Optional[pulumi.Input[str]]:
        """
        Language code.
        """
        return pulumi.get(self, "lang")

    @lang.setter
    def lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lang", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Friendly name value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class WirelessControllerHotspot20H2QpOsuProviderFriendlyNameArgs:
    def __init__(__self__, *,
                 friendly_name: Optional[pulumi.Input[str]] = None,
                 index: Optional[pulumi.Input[int]] = None,
                 lang: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] friendly_name: OSU provider friendly name.
        :param pulumi.Input[int] index: OSU provider friendly name index.
        :param pulumi.Input[str] lang: Language code.
        """
        if friendly_name is not None:
            pulumi.set(__self__, "friendly_name", friendly_name)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)

    @property
    @pulumi.getter(name="friendlyName")
    def friendly_name(self) -> Optional[pulumi.Input[str]]:
        """
        OSU provider friendly name.
        """
        return pulumi.get(self, "friendly_name")

    @friendly_name.setter
    def friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "friendly_name", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        """
        OSU provider friendly name index.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def lang(self) -> Optional[pulumi.Input[str]]:
        """
        Language code.
        """
        return pulumi.get(self, "lang")

    @lang.setter
    def lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lang", value)


@pulumi.input_type
class WirelessControllerHotspot20H2QpOsuProviderNaiNaiListArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 osu_nai: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: OSU NAI ID.
        :param pulumi.Input[str] osu_nai: OSU NAI.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if osu_nai is not None:
            pulumi.set(__self__, "osu_nai", osu_nai)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        OSU NAI ID.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="osuNai")
    def osu_nai(self) -> Optional[pulumi.Input[str]]:
        """
        OSU NAI.
        """
        return pulumi.get(self, "osu_nai")

    @osu_nai.setter
    def osu_nai(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "osu_nai", value)


@pulumi.input_type
class WirelessControllerHotspot20H2QpOsuProviderServiceDescriptionArgs:
    def __init__(__self__, *,
                 lang: Optional[pulumi.Input[str]] = None,
                 service_description: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] lang: Language code.
        :param pulumi.Input[str] service_description: Service description.
        :param pulumi.Input[int] service_id: OSU service ID.
        """
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if service_description is not None:
            pulumi.set(__self__, "service_description", service_description)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter
    def lang(self) -> Optional[pulumi.Input[str]]:
        """
        Language code.
        """
        return pulumi.get(self, "lang")

    @lang.setter
    def lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lang", value)

    @property
    @pulumi.getter(name="serviceDescription")
    def service_description(self) -> Optional[pulumi.Input[str]]:
        """
        Service description.
        """
        return pulumi.get(self, "service_description")

    @service_description.setter
    def service_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_description", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[int]]:
        """
        OSU service ID.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "service_id", value)


@pulumi.input_type
class WirelessControllerHotspot20HsProfileOsuProviderArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: OSU provider name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        OSU provider name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerHotspot20IconIconListArgs:
    def __init__(__self__, *,
                 file: Optional[pulumi.Input[str]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 lang: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] file: Icon file.
        :param pulumi.Input[int] height: Icon height.
        :param pulumi.Input[str] lang: Language code.
        :param pulumi.Input[str] name: Icon name.
        :param pulumi.Input[str] type: Icon type. Valid values: `bmp`, `gif`, `jpeg`, `png`, `tiff`.
        :param pulumi.Input[int] width: Icon width.
        """
        if file is not None:
            pulumi.set(__self__, "file", file)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input[str]]:
        """
        Icon file.
        """
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        Icon height.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def lang(self) -> Optional[pulumi.Input[str]]:
        """
        Language code.
        """
        return pulumi.get(self, "lang")

    @lang.setter
    def lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lang", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Icon name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Icon type. Valid values: `bmp`, `gif`, `jpeg`, `png`, `tiff`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        Icon width.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class WirelessControllerHotspot20QosMapDscpExceptArgs:
    def __init__(__self__, *,
                 dscp: Optional[pulumi.Input[int]] = None,
                 index: Optional[pulumi.Input[int]] = None,
                 up: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] dscp: DSCP value.
        :param pulumi.Input[int] index: DSCP range index.
        :param pulumi.Input[int] up: User priority.
        """
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if up is not None:
            pulumi.set(__self__, "up", up)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[int]]:
        """
        DSCP value.
        """
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        """
        DSCP range index.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def up(self) -> Optional[pulumi.Input[int]]:
        """
        User priority.
        """
        return pulumi.get(self, "up")

    @up.setter
    def up(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "up", value)


@pulumi.input_type
class WirelessControllerHotspot20QosMapDscpRangeArgs:
    def __init__(__self__, *,
                 high: Optional[pulumi.Input[int]] = None,
                 index: Optional[pulumi.Input[int]] = None,
                 low: Optional[pulumi.Input[int]] = None,
                 up: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] high: DSCP high value.
        :param pulumi.Input[int] index: DSCP range index.
        :param pulumi.Input[int] low: DSCP low value.
        :param pulumi.Input[int] up: User priority.
        """
        if high is not None:
            pulumi.set(__self__, "high", high)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if low is not None:
            pulumi.set(__self__, "low", low)
        if up is not None:
            pulumi.set(__self__, "up", up)

    @property
    @pulumi.getter
    def high(self) -> Optional[pulumi.Input[int]]:
        """
        DSCP high value.
        """
        return pulumi.get(self, "high")

    @high.setter
    def high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "high", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        """
        DSCP range index.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def low(self) -> Optional[pulumi.Input[int]]:
        """
        DSCP low value.
        """
        return pulumi.get(self, "low")

    @low.setter
    def low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "low", value)

    @property
    @pulumi.getter
    def up(self) -> Optional[pulumi.Input[int]]:
        """
        User priority.
        """
        return pulumi.get(self, "up")

    @up.setter
    def up(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "up", value)


@pulumi.input_type
class WirelessControllerInterControllerInterControllerPeerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 peer_ip: Optional[pulumi.Input[str]] = None,
                 peer_port: Optional[pulumi.Input[int]] = None,
                 peer_priority: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] peer_ip: Peer wireless controller's IP address.
        :param pulumi.Input[int] peer_port: Port used by the wireless controller's for inter-controller communications (1024 - 49150, default = 5246).
        :param pulumi.Input[str] peer_priority: Peer wireless controller's priority (primary or secondary, default = primary). Valid values: `primary`, `secondary`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if peer_ip is not None:
            pulumi.set(__self__, "peer_ip", peer_ip)
        if peer_port is not None:
            pulumi.set(__self__, "peer_port", peer_port)
        if peer_priority is not None:
            pulumi.set(__self__, "peer_priority", peer_priority)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="peerIp")
    def peer_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Peer wireless controller's IP address.
        """
        return pulumi.get(self, "peer_ip")

    @peer_ip.setter
    def peer_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_ip", value)

    @property
    @pulumi.getter(name="peerPort")
    def peer_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port used by the wireless controller's for inter-controller communications (1024 - 49150, default = 5246).
        """
        return pulumi.get(self, "peer_port")

    @peer_port.setter
    def peer_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "peer_port", value)

    @property
    @pulumi.getter(name="peerPriority")
    def peer_priority(self) -> Optional[pulumi.Input[str]]:
        """
        Peer wireless controller's priority (primary or secondary, default = primary). Valid values: `primary`, `secondary`.
        """
        return pulumi.get(self, "peer_priority")

    @peer_priority.setter
    def peer_priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_priority", value)


@pulumi.input_type
class WirelessControllerMpskProfileMpskGroupArgs:
    def __init__(__self__, *,
                 mpsk_keys: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerMpskProfileMpskGroupMpskKeyArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 vlan_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WirelessControllerMpskProfileMpskGroupMpskKeyArgs']]] mpsk_keys: List of multiple PSK entries. The structure of `mpsk_key` block is documented below.
        :param pulumi.Input[str] name: Schedule name.
        :param pulumi.Input[int] vlan_id: Optional VLAN ID.
        :param pulumi.Input[str] vlan_type: MPSK group VLAN options. Valid values: `no-vlan`, `fixed-vlan`.
        """
        if mpsk_keys is not None:
            pulumi.set(__self__, "mpsk_keys", mpsk_keys)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vlan_type is not None:
            pulumi.set(__self__, "vlan_type", vlan_type)

    @property
    @pulumi.getter(name="mpskKeys")
    def mpsk_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerMpskProfileMpskGroupMpskKeyArgs']]]]:
        """
        List of multiple PSK entries. The structure of `mpsk_key` block is documented below.
        """
        return pulumi.get(self, "mpsk_keys")

    @mpsk_keys.setter
    def mpsk_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerMpskProfileMpskGroupMpskKeyArgs']]]]):
        pulumi.set(self, "mpsk_keys", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        Optional VLAN ID.
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)

    @property
    @pulumi.getter(name="vlanType")
    def vlan_type(self) -> Optional[pulumi.Input[str]]:
        """
        MPSK group VLAN options. Valid values: `no-vlan`, `fixed-vlan`.
        """
        return pulumi.get(self, "vlan_type")

    @vlan_type.setter
    def vlan_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_type", value)


@pulumi.input_type
class WirelessControllerMpskProfileMpskGroupMpskKeyArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 concurrent_client_limit_type: Optional[pulumi.Input[str]] = None,
                 concurrent_clients: Optional[pulumi.Input[int]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 mpsk_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerMpskProfileMpskGroupMpskKeyMpskScheduleArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] concurrent_client_limit_type: MPSK client limit type options. Valid values: `default`, `unlimited`, `specified`.
        :param pulumi.Input[int] concurrent_clients: Number of clients that can connect using this pre-shared key (1 - 65535, default is 256).
        :param pulumi.Input[str] mac: MAC address.
        :param pulumi.Input[Sequence[pulumi.Input['WirelessControllerMpskProfileMpskGroupMpskKeyMpskScheduleArgs']]] mpsk_schedules: Firewall schedule for MPSK passphrase. The passphrase will be effective only when at least one schedule is valid. The structure of `mpsk_schedules` block is documented below.
        :param pulumi.Input[str] name: Schedule name.
        :param pulumi.Input[str] passphrase: WPA Pre-shared key.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if concurrent_client_limit_type is not None:
            pulumi.set(__self__, "concurrent_client_limit_type", concurrent_client_limit_type)
        if concurrent_clients is not None:
            pulumi.set(__self__, "concurrent_clients", concurrent_clients)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if mpsk_schedules is not None:
            pulumi.set(__self__, "mpsk_schedules", mpsk_schedules)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="concurrentClientLimitType")
    def concurrent_client_limit_type(self) -> Optional[pulumi.Input[str]]:
        """
        MPSK client limit type options. Valid values: `default`, `unlimited`, `specified`.
        """
        return pulumi.get(self, "concurrent_client_limit_type")

    @concurrent_client_limit_type.setter
    def concurrent_client_limit_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "concurrent_client_limit_type", value)

    @property
    @pulumi.getter(name="concurrentClients")
    def concurrent_clients(self) -> Optional[pulumi.Input[int]]:
        """
        Number of clients that can connect using this pre-shared key (1 - 65535, default is 256).
        """
        return pulumi.get(self, "concurrent_clients")

    @concurrent_clients.setter
    def concurrent_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "concurrent_clients", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address.
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter(name="mpskSchedules")
    def mpsk_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerMpskProfileMpskGroupMpskKeyMpskScheduleArgs']]]]:
        """
        Firewall schedule for MPSK passphrase. The passphrase will be effective only when at least one schedule is valid. The structure of `mpsk_schedules` block is documented below.
        """
        return pulumi.get(self, "mpsk_schedules")

    @mpsk_schedules.setter
    def mpsk_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerMpskProfileMpskGroupMpskKeyMpskScheduleArgs']]]]):
        pulumi.set(self, "mpsk_schedules", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[str]]:
        """
        WPA Pre-shared key.
        """
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase", value)


@pulumi.input_type
class WirelessControllerMpskProfileMpskGroupMpskKeyMpskScheduleArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Schedule name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerQosProfileDscpWmmBeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: DSCP WMM mapping numbers (0 - 63).
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        DSCP WMM mapping numbers (0 - 63).
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class WirelessControllerQosProfileDscpWmmBkArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: DSCP WMM mapping numbers (0 - 63).
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        DSCP WMM mapping numbers (0 - 63).
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class WirelessControllerQosProfileDscpWmmViArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: DSCP WMM mapping numbers (0 - 63).
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        DSCP WMM mapping numbers (0 - 63).
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class WirelessControllerQosProfileDscpWmmVoArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: DSCP WMM mapping numbers (0 - 63).
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        DSCP WMM mapping numbers (0 - 63).
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class WirelessControllerSettingDarrpOptimizeScheduleArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Schedule name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerSettingOffendingSsidArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ssid_pattern: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: Actions taken for detected offending SSID. Valid values: `log`, `suppress`.
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] ssid_pattern: Define offending SSID pattern (case insensitive), eg: word, word*, *word, wo*rd.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ssid_pattern is not None:
            pulumi.set(__self__, "ssid_pattern", ssid_pattern)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Actions taken for detected offending SSID. Valid values: `log`, `suppress`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ssidPattern")
    def ssid_pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Define offending SSID pattern (case insensitive), eg: word, word*, *word, wo*rd.
        """
        return pulumi.get(self, "ssid_pattern")

    @ssid_pattern.setter
    def ssid_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssid_pattern", value)


@pulumi.input_type
class WirelessControllerSnmpCommunityArgs:
    def __init__(__self__, *,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerSnmpCommunityHostArgs']]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 query_v1_status: Optional[pulumi.Input[str]] = None,
                 query_v2c_status: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_v1_status: Optional[pulumi.Input[str]] = None,
                 trap_v2c_status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WirelessControllerSnmpCommunityHostArgs']]] hosts: Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
        :param pulumi.Input[int] id: Host entry ID.
        :param pulumi.Input[str] name: SNMP User Name
        :param pulumi.Input[str] query_v1_status: Enable/disable SNMP v1 queries. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] query_v2c_status: Enable/disable SNMP v2c queries. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] status: SNMP User Enable Valid values: `enable`, `disable`.
        :param pulumi.Input[str] trap_v1_status: Enable/disable SNMP v1 traps. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] trap_v2c_status: Enable/disable SNMP v2c traps. Valid values: `enable`, `disable`.
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if query_v1_status is not None:
            pulumi.set(__self__, "query_v1_status", query_v1_status)
        if query_v2c_status is not None:
            pulumi.set(__self__, "query_v2c_status", query_v2c_status)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trap_v1_status is not None:
            pulumi.set(__self__, "trap_v1_status", trap_v1_status)
        if trap_v2c_status is not None:
            pulumi.set(__self__, "trap_v2c_status", trap_v2c_status)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerSnmpCommunityHostArgs']]]]:
        """
        Configure IPv4 SNMP managers (hosts). The structure of `hosts` block is documented below.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerSnmpCommunityHostArgs']]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Host entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        SNMP User Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="queryV1Status")
    def query_v1_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP v1 queries. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "query_v1_status")

    @query_v1_status.setter
    def query_v1_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_v1_status", value)

    @property
    @pulumi.getter(name="queryV2cStatus")
    def query_v2c_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP v2c queries. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "query_v2c_status")

    @query_v2c_status.setter
    def query_v2c_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_v2c_status", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        SNMP User Enable Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trapV1Status")
    def trap_v1_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP v1 traps. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "trap_v1_status")

    @trap_v1_status.setter
    def trap_v1_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_v1_status", value)

    @property
    @pulumi.getter(name="trapV2cStatus")
    def trap_v2c_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP v2c traps. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "trap_v2c_status")

    @trap_v2c_status.setter
    def trap_v2c_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_v2c_status", value)


@pulumi.input_type
class WirelessControllerSnmpCommunityHostArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Host entry ID.
        :param pulumi.Input[str] ip: IPv4 address of the SNMP manager (host).
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Host entry ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of the SNMP manager (host).
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class WirelessControllerSnmpUserArgs:
    def __init__(__self__, *,
                 auth_proto: Optional[pulumi.Input[str]] = None,
                 auth_pwd: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify_hosts: Optional[pulumi.Input[str]] = None,
                 priv_proto: Optional[pulumi.Input[str]] = None,
                 priv_pwd: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[str]] = None,
                 security_level: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 trap_status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_proto: Authentication protocol. Valid values: `md5`, `sha`.
        :param pulumi.Input[str] auth_pwd: Password for authentication protocol.
        :param pulumi.Input[str] name: SNMP User Name
        :param pulumi.Input[str] notify_hosts: Configure SNMP User Notify Hosts.
        :param pulumi.Input[str] priv_proto: Privacy (encryption) protocol. Valid values: `aes`, `des`, `aes256`, `aes256cisco`.
        :param pulumi.Input[str] priv_pwd: Password for privacy (encryption) protocol.
        :param pulumi.Input[str] queries: Enable/disable SNMP queries for this user. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] security_level: Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
        :param pulumi.Input[str] status: SNMP User Enable Valid values: `enable`, `disable`.
        :param pulumi.Input[str] trap_status: Enable/disable traps for this SNMP user. Valid values: `enable`, `disable`.
        """
        if auth_proto is not None:
            pulumi.set(__self__, "auth_proto", auth_proto)
        if auth_pwd is not None:
            pulumi.set(__self__, "auth_pwd", auth_pwd)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notify_hosts is not None:
            pulumi.set(__self__, "notify_hosts", notify_hosts)
        if priv_proto is not None:
            pulumi.set(__self__, "priv_proto", priv_proto)
        if priv_pwd is not None:
            pulumi.set(__self__, "priv_pwd", priv_pwd)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if security_level is not None:
            pulumi.set(__self__, "security_level", security_level)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if trap_status is not None:
            pulumi.set(__self__, "trap_status", trap_status)

    @property
    @pulumi.getter(name="authProto")
    def auth_proto(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication protocol. Valid values: `md5`, `sha`.
        """
        return pulumi.get(self, "auth_proto")

    @auth_proto.setter
    def auth_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_proto", value)

    @property
    @pulumi.getter(name="authPwd")
    def auth_pwd(self) -> Optional[pulumi.Input[str]]:
        """
        Password for authentication protocol.
        """
        return pulumi.get(self, "auth_pwd")

    @auth_pwd.setter
    def auth_pwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_pwd", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        SNMP User Name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notifyHosts")
    def notify_hosts(self) -> Optional[pulumi.Input[str]]:
        """
        Configure SNMP User Notify Hosts.
        """
        return pulumi.get(self, "notify_hosts")

    @notify_hosts.setter
    def notify_hosts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_hosts", value)

    @property
    @pulumi.getter(name="privProto")
    def priv_proto(self) -> Optional[pulumi.Input[str]]:
        """
        Privacy (encryption) protocol. Valid values: `aes`, `des`, `aes256`, `aes256cisco`.
        """
        return pulumi.get(self, "priv_proto")

    @priv_proto.setter
    def priv_proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priv_proto", value)

    @property
    @pulumi.getter(name="privPwd")
    def priv_pwd(self) -> Optional[pulumi.Input[str]]:
        """
        Password for privacy (encryption) protocol.
        """
        return pulumi.get(self, "priv_pwd")

    @priv_pwd.setter
    def priv_pwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priv_pwd", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable SNMP queries for this user. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> Optional[pulumi.Input[str]]:
        """
        Security level for message authentication and encryption. Valid values: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`.
        """
        return pulumi.get(self, "security_level")

    @security_level.setter
    def security_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_level", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        SNMP User Enable Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="trapStatus")
    def trap_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable traps for this SNMP user. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "trap_status")

    @trap_status.setter
    def trap_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_status", value)


@pulumi.input_type
class WirelessControllerTimersDarrpTimeArgs:
    def __init__(__self__, *,
                 time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] time: Time.
        """
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        """
        Time.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)


@pulumi.input_type
class WirelessControllerVapGroupVapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: vap name
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        vap name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerVapMacFilterListArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 mac_filter_policy: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] mac: MAC address.
        :param pulumi.Input[str] mac_filter_policy: Deny or allow the client with this MAC address. Valid values: `allow`, `deny`.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)
        if mac_filter_policy is not None:
            pulumi.set(__self__, "mac_filter_policy", mac_filter_policy)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address.
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)

    @property
    @pulumi.getter(name="macFilterPolicy")
    def mac_filter_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Deny or allow the client with this MAC address. Valid values: `allow`, `deny`.
        """
        return pulumi.get(self, "mac_filter_policy")

    @mac_filter_policy.setter
    def mac_filter_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_filter_policy", value)


@pulumi.input_type
class WirelessControllerVapMpskKeyArgs:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 concurrent_clients: Optional[pulumi.Input[str]] = None,
                 key_name: Optional[pulumi.Input[str]] = None,
                 mpsk_schedules: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapMpskKeyMpskScheduleArgs']]]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] concurrent_clients: Number of clients that can connect using this pre-shared key.
        :param pulumi.Input[str] key_name: Pre-shared key name.
        :param pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapMpskKeyMpskScheduleArgs']]] mpsk_schedules: Firewall schedule for MPSK passphrase. The passphrase will be effective only when at least one schedule is valid. The structure of `mpsk_schedules` block is documented below.
        :param pulumi.Input[str] passphrase: WPA Pre-shared key.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if concurrent_clients is not None:
            pulumi.set(__self__, "concurrent_clients", concurrent_clients)
        if key_name is not None:
            pulumi.set(__self__, "key_name", key_name)
        if mpsk_schedules is not None:
            pulumi.set(__self__, "mpsk_schedules", mpsk_schedules)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="concurrentClients")
    def concurrent_clients(self) -> Optional[pulumi.Input[str]]:
        """
        Number of clients that can connect using this pre-shared key.
        """
        return pulumi.get(self, "concurrent_clients")

    @concurrent_clients.setter
    def concurrent_clients(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "concurrent_clients", value)

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-shared key name.
        """
        return pulumi.get(self, "key_name")

    @key_name.setter
    def key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_name", value)

    @property
    @pulumi.getter(name="mpskSchedules")
    def mpsk_schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapMpskKeyMpskScheduleArgs']]]]:
        """
        Firewall schedule for MPSK passphrase. The passphrase will be effective only when at least one schedule is valid. The structure of `mpsk_schedules` block is documented below.
        """
        return pulumi.get(self, "mpsk_schedules")

    @mpsk_schedules.setter
    def mpsk_schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerVapMpskKeyMpskScheduleArgs']]]]):
        pulumi.set(self, "mpsk_schedules", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[str]]:
        """
        WPA Pre-shared key.
        """
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase", value)


@pulumi.input_type
class WirelessControllerVapMpskKeyMpskScheduleArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: VLAN name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerVapPortalMessageOverridesArgs:
    def __init__(__self__, *,
                 auth_disclaimer_page: Optional[pulumi.Input[str]] = None,
                 auth_login_failed_page: Optional[pulumi.Input[str]] = None,
                 auth_login_page: Optional[pulumi.Input[str]] = None,
                 auth_reject_page: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_disclaimer_page: Override auth-disclaimer-page message with message from portal-message-overrides group.
        :param pulumi.Input[str] auth_login_failed_page: Override auth-login-failed-page message with message from portal-message-overrides group.
        :param pulumi.Input[str] auth_login_page: Override auth-login-page message with message from portal-message-overrides group.
        :param pulumi.Input[str] auth_reject_page: Override auth-reject-page message with message from portal-message-overrides group.
        """
        if auth_disclaimer_page is not None:
            pulumi.set(__self__, "auth_disclaimer_page", auth_disclaimer_page)
        if auth_login_failed_page is not None:
            pulumi.set(__self__, "auth_login_failed_page", auth_login_failed_page)
        if auth_login_page is not None:
            pulumi.set(__self__, "auth_login_page", auth_login_page)
        if auth_reject_page is not None:
            pulumi.set(__self__, "auth_reject_page", auth_reject_page)

    @property
    @pulumi.getter(name="authDisclaimerPage")
    def auth_disclaimer_page(self) -> Optional[pulumi.Input[str]]:
        """
        Override auth-disclaimer-page message with message from portal-message-overrides group.
        """
        return pulumi.get(self, "auth_disclaimer_page")

    @auth_disclaimer_page.setter
    def auth_disclaimer_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_disclaimer_page", value)

    @property
    @pulumi.getter(name="authLoginFailedPage")
    def auth_login_failed_page(self) -> Optional[pulumi.Input[str]]:
        """
        Override auth-login-failed-page message with message from portal-message-overrides group.
        """
        return pulumi.get(self, "auth_login_failed_page")

    @auth_login_failed_page.setter
    def auth_login_failed_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_login_failed_page", value)

    @property
    @pulumi.getter(name="authLoginPage")
    def auth_login_page(self) -> Optional[pulumi.Input[str]]:
        """
        Override auth-login-page message with message from portal-message-overrides group.
        """
        return pulumi.get(self, "auth_login_page")

    @auth_login_page.setter
    def auth_login_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_login_page", value)

    @property
    @pulumi.getter(name="authRejectPage")
    def auth_reject_page(self) -> Optional[pulumi.Input[str]]:
        """
        Override auth-reject-page message with message from portal-message-overrides group.
        """
        return pulumi.get(self, "auth_reject_page")

    @auth_reject_page.setter
    def auth_reject_page(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_reject_page", value)


@pulumi.input_type
class WirelessControllerVapRadiusMacAuthUsergroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: VLAN name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerVapSelectedUsergroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: VLAN name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerVapUsergroupArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: VLAN name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerVapVlanNameArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: VLAN name.
        :param pulumi.Input[int] vlan_id: VLAN ID.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN ID.
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)


@pulumi.input_type
class WirelessControllerVapVlanPoolArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 wtp_group: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] wtp_group: WTP group name.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if wtp_group is not None:
            pulumi.set(__self__, "wtp_group", wtp_group)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="wtpGroup")
    def wtp_group(self) -> Optional[pulumi.Input[str]]:
        """
        WTP group name.
        """
        return pulumi.get(self, "wtp_group")

    @wtp_group.setter
    def wtp_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wtp_group", value)


@pulumi.input_type
class WirelessControllerWidsProfileApBgscanDisableScheduleArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Schedule name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Schedule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerWtpGroupWtpArgs:
    def __init__(__self__, *,
                 wtp_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] wtp_id: WTP ID.
        """
        if wtp_id is not None:
            pulumi.set(__self__, "wtp_id", wtp_id)

    @property
    @pulumi.getter(name="wtpId")
    def wtp_id(self) -> Optional[pulumi.Input[str]]:
        """
        WTP ID.
        """
        return pulumi.get(self, "wtp_id")

    @wtp_id.setter
    def wtp_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wtp_id", value)


@pulumi.input_type
class WirelessControllerWtpLanArgs:
    def __init__(__self__, *,
                 port1_mode: Optional[pulumi.Input[str]] = None,
                 port1_ssid: Optional[pulumi.Input[str]] = None,
                 port2_mode: Optional[pulumi.Input[str]] = None,
                 port2_ssid: Optional[pulumi.Input[str]] = None,
                 port3_mode: Optional[pulumi.Input[str]] = None,
                 port3_ssid: Optional[pulumi.Input[str]] = None,
                 port4_mode: Optional[pulumi.Input[str]] = None,
                 port4_ssid: Optional[pulumi.Input[str]] = None,
                 port5_mode: Optional[pulumi.Input[str]] = None,
                 port5_ssid: Optional[pulumi.Input[str]] = None,
                 port6_mode: Optional[pulumi.Input[str]] = None,
                 port6_ssid: Optional[pulumi.Input[str]] = None,
                 port7_mode: Optional[pulumi.Input[str]] = None,
                 port7_ssid: Optional[pulumi.Input[str]] = None,
                 port8_mode: Optional[pulumi.Input[str]] = None,
                 port8_ssid: Optional[pulumi.Input[str]] = None,
                 port_esl_mode: Optional[pulumi.Input[str]] = None,
                 port_esl_ssid: Optional[pulumi.Input[str]] = None,
                 port_mode: Optional[pulumi.Input[str]] = None,
                 port_ssid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] port1_mode: LAN port 1 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port1_ssid: Bridge LAN port 1 to SSID.
        :param pulumi.Input[str] port2_mode: LAN port 2 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port2_ssid: Bridge LAN port 2 to SSID.
        :param pulumi.Input[str] port3_mode: LAN port 3 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port3_ssid: Bridge LAN port 3 to SSID.
        :param pulumi.Input[str] port4_mode: LAN port 4 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port4_ssid: Bridge LAN port 4 to SSID.
        :param pulumi.Input[str] port5_mode: LAN port 5 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port5_ssid: Bridge LAN port 5 to SSID.
        :param pulumi.Input[str] port6_mode: LAN port 6 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port6_ssid: Bridge LAN port 6 to SSID.
        :param pulumi.Input[str] port7_mode: LAN port 7 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port7_ssid: Bridge LAN port 7 to SSID.
        :param pulumi.Input[str] port8_mode: LAN port 8 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port8_ssid: Bridge LAN port 8 to SSID.
        :param pulumi.Input[str] port_esl_mode: ESL port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port_esl_ssid: Bridge ESL port to SSID.
        :param pulumi.Input[str] port_mode: LAN port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port_ssid: Bridge LAN port to SSID.
        """
        if port1_mode is not None:
            pulumi.set(__self__, "port1_mode", port1_mode)
        if port1_ssid is not None:
            pulumi.set(__self__, "port1_ssid", port1_ssid)
        if port2_mode is not None:
            pulumi.set(__self__, "port2_mode", port2_mode)
        if port2_ssid is not None:
            pulumi.set(__self__, "port2_ssid", port2_ssid)
        if port3_mode is not None:
            pulumi.set(__self__, "port3_mode", port3_mode)
        if port3_ssid is not None:
            pulumi.set(__self__, "port3_ssid", port3_ssid)
        if port4_mode is not None:
            pulumi.set(__self__, "port4_mode", port4_mode)
        if port4_ssid is not None:
            pulumi.set(__self__, "port4_ssid", port4_ssid)
        if port5_mode is not None:
            pulumi.set(__self__, "port5_mode", port5_mode)
        if port5_ssid is not None:
            pulumi.set(__self__, "port5_ssid", port5_ssid)
        if port6_mode is not None:
            pulumi.set(__self__, "port6_mode", port6_mode)
        if port6_ssid is not None:
            pulumi.set(__self__, "port6_ssid", port6_ssid)
        if port7_mode is not None:
            pulumi.set(__self__, "port7_mode", port7_mode)
        if port7_ssid is not None:
            pulumi.set(__self__, "port7_ssid", port7_ssid)
        if port8_mode is not None:
            pulumi.set(__self__, "port8_mode", port8_mode)
        if port8_ssid is not None:
            pulumi.set(__self__, "port8_ssid", port8_ssid)
        if port_esl_mode is not None:
            pulumi.set(__self__, "port_esl_mode", port_esl_mode)
        if port_esl_ssid is not None:
            pulumi.set(__self__, "port_esl_ssid", port_esl_ssid)
        if port_mode is not None:
            pulumi.set(__self__, "port_mode", port_mode)
        if port_ssid is not None:
            pulumi.set(__self__, "port_ssid", port_ssid)

    @property
    @pulumi.getter(name="port1Mode")
    def port1_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 1 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port1_mode")

    @port1_mode.setter
    def port1_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port1_mode", value)

    @property
    @pulumi.getter(name="port1Ssid")
    def port1_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 1 to SSID.
        """
        return pulumi.get(self, "port1_ssid")

    @port1_ssid.setter
    def port1_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port1_ssid", value)

    @property
    @pulumi.getter(name="port2Mode")
    def port2_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 2 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port2_mode")

    @port2_mode.setter
    def port2_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port2_mode", value)

    @property
    @pulumi.getter(name="port2Ssid")
    def port2_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 2 to SSID.
        """
        return pulumi.get(self, "port2_ssid")

    @port2_ssid.setter
    def port2_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port2_ssid", value)

    @property
    @pulumi.getter(name="port3Mode")
    def port3_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 3 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port3_mode")

    @port3_mode.setter
    def port3_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port3_mode", value)

    @property
    @pulumi.getter(name="port3Ssid")
    def port3_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 3 to SSID.
        """
        return pulumi.get(self, "port3_ssid")

    @port3_ssid.setter
    def port3_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port3_ssid", value)

    @property
    @pulumi.getter(name="port4Mode")
    def port4_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 4 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port4_mode")

    @port4_mode.setter
    def port4_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port4_mode", value)

    @property
    @pulumi.getter(name="port4Ssid")
    def port4_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 4 to SSID.
        """
        return pulumi.get(self, "port4_ssid")

    @port4_ssid.setter
    def port4_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port4_ssid", value)

    @property
    @pulumi.getter(name="port5Mode")
    def port5_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 5 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port5_mode")

    @port5_mode.setter
    def port5_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port5_mode", value)

    @property
    @pulumi.getter(name="port5Ssid")
    def port5_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 5 to SSID.
        """
        return pulumi.get(self, "port5_ssid")

    @port5_ssid.setter
    def port5_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port5_ssid", value)

    @property
    @pulumi.getter(name="port6Mode")
    def port6_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 6 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port6_mode")

    @port6_mode.setter
    def port6_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port6_mode", value)

    @property
    @pulumi.getter(name="port6Ssid")
    def port6_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 6 to SSID.
        """
        return pulumi.get(self, "port6_ssid")

    @port6_ssid.setter
    def port6_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port6_ssid", value)

    @property
    @pulumi.getter(name="port7Mode")
    def port7_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 7 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port7_mode")

    @port7_mode.setter
    def port7_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port7_mode", value)

    @property
    @pulumi.getter(name="port7Ssid")
    def port7_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 7 to SSID.
        """
        return pulumi.get(self, "port7_ssid")

    @port7_ssid.setter
    def port7_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port7_ssid", value)

    @property
    @pulumi.getter(name="port8Mode")
    def port8_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 8 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port8_mode")

    @port8_mode.setter
    def port8_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port8_mode", value)

    @property
    @pulumi.getter(name="port8Ssid")
    def port8_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 8 to SSID.
        """
        return pulumi.get(self, "port8_ssid")

    @port8_ssid.setter
    def port8_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port8_ssid", value)

    @property
    @pulumi.getter(name="portEslMode")
    def port_esl_mode(self) -> Optional[pulumi.Input[str]]:
        """
        ESL port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port_esl_mode")

    @port_esl_mode.setter
    def port_esl_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_esl_mode", value)

    @property
    @pulumi.getter(name="portEslSsid")
    def port_esl_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge ESL port to SSID.
        """
        return pulumi.get(self, "port_esl_ssid")

    @port_esl_ssid.setter
    def port_esl_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_esl_ssid", value)

    @property
    @pulumi.getter(name="portMode")
    def port_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port_mode")

    @port_mode.setter
    def port_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_mode", value)

    @property
    @pulumi.getter(name="portSsid")
    def port_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port to SSID.
        """
        return pulumi.get(self, "port_ssid")

    @port_ssid.setter
    def port_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_ssid", value)


@pulumi.input_type
class WirelessControllerWtpProfileDenyMacListArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 mac: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: ID.
        :param pulumi.Input[str] mac: A WiFi device with this MAC address is denied access to this WTP, FortiAP or AP.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mac is not None:
            pulumi.set(__self__, "mac", mac)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mac(self) -> Optional[pulumi.Input[str]]:
        """
        A WiFi device with this MAC address is denied access to this WTP, FortiAP or AP.
        """
        return pulumi.get(self, "mac")

    @mac.setter
    def mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac", value)


@pulumi.input_type
class WirelessControllerWtpProfileEslSesDongleArgs:
    def __init__(__self__, *,
                 apc_addr_type: Optional[pulumi.Input[str]] = None,
                 apc_fqdn: Optional[pulumi.Input[str]] = None,
                 apc_ip: Optional[pulumi.Input[str]] = None,
                 apc_port: Optional[pulumi.Input[int]] = None,
                 coex_level: Optional[pulumi.Input[str]] = None,
                 compliance_level: Optional[pulumi.Input[str]] = None,
                 esl_channel: Optional[pulumi.Input[str]] = None,
                 output_power: Optional[pulumi.Input[str]] = None,
                 scd_enable: Optional[pulumi.Input[str]] = None,
                 tls_cert_verification: Optional[pulumi.Input[str]] = None,
                 tls_fqdn_verification: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] apc_addr_type: ESL SES-imagotag APC address type (default = fqdn). Valid values: `fqdn`, `ip`.
        :param pulumi.Input[str] apc_fqdn: FQDN of ESL SES-imagotag Access Point Controller (APC).
        :param pulumi.Input[str] apc_ip: IP address of ESL SES-imagotag Access Point Controller (APC).
        :param pulumi.Input[int] apc_port: Port of ESL SES-imagotag Access Point Controller (APC).
        :param pulumi.Input[str] coex_level: ESL SES-imagotag dongle coexistence level (default = none). Valid values: `none`.
        :param pulumi.Input[str] compliance_level: Compliance levels for the ESL solution integration (default = compliance-level-2). Valid values: `compliance-level-2`.
        :param pulumi.Input[str] esl_channel: ESL SES-imagotag dongle channel (default = 127). Valid values: `-1`, `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `127`.
        :param pulumi.Input[str] output_power: ESL SES-imagotag dongle output power (default = A). Valid values: `a`, `b`, `c`, `d`, `e`, `f`, `g`, `h`.
        :param pulumi.Input[str] scd_enable: Enable/disable ESL SES-imagotag Serial Communication Daemon (SCD) (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tls_cert_verification: Enable/disable TLS Certificate verification. (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] tls_fqdn_verification: Enable/disable TLS Certificate verification. (default = disable). Valid values: `enable`, `disable`.
        """
        if apc_addr_type is not None:
            pulumi.set(__self__, "apc_addr_type", apc_addr_type)
        if apc_fqdn is not None:
            pulumi.set(__self__, "apc_fqdn", apc_fqdn)
        if apc_ip is not None:
            pulumi.set(__self__, "apc_ip", apc_ip)
        if apc_port is not None:
            pulumi.set(__self__, "apc_port", apc_port)
        if coex_level is not None:
            pulumi.set(__self__, "coex_level", coex_level)
        if compliance_level is not None:
            pulumi.set(__self__, "compliance_level", compliance_level)
        if esl_channel is not None:
            pulumi.set(__self__, "esl_channel", esl_channel)
        if output_power is not None:
            pulumi.set(__self__, "output_power", output_power)
        if scd_enable is not None:
            pulumi.set(__self__, "scd_enable", scd_enable)
        if tls_cert_verification is not None:
            pulumi.set(__self__, "tls_cert_verification", tls_cert_verification)
        if tls_fqdn_verification is not None:
            pulumi.set(__self__, "tls_fqdn_verification", tls_fqdn_verification)

    @property
    @pulumi.getter(name="apcAddrType")
    def apc_addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        ESL SES-imagotag APC address type (default = fqdn). Valid values: `fqdn`, `ip`.
        """
        return pulumi.get(self, "apc_addr_type")

    @apc_addr_type.setter
    def apc_addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apc_addr_type", value)

    @property
    @pulumi.getter(name="apcFqdn")
    def apc_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        FQDN of ESL SES-imagotag Access Point Controller (APC).
        """
        return pulumi.get(self, "apc_fqdn")

    @apc_fqdn.setter
    def apc_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apc_fqdn", value)

    @property
    @pulumi.getter(name="apcIp")
    def apc_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of ESL SES-imagotag Access Point Controller (APC).
        """
        return pulumi.get(self, "apc_ip")

    @apc_ip.setter
    def apc_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apc_ip", value)

    @property
    @pulumi.getter(name="apcPort")
    def apc_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port of ESL SES-imagotag Access Point Controller (APC).
        """
        return pulumi.get(self, "apc_port")

    @apc_port.setter
    def apc_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "apc_port", value)

    @property
    @pulumi.getter(name="coexLevel")
    def coex_level(self) -> Optional[pulumi.Input[str]]:
        """
        ESL SES-imagotag dongle coexistence level (default = none). Valid values: `none`.
        """
        return pulumi.get(self, "coex_level")

    @coex_level.setter
    def coex_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coex_level", value)

    @property
    @pulumi.getter(name="complianceLevel")
    def compliance_level(self) -> Optional[pulumi.Input[str]]:
        """
        Compliance levels for the ESL solution integration (default = compliance-level-2). Valid values: `compliance-level-2`.
        """
        return pulumi.get(self, "compliance_level")

    @compliance_level.setter
    def compliance_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compliance_level", value)

    @property
    @pulumi.getter(name="eslChannel")
    def esl_channel(self) -> Optional[pulumi.Input[str]]:
        """
        ESL SES-imagotag dongle channel (default = 127). Valid values: `-1`, `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `127`.
        """
        return pulumi.get(self, "esl_channel")

    @esl_channel.setter
    def esl_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "esl_channel", value)

    @property
    @pulumi.getter(name="outputPower")
    def output_power(self) -> Optional[pulumi.Input[str]]:
        """
        ESL SES-imagotag dongle output power (default = A). Valid values: `a`, `b`, `c`, `d`, `e`, `f`, `g`, `h`.
        """
        return pulumi.get(self, "output_power")

    @output_power.setter
    def output_power(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_power", value)

    @property
    @pulumi.getter(name="scdEnable")
    def scd_enable(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ESL SES-imagotag Serial Communication Daemon (SCD) (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "scd_enable")

    @scd_enable.setter
    def scd_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scd_enable", value)

    @property
    @pulumi.getter(name="tlsCertVerification")
    def tls_cert_verification(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable TLS Certificate verification. (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tls_cert_verification")

    @tls_cert_verification.setter
    def tls_cert_verification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_cert_verification", value)

    @property
    @pulumi.getter(name="tlsFqdnVerification")
    def tls_fqdn_verification(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable TLS Certificate verification. (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "tls_fqdn_verification")

    @tls_fqdn_verification.setter
    def tls_fqdn_verification(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_fqdn_verification", value)


@pulumi.input_type
class WirelessControllerWtpProfileLanArgs:
    def __init__(__self__, *,
                 port1_mode: Optional[pulumi.Input[str]] = None,
                 port1_ssid: Optional[pulumi.Input[str]] = None,
                 port2_mode: Optional[pulumi.Input[str]] = None,
                 port2_ssid: Optional[pulumi.Input[str]] = None,
                 port3_mode: Optional[pulumi.Input[str]] = None,
                 port3_ssid: Optional[pulumi.Input[str]] = None,
                 port4_mode: Optional[pulumi.Input[str]] = None,
                 port4_ssid: Optional[pulumi.Input[str]] = None,
                 port5_mode: Optional[pulumi.Input[str]] = None,
                 port5_ssid: Optional[pulumi.Input[str]] = None,
                 port6_mode: Optional[pulumi.Input[str]] = None,
                 port6_ssid: Optional[pulumi.Input[str]] = None,
                 port7_mode: Optional[pulumi.Input[str]] = None,
                 port7_ssid: Optional[pulumi.Input[str]] = None,
                 port8_mode: Optional[pulumi.Input[str]] = None,
                 port8_ssid: Optional[pulumi.Input[str]] = None,
                 port_esl_mode: Optional[pulumi.Input[str]] = None,
                 port_esl_ssid: Optional[pulumi.Input[str]] = None,
                 port_mode: Optional[pulumi.Input[str]] = None,
                 port_ssid: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] port1_mode: LAN port 1 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port1_ssid: Bridge LAN port 1 to SSID.
        :param pulumi.Input[str] port2_mode: LAN port 2 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port2_ssid: Bridge LAN port 2 to SSID.
        :param pulumi.Input[str] port3_mode: LAN port 3 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port3_ssid: Bridge LAN port 3 to SSID.
        :param pulumi.Input[str] port4_mode: LAN port 4 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port4_ssid: Bridge LAN port 4 to SSID.
        :param pulumi.Input[str] port5_mode: LAN port 5 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port5_ssid: Bridge LAN port 5 to SSID.
        :param pulumi.Input[str] port6_mode: LAN port 6 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port6_ssid: Bridge LAN port 6 to SSID.
        :param pulumi.Input[str] port7_mode: LAN port 7 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port7_ssid: Bridge LAN port 7 to SSID.
        :param pulumi.Input[str] port8_mode: LAN port 8 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port8_ssid: Bridge LAN port 8 to SSID.
        :param pulumi.Input[str] port_esl_mode: ESL port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port_esl_ssid: Bridge ESL port to SSID.
        :param pulumi.Input[str] port_mode: LAN port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        :param pulumi.Input[str] port_ssid: Bridge LAN port to SSID.
        """
        if port1_mode is not None:
            pulumi.set(__self__, "port1_mode", port1_mode)
        if port1_ssid is not None:
            pulumi.set(__self__, "port1_ssid", port1_ssid)
        if port2_mode is not None:
            pulumi.set(__self__, "port2_mode", port2_mode)
        if port2_ssid is not None:
            pulumi.set(__self__, "port2_ssid", port2_ssid)
        if port3_mode is not None:
            pulumi.set(__self__, "port3_mode", port3_mode)
        if port3_ssid is not None:
            pulumi.set(__self__, "port3_ssid", port3_ssid)
        if port4_mode is not None:
            pulumi.set(__self__, "port4_mode", port4_mode)
        if port4_ssid is not None:
            pulumi.set(__self__, "port4_ssid", port4_ssid)
        if port5_mode is not None:
            pulumi.set(__self__, "port5_mode", port5_mode)
        if port5_ssid is not None:
            pulumi.set(__self__, "port5_ssid", port5_ssid)
        if port6_mode is not None:
            pulumi.set(__self__, "port6_mode", port6_mode)
        if port6_ssid is not None:
            pulumi.set(__self__, "port6_ssid", port6_ssid)
        if port7_mode is not None:
            pulumi.set(__self__, "port7_mode", port7_mode)
        if port7_ssid is not None:
            pulumi.set(__self__, "port7_ssid", port7_ssid)
        if port8_mode is not None:
            pulumi.set(__self__, "port8_mode", port8_mode)
        if port8_ssid is not None:
            pulumi.set(__self__, "port8_ssid", port8_ssid)
        if port_esl_mode is not None:
            pulumi.set(__self__, "port_esl_mode", port_esl_mode)
        if port_esl_ssid is not None:
            pulumi.set(__self__, "port_esl_ssid", port_esl_ssid)
        if port_mode is not None:
            pulumi.set(__self__, "port_mode", port_mode)
        if port_ssid is not None:
            pulumi.set(__self__, "port_ssid", port_ssid)

    @property
    @pulumi.getter(name="port1Mode")
    def port1_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 1 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port1_mode")

    @port1_mode.setter
    def port1_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port1_mode", value)

    @property
    @pulumi.getter(name="port1Ssid")
    def port1_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 1 to SSID.
        """
        return pulumi.get(self, "port1_ssid")

    @port1_ssid.setter
    def port1_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port1_ssid", value)

    @property
    @pulumi.getter(name="port2Mode")
    def port2_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 2 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port2_mode")

    @port2_mode.setter
    def port2_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port2_mode", value)

    @property
    @pulumi.getter(name="port2Ssid")
    def port2_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 2 to SSID.
        """
        return pulumi.get(self, "port2_ssid")

    @port2_ssid.setter
    def port2_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port2_ssid", value)

    @property
    @pulumi.getter(name="port3Mode")
    def port3_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 3 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port3_mode")

    @port3_mode.setter
    def port3_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port3_mode", value)

    @property
    @pulumi.getter(name="port3Ssid")
    def port3_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 3 to SSID.
        """
        return pulumi.get(self, "port3_ssid")

    @port3_ssid.setter
    def port3_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port3_ssid", value)

    @property
    @pulumi.getter(name="port4Mode")
    def port4_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 4 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port4_mode")

    @port4_mode.setter
    def port4_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port4_mode", value)

    @property
    @pulumi.getter(name="port4Ssid")
    def port4_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 4 to SSID.
        """
        return pulumi.get(self, "port4_ssid")

    @port4_ssid.setter
    def port4_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port4_ssid", value)

    @property
    @pulumi.getter(name="port5Mode")
    def port5_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 5 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port5_mode")

    @port5_mode.setter
    def port5_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port5_mode", value)

    @property
    @pulumi.getter(name="port5Ssid")
    def port5_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 5 to SSID.
        """
        return pulumi.get(self, "port5_ssid")

    @port5_ssid.setter
    def port5_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port5_ssid", value)

    @property
    @pulumi.getter(name="port6Mode")
    def port6_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 6 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port6_mode")

    @port6_mode.setter
    def port6_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port6_mode", value)

    @property
    @pulumi.getter(name="port6Ssid")
    def port6_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 6 to SSID.
        """
        return pulumi.get(self, "port6_ssid")

    @port6_ssid.setter
    def port6_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port6_ssid", value)

    @property
    @pulumi.getter(name="port7Mode")
    def port7_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 7 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port7_mode")

    @port7_mode.setter
    def port7_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port7_mode", value)

    @property
    @pulumi.getter(name="port7Ssid")
    def port7_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 7 to SSID.
        """
        return pulumi.get(self, "port7_ssid")

    @port7_ssid.setter
    def port7_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port7_ssid", value)

    @property
    @pulumi.getter(name="port8Mode")
    def port8_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port 8 mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port8_mode")

    @port8_mode.setter
    def port8_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port8_mode", value)

    @property
    @pulumi.getter(name="port8Ssid")
    def port8_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port 8 to SSID.
        """
        return pulumi.get(self, "port8_ssid")

    @port8_ssid.setter
    def port8_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port8_ssid", value)

    @property
    @pulumi.getter(name="portEslMode")
    def port_esl_mode(self) -> Optional[pulumi.Input[str]]:
        """
        ESL port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port_esl_mode")

    @port_esl_mode.setter
    def port_esl_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_esl_mode", value)

    @property
    @pulumi.getter(name="portEslSsid")
    def port_esl_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge ESL port to SSID.
        """
        return pulumi.get(self, "port_esl_ssid")

    @port_esl_ssid.setter
    def port_esl_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_esl_ssid", value)

    @property
    @pulumi.getter(name="portMode")
    def port_mode(self) -> Optional[pulumi.Input[str]]:
        """
        LAN port mode. Valid values: `offline`, `nat-to-wan`, `bridge-to-wan`, `bridge-to-ssid`.
        """
        return pulumi.get(self, "port_mode")

    @port_mode.setter
    def port_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_mode", value)

    @property
    @pulumi.getter(name="portSsid")
    def port_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        Bridge LAN port to SSID.
        """
        return pulumi.get(self, "port_ssid")

    @port_ssid.setter
    def port_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_ssid", value)


@pulumi.input_type
class WirelessControllerWtpProfileLbsArgs:
    def __init__(__self__, *,
                 aeroscout: Optional[pulumi.Input[str]] = None,
                 aeroscout_ap_mac: Optional[pulumi.Input[str]] = None,
                 aeroscout_mmu_report: Optional[pulumi.Input[str]] = None,
                 aeroscout_mu: Optional[pulumi.Input[str]] = None,
                 aeroscout_mu_factor: Optional[pulumi.Input[int]] = None,
                 aeroscout_mu_timeout: Optional[pulumi.Input[int]] = None,
                 aeroscout_server_ip: Optional[pulumi.Input[str]] = None,
                 aeroscout_server_port: Optional[pulumi.Input[int]] = None,
                 ekahau_blink_mode: Optional[pulumi.Input[str]] = None,
                 ekahau_tag: Optional[pulumi.Input[str]] = None,
                 erc_server_ip: Optional[pulumi.Input[str]] = None,
                 erc_server_port: Optional[pulumi.Input[int]] = None,
                 fortipresence: Optional[pulumi.Input[str]] = None,
                 fortipresence_ble: Optional[pulumi.Input[str]] = None,
                 fortipresence_frequency: Optional[pulumi.Input[int]] = None,
                 fortipresence_port: Optional[pulumi.Input[int]] = None,
                 fortipresence_project: Optional[pulumi.Input[str]] = None,
                 fortipresence_rogue: Optional[pulumi.Input[str]] = None,
                 fortipresence_secret: Optional[pulumi.Input[str]] = None,
                 fortipresence_server: Optional[pulumi.Input[str]] = None,
                 fortipresence_server_addr_type: Optional[pulumi.Input[str]] = None,
                 fortipresence_server_fqdn: Optional[pulumi.Input[str]] = None,
                 fortipresence_unassoc: Optional[pulumi.Input[str]] = None,
                 station_locate: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aeroscout: Enable/disable AeroScout Real Time Location Service (RTLS) support. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] aeroscout_ap_mac: Use BSSID or board MAC address as AP MAC address in the Aeroscout AP message. Valid values: `bssid`, `board-mac`.
        :param pulumi.Input[str] aeroscout_mmu_report: Enable/disable MU compounded report. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] aeroscout_mu: Enable/disable AeroScout support. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] aeroscout_mu_factor: AeroScout Mobile Unit (MU) mode dilution factor (default = 20).
        :param pulumi.Input[int] aeroscout_mu_timeout: AeroScout MU mode timeout (0 - 65535 sec, default = 5).
        :param pulumi.Input[str] aeroscout_server_ip: IP address of AeroScout server.
        :param pulumi.Input[int] aeroscout_server_port: AeroScout server UDP listening port.
        :param pulumi.Input[str] ekahau_blink_mode: Enable/disable Ekahua blink mode (also called AiRISTA Flow Blink Mode) to find the location of devices connected to a wireless LAN (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ekahau_tag: WiFi frame MAC address or WiFi Tag.
        :param pulumi.Input[str] erc_server_ip: IP address of Ekahua RTLS Controller (ERC).
        :param pulumi.Input[int] erc_server_port: Ekahua RTLS Controller (ERC) UDP listening port.
        :param pulumi.Input[str] fortipresence: Enable/disable FortiPresence to monitor the location and activity of WiFi clients even if they don't connect to this WiFi network (default = disable). Valid values: `foreign`, `both`, `disable`.
        :param pulumi.Input[str] fortipresence_ble: Enable/disable FortiPresence finding and reporting BLE devices. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] fortipresence_frequency: FortiPresence report transmit frequency (5 - 65535 sec, default = 30).
        :param pulumi.Input[int] fortipresence_port: FortiPresence server UDP listening port (default = 3000).
        :param pulumi.Input[str] fortipresence_project: FortiPresence project name (max. 16 characters, default = fortipresence).
        :param pulumi.Input[str] fortipresence_rogue: Enable/disable FortiPresence finding and reporting rogue APs. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] fortipresence_secret: FortiPresence secret password (max. 16 characters).
        :param pulumi.Input[str] fortipresence_server: FortiPresence server IP address.
        :param pulumi.Input[str] fortipresence_server_addr_type: FortiPresence server address type (default = ipv4). Valid values: `ipv4`, `fqdn`.
        :param pulumi.Input[str] fortipresence_server_fqdn: FQDN of FortiPresence server.
        :param pulumi.Input[str] fortipresence_unassoc: Enable/disable FortiPresence finding and reporting unassociated stations. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] station_locate: Enable/disable client station locating services for all clients, whether associated or not (default = disable). Valid values: `enable`, `disable`.
        """
        if aeroscout is not None:
            pulumi.set(__self__, "aeroscout", aeroscout)
        if aeroscout_ap_mac is not None:
            pulumi.set(__self__, "aeroscout_ap_mac", aeroscout_ap_mac)
        if aeroscout_mmu_report is not None:
            pulumi.set(__self__, "aeroscout_mmu_report", aeroscout_mmu_report)
        if aeroscout_mu is not None:
            pulumi.set(__self__, "aeroscout_mu", aeroscout_mu)
        if aeroscout_mu_factor is not None:
            pulumi.set(__self__, "aeroscout_mu_factor", aeroscout_mu_factor)
        if aeroscout_mu_timeout is not None:
            pulumi.set(__self__, "aeroscout_mu_timeout", aeroscout_mu_timeout)
        if aeroscout_server_ip is not None:
            pulumi.set(__self__, "aeroscout_server_ip", aeroscout_server_ip)
        if aeroscout_server_port is not None:
            pulumi.set(__self__, "aeroscout_server_port", aeroscout_server_port)
        if ekahau_blink_mode is not None:
            pulumi.set(__self__, "ekahau_blink_mode", ekahau_blink_mode)
        if ekahau_tag is not None:
            pulumi.set(__self__, "ekahau_tag", ekahau_tag)
        if erc_server_ip is not None:
            pulumi.set(__self__, "erc_server_ip", erc_server_ip)
        if erc_server_port is not None:
            pulumi.set(__self__, "erc_server_port", erc_server_port)
        if fortipresence is not None:
            pulumi.set(__self__, "fortipresence", fortipresence)
        if fortipresence_ble is not None:
            pulumi.set(__self__, "fortipresence_ble", fortipresence_ble)
        if fortipresence_frequency is not None:
            pulumi.set(__self__, "fortipresence_frequency", fortipresence_frequency)
        if fortipresence_port is not None:
            pulumi.set(__self__, "fortipresence_port", fortipresence_port)
        if fortipresence_project is not None:
            pulumi.set(__self__, "fortipresence_project", fortipresence_project)
        if fortipresence_rogue is not None:
            pulumi.set(__self__, "fortipresence_rogue", fortipresence_rogue)
        if fortipresence_secret is not None:
            pulumi.set(__self__, "fortipresence_secret", fortipresence_secret)
        if fortipresence_server is not None:
            pulumi.set(__self__, "fortipresence_server", fortipresence_server)
        if fortipresence_server_addr_type is not None:
            pulumi.set(__self__, "fortipresence_server_addr_type", fortipresence_server_addr_type)
        if fortipresence_server_fqdn is not None:
            pulumi.set(__self__, "fortipresence_server_fqdn", fortipresence_server_fqdn)
        if fortipresence_unassoc is not None:
            pulumi.set(__self__, "fortipresence_unassoc", fortipresence_unassoc)
        if station_locate is not None:
            pulumi.set(__self__, "station_locate", station_locate)

    @property
    @pulumi.getter
    def aeroscout(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable AeroScout Real Time Location Service (RTLS) support. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "aeroscout")

    @aeroscout.setter
    def aeroscout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aeroscout", value)

    @property
    @pulumi.getter(name="aeroscoutApMac")
    def aeroscout_ap_mac(self) -> Optional[pulumi.Input[str]]:
        """
        Use BSSID or board MAC address as AP MAC address in the Aeroscout AP message. Valid values: `bssid`, `board-mac`.
        """
        return pulumi.get(self, "aeroscout_ap_mac")

    @aeroscout_ap_mac.setter
    def aeroscout_ap_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aeroscout_ap_mac", value)

    @property
    @pulumi.getter(name="aeroscoutMmuReport")
    def aeroscout_mmu_report(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable MU compounded report. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "aeroscout_mmu_report")

    @aeroscout_mmu_report.setter
    def aeroscout_mmu_report(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aeroscout_mmu_report", value)

    @property
    @pulumi.getter(name="aeroscoutMu")
    def aeroscout_mu(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable AeroScout support. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "aeroscout_mu")

    @aeroscout_mu.setter
    def aeroscout_mu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aeroscout_mu", value)

    @property
    @pulumi.getter(name="aeroscoutMuFactor")
    def aeroscout_mu_factor(self) -> Optional[pulumi.Input[int]]:
        """
        AeroScout Mobile Unit (MU) mode dilution factor (default = 20).
        """
        return pulumi.get(self, "aeroscout_mu_factor")

    @aeroscout_mu_factor.setter
    def aeroscout_mu_factor(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aeroscout_mu_factor", value)

    @property
    @pulumi.getter(name="aeroscoutMuTimeout")
    def aeroscout_mu_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        AeroScout MU mode timeout (0 - 65535 sec, default = 5).
        """
        return pulumi.get(self, "aeroscout_mu_timeout")

    @aeroscout_mu_timeout.setter
    def aeroscout_mu_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aeroscout_mu_timeout", value)

    @property
    @pulumi.getter(name="aeroscoutServerIp")
    def aeroscout_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of AeroScout server.
        """
        return pulumi.get(self, "aeroscout_server_ip")

    @aeroscout_server_ip.setter
    def aeroscout_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aeroscout_server_ip", value)

    @property
    @pulumi.getter(name="aeroscoutServerPort")
    def aeroscout_server_port(self) -> Optional[pulumi.Input[int]]:
        """
        AeroScout server UDP listening port.
        """
        return pulumi.get(self, "aeroscout_server_port")

    @aeroscout_server_port.setter
    def aeroscout_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aeroscout_server_port", value)

    @property
    @pulumi.getter(name="ekahauBlinkMode")
    def ekahau_blink_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Ekahua blink mode (also called AiRISTA Flow Blink Mode) to find the location of devices connected to a wireless LAN (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ekahau_blink_mode")

    @ekahau_blink_mode.setter
    def ekahau_blink_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ekahau_blink_mode", value)

    @property
    @pulumi.getter(name="ekahauTag")
    def ekahau_tag(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi frame MAC address or WiFi Tag.
        """
        return pulumi.get(self, "ekahau_tag")

    @ekahau_tag.setter
    def ekahau_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ekahau_tag", value)

    @property
    @pulumi.getter(name="ercServerIp")
    def erc_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of Ekahua RTLS Controller (ERC).
        """
        return pulumi.get(self, "erc_server_ip")

    @erc_server_ip.setter
    def erc_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "erc_server_ip", value)

    @property
    @pulumi.getter(name="ercServerPort")
    def erc_server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Ekahua RTLS Controller (ERC) UDP listening port.
        """
        return pulumi.get(self, "erc_server_port")

    @erc_server_port.setter
    def erc_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "erc_server_port", value)

    @property
    @pulumi.getter
    def fortipresence(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiPresence to monitor the location and activity of WiFi clients even if they don't connect to this WiFi network (default = disable). Valid values: `foreign`, `both`, `disable`.
        """
        return pulumi.get(self, "fortipresence")

    @fortipresence.setter
    def fortipresence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence", value)

    @property
    @pulumi.getter(name="fortipresenceBle")
    def fortipresence_ble(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiPresence finding and reporting BLE devices. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortipresence_ble")

    @fortipresence_ble.setter
    def fortipresence_ble(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence_ble", value)

    @property
    @pulumi.getter(name="fortipresenceFrequency")
    def fortipresence_frequency(self) -> Optional[pulumi.Input[int]]:
        """
        FortiPresence report transmit frequency (5 - 65535 sec, default = 30).
        """
        return pulumi.get(self, "fortipresence_frequency")

    @fortipresence_frequency.setter
    def fortipresence_frequency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fortipresence_frequency", value)

    @property
    @pulumi.getter(name="fortipresencePort")
    def fortipresence_port(self) -> Optional[pulumi.Input[int]]:
        """
        FortiPresence server UDP listening port (default = 3000).
        """
        return pulumi.get(self, "fortipresence_port")

    @fortipresence_port.setter
    def fortipresence_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fortipresence_port", value)

    @property
    @pulumi.getter(name="fortipresenceProject")
    def fortipresence_project(self) -> Optional[pulumi.Input[str]]:
        """
        FortiPresence project name (max. 16 characters, default = fortipresence).
        """
        return pulumi.get(self, "fortipresence_project")

    @fortipresence_project.setter
    def fortipresence_project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence_project", value)

    @property
    @pulumi.getter(name="fortipresenceRogue")
    def fortipresence_rogue(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiPresence finding and reporting rogue APs. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortipresence_rogue")

    @fortipresence_rogue.setter
    def fortipresence_rogue(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence_rogue", value)

    @property
    @pulumi.getter(name="fortipresenceSecret")
    def fortipresence_secret(self) -> Optional[pulumi.Input[str]]:
        """
        FortiPresence secret password (max. 16 characters).
        """
        return pulumi.get(self, "fortipresence_secret")

    @fortipresence_secret.setter
    def fortipresence_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence_secret", value)

    @property
    @pulumi.getter(name="fortipresenceServer")
    def fortipresence_server(self) -> Optional[pulumi.Input[str]]:
        """
        FortiPresence server IP address.
        """
        return pulumi.get(self, "fortipresence_server")

    @fortipresence_server.setter
    def fortipresence_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence_server", value)

    @property
    @pulumi.getter(name="fortipresenceServerAddrType")
    def fortipresence_server_addr_type(self) -> Optional[pulumi.Input[str]]:
        """
        FortiPresence server address type (default = ipv4). Valid values: `ipv4`, `fqdn`.
        """
        return pulumi.get(self, "fortipresence_server_addr_type")

    @fortipresence_server_addr_type.setter
    def fortipresence_server_addr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence_server_addr_type", value)

    @property
    @pulumi.getter(name="fortipresenceServerFqdn")
    def fortipresence_server_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        FQDN of FortiPresence server.
        """
        return pulumi.get(self, "fortipresence_server_fqdn")

    @fortipresence_server_fqdn.setter
    def fortipresence_server_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence_server_fqdn", value)

    @property
    @pulumi.getter(name="fortipresenceUnassoc")
    def fortipresence_unassoc(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable FortiPresence finding and reporting unassociated stations. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "fortipresence_unassoc")

    @fortipresence_unassoc.setter
    def fortipresence_unassoc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fortipresence_unassoc", value)

    @property
    @pulumi.getter(name="stationLocate")
    def station_locate(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable client station locating services for all clients, whether associated or not (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "station_locate")

    @station_locate.setter
    def station_locate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "station_locate", value)


@pulumi.input_type
class WirelessControllerWtpProfileLedScheduleArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual Access Point (VAP) name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Access Point (VAP) name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerWtpProfilePlatformArgs:
    def __init__(__self__, *,
                 ddscan: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ddscan: Enable/disable use of one radio for dedicated dual-band scanning to detect RF characterization and wireless threat management. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] mode: Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
        :param pulumi.Input[str] type: WTP, FortiAP or AP platform type. There are built-in WTP profiles for all supported FortiAP models. You can select a built-in profile and customize it or create a new profile.
        """
        if ddscan is not None:
            pulumi.set(__self__, "ddscan", ddscan)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def ddscan(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable use of one radio for dedicated dual-band scanning to detect RF characterization and wireless threat management. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ddscan")

    @ddscan.setter
    def ddscan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddscan", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        WTP, FortiAP or AP platform type. There are built-in WTP profiles for all supported FortiAP models. You can select a built-in profile and customize it or create a new profile.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class WirelessControllerWtpProfileRadio1Args:
    def __init__(__self__, *,
                 airtime_fairness: Optional[pulumi.Input[str]] = None,
                 amsdu: Optional[pulumi.Input[str]] = None,
                 ap_handoff: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_addr: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_bufsize: Optional[pulumi.Input[int]] = None,
                 ap_sniffer_chan: Optional[pulumi.Input[int]] = None,
                 ap_sniffer_ctl: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_data: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_beacon: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_other: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_probe: Optional[pulumi.Input[str]] = None,
                 arrp_profile: Optional[pulumi.Input[str]] = None,
                 auto_power_high: Optional[pulumi.Input[int]] = None,
                 auto_power_level: Optional[pulumi.Input[str]] = None,
                 auto_power_low: Optional[pulumi.Input[int]] = None,
                 auto_power_target: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 band5g_type: Optional[pulumi.Input[str]] = None,
                 bandwidth_admission_control: Optional[pulumi.Input[str]] = None,
                 bandwidth_capacity: Optional[pulumi.Input[int]] = None,
                 beacon_interval: Optional[pulumi.Input[int]] = None,
                 bss_color: Optional[pulumi.Input[int]] = None,
                 bss_color_mode: Optional[pulumi.Input[str]] = None,
                 call_admission_control: Optional[pulumi.Input[str]] = None,
                 call_capacity: Optional[pulumi.Input[int]] = None,
                 channel_bonding: Optional[pulumi.Input[str]] = None,
                 channel_utilization: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio1ChannelArgs']]]] = None,
                 coexistence: Optional[pulumi.Input[str]] = None,
                 darrp: Optional[pulumi.Input[str]] = None,
                 drma: Optional[pulumi.Input[str]] = None,
                 drma_sensitivity: Optional[pulumi.Input[str]] = None,
                 dtim: Optional[pulumi.Input[int]] = None,
                 frag_threshold: Optional[pulumi.Input[int]] = None,
                 frequency_handoff: Optional[pulumi.Input[str]] = None,
                 iperf_protocol: Optional[pulumi.Input[str]] = None,
                 iperf_server_port: Optional[pulumi.Input[int]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 max_distance: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 power_level: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None,
                 power_value: Optional[pulumi.Input[int]] = None,
                 powersave_optimize: Optional[pulumi.Input[str]] = None,
                 protection_mode: Optional[pulumi.Input[str]] = None,
                 radio_id: Optional[pulumi.Input[int]] = None,
                 rts_threshold: Optional[pulumi.Input[int]] = None,
                 sam_bssid: Optional[pulumi.Input[str]] = None,
                 sam_captive_portal: Optional[pulumi.Input[str]] = None,
                 sam_cwp_failure_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_match_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_password: Optional[pulumi.Input[str]] = None,
                 sam_cwp_success_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_test_url: Optional[pulumi.Input[str]] = None,
                 sam_cwp_username: Optional[pulumi.Input[str]] = None,
                 sam_password: Optional[pulumi.Input[str]] = None,
                 sam_report_intv: Optional[pulumi.Input[int]] = None,
                 sam_security_type: Optional[pulumi.Input[str]] = None,
                 sam_server_fqdn: Optional[pulumi.Input[str]] = None,
                 sam_server_ip: Optional[pulumi.Input[str]] = None,
                 sam_server_type: Optional[pulumi.Input[str]] = None,
                 sam_ssid: Optional[pulumi.Input[str]] = None,
                 sam_test: Optional[pulumi.Input[str]] = None,
                 sam_username: Optional[pulumi.Input[str]] = None,
                 short_guard_interval: Optional[pulumi.Input[str]] = None,
                 spectrum_analysis: Optional[pulumi.Input[str]] = None,
                 transmit_optimize: Optional[pulumi.Input[str]] = None,
                 vap_all: Optional[pulumi.Input[str]] = None,
                 vaps: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio1VapArgs']]]] = None,
                 wids_profile: Optional[pulumi.Input[str]] = None,
                 zero_wait_dfs: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] airtime_fairness: Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] amsdu: Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_handoff: Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_addr: MAC address to monitor.
        :param pulumi.Input[int] ap_sniffer_bufsize: Sniffer buffer size (1 - 32 MB, default = 16).
        :param pulumi.Input[int] ap_sniffer_chan: Channel on which to operate the sniffer (default = 6).
        :param pulumi.Input[str] ap_sniffer_ctl: Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_data: Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_mgmt_beacon: Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_mgmt_other: Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_mgmt_probe: Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] arrp_profile: Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
        :param pulumi.Input[int] auto_power_high: The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_level: Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auto_power_low: The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_target: The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        :param pulumi.Input[str] band: WiFi band that Radio 3 operates on.
        :param pulumi.Input[str] band5g_type: WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
        :param pulumi.Input[str] bandwidth_admission_control: Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] bandwidth_capacity: Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
        :param pulumi.Input[int] beacon_interval: Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
        :param pulumi.Input[int] bss_color: BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
        :param pulumi.Input[str] bss_color_mode: BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
        :param pulumi.Input[str] call_admission_control: Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] call_capacity: Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
        :param pulumi.Input[str] channel_bonding: Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
        :param pulumi.Input[str] channel_utilization: Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio1ChannelArgs']]] channels: Selected list of wireless radio channels. The structure of `channel` block is documented below.
        :param pulumi.Input[str] coexistence: Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] darrp: Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] drma: Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] drma_sensitivity: Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
        :param pulumi.Input[int] dtim: Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
        :param pulumi.Input[int] frag_threshold: Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
        :param pulumi.Input[str] frequency_handoff: Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] iperf_protocol: Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
        :param pulumi.Input[int] iperf_server_port: Iperf service port number.
        :param pulumi.Input[int] max_clients: Maximum number of stations (STAs) or WiFi clients supported by the radio. Range depends on the hardware.
        :param pulumi.Input[int] max_distance: Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
        :param pulumi.Input[str] mode: Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
        :param pulumi.Input[int] power_level: Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        :param pulumi.Input[str] power_mode: Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        :param pulumi.Input[int] power_value: Radio EIRP power in dBm (1 - 33, default = 27).
        :param pulumi.Input[str] powersave_optimize: Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
        :param pulumi.Input[str] protection_mode: Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
        :param pulumi.Input[int] radio_id: radio-id
        :param pulumi.Input[int] rts_threshold: Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
        :param pulumi.Input[str] sam_bssid: BSSID for WiFi network.
        :param pulumi.Input[str] sam_captive_portal: Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sam_cwp_failure_string: Failure identification on the page after an incorrect login.
        :param pulumi.Input[str] sam_cwp_match_string: Identification string from the captive portal login form.
        :param pulumi.Input[str] sam_cwp_password: Password for captive portal authentication.
        :param pulumi.Input[str] sam_cwp_success_string: Success identification on the page after a successful login.
        :param pulumi.Input[str] sam_cwp_test_url: Website the client is trying to access.
        :param pulumi.Input[str] sam_cwp_username: Username for captive portal authentication.
        :param pulumi.Input[str] sam_password: Passphrase for WiFi network connection.
        :param pulumi.Input[int] sam_report_intv: SAM report interval (sec), 0 for a one-time report.
        :param pulumi.Input[str] sam_security_type: Select WiFi network security type (default = "wpa-personal"). Valid values: `open`, `wpa-personal`, `wpa-enterprise`.
        :param pulumi.Input[str] sam_server_fqdn: SAM test server domain name.
        :param pulumi.Input[str] sam_server_ip: SAM test server IP address.
        :param pulumi.Input[str] sam_server_type: Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
        :param pulumi.Input[str] sam_ssid: SSID for WiFi network.
        :param pulumi.Input[str] sam_test: Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
        :param pulumi.Input[str] sam_username: Username for WiFi network connection.
        :param pulumi.Input[str] short_guard_interval: Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] spectrum_analysis: Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        :param pulumi.Input[str] transmit_optimize: Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
        :param pulumi.Input[str] vap_all: Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        :param pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio1VapArgs']]] vaps: Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        :param pulumi.Input[str] wids_profile: Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
        :param pulumi.Input[str] zero_wait_dfs: Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
        """
        if airtime_fairness is not None:
            pulumi.set(__self__, "airtime_fairness", airtime_fairness)
        if amsdu is not None:
            pulumi.set(__self__, "amsdu", amsdu)
        if ap_handoff is not None:
            pulumi.set(__self__, "ap_handoff", ap_handoff)
        if ap_sniffer_addr is not None:
            pulumi.set(__self__, "ap_sniffer_addr", ap_sniffer_addr)
        if ap_sniffer_bufsize is not None:
            pulumi.set(__self__, "ap_sniffer_bufsize", ap_sniffer_bufsize)
        if ap_sniffer_chan is not None:
            pulumi.set(__self__, "ap_sniffer_chan", ap_sniffer_chan)
        if ap_sniffer_ctl is not None:
            pulumi.set(__self__, "ap_sniffer_ctl", ap_sniffer_ctl)
        if ap_sniffer_data is not None:
            pulumi.set(__self__, "ap_sniffer_data", ap_sniffer_data)
        if ap_sniffer_mgmt_beacon is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_beacon", ap_sniffer_mgmt_beacon)
        if ap_sniffer_mgmt_other is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_other", ap_sniffer_mgmt_other)
        if ap_sniffer_mgmt_probe is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_probe", ap_sniffer_mgmt_probe)
        if arrp_profile is not None:
            pulumi.set(__self__, "arrp_profile", arrp_profile)
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if band5g_type is not None:
            pulumi.set(__self__, "band5g_type", band5g_type)
        if bandwidth_admission_control is not None:
            pulumi.set(__self__, "bandwidth_admission_control", bandwidth_admission_control)
        if bandwidth_capacity is not None:
            pulumi.set(__self__, "bandwidth_capacity", bandwidth_capacity)
        if beacon_interval is not None:
            pulumi.set(__self__, "beacon_interval", beacon_interval)
        if bss_color is not None:
            pulumi.set(__self__, "bss_color", bss_color)
        if bss_color_mode is not None:
            pulumi.set(__self__, "bss_color_mode", bss_color_mode)
        if call_admission_control is not None:
            pulumi.set(__self__, "call_admission_control", call_admission_control)
        if call_capacity is not None:
            pulumi.set(__self__, "call_capacity", call_capacity)
        if channel_bonding is not None:
            pulumi.set(__self__, "channel_bonding", channel_bonding)
        if channel_utilization is not None:
            pulumi.set(__self__, "channel_utilization", channel_utilization)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if coexistence is not None:
            pulumi.set(__self__, "coexistence", coexistence)
        if darrp is not None:
            pulumi.set(__self__, "darrp", darrp)
        if drma is not None:
            pulumi.set(__self__, "drma", drma)
        if drma_sensitivity is not None:
            pulumi.set(__self__, "drma_sensitivity", drma_sensitivity)
        if dtim is not None:
            pulumi.set(__self__, "dtim", dtim)
        if frag_threshold is not None:
            pulumi.set(__self__, "frag_threshold", frag_threshold)
        if frequency_handoff is not None:
            pulumi.set(__self__, "frequency_handoff", frequency_handoff)
        if iperf_protocol is not None:
            pulumi.set(__self__, "iperf_protocol", iperf_protocol)
        if iperf_server_port is not None:
            pulumi.set(__self__, "iperf_server_port", iperf_server_port)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if max_distance is not None:
            pulumi.set(__self__, "max_distance", max_distance)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if powersave_optimize is not None:
            pulumi.set(__self__, "powersave_optimize", powersave_optimize)
        if protection_mode is not None:
            pulumi.set(__self__, "protection_mode", protection_mode)
        if radio_id is not None:
            pulumi.set(__self__, "radio_id", radio_id)
        if rts_threshold is not None:
            pulumi.set(__self__, "rts_threshold", rts_threshold)
        if sam_bssid is not None:
            pulumi.set(__self__, "sam_bssid", sam_bssid)
        if sam_captive_portal is not None:
            pulumi.set(__self__, "sam_captive_portal", sam_captive_portal)
        if sam_cwp_failure_string is not None:
            pulumi.set(__self__, "sam_cwp_failure_string", sam_cwp_failure_string)
        if sam_cwp_match_string is not None:
            pulumi.set(__self__, "sam_cwp_match_string", sam_cwp_match_string)
        if sam_cwp_password is not None:
            pulumi.set(__self__, "sam_cwp_password", sam_cwp_password)
        if sam_cwp_success_string is not None:
            pulumi.set(__self__, "sam_cwp_success_string", sam_cwp_success_string)
        if sam_cwp_test_url is not None:
            pulumi.set(__self__, "sam_cwp_test_url", sam_cwp_test_url)
        if sam_cwp_username is not None:
            pulumi.set(__self__, "sam_cwp_username", sam_cwp_username)
        if sam_password is not None:
            pulumi.set(__self__, "sam_password", sam_password)
        if sam_report_intv is not None:
            pulumi.set(__self__, "sam_report_intv", sam_report_intv)
        if sam_security_type is not None:
            pulumi.set(__self__, "sam_security_type", sam_security_type)
        if sam_server_fqdn is not None:
            pulumi.set(__self__, "sam_server_fqdn", sam_server_fqdn)
        if sam_server_ip is not None:
            pulumi.set(__self__, "sam_server_ip", sam_server_ip)
        if sam_server_type is not None:
            pulumi.set(__self__, "sam_server_type", sam_server_type)
        if sam_ssid is not None:
            pulumi.set(__self__, "sam_ssid", sam_ssid)
        if sam_test is not None:
            pulumi.set(__self__, "sam_test", sam_test)
        if sam_username is not None:
            pulumi.set(__self__, "sam_username", sam_username)
        if short_guard_interval is not None:
            pulumi.set(__self__, "short_guard_interval", short_guard_interval)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if transmit_optimize is not None:
            pulumi.set(__self__, "transmit_optimize", transmit_optimize)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)
        if wids_profile is not None:
            pulumi.set(__self__, "wids_profile", wids_profile)
        if zero_wait_dfs is not None:
            pulumi.set(__self__, "zero_wait_dfs", zero_wait_dfs)

    @property
    @pulumi.getter(name="airtimeFairness")
    def airtime_fairness(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "airtime_fairness")

    @airtime_fairness.setter
    def airtime_fairness(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "airtime_fairness", value)

    @property
    @pulumi.getter
    def amsdu(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "amsdu")

    @amsdu.setter
    def amsdu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amsdu", value)

    @property
    @pulumi.getter(name="apHandoff")
    def ap_handoff(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_handoff")

    @ap_handoff.setter
    def ap_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_handoff", value)

    @property
    @pulumi.getter(name="apSnifferAddr")
    def ap_sniffer_addr(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address to monitor.
        """
        return pulumi.get(self, "ap_sniffer_addr")

    @ap_sniffer_addr.setter
    def ap_sniffer_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_addr", value)

    @property
    @pulumi.getter(name="apSnifferBufsize")
    def ap_sniffer_bufsize(self) -> Optional[pulumi.Input[int]]:
        """
        Sniffer buffer size (1 - 32 MB, default = 16).
        """
        return pulumi.get(self, "ap_sniffer_bufsize")

    @ap_sniffer_bufsize.setter
    def ap_sniffer_bufsize(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_sniffer_bufsize", value)

    @property
    @pulumi.getter(name="apSnifferChan")
    def ap_sniffer_chan(self) -> Optional[pulumi.Input[int]]:
        """
        Channel on which to operate the sniffer (default = 6).
        """
        return pulumi.get(self, "ap_sniffer_chan")

    @ap_sniffer_chan.setter
    def ap_sniffer_chan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_sniffer_chan", value)

    @property
    @pulumi.getter(name="apSnifferCtl")
    def ap_sniffer_ctl(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_ctl")

    @ap_sniffer_ctl.setter
    def ap_sniffer_ctl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_ctl", value)

    @property
    @pulumi.getter(name="apSnifferData")
    def ap_sniffer_data(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_data")

    @ap_sniffer_data.setter
    def ap_sniffer_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_data", value)

    @property
    @pulumi.getter(name="apSnifferMgmtBeacon")
    def ap_sniffer_mgmt_beacon(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_mgmt_beacon")

    @ap_sniffer_mgmt_beacon.setter
    def ap_sniffer_mgmt_beacon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_beacon", value)

    @property
    @pulumi.getter(name="apSnifferMgmtOther")
    def ap_sniffer_mgmt_other(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_mgmt_other")

    @ap_sniffer_mgmt_other.setter
    def ap_sniffer_mgmt_other(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_other", value)

    @property
    @pulumi.getter(name="apSnifferMgmtProbe")
    def ap_sniffer_mgmt_probe(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_mgmt_probe")

    @ap_sniffer_mgmt_probe.setter
    def ap_sniffer_mgmt_probe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_probe", value)

    @property
    @pulumi.getter(name="arrpProfile")
    def arrp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
        """
        return pulumi.get(self, "arrp_profile")

    @arrp_profile.setter
    def arrp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arrp_profile", value)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[pulumi.Input[int]]:
        """
        The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_high")

    @auto_power_high.setter
    def auto_power_high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_high", value)

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_power_level")

    @auto_power_level.setter
    def auto_power_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_level", value)

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[pulumi.Input[int]]:
        """
        The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_low")

    @auto_power_low.setter
    def auto_power_low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_low", value)

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[pulumi.Input[str]]:
        """
        The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        """
        return pulumi.get(self, "auto_power_target")

    @auto_power_target.setter
    def auto_power_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_target", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi band that Radio 3 operates on.
        """
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter(name="band5gType")
    def band5g_type(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
        """
        return pulumi.get(self, "band5g_type")

    @band5g_type.setter
    def band5g_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band5g_type", value)

    @property
    @pulumi.getter(name="bandwidthAdmissionControl")
    def bandwidth_admission_control(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bandwidth_admission_control")

    @bandwidth_admission_control.setter
    def bandwidth_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_admission_control", value)

    @property
    @pulumi.getter(name="bandwidthCapacity")
    def bandwidth_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
        """
        return pulumi.get(self, "bandwidth_capacity")

    @bandwidth_capacity.setter
    def bandwidth_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_capacity", value)

    @property
    @pulumi.getter(name="beaconInterval")
    def beacon_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
        """
        return pulumi.get(self, "beacon_interval")

    @beacon_interval.setter
    def beacon_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "beacon_interval", value)

    @property
    @pulumi.getter(name="bssColor")
    def bss_color(self) -> Optional[pulumi.Input[int]]:
        """
        BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
        """
        return pulumi.get(self, "bss_color")

    @bss_color.setter
    def bss_color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bss_color", value)

    @property
    @pulumi.getter(name="bssColorMode")
    def bss_color_mode(self) -> Optional[pulumi.Input[str]]:
        """
        BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
        """
        return pulumi.get(self, "bss_color_mode")

    @bss_color_mode.setter
    def bss_color_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bss_color_mode", value)

    @property
    @pulumi.getter(name="callAdmissionControl")
    def call_admission_control(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "call_admission_control")

    @call_admission_control.setter
    def call_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "call_admission_control", value)

    @property
    @pulumi.getter(name="callCapacity")
    def call_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
        """
        return pulumi.get(self, "call_capacity")

    @call_capacity.setter
    def call_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "call_capacity", value)

    @property
    @pulumi.getter(name="channelBonding")
    def channel_bonding(self) -> Optional[pulumi.Input[str]]:
        """
        Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
        """
        return pulumi.get(self, "channel_bonding")

    @channel_bonding.setter
    def channel_bonding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_bonding", value)

    @property
    @pulumi.getter(name="channelUtilization")
    def channel_utilization(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "channel_utilization")

    @channel_utilization.setter
    def channel_utilization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_utilization", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio1ChannelArgs']]]]:
        """
        Selected list of wireless radio channels. The structure of `channel` block is documented below.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio1ChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def coexistence(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "coexistence")

    @coexistence.setter
    def coexistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coexistence", value)

    @property
    @pulumi.getter
    def darrp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "darrp")

    @darrp.setter
    def darrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "darrp", value)

    @property
    @pulumi.getter
    def drma(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "drma")

    @drma.setter
    def drma(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma", value)

    @property
    @pulumi.getter(name="drmaSensitivity")
    def drma_sensitivity(self) -> Optional[pulumi.Input[str]]:
        """
        Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
        """
        return pulumi.get(self, "drma_sensitivity")

    @drma_sensitivity.setter
    def drma_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma_sensitivity", value)

    @property
    @pulumi.getter
    def dtim(self) -> Optional[pulumi.Input[int]]:
        """
        Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
        """
        return pulumi.get(self, "dtim")

    @dtim.setter
    def dtim(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dtim", value)

    @property
    @pulumi.getter(name="fragThreshold")
    def frag_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
        """
        return pulumi.get(self, "frag_threshold")

    @frag_threshold.setter
    def frag_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frag_threshold", value)

    @property
    @pulumi.getter(name="frequencyHandoff")
    def frequency_handoff(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "frequency_handoff")

    @frequency_handoff.setter
    def frequency_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frequency_handoff", value)

    @property
    @pulumi.getter(name="iperfProtocol")
    def iperf_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
        """
        return pulumi.get(self, "iperf_protocol")

    @iperf_protocol.setter
    def iperf_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iperf_protocol", value)

    @property
    @pulumi.getter(name="iperfServerPort")
    def iperf_server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Iperf service port number.
        """
        return pulumi.get(self, "iperf_server_port")

    @iperf_server_port.setter
    def iperf_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iperf_server_port", value)

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of stations (STAs) or WiFi clients supported by the radio. Range depends on the hardware.
        """
        return pulumi.get(self, "max_clients")

    @max_clients.setter
    def max_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clients", value)

    @property
    @pulumi.getter(name="maxDistance")
    def max_distance(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
        """
        return pulumi.get(self, "max_distance")

    @max_distance.setter
    def max_distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_distance", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[pulumi.Input[int]]:
        """
        Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        """
        return pulumi.get(self, "power_level")

    @power_level.setter
    def power_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_level", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        """
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[pulumi.Input[int]]:
        """
        Radio EIRP power in dBm (1 - 33, default = 27).
        """
        return pulumi.get(self, "power_value")

    @power_value.setter
    def power_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_value", value)

    @property
    @pulumi.getter(name="powersaveOptimize")
    def powersave_optimize(self) -> Optional[pulumi.Input[str]]:
        """
        Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
        """
        return pulumi.get(self, "powersave_optimize")

    @powersave_optimize.setter
    def powersave_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "powersave_optimize", value)

    @property
    @pulumi.getter(name="protectionMode")
    def protection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
        """
        return pulumi.get(self, "protection_mode")

    @protection_mode.setter
    def protection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_mode", value)

    @property
    @pulumi.getter(name="radioId")
    def radio_id(self) -> Optional[pulumi.Input[int]]:
        """
        radio-id
        """
        return pulumi.get(self, "radio_id")

    @radio_id.setter
    def radio_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radio_id", value)

    @property
    @pulumi.getter(name="rtsThreshold")
    def rts_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
        """
        return pulumi.get(self, "rts_threshold")

    @rts_threshold.setter
    def rts_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rts_threshold", value)

    @property
    @pulumi.getter(name="samBssid")
    def sam_bssid(self) -> Optional[pulumi.Input[str]]:
        """
        BSSID for WiFi network.
        """
        return pulumi.get(self, "sam_bssid")

    @sam_bssid.setter
    def sam_bssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_bssid", value)

    @property
    @pulumi.getter(name="samCaptivePortal")
    def sam_captive_portal(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sam_captive_portal")

    @sam_captive_portal.setter
    def sam_captive_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_captive_portal", value)

    @property
    @pulumi.getter(name="samCwpFailureString")
    def sam_cwp_failure_string(self) -> Optional[pulumi.Input[str]]:
        """
        Failure identification on the page after an incorrect login.
        """
        return pulumi.get(self, "sam_cwp_failure_string")

    @sam_cwp_failure_string.setter
    def sam_cwp_failure_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_failure_string", value)

    @property
    @pulumi.getter(name="samCwpMatchString")
    def sam_cwp_match_string(self) -> Optional[pulumi.Input[str]]:
        """
        Identification string from the captive portal login form.
        """
        return pulumi.get(self, "sam_cwp_match_string")

    @sam_cwp_match_string.setter
    def sam_cwp_match_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_match_string", value)

    @property
    @pulumi.getter(name="samCwpPassword")
    def sam_cwp_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for captive portal authentication.
        """
        return pulumi.get(self, "sam_cwp_password")

    @sam_cwp_password.setter
    def sam_cwp_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_password", value)

    @property
    @pulumi.getter(name="samCwpSuccessString")
    def sam_cwp_success_string(self) -> Optional[pulumi.Input[str]]:
        """
        Success identification on the page after a successful login.
        """
        return pulumi.get(self, "sam_cwp_success_string")

    @sam_cwp_success_string.setter
    def sam_cwp_success_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_success_string", value)

    @property
    @pulumi.getter(name="samCwpTestUrl")
    def sam_cwp_test_url(self) -> Optional[pulumi.Input[str]]:
        """
        Website the client is trying to access.
        """
        return pulumi.get(self, "sam_cwp_test_url")

    @sam_cwp_test_url.setter
    def sam_cwp_test_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_test_url", value)

    @property
    @pulumi.getter(name="samCwpUsername")
    def sam_cwp_username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for captive portal authentication.
        """
        return pulumi.get(self, "sam_cwp_username")

    @sam_cwp_username.setter
    def sam_cwp_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_username", value)

    @property
    @pulumi.getter(name="samPassword")
    def sam_password(self) -> Optional[pulumi.Input[str]]:
        """
        Passphrase for WiFi network connection.
        """
        return pulumi.get(self, "sam_password")

    @sam_password.setter
    def sam_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_password", value)

    @property
    @pulumi.getter(name="samReportIntv")
    def sam_report_intv(self) -> Optional[pulumi.Input[int]]:
        """
        SAM report interval (sec), 0 for a one-time report.
        """
        return pulumi.get(self, "sam_report_intv")

    @sam_report_intv.setter
    def sam_report_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sam_report_intv", value)

    @property
    @pulumi.getter(name="samSecurityType")
    def sam_security_type(self) -> Optional[pulumi.Input[str]]:
        """
        Select WiFi network security type (default = "wpa-personal"). Valid values: `open`, `wpa-personal`, `wpa-enterprise`.
        """
        return pulumi.get(self, "sam_security_type")

    @sam_security_type.setter
    def sam_security_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_security_type", value)

    @property
    @pulumi.getter(name="samServerFqdn")
    def sam_server_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        SAM test server domain name.
        """
        return pulumi.get(self, "sam_server_fqdn")

    @sam_server_fqdn.setter
    def sam_server_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_fqdn", value)

    @property
    @pulumi.getter(name="samServerIp")
    def sam_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        SAM test server IP address.
        """
        return pulumi.get(self, "sam_server_ip")

    @sam_server_ip.setter
    def sam_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_ip", value)

    @property
    @pulumi.getter(name="samServerType")
    def sam_server_type(self) -> Optional[pulumi.Input[str]]:
        """
        Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
        """
        return pulumi.get(self, "sam_server_type")

    @sam_server_type.setter
    def sam_server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_type", value)

    @property
    @pulumi.getter(name="samSsid")
    def sam_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        SSID for WiFi network.
        """
        return pulumi.get(self, "sam_ssid")

    @sam_ssid.setter
    def sam_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_ssid", value)

    @property
    @pulumi.getter(name="samTest")
    def sam_test(self) -> Optional[pulumi.Input[str]]:
        """
        Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
        """
        return pulumi.get(self, "sam_test")

    @sam_test.setter
    def sam_test(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_test", value)

    @property
    @pulumi.getter(name="samUsername")
    def sam_username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for WiFi network connection.
        """
        return pulumi.get(self, "sam_username")

    @sam_username.setter
    def sam_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_username", value)

    @property
    @pulumi.getter(name="shortGuardInterval")
    def short_guard_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "short_guard_interval")

    @short_guard_interval.setter
    def short_guard_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "short_guard_interval", value)

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        """
        return pulumi.get(self, "spectrum_analysis")

    @spectrum_analysis.setter
    def spectrum_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrum_analysis", value)

    @property
    @pulumi.getter(name="transmitOptimize")
    def transmit_optimize(self) -> Optional[pulumi.Input[str]]:
        """
        Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
        """
        return pulumi.get(self, "transmit_optimize")

    @transmit_optimize.setter
    def transmit_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transmit_optimize", value)

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        """
        return pulumi.get(self, "vap_all")

    @vap_all.setter
    def vap_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vap_all", value)

    @property
    @pulumi.getter
    def vaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio1VapArgs']]]]:
        """
        Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        """
        return pulumi.get(self, "vaps")

    @vaps.setter
    def vaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio1VapArgs']]]]):
        pulumi.set(self, "vaps", value)

    @property
    @pulumi.getter(name="widsProfile")
    def wids_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
        """
        return pulumi.get(self, "wids_profile")

    @wids_profile.setter
    def wids_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wids_profile", value)

    @property
    @pulumi.getter(name="zeroWaitDfs")
    def zero_wait_dfs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "zero_wait_dfs")

    @zero_wait_dfs.setter
    def zero_wait_dfs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zero_wait_dfs", value)


@pulumi.input_type
class WirelessControllerWtpProfileRadio1ChannelArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] chan: Channel number.
        """
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        """
        Channel number.
        """
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WirelessControllerWtpProfileRadio1VapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual Access Point (VAP) name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Access Point (VAP) name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerWtpProfileRadio2Args:
    def __init__(__self__, *,
                 airtime_fairness: Optional[pulumi.Input[str]] = None,
                 amsdu: Optional[pulumi.Input[str]] = None,
                 ap_handoff: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_addr: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_bufsize: Optional[pulumi.Input[int]] = None,
                 ap_sniffer_chan: Optional[pulumi.Input[int]] = None,
                 ap_sniffer_ctl: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_data: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_beacon: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_other: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_probe: Optional[pulumi.Input[str]] = None,
                 arrp_profile: Optional[pulumi.Input[str]] = None,
                 auto_power_high: Optional[pulumi.Input[int]] = None,
                 auto_power_level: Optional[pulumi.Input[str]] = None,
                 auto_power_low: Optional[pulumi.Input[int]] = None,
                 auto_power_target: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 band5g_type: Optional[pulumi.Input[str]] = None,
                 bandwidth_admission_control: Optional[pulumi.Input[str]] = None,
                 bandwidth_capacity: Optional[pulumi.Input[int]] = None,
                 beacon_interval: Optional[pulumi.Input[int]] = None,
                 bss_color: Optional[pulumi.Input[int]] = None,
                 bss_color_mode: Optional[pulumi.Input[str]] = None,
                 call_admission_control: Optional[pulumi.Input[str]] = None,
                 call_capacity: Optional[pulumi.Input[int]] = None,
                 channel_bonding: Optional[pulumi.Input[str]] = None,
                 channel_utilization: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio2ChannelArgs']]]] = None,
                 coexistence: Optional[pulumi.Input[str]] = None,
                 darrp: Optional[pulumi.Input[str]] = None,
                 drma: Optional[pulumi.Input[str]] = None,
                 drma_sensitivity: Optional[pulumi.Input[str]] = None,
                 dtim: Optional[pulumi.Input[int]] = None,
                 frag_threshold: Optional[pulumi.Input[int]] = None,
                 frequency_handoff: Optional[pulumi.Input[str]] = None,
                 iperf_protocol: Optional[pulumi.Input[str]] = None,
                 iperf_server_port: Optional[pulumi.Input[int]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 max_distance: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 power_level: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None,
                 power_value: Optional[pulumi.Input[int]] = None,
                 powersave_optimize: Optional[pulumi.Input[str]] = None,
                 protection_mode: Optional[pulumi.Input[str]] = None,
                 radio_id: Optional[pulumi.Input[int]] = None,
                 rts_threshold: Optional[pulumi.Input[int]] = None,
                 sam_bssid: Optional[pulumi.Input[str]] = None,
                 sam_captive_portal: Optional[pulumi.Input[str]] = None,
                 sam_cwp_failure_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_match_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_password: Optional[pulumi.Input[str]] = None,
                 sam_cwp_success_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_test_url: Optional[pulumi.Input[str]] = None,
                 sam_cwp_username: Optional[pulumi.Input[str]] = None,
                 sam_password: Optional[pulumi.Input[str]] = None,
                 sam_report_intv: Optional[pulumi.Input[int]] = None,
                 sam_security_type: Optional[pulumi.Input[str]] = None,
                 sam_server_fqdn: Optional[pulumi.Input[str]] = None,
                 sam_server_ip: Optional[pulumi.Input[str]] = None,
                 sam_server_type: Optional[pulumi.Input[str]] = None,
                 sam_ssid: Optional[pulumi.Input[str]] = None,
                 sam_test: Optional[pulumi.Input[str]] = None,
                 sam_username: Optional[pulumi.Input[str]] = None,
                 short_guard_interval: Optional[pulumi.Input[str]] = None,
                 spectrum_analysis: Optional[pulumi.Input[str]] = None,
                 transmit_optimize: Optional[pulumi.Input[str]] = None,
                 vap_all: Optional[pulumi.Input[str]] = None,
                 vaps: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio2VapArgs']]]] = None,
                 wids_profile: Optional[pulumi.Input[str]] = None,
                 zero_wait_dfs: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] airtime_fairness: Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] amsdu: Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_handoff: Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_addr: MAC address to monitor.
        :param pulumi.Input[int] ap_sniffer_bufsize: Sniffer buffer size (1 - 32 MB, default = 16).
        :param pulumi.Input[int] ap_sniffer_chan: Channel on which to operate the sniffer (default = 6).
        :param pulumi.Input[str] ap_sniffer_ctl: Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_data: Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_mgmt_beacon: Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_mgmt_other: Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_mgmt_probe: Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] arrp_profile: Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
        :param pulumi.Input[int] auto_power_high: The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_level: Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auto_power_low: The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_target: The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        :param pulumi.Input[str] band: WiFi band that Radio 3 operates on.
        :param pulumi.Input[str] band5g_type: WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
        :param pulumi.Input[str] bandwidth_admission_control: Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] bandwidth_capacity: Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
        :param pulumi.Input[int] beacon_interval: Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
        :param pulumi.Input[int] bss_color: BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
        :param pulumi.Input[str] bss_color_mode: BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
        :param pulumi.Input[str] call_admission_control: Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] call_capacity: Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
        :param pulumi.Input[str] channel_bonding: Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
        :param pulumi.Input[str] channel_utilization: Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio2ChannelArgs']]] channels: Selected list of wireless radio channels. The structure of `channel` block is documented below.
        :param pulumi.Input[str] coexistence: Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] darrp: Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] drma: Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] drma_sensitivity: Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
        :param pulumi.Input[int] dtim: Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
        :param pulumi.Input[int] frag_threshold: Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
        :param pulumi.Input[str] frequency_handoff: Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] iperf_protocol: Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
        :param pulumi.Input[int] iperf_server_port: Iperf service port number.
        :param pulumi.Input[int] max_clients: Maximum number of stations (STAs) or WiFi clients supported by the radio. Range depends on the hardware.
        :param pulumi.Input[int] max_distance: Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
        :param pulumi.Input[str] mode: Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
        :param pulumi.Input[int] power_level: Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        :param pulumi.Input[str] power_mode: Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        :param pulumi.Input[int] power_value: Radio EIRP power in dBm (1 - 33, default = 27).
        :param pulumi.Input[str] powersave_optimize: Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
        :param pulumi.Input[str] protection_mode: Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
        :param pulumi.Input[int] radio_id: radio-id
        :param pulumi.Input[int] rts_threshold: Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
        :param pulumi.Input[str] sam_bssid: BSSID for WiFi network.
        :param pulumi.Input[str] sam_captive_portal: Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sam_cwp_failure_string: Failure identification on the page after an incorrect login.
        :param pulumi.Input[str] sam_cwp_match_string: Identification string from the captive portal login form.
        :param pulumi.Input[str] sam_cwp_password: Password for captive portal authentication.
        :param pulumi.Input[str] sam_cwp_success_string: Success identification on the page after a successful login.
        :param pulumi.Input[str] sam_cwp_test_url: Website the client is trying to access.
        :param pulumi.Input[str] sam_cwp_username: Username for captive portal authentication.
        :param pulumi.Input[str] sam_password: Passphrase for WiFi network connection.
        :param pulumi.Input[int] sam_report_intv: SAM report interval (sec), 0 for a one-time report.
        :param pulumi.Input[str] sam_security_type: Select WiFi network security type (default = "wpa-personal"). Valid values: `open`, `wpa-personal`, `wpa-enterprise`.
        :param pulumi.Input[str] sam_server_fqdn: SAM test server domain name.
        :param pulumi.Input[str] sam_server_ip: SAM test server IP address.
        :param pulumi.Input[str] sam_server_type: Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
        :param pulumi.Input[str] sam_ssid: SSID for WiFi network.
        :param pulumi.Input[str] sam_test: Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
        :param pulumi.Input[str] sam_username: Username for WiFi network connection.
        :param pulumi.Input[str] short_guard_interval: Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] spectrum_analysis: Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        :param pulumi.Input[str] transmit_optimize: Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
        :param pulumi.Input[str] vap_all: Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        :param pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio2VapArgs']]] vaps: Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        :param pulumi.Input[str] wids_profile: Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
        :param pulumi.Input[str] zero_wait_dfs: Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
        """
        if airtime_fairness is not None:
            pulumi.set(__self__, "airtime_fairness", airtime_fairness)
        if amsdu is not None:
            pulumi.set(__self__, "amsdu", amsdu)
        if ap_handoff is not None:
            pulumi.set(__self__, "ap_handoff", ap_handoff)
        if ap_sniffer_addr is not None:
            pulumi.set(__self__, "ap_sniffer_addr", ap_sniffer_addr)
        if ap_sniffer_bufsize is not None:
            pulumi.set(__self__, "ap_sniffer_bufsize", ap_sniffer_bufsize)
        if ap_sniffer_chan is not None:
            pulumi.set(__self__, "ap_sniffer_chan", ap_sniffer_chan)
        if ap_sniffer_ctl is not None:
            pulumi.set(__self__, "ap_sniffer_ctl", ap_sniffer_ctl)
        if ap_sniffer_data is not None:
            pulumi.set(__self__, "ap_sniffer_data", ap_sniffer_data)
        if ap_sniffer_mgmt_beacon is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_beacon", ap_sniffer_mgmt_beacon)
        if ap_sniffer_mgmt_other is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_other", ap_sniffer_mgmt_other)
        if ap_sniffer_mgmt_probe is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_probe", ap_sniffer_mgmt_probe)
        if arrp_profile is not None:
            pulumi.set(__self__, "arrp_profile", arrp_profile)
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if band5g_type is not None:
            pulumi.set(__self__, "band5g_type", band5g_type)
        if bandwidth_admission_control is not None:
            pulumi.set(__self__, "bandwidth_admission_control", bandwidth_admission_control)
        if bandwidth_capacity is not None:
            pulumi.set(__self__, "bandwidth_capacity", bandwidth_capacity)
        if beacon_interval is not None:
            pulumi.set(__self__, "beacon_interval", beacon_interval)
        if bss_color is not None:
            pulumi.set(__self__, "bss_color", bss_color)
        if bss_color_mode is not None:
            pulumi.set(__self__, "bss_color_mode", bss_color_mode)
        if call_admission_control is not None:
            pulumi.set(__self__, "call_admission_control", call_admission_control)
        if call_capacity is not None:
            pulumi.set(__self__, "call_capacity", call_capacity)
        if channel_bonding is not None:
            pulumi.set(__self__, "channel_bonding", channel_bonding)
        if channel_utilization is not None:
            pulumi.set(__self__, "channel_utilization", channel_utilization)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if coexistence is not None:
            pulumi.set(__self__, "coexistence", coexistence)
        if darrp is not None:
            pulumi.set(__self__, "darrp", darrp)
        if drma is not None:
            pulumi.set(__self__, "drma", drma)
        if drma_sensitivity is not None:
            pulumi.set(__self__, "drma_sensitivity", drma_sensitivity)
        if dtim is not None:
            pulumi.set(__self__, "dtim", dtim)
        if frag_threshold is not None:
            pulumi.set(__self__, "frag_threshold", frag_threshold)
        if frequency_handoff is not None:
            pulumi.set(__self__, "frequency_handoff", frequency_handoff)
        if iperf_protocol is not None:
            pulumi.set(__self__, "iperf_protocol", iperf_protocol)
        if iperf_server_port is not None:
            pulumi.set(__self__, "iperf_server_port", iperf_server_port)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if max_distance is not None:
            pulumi.set(__self__, "max_distance", max_distance)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if powersave_optimize is not None:
            pulumi.set(__self__, "powersave_optimize", powersave_optimize)
        if protection_mode is not None:
            pulumi.set(__self__, "protection_mode", protection_mode)
        if radio_id is not None:
            pulumi.set(__self__, "radio_id", radio_id)
        if rts_threshold is not None:
            pulumi.set(__self__, "rts_threshold", rts_threshold)
        if sam_bssid is not None:
            pulumi.set(__self__, "sam_bssid", sam_bssid)
        if sam_captive_portal is not None:
            pulumi.set(__self__, "sam_captive_portal", sam_captive_portal)
        if sam_cwp_failure_string is not None:
            pulumi.set(__self__, "sam_cwp_failure_string", sam_cwp_failure_string)
        if sam_cwp_match_string is not None:
            pulumi.set(__self__, "sam_cwp_match_string", sam_cwp_match_string)
        if sam_cwp_password is not None:
            pulumi.set(__self__, "sam_cwp_password", sam_cwp_password)
        if sam_cwp_success_string is not None:
            pulumi.set(__self__, "sam_cwp_success_string", sam_cwp_success_string)
        if sam_cwp_test_url is not None:
            pulumi.set(__self__, "sam_cwp_test_url", sam_cwp_test_url)
        if sam_cwp_username is not None:
            pulumi.set(__self__, "sam_cwp_username", sam_cwp_username)
        if sam_password is not None:
            pulumi.set(__self__, "sam_password", sam_password)
        if sam_report_intv is not None:
            pulumi.set(__self__, "sam_report_intv", sam_report_intv)
        if sam_security_type is not None:
            pulumi.set(__self__, "sam_security_type", sam_security_type)
        if sam_server_fqdn is not None:
            pulumi.set(__self__, "sam_server_fqdn", sam_server_fqdn)
        if sam_server_ip is not None:
            pulumi.set(__self__, "sam_server_ip", sam_server_ip)
        if sam_server_type is not None:
            pulumi.set(__self__, "sam_server_type", sam_server_type)
        if sam_ssid is not None:
            pulumi.set(__self__, "sam_ssid", sam_ssid)
        if sam_test is not None:
            pulumi.set(__self__, "sam_test", sam_test)
        if sam_username is not None:
            pulumi.set(__self__, "sam_username", sam_username)
        if short_guard_interval is not None:
            pulumi.set(__self__, "short_guard_interval", short_guard_interval)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if transmit_optimize is not None:
            pulumi.set(__self__, "transmit_optimize", transmit_optimize)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)
        if wids_profile is not None:
            pulumi.set(__self__, "wids_profile", wids_profile)
        if zero_wait_dfs is not None:
            pulumi.set(__self__, "zero_wait_dfs", zero_wait_dfs)

    @property
    @pulumi.getter(name="airtimeFairness")
    def airtime_fairness(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "airtime_fairness")

    @airtime_fairness.setter
    def airtime_fairness(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "airtime_fairness", value)

    @property
    @pulumi.getter
    def amsdu(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "amsdu")

    @amsdu.setter
    def amsdu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amsdu", value)

    @property
    @pulumi.getter(name="apHandoff")
    def ap_handoff(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_handoff")

    @ap_handoff.setter
    def ap_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_handoff", value)

    @property
    @pulumi.getter(name="apSnifferAddr")
    def ap_sniffer_addr(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address to monitor.
        """
        return pulumi.get(self, "ap_sniffer_addr")

    @ap_sniffer_addr.setter
    def ap_sniffer_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_addr", value)

    @property
    @pulumi.getter(name="apSnifferBufsize")
    def ap_sniffer_bufsize(self) -> Optional[pulumi.Input[int]]:
        """
        Sniffer buffer size (1 - 32 MB, default = 16).
        """
        return pulumi.get(self, "ap_sniffer_bufsize")

    @ap_sniffer_bufsize.setter
    def ap_sniffer_bufsize(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_sniffer_bufsize", value)

    @property
    @pulumi.getter(name="apSnifferChan")
    def ap_sniffer_chan(self) -> Optional[pulumi.Input[int]]:
        """
        Channel on which to operate the sniffer (default = 6).
        """
        return pulumi.get(self, "ap_sniffer_chan")

    @ap_sniffer_chan.setter
    def ap_sniffer_chan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_sniffer_chan", value)

    @property
    @pulumi.getter(name="apSnifferCtl")
    def ap_sniffer_ctl(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_ctl")

    @ap_sniffer_ctl.setter
    def ap_sniffer_ctl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_ctl", value)

    @property
    @pulumi.getter(name="apSnifferData")
    def ap_sniffer_data(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_data")

    @ap_sniffer_data.setter
    def ap_sniffer_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_data", value)

    @property
    @pulumi.getter(name="apSnifferMgmtBeacon")
    def ap_sniffer_mgmt_beacon(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_mgmt_beacon")

    @ap_sniffer_mgmt_beacon.setter
    def ap_sniffer_mgmt_beacon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_beacon", value)

    @property
    @pulumi.getter(name="apSnifferMgmtOther")
    def ap_sniffer_mgmt_other(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_mgmt_other")

    @ap_sniffer_mgmt_other.setter
    def ap_sniffer_mgmt_other(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_other", value)

    @property
    @pulumi.getter(name="apSnifferMgmtProbe")
    def ap_sniffer_mgmt_probe(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_mgmt_probe")

    @ap_sniffer_mgmt_probe.setter
    def ap_sniffer_mgmt_probe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_probe", value)

    @property
    @pulumi.getter(name="arrpProfile")
    def arrp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
        """
        return pulumi.get(self, "arrp_profile")

    @arrp_profile.setter
    def arrp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arrp_profile", value)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[pulumi.Input[int]]:
        """
        The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_high")

    @auto_power_high.setter
    def auto_power_high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_high", value)

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_power_level")

    @auto_power_level.setter
    def auto_power_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_level", value)

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[pulumi.Input[int]]:
        """
        The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_low")

    @auto_power_low.setter
    def auto_power_low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_low", value)

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[pulumi.Input[str]]:
        """
        The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        """
        return pulumi.get(self, "auto_power_target")

    @auto_power_target.setter
    def auto_power_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_target", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi band that Radio 3 operates on.
        """
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter(name="band5gType")
    def band5g_type(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
        """
        return pulumi.get(self, "band5g_type")

    @band5g_type.setter
    def band5g_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band5g_type", value)

    @property
    @pulumi.getter(name="bandwidthAdmissionControl")
    def bandwidth_admission_control(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bandwidth_admission_control")

    @bandwidth_admission_control.setter
    def bandwidth_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_admission_control", value)

    @property
    @pulumi.getter(name="bandwidthCapacity")
    def bandwidth_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
        """
        return pulumi.get(self, "bandwidth_capacity")

    @bandwidth_capacity.setter
    def bandwidth_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_capacity", value)

    @property
    @pulumi.getter(name="beaconInterval")
    def beacon_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
        """
        return pulumi.get(self, "beacon_interval")

    @beacon_interval.setter
    def beacon_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "beacon_interval", value)

    @property
    @pulumi.getter(name="bssColor")
    def bss_color(self) -> Optional[pulumi.Input[int]]:
        """
        BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
        """
        return pulumi.get(self, "bss_color")

    @bss_color.setter
    def bss_color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bss_color", value)

    @property
    @pulumi.getter(name="bssColorMode")
    def bss_color_mode(self) -> Optional[pulumi.Input[str]]:
        """
        BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
        """
        return pulumi.get(self, "bss_color_mode")

    @bss_color_mode.setter
    def bss_color_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bss_color_mode", value)

    @property
    @pulumi.getter(name="callAdmissionControl")
    def call_admission_control(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "call_admission_control")

    @call_admission_control.setter
    def call_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "call_admission_control", value)

    @property
    @pulumi.getter(name="callCapacity")
    def call_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
        """
        return pulumi.get(self, "call_capacity")

    @call_capacity.setter
    def call_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "call_capacity", value)

    @property
    @pulumi.getter(name="channelBonding")
    def channel_bonding(self) -> Optional[pulumi.Input[str]]:
        """
        Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
        """
        return pulumi.get(self, "channel_bonding")

    @channel_bonding.setter
    def channel_bonding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_bonding", value)

    @property
    @pulumi.getter(name="channelUtilization")
    def channel_utilization(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "channel_utilization")

    @channel_utilization.setter
    def channel_utilization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_utilization", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio2ChannelArgs']]]]:
        """
        Selected list of wireless radio channels. The structure of `channel` block is documented below.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio2ChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def coexistence(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "coexistence")

    @coexistence.setter
    def coexistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coexistence", value)

    @property
    @pulumi.getter
    def darrp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "darrp")

    @darrp.setter
    def darrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "darrp", value)

    @property
    @pulumi.getter
    def drma(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "drma")

    @drma.setter
    def drma(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma", value)

    @property
    @pulumi.getter(name="drmaSensitivity")
    def drma_sensitivity(self) -> Optional[pulumi.Input[str]]:
        """
        Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
        """
        return pulumi.get(self, "drma_sensitivity")

    @drma_sensitivity.setter
    def drma_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma_sensitivity", value)

    @property
    @pulumi.getter
    def dtim(self) -> Optional[pulumi.Input[int]]:
        """
        Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
        """
        return pulumi.get(self, "dtim")

    @dtim.setter
    def dtim(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dtim", value)

    @property
    @pulumi.getter(name="fragThreshold")
    def frag_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
        """
        return pulumi.get(self, "frag_threshold")

    @frag_threshold.setter
    def frag_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frag_threshold", value)

    @property
    @pulumi.getter(name="frequencyHandoff")
    def frequency_handoff(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "frequency_handoff")

    @frequency_handoff.setter
    def frequency_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frequency_handoff", value)

    @property
    @pulumi.getter(name="iperfProtocol")
    def iperf_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
        """
        return pulumi.get(self, "iperf_protocol")

    @iperf_protocol.setter
    def iperf_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iperf_protocol", value)

    @property
    @pulumi.getter(name="iperfServerPort")
    def iperf_server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Iperf service port number.
        """
        return pulumi.get(self, "iperf_server_port")

    @iperf_server_port.setter
    def iperf_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iperf_server_port", value)

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of stations (STAs) or WiFi clients supported by the radio. Range depends on the hardware.
        """
        return pulumi.get(self, "max_clients")

    @max_clients.setter
    def max_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clients", value)

    @property
    @pulumi.getter(name="maxDistance")
    def max_distance(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
        """
        return pulumi.get(self, "max_distance")

    @max_distance.setter
    def max_distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_distance", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[pulumi.Input[int]]:
        """
        Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        """
        return pulumi.get(self, "power_level")

    @power_level.setter
    def power_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_level", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        """
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[pulumi.Input[int]]:
        """
        Radio EIRP power in dBm (1 - 33, default = 27).
        """
        return pulumi.get(self, "power_value")

    @power_value.setter
    def power_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_value", value)

    @property
    @pulumi.getter(name="powersaveOptimize")
    def powersave_optimize(self) -> Optional[pulumi.Input[str]]:
        """
        Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
        """
        return pulumi.get(self, "powersave_optimize")

    @powersave_optimize.setter
    def powersave_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "powersave_optimize", value)

    @property
    @pulumi.getter(name="protectionMode")
    def protection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
        """
        return pulumi.get(self, "protection_mode")

    @protection_mode.setter
    def protection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_mode", value)

    @property
    @pulumi.getter(name="radioId")
    def radio_id(self) -> Optional[pulumi.Input[int]]:
        """
        radio-id
        """
        return pulumi.get(self, "radio_id")

    @radio_id.setter
    def radio_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radio_id", value)

    @property
    @pulumi.getter(name="rtsThreshold")
    def rts_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
        """
        return pulumi.get(self, "rts_threshold")

    @rts_threshold.setter
    def rts_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rts_threshold", value)

    @property
    @pulumi.getter(name="samBssid")
    def sam_bssid(self) -> Optional[pulumi.Input[str]]:
        """
        BSSID for WiFi network.
        """
        return pulumi.get(self, "sam_bssid")

    @sam_bssid.setter
    def sam_bssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_bssid", value)

    @property
    @pulumi.getter(name="samCaptivePortal")
    def sam_captive_portal(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sam_captive_portal")

    @sam_captive_portal.setter
    def sam_captive_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_captive_portal", value)

    @property
    @pulumi.getter(name="samCwpFailureString")
    def sam_cwp_failure_string(self) -> Optional[pulumi.Input[str]]:
        """
        Failure identification on the page after an incorrect login.
        """
        return pulumi.get(self, "sam_cwp_failure_string")

    @sam_cwp_failure_string.setter
    def sam_cwp_failure_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_failure_string", value)

    @property
    @pulumi.getter(name="samCwpMatchString")
    def sam_cwp_match_string(self) -> Optional[pulumi.Input[str]]:
        """
        Identification string from the captive portal login form.
        """
        return pulumi.get(self, "sam_cwp_match_string")

    @sam_cwp_match_string.setter
    def sam_cwp_match_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_match_string", value)

    @property
    @pulumi.getter(name="samCwpPassword")
    def sam_cwp_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for captive portal authentication.
        """
        return pulumi.get(self, "sam_cwp_password")

    @sam_cwp_password.setter
    def sam_cwp_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_password", value)

    @property
    @pulumi.getter(name="samCwpSuccessString")
    def sam_cwp_success_string(self) -> Optional[pulumi.Input[str]]:
        """
        Success identification on the page after a successful login.
        """
        return pulumi.get(self, "sam_cwp_success_string")

    @sam_cwp_success_string.setter
    def sam_cwp_success_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_success_string", value)

    @property
    @pulumi.getter(name="samCwpTestUrl")
    def sam_cwp_test_url(self) -> Optional[pulumi.Input[str]]:
        """
        Website the client is trying to access.
        """
        return pulumi.get(self, "sam_cwp_test_url")

    @sam_cwp_test_url.setter
    def sam_cwp_test_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_test_url", value)

    @property
    @pulumi.getter(name="samCwpUsername")
    def sam_cwp_username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for captive portal authentication.
        """
        return pulumi.get(self, "sam_cwp_username")

    @sam_cwp_username.setter
    def sam_cwp_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_username", value)

    @property
    @pulumi.getter(name="samPassword")
    def sam_password(self) -> Optional[pulumi.Input[str]]:
        """
        Passphrase for WiFi network connection.
        """
        return pulumi.get(self, "sam_password")

    @sam_password.setter
    def sam_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_password", value)

    @property
    @pulumi.getter(name="samReportIntv")
    def sam_report_intv(self) -> Optional[pulumi.Input[int]]:
        """
        SAM report interval (sec), 0 for a one-time report.
        """
        return pulumi.get(self, "sam_report_intv")

    @sam_report_intv.setter
    def sam_report_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sam_report_intv", value)

    @property
    @pulumi.getter(name="samSecurityType")
    def sam_security_type(self) -> Optional[pulumi.Input[str]]:
        """
        Select WiFi network security type (default = "wpa-personal"). Valid values: `open`, `wpa-personal`, `wpa-enterprise`.
        """
        return pulumi.get(self, "sam_security_type")

    @sam_security_type.setter
    def sam_security_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_security_type", value)

    @property
    @pulumi.getter(name="samServerFqdn")
    def sam_server_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        SAM test server domain name.
        """
        return pulumi.get(self, "sam_server_fqdn")

    @sam_server_fqdn.setter
    def sam_server_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_fqdn", value)

    @property
    @pulumi.getter(name="samServerIp")
    def sam_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        SAM test server IP address.
        """
        return pulumi.get(self, "sam_server_ip")

    @sam_server_ip.setter
    def sam_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_ip", value)

    @property
    @pulumi.getter(name="samServerType")
    def sam_server_type(self) -> Optional[pulumi.Input[str]]:
        """
        Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
        """
        return pulumi.get(self, "sam_server_type")

    @sam_server_type.setter
    def sam_server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_type", value)

    @property
    @pulumi.getter(name="samSsid")
    def sam_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        SSID for WiFi network.
        """
        return pulumi.get(self, "sam_ssid")

    @sam_ssid.setter
    def sam_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_ssid", value)

    @property
    @pulumi.getter(name="samTest")
    def sam_test(self) -> Optional[pulumi.Input[str]]:
        """
        Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
        """
        return pulumi.get(self, "sam_test")

    @sam_test.setter
    def sam_test(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_test", value)

    @property
    @pulumi.getter(name="samUsername")
    def sam_username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for WiFi network connection.
        """
        return pulumi.get(self, "sam_username")

    @sam_username.setter
    def sam_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_username", value)

    @property
    @pulumi.getter(name="shortGuardInterval")
    def short_guard_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "short_guard_interval")

    @short_guard_interval.setter
    def short_guard_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "short_guard_interval", value)

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        """
        return pulumi.get(self, "spectrum_analysis")

    @spectrum_analysis.setter
    def spectrum_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrum_analysis", value)

    @property
    @pulumi.getter(name="transmitOptimize")
    def transmit_optimize(self) -> Optional[pulumi.Input[str]]:
        """
        Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
        """
        return pulumi.get(self, "transmit_optimize")

    @transmit_optimize.setter
    def transmit_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transmit_optimize", value)

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        """
        return pulumi.get(self, "vap_all")

    @vap_all.setter
    def vap_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vap_all", value)

    @property
    @pulumi.getter
    def vaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio2VapArgs']]]]:
        """
        Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        """
        return pulumi.get(self, "vaps")

    @vaps.setter
    def vaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio2VapArgs']]]]):
        pulumi.set(self, "vaps", value)

    @property
    @pulumi.getter(name="widsProfile")
    def wids_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
        """
        return pulumi.get(self, "wids_profile")

    @wids_profile.setter
    def wids_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wids_profile", value)

    @property
    @pulumi.getter(name="zeroWaitDfs")
    def zero_wait_dfs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "zero_wait_dfs")

    @zero_wait_dfs.setter
    def zero_wait_dfs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zero_wait_dfs", value)


@pulumi.input_type
class WirelessControllerWtpProfileRadio2ChannelArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] chan: Channel number.
        """
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        """
        Channel number.
        """
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WirelessControllerWtpProfileRadio2VapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual Access Point (VAP) name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Access Point (VAP) name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerWtpProfileRadio3Args:
    def __init__(__self__, *,
                 airtime_fairness: Optional[pulumi.Input[str]] = None,
                 amsdu: Optional[pulumi.Input[str]] = None,
                 ap_handoff: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_addr: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_bufsize: Optional[pulumi.Input[int]] = None,
                 ap_sniffer_chan: Optional[pulumi.Input[int]] = None,
                 ap_sniffer_ctl: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_data: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_beacon: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_other: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_probe: Optional[pulumi.Input[str]] = None,
                 arrp_profile: Optional[pulumi.Input[str]] = None,
                 auto_power_high: Optional[pulumi.Input[int]] = None,
                 auto_power_level: Optional[pulumi.Input[str]] = None,
                 auto_power_low: Optional[pulumi.Input[int]] = None,
                 auto_power_target: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 band5g_type: Optional[pulumi.Input[str]] = None,
                 bandwidth_admission_control: Optional[pulumi.Input[str]] = None,
                 bandwidth_capacity: Optional[pulumi.Input[int]] = None,
                 beacon_interval: Optional[pulumi.Input[int]] = None,
                 bss_color: Optional[pulumi.Input[int]] = None,
                 bss_color_mode: Optional[pulumi.Input[str]] = None,
                 call_admission_control: Optional[pulumi.Input[str]] = None,
                 call_capacity: Optional[pulumi.Input[int]] = None,
                 channel_bonding: Optional[pulumi.Input[str]] = None,
                 channel_utilization: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio3ChannelArgs']]]] = None,
                 coexistence: Optional[pulumi.Input[str]] = None,
                 darrp: Optional[pulumi.Input[str]] = None,
                 drma: Optional[pulumi.Input[str]] = None,
                 drma_sensitivity: Optional[pulumi.Input[str]] = None,
                 dtim: Optional[pulumi.Input[int]] = None,
                 frag_threshold: Optional[pulumi.Input[int]] = None,
                 frequency_handoff: Optional[pulumi.Input[str]] = None,
                 iperf_protocol: Optional[pulumi.Input[str]] = None,
                 iperf_server_port: Optional[pulumi.Input[int]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 max_distance: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 power_level: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None,
                 power_value: Optional[pulumi.Input[int]] = None,
                 powersave_optimize: Optional[pulumi.Input[str]] = None,
                 protection_mode: Optional[pulumi.Input[str]] = None,
                 rts_threshold: Optional[pulumi.Input[int]] = None,
                 sam_bssid: Optional[pulumi.Input[str]] = None,
                 sam_captive_portal: Optional[pulumi.Input[str]] = None,
                 sam_cwp_failure_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_match_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_password: Optional[pulumi.Input[str]] = None,
                 sam_cwp_success_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_test_url: Optional[pulumi.Input[str]] = None,
                 sam_cwp_username: Optional[pulumi.Input[str]] = None,
                 sam_password: Optional[pulumi.Input[str]] = None,
                 sam_report_intv: Optional[pulumi.Input[int]] = None,
                 sam_security_type: Optional[pulumi.Input[str]] = None,
                 sam_server_fqdn: Optional[pulumi.Input[str]] = None,
                 sam_server_ip: Optional[pulumi.Input[str]] = None,
                 sam_server_type: Optional[pulumi.Input[str]] = None,
                 sam_ssid: Optional[pulumi.Input[str]] = None,
                 sam_test: Optional[pulumi.Input[str]] = None,
                 sam_username: Optional[pulumi.Input[str]] = None,
                 short_guard_interval: Optional[pulumi.Input[str]] = None,
                 spectrum_analysis: Optional[pulumi.Input[str]] = None,
                 transmit_optimize: Optional[pulumi.Input[str]] = None,
                 vap_all: Optional[pulumi.Input[str]] = None,
                 vaps: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio3VapArgs']]]] = None,
                 wids_profile: Optional[pulumi.Input[str]] = None,
                 zero_wait_dfs: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] airtime_fairness: Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] amsdu: Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_handoff: Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_addr: MAC address to monitor.
        :param pulumi.Input[int] ap_sniffer_bufsize: Sniffer buffer size (1 - 32 MB, default = 16).
        :param pulumi.Input[int] ap_sniffer_chan: Channel on which to operate the sniffer (default = 6).
        :param pulumi.Input[str] ap_sniffer_ctl: Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_data: Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_mgmt_beacon: Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_mgmt_other: Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_mgmt_probe: Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] arrp_profile: Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
        :param pulumi.Input[int] auto_power_high: The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_level: Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auto_power_low: The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_target: The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        :param pulumi.Input[str] band: WiFi band that Radio 3 operates on.
        :param pulumi.Input[str] band5g_type: WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
        :param pulumi.Input[str] bandwidth_admission_control: Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] bandwidth_capacity: Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
        :param pulumi.Input[int] beacon_interval: Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
        :param pulumi.Input[int] bss_color: BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
        :param pulumi.Input[str] bss_color_mode: BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
        :param pulumi.Input[str] call_admission_control: Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] call_capacity: Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
        :param pulumi.Input[str] channel_bonding: Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
        :param pulumi.Input[str] channel_utilization: Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio3ChannelArgs']]] channels: Selected list of wireless radio channels. The structure of `channel` block is documented below.
        :param pulumi.Input[str] coexistence: Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] darrp: Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] drma: Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] drma_sensitivity: Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
        :param pulumi.Input[int] dtim: Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
        :param pulumi.Input[int] frag_threshold: Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
        :param pulumi.Input[str] frequency_handoff: Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] iperf_protocol: Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
        :param pulumi.Input[int] iperf_server_port: Iperf service port number.
        :param pulumi.Input[int] max_clients: Maximum number of stations (STAs) or WiFi clients supported by the radio. Range depends on the hardware.
        :param pulumi.Input[int] max_distance: Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
        :param pulumi.Input[str] mode: Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
        :param pulumi.Input[int] power_level: Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        :param pulumi.Input[str] power_mode: Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        :param pulumi.Input[int] power_value: Radio EIRP power in dBm (1 - 33, default = 27).
        :param pulumi.Input[str] powersave_optimize: Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
        :param pulumi.Input[str] protection_mode: Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
        :param pulumi.Input[int] rts_threshold: Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
        :param pulumi.Input[str] sam_bssid: BSSID for WiFi network.
        :param pulumi.Input[str] sam_captive_portal: Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sam_cwp_failure_string: Failure identification on the page after an incorrect login.
        :param pulumi.Input[str] sam_cwp_match_string: Identification string from the captive portal login form.
        :param pulumi.Input[str] sam_cwp_password: Password for captive portal authentication.
        :param pulumi.Input[str] sam_cwp_success_string: Success identification on the page after a successful login.
        :param pulumi.Input[str] sam_cwp_test_url: Website the client is trying to access.
        :param pulumi.Input[str] sam_cwp_username: Username for captive portal authentication.
        :param pulumi.Input[str] sam_password: Passphrase for WiFi network connection.
        :param pulumi.Input[int] sam_report_intv: SAM report interval (sec), 0 for a one-time report.
        :param pulumi.Input[str] sam_security_type: Select WiFi network security type (default = "wpa-personal"). Valid values: `open`, `wpa-personal`, `wpa-enterprise`.
        :param pulumi.Input[str] sam_server_fqdn: SAM test server domain name.
        :param pulumi.Input[str] sam_server_ip: SAM test server IP address.
        :param pulumi.Input[str] sam_server_type: Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
        :param pulumi.Input[str] sam_ssid: SSID for WiFi network.
        :param pulumi.Input[str] sam_test: Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
        :param pulumi.Input[str] sam_username: Username for WiFi network connection.
        :param pulumi.Input[str] short_guard_interval: Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] spectrum_analysis: Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        :param pulumi.Input[str] transmit_optimize: Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
        :param pulumi.Input[str] vap_all: Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        :param pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio3VapArgs']]] vaps: Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        :param pulumi.Input[str] wids_profile: Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
        :param pulumi.Input[str] zero_wait_dfs: Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
        """
        if airtime_fairness is not None:
            pulumi.set(__self__, "airtime_fairness", airtime_fairness)
        if amsdu is not None:
            pulumi.set(__self__, "amsdu", amsdu)
        if ap_handoff is not None:
            pulumi.set(__self__, "ap_handoff", ap_handoff)
        if ap_sniffer_addr is not None:
            pulumi.set(__self__, "ap_sniffer_addr", ap_sniffer_addr)
        if ap_sniffer_bufsize is not None:
            pulumi.set(__self__, "ap_sniffer_bufsize", ap_sniffer_bufsize)
        if ap_sniffer_chan is not None:
            pulumi.set(__self__, "ap_sniffer_chan", ap_sniffer_chan)
        if ap_sniffer_ctl is not None:
            pulumi.set(__self__, "ap_sniffer_ctl", ap_sniffer_ctl)
        if ap_sniffer_data is not None:
            pulumi.set(__self__, "ap_sniffer_data", ap_sniffer_data)
        if ap_sniffer_mgmt_beacon is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_beacon", ap_sniffer_mgmt_beacon)
        if ap_sniffer_mgmt_other is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_other", ap_sniffer_mgmt_other)
        if ap_sniffer_mgmt_probe is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_probe", ap_sniffer_mgmt_probe)
        if arrp_profile is not None:
            pulumi.set(__self__, "arrp_profile", arrp_profile)
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if band5g_type is not None:
            pulumi.set(__self__, "band5g_type", band5g_type)
        if bandwidth_admission_control is not None:
            pulumi.set(__self__, "bandwidth_admission_control", bandwidth_admission_control)
        if bandwidth_capacity is not None:
            pulumi.set(__self__, "bandwidth_capacity", bandwidth_capacity)
        if beacon_interval is not None:
            pulumi.set(__self__, "beacon_interval", beacon_interval)
        if bss_color is not None:
            pulumi.set(__self__, "bss_color", bss_color)
        if bss_color_mode is not None:
            pulumi.set(__self__, "bss_color_mode", bss_color_mode)
        if call_admission_control is not None:
            pulumi.set(__self__, "call_admission_control", call_admission_control)
        if call_capacity is not None:
            pulumi.set(__self__, "call_capacity", call_capacity)
        if channel_bonding is not None:
            pulumi.set(__self__, "channel_bonding", channel_bonding)
        if channel_utilization is not None:
            pulumi.set(__self__, "channel_utilization", channel_utilization)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if coexistence is not None:
            pulumi.set(__self__, "coexistence", coexistence)
        if darrp is not None:
            pulumi.set(__self__, "darrp", darrp)
        if drma is not None:
            pulumi.set(__self__, "drma", drma)
        if drma_sensitivity is not None:
            pulumi.set(__self__, "drma_sensitivity", drma_sensitivity)
        if dtim is not None:
            pulumi.set(__self__, "dtim", dtim)
        if frag_threshold is not None:
            pulumi.set(__self__, "frag_threshold", frag_threshold)
        if frequency_handoff is not None:
            pulumi.set(__self__, "frequency_handoff", frequency_handoff)
        if iperf_protocol is not None:
            pulumi.set(__self__, "iperf_protocol", iperf_protocol)
        if iperf_server_port is not None:
            pulumi.set(__self__, "iperf_server_port", iperf_server_port)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if max_distance is not None:
            pulumi.set(__self__, "max_distance", max_distance)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if powersave_optimize is not None:
            pulumi.set(__self__, "powersave_optimize", powersave_optimize)
        if protection_mode is not None:
            pulumi.set(__self__, "protection_mode", protection_mode)
        if rts_threshold is not None:
            pulumi.set(__self__, "rts_threshold", rts_threshold)
        if sam_bssid is not None:
            pulumi.set(__self__, "sam_bssid", sam_bssid)
        if sam_captive_portal is not None:
            pulumi.set(__self__, "sam_captive_portal", sam_captive_portal)
        if sam_cwp_failure_string is not None:
            pulumi.set(__self__, "sam_cwp_failure_string", sam_cwp_failure_string)
        if sam_cwp_match_string is not None:
            pulumi.set(__self__, "sam_cwp_match_string", sam_cwp_match_string)
        if sam_cwp_password is not None:
            pulumi.set(__self__, "sam_cwp_password", sam_cwp_password)
        if sam_cwp_success_string is not None:
            pulumi.set(__self__, "sam_cwp_success_string", sam_cwp_success_string)
        if sam_cwp_test_url is not None:
            pulumi.set(__self__, "sam_cwp_test_url", sam_cwp_test_url)
        if sam_cwp_username is not None:
            pulumi.set(__self__, "sam_cwp_username", sam_cwp_username)
        if sam_password is not None:
            pulumi.set(__self__, "sam_password", sam_password)
        if sam_report_intv is not None:
            pulumi.set(__self__, "sam_report_intv", sam_report_intv)
        if sam_security_type is not None:
            pulumi.set(__self__, "sam_security_type", sam_security_type)
        if sam_server_fqdn is not None:
            pulumi.set(__self__, "sam_server_fqdn", sam_server_fqdn)
        if sam_server_ip is not None:
            pulumi.set(__self__, "sam_server_ip", sam_server_ip)
        if sam_server_type is not None:
            pulumi.set(__self__, "sam_server_type", sam_server_type)
        if sam_ssid is not None:
            pulumi.set(__self__, "sam_ssid", sam_ssid)
        if sam_test is not None:
            pulumi.set(__self__, "sam_test", sam_test)
        if sam_username is not None:
            pulumi.set(__self__, "sam_username", sam_username)
        if short_guard_interval is not None:
            pulumi.set(__self__, "short_guard_interval", short_guard_interval)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if transmit_optimize is not None:
            pulumi.set(__self__, "transmit_optimize", transmit_optimize)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)
        if wids_profile is not None:
            pulumi.set(__self__, "wids_profile", wids_profile)
        if zero_wait_dfs is not None:
            pulumi.set(__self__, "zero_wait_dfs", zero_wait_dfs)

    @property
    @pulumi.getter(name="airtimeFairness")
    def airtime_fairness(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "airtime_fairness")

    @airtime_fairness.setter
    def airtime_fairness(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "airtime_fairness", value)

    @property
    @pulumi.getter
    def amsdu(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "amsdu")

    @amsdu.setter
    def amsdu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amsdu", value)

    @property
    @pulumi.getter(name="apHandoff")
    def ap_handoff(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_handoff")

    @ap_handoff.setter
    def ap_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_handoff", value)

    @property
    @pulumi.getter(name="apSnifferAddr")
    def ap_sniffer_addr(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address to monitor.
        """
        return pulumi.get(self, "ap_sniffer_addr")

    @ap_sniffer_addr.setter
    def ap_sniffer_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_addr", value)

    @property
    @pulumi.getter(name="apSnifferBufsize")
    def ap_sniffer_bufsize(self) -> Optional[pulumi.Input[int]]:
        """
        Sniffer buffer size (1 - 32 MB, default = 16).
        """
        return pulumi.get(self, "ap_sniffer_bufsize")

    @ap_sniffer_bufsize.setter
    def ap_sniffer_bufsize(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_sniffer_bufsize", value)

    @property
    @pulumi.getter(name="apSnifferChan")
    def ap_sniffer_chan(self) -> Optional[pulumi.Input[int]]:
        """
        Channel on which to operate the sniffer (default = 6).
        """
        return pulumi.get(self, "ap_sniffer_chan")

    @ap_sniffer_chan.setter
    def ap_sniffer_chan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_sniffer_chan", value)

    @property
    @pulumi.getter(name="apSnifferCtl")
    def ap_sniffer_ctl(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_ctl")

    @ap_sniffer_ctl.setter
    def ap_sniffer_ctl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_ctl", value)

    @property
    @pulumi.getter(name="apSnifferData")
    def ap_sniffer_data(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_data")

    @ap_sniffer_data.setter
    def ap_sniffer_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_data", value)

    @property
    @pulumi.getter(name="apSnifferMgmtBeacon")
    def ap_sniffer_mgmt_beacon(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_mgmt_beacon")

    @ap_sniffer_mgmt_beacon.setter
    def ap_sniffer_mgmt_beacon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_beacon", value)

    @property
    @pulumi.getter(name="apSnifferMgmtOther")
    def ap_sniffer_mgmt_other(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_mgmt_other")

    @ap_sniffer_mgmt_other.setter
    def ap_sniffer_mgmt_other(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_other", value)

    @property
    @pulumi.getter(name="apSnifferMgmtProbe")
    def ap_sniffer_mgmt_probe(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_mgmt_probe")

    @ap_sniffer_mgmt_probe.setter
    def ap_sniffer_mgmt_probe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_probe", value)

    @property
    @pulumi.getter(name="arrpProfile")
    def arrp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
        """
        return pulumi.get(self, "arrp_profile")

    @arrp_profile.setter
    def arrp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arrp_profile", value)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[pulumi.Input[int]]:
        """
        The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_high")

    @auto_power_high.setter
    def auto_power_high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_high", value)

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_power_level")

    @auto_power_level.setter
    def auto_power_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_level", value)

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[pulumi.Input[int]]:
        """
        The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_low")

    @auto_power_low.setter
    def auto_power_low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_low", value)

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[pulumi.Input[str]]:
        """
        The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        """
        return pulumi.get(self, "auto_power_target")

    @auto_power_target.setter
    def auto_power_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_target", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi band that Radio 3 operates on.
        """
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter(name="band5gType")
    def band5g_type(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
        """
        return pulumi.get(self, "band5g_type")

    @band5g_type.setter
    def band5g_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band5g_type", value)

    @property
    @pulumi.getter(name="bandwidthAdmissionControl")
    def bandwidth_admission_control(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bandwidth_admission_control")

    @bandwidth_admission_control.setter
    def bandwidth_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_admission_control", value)

    @property
    @pulumi.getter(name="bandwidthCapacity")
    def bandwidth_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
        """
        return pulumi.get(self, "bandwidth_capacity")

    @bandwidth_capacity.setter
    def bandwidth_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_capacity", value)

    @property
    @pulumi.getter(name="beaconInterval")
    def beacon_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
        """
        return pulumi.get(self, "beacon_interval")

    @beacon_interval.setter
    def beacon_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "beacon_interval", value)

    @property
    @pulumi.getter(name="bssColor")
    def bss_color(self) -> Optional[pulumi.Input[int]]:
        """
        BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
        """
        return pulumi.get(self, "bss_color")

    @bss_color.setter
    def bss_color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bss_color", value)

    @property
    @pulumi.getter(name="bssColorMode")
    def bss_color_mode(self) -> Optional[pulumi.Input[str]]:
        """
        BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
        """
        return pulumi.get(self, "bss_color_mode")

    @bss_color_mode.setter
    def bss_color_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bss_color_mode", value)

    @property
    @pulumi.getter(name="callAdmissionControl")
    def call_admission_control(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "call_admission_control")

    @call_admission_control.setter
    def call_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "call_admission_control", value)

    @property
    @pulumi.getter(name="callCapacity")
    def call_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
        """
        return pulumi.get(self, "call_capacity")

    @call_capacity.setter
    def call_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "call_capacity", value)

    @property
    @pulumi.getter(name="channelBonding")
    def channel_bonding(self) -> Optional[pulumi.Input[str]]:
        """
        Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
        """
        return pulumi.get(self, "channel_bonding")

    @channel_bonding.setter
    def channel_bonding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_bonding", value)

    @property
    @pulumi.getter(name="channelUtilization")
    def channel_utilization(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "channel_utilization")

    @channel_utilization.setter
    def channel_utilization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_utilization", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio3ChannelArgs']]]]:
        """
        Selected list of wireless radio channels. The structure of `channel` block is documented below.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio3ChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def coexistence(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "coexistence")

    @coexistence.setter
    def coexistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coexistence", value)

    @property
    @pulumi.getter
    def darrp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "darrp")

    @darrp.setter
    def darrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "darrp", value)

    @property
    @pulumi.getter
    def drma(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "drma")

    @drma.setter
    def drma(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma", value)

    @property
    @pulumi.getter(name="drmaSensitivity")
    def drma_sensitivity(self) -> Optional[pulumi.Input[str]]:
        """
        Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
        """
        return pulumi.get(self, "drma_sensitivity")

    @drma_sensitivity.setter
    def drma_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma_sensitivity", value)

    @property
    @pulumi.getter
    def dtim(self) -> Optional[pulumi.Input[int]]:
        """
        Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
        """
        return pulumi.get(self, "dtim")

    @dtim.setter
    def dtim(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dtim", value)

    @property
    @pulumi.getter(name="fragThreshold")
    def frag_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
        """
        return pulumi.get(self, "frag_threshold")

    @frag_threshold.setter
    def frag_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frag_threshold", value)

    @property
    @pulumi.getter(name="frequencyHandoff")
    def frequency_handoff(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "frequency_handoff")

    @frequency_handoff.setter
    def frequency_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frequency_handoff", value)

    @property
    @pulumi.getter(name="iperfProtocol")
    def iperf_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
        """
        return pulumi.get(self, "iperf_protocol")

    @iperf_protocol.setter
    def iperf_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iperf_protocol", value)

    @property
    @pulumi.getter(name="iperfServerPort")
    def iperf_server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Iperf service port number.
        """
        return pulumi.get(self, "iperf_server_port")

    @iperf_server_port.setter
    def iperf_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iperf_server_port", value)

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of stations (STAs) or WiFi clients supported by the radio. Range depends on the hardware.
        """
        return pulumi.get(self, "max_clients")

    @max_clients.setter
    def max_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clients", value)

    @property
    @pulumi.getter(name="maxDistance")
    def max_distance(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
        """
        return pulumi.get(self, "max_distance")

    @max_distance.setter
    def max_distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_distance", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[pulumi.Input[int]]:
        """
        Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        """
        return pulumi.get(self, "power_level")

    @power_level.setter
    def power_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_level", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        """
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[pulumi.Input[int]]:
        """
        Radio EIRP power in dBm (1 - 33, default = 27).
        """
        return pulumi.get(self, "power_value")

    @power_value.setter
    def power_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_value", value)

    @property
    @pulumi.getter(name="powersaveOptimize")
    def powersave_optimize(self) -> Optional[pulumi.Input[str]]:
        """
        Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
        """
        return pulumi.get(self, "powersave_optimize")

    @powersave_optimize.setter
    def powersave_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "powersave_optimize", value)

    @property
    @pulumi.getter(name="protectionMode")
    def protection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
        """
        return pulumi.get(self, "protection_mode")

    @protection_mode.setter
    def protection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_mode", value)

    @property
    @pulumi.getter(name="rtsThreshold")
    def rts_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
        """
        return pulumi.get(self, "rts_threshold")

    @rts_threshold.setter
    def rts_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rts_threshold", value)

    @property
    @pulumi.getter(name="samBssid")
    def sam_bssid(self) -> Optional[pulumi.Input[str]]:
        """
        BSSID for WiFi network.
        """
        return pulumi.get(self, "sam_bssid")

    @sam_bssid.setter
    def sam_bssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_bssid", value)

    @property
    @pulumi.getter(name="samCaptivePortal")
    def sam_captive_portal(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sam_captive_portal")

    @sam_captive_portal.setter
    def sam_captive_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_captive_portal", value)

    @property
    @pulumi.getter(name="samCwpFailureString")
    def sam_cwp_failure_string(self) -> Optional[pulumi.Input[str]]:
        """
        Failure identification on the page after an incorrect login.
        """
        return pulumi.get(self, "sam_cwp_failure_string")

    @sam_cwp_failure_string.setter
    def sam_cwp_failure_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_failure_string", value)

    @property
    @pulumi.getter(name="samCwpMatchString")
    def sam_cwp_match_string(self) -> Optional[pulumi.Input[str]]:
        """
        Identification string from the captive portal login form.
        """
        return pulumi.get(self, "sam_cwp_match_string")

    @sam_cwp_match_string.setter
    def sam_cwp_match_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_match_string", value)

    @property
    @pulumi.getter(name="samCwpPassword")
    def sam_cwp_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for captive portal authentication.
        """
        return pulumi.get(self, "sam_cwp_password")

    @sam_cwp_password.setter
    def sam_cwp_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_password", value)

    @property
    @pulumi.getter(name="samCwpSuccessString")
    def sam_cwp_success_string(self) -> Optional[pulumi.Input[str]]:
        """
        Success identification on the page after a successful login.
        """
        return pulumi.get(self, "sam_cwp_success_string")

    @sam_cwp_success_string.setter
    def sam_cwp_success_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_success_string", value)

    @property
    @pulumi.getter(name="samCwpTestUrl")
    def sam_cwp_test_url(self) -> Optional[pulumi.Input[str]]:
        """
        Website the client is trying to access.
        """
        return pulumi.get(self, "sam_cwp_test_url")

    @sam_cwp_test_url.setter
    def sam_cwp_test_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_test_url", value)

    @property
    @pulumi.getter(name="samCwpUsername")
    def sam_cwp_username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for captive portal authentication.
        """
        return pulumi.get(self, "sam_cwp_username")

    @sam_cwp_username.setter
    def sam_cwp_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_username", value)

    @property
    @pulumi.getter(name="samPassword")
    def sam_password(self) -> Optional[pulumi.Input[str]]:
        """
        Passphrase for WiFi network connection.
        """
        return pulumi.get(self, "sam_password")

    @sam_password.setter
    def sam_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_password", value)

    @property
    @pulumi.getter(name="samReportIntv")
    def sam_report_intv(self) -> Optional[pulumi.Input[int]]:
        """
        SAM report interval (sec), 0 for a one-time report.
        """
        return pulumi.get(self, "sam_report_intv")

    @sam_report_intv.setter
    def sam_report_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sam_report_intv", value)

    @property
    @pulumi.getter(name="samSecurityType")
    def sam_security_type(self) -> Optional[pulumi.Input[str]]:
        """
        Select WiFi network security type (default = "wpa-personal"). Valid values: `open`, `wpa-personal`, `wpa-enterprise`.
        """
        return pulumi.get(self, "sam_security_type")

    @sam_security_type.setter
    def sam_security_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_security_type", value)

    @property
    @pulumi.getter(name="samServerFqdn")
    def sam_server_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        SAM test server domain name.
        """
        return pulumi.get(self, "sam_server_fqdn")

    @sam_server_fqdn.setter
    def sam_server_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_fqdn", value)

    @property
    @pulumi.getter(name="samServerIp")
    def sam_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        SAM test server IP address.
        """
        return pulumi.get(self, "sam_server_ip")

    @sam_server_ip.setter
    def sam_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_ip", value)

    @property
    @pulumi.getter(name="samServerType")
    def sam_server_type(self) -> Optional[pulumi.Input[str]]:
        """
        Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
        """
        return pulumi.get(self, "sam_server_type")

    @sam_server_type.setter
    def sam_server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_type", value)

    @property
    @pulumi.getter(name="samSsid")
    def sam_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        SSID for WiFi network.
        """
        return pulumi.get(self, "sam_ssid")

    @sam_ssid.setter
    def sam_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_ssid", value)

    @property
    @pulumi.getter(name="samTest")
    def sam_test(self) -> Optional[pulumi.Input[str]]:
        """
        Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
        """
        return pulumi.get(self, "sam_test")

    @sam_test.setter
    def sam_test(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_test", value)

    @property
    @pulumi.getter(name="samUsername")
    def sam_username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for WiFi network connection.
        """
        return pulumi.get(self, "sam_username")

    @sam_username.setter
    def sam_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_username", value)

    @property
    @pulumi.getter(name="shortGuardInterval")
    def short_guard_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "short_guard_interval")

    @short_guard_interval.setter
    def short_guard_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "short_guard_interval", value)

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        """
        return pulumi.get(self, "spectrum_analysis")

    @spectrum_analysis.setter
    def spectrum_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrum_analysis", value)

    @property
    @pulumi.getter(name="transmitOptimize")
    def transmit_optimize(self) -> Optional[pulumi.Input[str]]:
        """
        Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
        """
        return pulumi.get(self, "transmit_optimize")

    @transmit_optimize.setter
    def transmit_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transmit_optimize", value)

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        """
        return pulumi.get(self, "vap_all")

    @vap_all.setter
    def vap_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vap_all", value)

    @property
    @pulumi.getter
    def vaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio3VapArgs']]]]:
        """
        Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        """
        return pulumi.get(self, "vaps")

    @vaps.setter
    def vaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio3VapArgs']]]]):
        pulumi.set(self, "vaps", value)

    @property
    @pulumi.getter(name="widsProfile")
    def wids_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
        """
        return pulumi.get(self, "wids_profile")

    @wids_profile.setter
    def wids_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wids_profile", value)

    @property
    @pulumi.getter(name="zeroWaitDfs")
    def zero_wait_dfs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "zero_wait_dfs")

    @zero_wait_dfs.setter
    def zero_wait_dfs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zero_wait_dfs", value)


@pulumi.input_type
class WirelessControllerWtpProfileRadio3ChannelArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] chan: Channel number.
        """
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        """
        Channel number.
        """
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WirelessControllerWtpProfileRadio3VapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual Access Point (VAP) name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Access Point (VAP) name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerWtpProfileRadio4Args:
    def __init__(__self__, *,
                 airtime_fairness: Optional[pulumi.Input[str]] = None,
                 amsdu: Optional[pulumi.Input[str]] = None,
                 ap_handoff: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_addr: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_bufsize: Optional[pulumi.Input[int]] = None,
                 ap_sniffer_chan: Optional[pulumi.Input[int]] = None,
                 ap_sniffer_ctl: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_data: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_beacon: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_other: Optional[pulumi.Input[str]] = None,
                 ap_sniffer_mgmt_probe: Optional[pulumi.Input[str]] = None,
                 arrp_profile: Optional[pulumi.Input[str]] = None,
                 auto_power_high: Optional[pulumi.Input[int]] = None,
                 auto_power_level: Optional[pulumi.Input[str]] = None,
                 auto_power_low: Optional[pulumi.Input[int]] = None,
                 auto_power_target: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 band5g_type: Optional[pulumi.Input[str]] = None,
                 bandwidth_admission_control: Optional[pulumi.Input[str]] = None,
                 bandwidth_capacity: Optional[pulumi.Input[int]] = None,
                 beacon_interval: Optional[pulumi.Input[int]] = None,
                 bss_color: Optional[pulumi.Input[int]] = None,
                 bss_color_mode: Optional[pulumi.Input[str]] = None,
                 call_admission_control: Optional[pulumi.Input[str]] = None,
                 call_capacity: Optional[pulumi.Input[int]] = None,
                 channel_bonding: Optional[pulumi.Input[str]] = None,
                 channel_utilization: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio4ChannelArgs']]]] = None,
                 coexistence: Optional[pulumi.Input[str]] = None,
                 darrp: Optional[pulumi.Input[str]] = None,
                 drma: Optional[pulumi.Input[str]] = None,
                 drma_sensitivity: Optional[pulumi.Input[str]] = None,
                 dtim: Optional[pulumi.Input[int]] = None,
                 frag_threshold: Optional[pulumi.Input[int]] = None,
                 frequency_handoff: Optional[pulumi.Input[str]] = None,
                 iperf_protocol: Optional[pulumi.Input[str]] = None,
                 iperf_server_port: Optional[pulumi.Input[int]] = None,
                 max_clients: Optional[pulumi.Input[int]] = None,
                 max_distance: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 power_level: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None,
                 power_value: Optional[pulumi.Input[int]] = None,
                 powersave_optimize: Optional[pulumi.Input[str]] = None,
                 protection_mode: Optional[pulumi.Input[str]] = None,
                 rts_threshold: Optional[pulumi.Input[int]] = None,
                 sam_bssid: Optional[pulumi.Input[str]] = None,
                 sam_captive_portal: Optional[pulumi.Input[str]] = None,
                 sam_cwp_failure_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_match_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_password: Optional[pulumi.Input[str]] = None,
                 sam_cwp_success_string: Optional[pulumi.Input[str]] = None,
                 sam_cwp_test_url: Optional[pulumi.Input[str]] = None,
                 sam_cwp_username: Optional[pulumi.Input[str]] = None,
                 sam_password: Optional[pulumi.Input[str]] = None,
                 sam_report_intv: Optional[pulumi.Input[int]] = None,
                 sam_security_type: Optional[pulumi.Input[str]] = None,
                 sam_server_fqdn: Optional[pulumi.Input[str]] = None,
                 sam_server_ip: Optional[pulumi.Input[str]] = None,
                 sam_server_type: Optional[pulumi.Input[str]] = None,
                 sam_ssid: Optional[pulumi.Input[str]] = None,
                 sam_test: Optional[pulumi.Input[str]] = None,
                 sam_username: Optional[pulumi.Input[str]] = None,
                 short_guard_interval: Optional[pulumi.Input[str]] = None,
                 spectrum_analysis: Optional[pulumi.Input[str]] = None,
                 transmit_optimize: Optional[pulumi.Input[str]] = None,
                 vap_all: Optional[pulumi.Input[str]] = None,
                 vaps: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio4VapArgs']]]] = None,
                 wids_profile: Optional[pulumi.Input[str]] = None,
                 zero_wait_dfs: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] airtime_fairness: Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] amsdu: Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_handoff: Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_addr: MAC address to monitor.
        :param pulumi.Input[int] ap_sniffer_bufsize: Sniffer buffer size (1 - 32 MB, default = 16).
        :param pulumi.Input[int] ap_sniffer_chan: Channel on which to operate the sniffer (default = 6).
        :param pulumi.Input[str] ap_sniffer_ctl: Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_data: Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_mgmt_beacon: Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_mgmt_other: Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] ap_sniffer_mgmt_probe: Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] arrp_profile: Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
        :param pulumi.Input[int] auto_power_high: The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_level: Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auto_power_low: The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_target: The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        :param pulumi.Input[str] band: WiFi band that Radio 3 operates on.
        :param pulumi.Input[str] band5g_type: WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
        :param pulumi.Input[str] bandwidth_admission_control: Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] bandwidth_capacity: Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
        :param pulumi.Input[int] beacon_interval: Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
        :param pulumi.Input[int] bss_color: BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
        :param pulumi.Input[str] bss_color_mode: BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
        :param pulumi.Input[str] call_admission_control: Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] call_capacity: Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
        :param pulumi.Input[str] channel_bonding: Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
        :param pulumi.Input[str] channel_utilization: Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
        :param pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio4ChannelArgs']]] channels: Selected list of wireless radio channels. The structure of `channel` block is documented below.
        :param pulumi.Input[str] coexistence: Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] darrp: Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] drma: Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] drma_sensitivity: Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
        :param pulumi.Input[int] dtim: Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
        :param pulumi.Input[int] frag_threshold: Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
        :param pulumi.Input[str] frequency_handoff: Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] iperf_protocol: Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
        :param pulumi.Input[int] iperf_server_port: Iperf service port number.
        :param pulumi.Input[int] max_clients: Maximum number of stations (STAs) or WiFi clients supported by the radio. Range depends on the hardware.
        :param pulumi.Input[int] max_distance: Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
        :param pulumi.Input[str] mode: Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
        :param pulumi.Input[int] power_level: Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        :param pulumi.Input[str] power_mode: Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        :param pulumi.Input[int] power_value: Radio EIRP power in dBm (1 - 33, default = 27).
        :param pulumi.Input[str] powersave_optimize: Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
        :param pulumi.Input[str] protection_mode: Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
        :param pulumi.Input[int] rts_threshold: Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
        :param pulumi.Input[str] sam_bssid: BSSID for WiFi network.
        :param pulumi.Input[str] sam_captive_portal: Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
        :param pulumi.Input[str] sam_cwp_failure_string: Failure identification on the page after an incorrect login.
        :param pulumi.Input[str] sam_cwp_match_string: Identification string from the captive portal login form.
        :param pulumi.Input[str] sam_cwp_password: Password for captive portal authentication.
        :param pulumi.Input[str] sam_cwp_success_string: Success identification on the page after a successful login.
        :param pulumi.Input[str] sam_cwp_test_url: Website the client is trying to access.
        :param pulumi.Input[str] sam_cwp_username: Username for captive portal authentication.
        :param pulumi.Input[str] sam_password: Passphrase for WiFi network connection.
        :param pulumi.Input[int] sam_report_intv: SAM report interval (sec), 0 for a one-time report.
        :param pulumi.Input[str] sam_security_type: Select WiFi network security type (default = "wpa-personal"). Valid values: `open`, `wpa-personal`, `wpa-enterprise`.
        :param pulumi.Input[str] sam_server_fqdn: SAM test server domain name.
        :param pulumi.Input[str] sam_server_ip: SAM test server IP address.
        :param pulumi.Input[str] sam_server_type: Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
        :param pulumi.Input[str] sam_ssid: SSID for WiFi network.
        :param pulumi.Input[str] sam_test: Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
        :param pulumi.Input[str] sam_username: Username for WiFi network connection.
        :param pulumi.Input[str] short_guard_interval: Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] spectrum_analysis: Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        :param pulumi.Input[str] transmit_optimize: Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
        :param pulumi.Input[str] vap_all: Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        :param pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio4VapArgs']]] vaps: Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        :param pulumi.Input[str] wids_profile: Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
        :param pulumi.Input[str] zero_wait_dfs: Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
        """
        if airtime_fairness is not None:
            pulumi.set(__self__, "airtime_fairness", airtime_fairness)
        if amsdu is not None:
            pulumi.set(__self__, "amsdu", amsdu)
        if ap_handoff is not None:
            pulumi.set(__self__, "ap_handoff", ap_handoff)
        if ap_sniffer_addr is not None:
            pulumi.set(__self__, "ap_sniffer_addr", ap_sniffer_addr)
        if ap_sniffer_bufsize is not None:
            pulumi.set(__self__, "ap_sniffer_bufsize", ap_sniffer_bufsize)
        if ap_sniffer_chan is not None:
            pulumi.set(__self__, "ap_sniffer_chan", ap_sniffer_chan)
        if ap_sniffer_ctl is not None:
            pulumi.set(__self__, "ap_sniffer_ctl", ap_sniffer_ctl)
        if ap_sniffer_data is not None:
            pulumi.set(__self__, "ap_sniffer_data", ap_sniffer_data)
        if ap_sniffer_mgmt_beacon is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_beacon", ap_sniffer_mgmt_beacon)
        if ap_sniffer_mgmt_other is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_other", ap_sniffer_mgmt_other)
        if ap_sniffer_mgmt_probe is not None:
            pulumi.set(__self__, "ap_sniffer_mgmt_probe", ap_sniffer_mgmt_probe)
        if arrp_profile is not None:
            pulumi.set(__self__, "arrp_profile", arrp_profile)
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if band5g_type is not None:
            pulumi.set(__self__, "band5g_type", band5g_type)
        if bandwidth_admission_control is not None:
            pulumi.set(__self__, "bandwidth_admission_control", bandwidth_admission_control)
        if bandwidth_capacity is not None:
            pulumi.set(__self__, "bandwidth_capacity", bandwidth_capacity)
        if beacon_interval is not None:
            pulumi.set(__self__, "beacon_interval", beacon_interval)
        if bss_color is not None:
            pulumi.set(__self__, "bss_color", bss_color)
        if bss_color_mode is not None:
            pulumi.set(__self__, "bss_color_mode", bss_color_mode)
        if call_admission_control is not None:
            pulumi.set(__self__, "call_admission_control", call_admission_control)
        if call_capacity is not None:
            pulumi.set(__self__, "call_capacity", call_capacity)
        if channel_bonding is not None:
            pulumi.set(__self__, "channel_bonding", channel_bonding)
        if channel_utilization is not None:
            pulumi.set(__self__, "channel_utilization", channel_utilization)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if coexistence is not None:
            pulumi.set(__self__, "coexistence", coexistence)
        if darrp is not None:
            pulumi.set(__self__, "darrp", darrp)
        if drma is not None:
            pulumi.set(__self__, "drma", drma)
        if drma_sensitivity is not None:
            pulumi.set(__self__, "drma_sensitivity", drma_sensitivity)
        if dtim is not None:
            pulumi.set(__self__, "dtim", dtim)
        if frag_threshold is not None:
            pulumi.set(__self__, "frag_threshold", frag_threshold)
        if frequency_handoff is not None:
            pulumi.set(__self__, "frequency_handoff", frequency_handoff)
        if iperf_protocol is not None:
            pulumi.set(__self__, "iperf_protocol", iperf_protocol)
        if iperf_server_port is not None:
            pulumi.set(__self__, "iperf_server_port", iperf_server_port)
        if max_clients is not None:
            pulumi.set(__self__, "max_clients", max_clients)
        if max_distance is not None:
            pulumi.set(__self__, "max_distance", max_distance)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if powersave_optimize is not None:
            pulumi.set(__self__, "powersave_optimize", powersave_optimize)
        if protection_mode is not None:
            pulumi.set(__self__, "protection_mode", protection_mode)
        if rts_threshold is not None:
            pulumi.set(__self__, "rts_threshold", rts_threshold)
        if sam_bssid is not None:
            pulumi.set(__self__, "sam_bssid", sam_bssid)
        if sam_captive_portal is not None:
            pulumi.set(__self__, "sam_captive_portal", sam_captive_portal)
        if sam_cwp_failure_string is not None:
            pulumi.set(__self__, "sam_cwp_failure_string", sam_cwp_failure_string)
        if sam_cwp_match_string is not None:
            pulumi.set(__self__, "sam_cwp_match_string", sam_cwp_match_string)
        if sam_cwp_password is not None:
            pulumi.set(__self__, "sam_cwp_password", sam_cwp_password)
        if sam_cwp_success_string is not None:
            pulumi.set(__self__, "sam_cwp_success_string", sam_cwp_success_string)
        if sam_cwp_test_url is not None:
            pulumi.set(__self__, "sam_cwp_test_url", sam_cwp_test_url)
        if sam_cwp_username is not None:
            pulumi.set(__self__, "sam_cwp_username", sam_cwp_username)
        if sam_password is not None:
            pulumi.set(__self__, "sam_password", sam_password)
        if sam_report_intv is not None:
            pulumi.set(__self__, "sam_report_intv", sam_report_intv)
        if sam_security_type is not None:
            pulumi.set(__self__, "sam_security_type", sam_security_type)
        if sam_server_fqdn is not None:
            pulumi.set(__self__, "sam_server_fqdn", sam_server_fqdn)
        if sam_server_ip is not None:
            pulumi.set(__self__, "sam_server_ip", sam_server_ip)
        if sam_server_type is not None:
            pulumi.set(__self__, "sam_server_type", sam_server_type)
        if sam_ssid is not None:
            pulumi.set(__self__, "sam_ssid", sam_ssid)
        if sam_test is not None:
            pulumi.set(__self__, "sam_test", sam_test)
        if sam_username is not None:
            pulumi.set(__self__, "sam_username", sam_username)
        if short_guard_interval is not None:
            pulumi.set(__self__, "short_guard_interval", short_guard_interval)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if transmit_optimize is not None:
            pulumi.set(__self__, "transmit_optimize", transmit_optimize)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)
        if wids_profile is not None:
            pulumi.set(__self__, "wids_profile", wids_profile)
        if zero_wait_dfs is not None:
            pulumi.set(__self__, "zero_wait_dfs", zero_wait_dfs)

    @property
    @pulumi.getter(name="airtimeFairness")
    def airtime_fairness(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable airtime fairness (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "airtime_fairness")

    @airtime_fairness.setter
    def airtime_fairness(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "airtime_fairness", value)

    @property
    @pulumi.getter
    def amsdu(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable 802.11n AMSDU support. AMSDU can improve performance if supported by your WiFi clients (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "amsdu")

    @amsdu.setter
    def amsdu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amsdu", value)

    @property
    @pulumi.getter(name="apHandoff")
    def ap_handoff(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable AP handoff of clients to other APs (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_handoff")

    @ap_handoff.setter
    def ap_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_handoff", value)

    @property
    @pulumi.getter(name="apSnifferAddr")
    def ap_sniffer_addr(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address to monitor.
        """
        return pulumi.get(self, "ap_sniffer_addr")

    @ap_sniffer_addr.setter
    def ap_sniffer_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_addr", value)

    @property
    @pulumi.getter(name="apSnifferBufsize")
    def ap_sniffer_bufsize(self) -> Optional[pulumi.Input[int]]:
        """
        Sniffer buffer size (1 - 32 MB, default = 16).
        """
        return pulumi.get(self, "ap_sniffer_bufsize")

    @ap_sniffer_bufsize.setter
    def ap_sniffer_bufsize(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_sniffer_bufsize", value)

    @property
    @pulumi.getter(name="apSnifferChan")
    def ap_sniffer_chan(self) -> Optional[pulumi.Input[int]]:
        """
        Channel on which to operate the sniffer (default = 6).
        """
        return pulumi.get(self, "ap_sniffer_chan")

    @ap_sniffer_chan.setter
    def ap_sniffer_chan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ap_sniffer_chan", value)

    @property
    @pulumi.getter(name="apSnifferCtl")
    def ap_sniffer_ctl(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi control frame (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_ctl")

    @ap_sniffer_ctl.setter
    def ap_sniffer_ctl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_ctl", value)

    @property
    @pulumi.getter(name="apSnifferData")
    def ap_sniffer_data(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi data frame (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_data")

    @ap_sniffer_data.setter
    def ap_sniffer_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_data", value)

    @property
    @pulumi.getter(name="apSnifferMgmtBeacon")
    def ap_sniffer_mgmt_beacon(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi management Beacon frames (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_mgmt_beacon")

    @ap_sniffer_mgmt_beacon.setter
    def ap_sniffer_mgmt_beacon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_beacon", value)

    @property
    @pulumi.getter(name="apSnifferMgmtOther")
    def ap_sniffer_mgmt_other(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi management other frames  (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_mgmt_other")

    @ap_sniffer_mgmt_other.setter
    def ap_sniffer_mgmt_other(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_other", value)

    @property
    @pulumi.getter(name="apSnifferMgmtProbe")
    def ap_sniffer_mgmt_probe(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable sniffer on WiFi management probe frames (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "ap_sniffer_mgmt_probe")

    @ap_sniffer_mgmt_probe.setter
    def ap_sniffer_mgmt_probe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ap_sniffer_mgmt_probe", value)

    @property
    @pulumi.getter(name="arrpProfile")
    def arrp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Distributed Automatic Radio Resource Provisioning (DARRP) profile name to assign to the radio.
        """
        return pulumi.get(self, "arrp_profile")

    @arrp_profile.setter
    def arrp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arrp_profile", value)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[pulumi.Input[int]]:
        """
        The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_high")

    @auto_power_high.setter
    def auto_power_high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_high", value)

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_power_level")

    @auto_power_level.setter
    def auto_power_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_level", value)

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[pulumi.Input[int]]:
        """
        The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_low")

    @auto_power_low.setter
    def auto_power_low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_low", value)

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[pulumi.Input[str]]:
        """
        The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        """
        return pulumi.get(self, "auto_power_target")

    @auto_power_target.setter
    def auto_power_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_target", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi band that Radio 3 operates on.
        """
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter(name="band5gType")
    def band5g_type(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi 5G band type. Valid values: `5g-full`, `5g-high`, `5g-low`.
        """
        return pulumi.get(self, "band5g_type")

    @band5g_type.setter
    def band5g_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band5g_type", value)

    @property
    @pulumi.getter(name="bandwidthAdmissionControl")
    def bandwidth_admission_control(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WiFi multimedia (WMM) bandwidth admission control to optimize WiFi bandwidth use. A request to join the wireless network is only allowed if the access point has enough bandwidth to support it. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "bandwidth_admission_control")

    @bandwidth_admission_control.setter
    def bandwidth_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_admission_control", value)

    @property
    @pulumi.getter(name="bandwidthCapacity")
    def bandwidth_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum bandwidth capacity allowed (1 - 600000 Kbps, default = 2000).
        """
        return pulumi.get(self, "bandwidth_capacity")

    @bandwidth_capacity.setter
    def bandwidth_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth_capacity", value)

    @property
    @pulumi.getter(name="beaconInterval")
    def beacon_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Beacon interval. The time between beacon frames in msec (the actual range of beacon interval depends on the AP platform type, default = 100).
        """
        return pulumi.get(self, "beacon_interval")

    @beacon_interval.setter
    def beacon_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "beacon_interval", value)

    @property
    @pulumi.getter(name="bssColor")
    def bss_color(self) -> Optional[pulumi.Input[int]]:
        """
        BSS color value for this 11ax radio (0 - 63, 0 means disable. default = 0).
        """
        return pulumi.get(self, "bss_color")

    @bss_color.setter
    def bss_color(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bss_color", value)

    @property
    @pulumi.getter(name="bssColorMode")
    def bss_color_mode(self) -> Optional[pulumi.Input[str]]:
        """
        BSS color mode for this 11ax radio (default = auto). Valid values: `auto`, `static`.
        """
        return pulumi.get(self, "bss_color_mode")

    @bss_color_mode.setter
    def bss_color_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bss_color_mode", value)

    @property
    @pulumi.getter(name="callAdmissionControl")
    def call_admission_control(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable WiFi multimedia (WMM) call admission control to optimize WiFi bandwidth use for VoIP calls. New VoIP calls are only accepted if there is enough bandwidth available to support them. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "call_admission_control")

    @call_admission_control.setter
    def call_admission_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "call_admission_control", value)

    @property
    @pulumi.getter(name="callCapacity")
    def call_capacity(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of Voice over WLAN (VoWLAN) phones supported by the radio (0 - 60, default = 10).
        """
        return pulumi.get(self, "call_capacity")

    @call_capacity.setter
    def call_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "call_capacity", value)

    @property
    @pulumi.getter(name="channelBonding")
    def channel_bonding(self) -> Optional[pulumi.Input[str]]:
        """
        Channel bandwidth: 160,80, 40, or 20MHz. Channels may use both 20 and 40 by enabling coexistence. Valid values: `160MHz`, `80MHz`, `40MHz`, `20MHz`.
        """
        return pulumi.get(self, "channel_bonding")

    @channel_bonding.setter
    def channel_bonding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_bonding", value)

    @property
    @pulumi.getter(name="channelUtilization")
    def channel_utilization(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable measuring channel utilization. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "channel_utilization")

    @channel_utilization.setter
    def channel_utilization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_utilization", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio4ChannelArgs']]]]:
        """
        Selected list of wireless radio channels. The structure of `channel` block is documented below.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio4ChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def coexistence(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable allowing both HT20 and HT40 on the same radio (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "coexistence")

    @coexistence.setter
    def coexistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coexistence", value)

    @property
    @pulumi.getter
    def darrp(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Distributed Automatic Radio Resource Provisioning (DARRP) to make sure the radio is always using the most optimal channel (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "darrp")

    @darrp.setter
    def darrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "darrp", value)

    @property
    @pulumi.getter
    def drma(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable dynamic radio mode assignment (DRMA) (default = disable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "drma")

    @drma.setter
    def drma(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma", value)

    @property
    @pulumi.getter(name="drmaSensitivity")
    def drma_sensitivity(self) -> Optional[pulumi.Input[str]]:
        """
        Network Coverage Factor (NCF) percentage required to consider a radio as redundant (default = low). Valid values: `low`, `medium`, `high`.
        """
        return pulumi.get(self, "drma_sensitivity")

    @drma_sensitivity.setter
    def drma_sensitivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma_sensitivity", value)

    @property
    @pulumi.getter
    def dtim(self) -> Optional[pulumi.Input[int]]:
        """
        Delivery Traffic Indication Map (DTIM) period (1 - 255, default = 1). Set higher to save battery life of WiFi client in power-save mode.
        """
        return pulumi.get(self, "dtim")

    @dtim.setter
    def dtim(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dtim", value)

    @property
    @pulumi.getter(name="fragThreshold")
    def frag_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum packet size that can be sent without fragmentation (800 - 2346 bytes, default = 2346).
        """
        return pulumi.get(self, "frag_threshold")

    @frag_threshold.setter
    def frag_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frag_threshold", value)

    @property
    @pulumi.getter(name="frequencyHandoff")
    def frequency_handoff(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable frequency handoff of clients to other channels (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "frequency_handoff")

    @frequency_handoff.setter
    def frequency_handoff(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frequency_handoff", value)

    @property
    @pulumi.getter(name="iperfProtocol")
    def iperf_protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Iperf test protocol (default = "UDP"). Valid values: `udp`, `tcp`.
        """
        return pulumi.get(self, "iperf_protocol")

    @iperf_protocol.setter
    def iperf_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iperf_protocol", value)

    @property
    @pulumi.getter(name="iperfServerPort")
    def iperf_server_port(self) -> Optional[pulumi.Input[int]]:
        """
        Iperf service port number.
        """
        return pulumi.get(self, "iperf_server_port")

    @iperf_server_port.setter
    def iperf_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iperf_server_port", value)

    @property
    @pulumi.getter(name="maxClients")
    def max_clients(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of stations (STAs) or WiFi clients supported by the radio. Range depends on the hardware.
        """
        return pulumi.get(self, "max_clients")

    @max_clients.setter
    def max_clients(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clients", value)

    @property
    @pulumi.getter(name="maxDistance")
    def max_distance(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum expected distance between the AP and clients (0 - 54000 m, default = 0).
        """
        return pulumi.get(self, "max_distance")

    @max_distance.setter
    def max_distance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_distance", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Mode of radio 3. Radio 3 can be disabled, configured as an access point, a rogue AP monitor, or a sniffer.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[pulumi.Input[int]]:
        """
        Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        """
        return pulumi.get(self, "power_level")

    @power_level.setter
    def power_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_level", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        """
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[pulumi.Input[int]]:
        """
        Radio EIRP power in dBm (1 - 33, default = 27).
        """
        return pulumi.get(self, "power_value")

    @power_value.setter
    def power_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_value", value)

    @property
    @pulumi.getter(name="powersaveOptimize")
    def powersave_optimize(self) -> Optional[pulumi.Input[str]]:
        """
        Enable client power-saving features such as TIM, AC VO, and OBSS etc. Valid values: `tim`, `ac-vo`, `no-obss-scan`, `no-11b-rate`, `client-rate-follow`.
        """
        return pulumi.get(self, "powersave_optimize")

    @powersave_optimize.setter
    def powersave_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "powersave_optimize", value)

    @property
    @pulumi.getter(name="protectionMode")
    def protection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable 802.11g protection modes to support backwards compatibility with older clients (rtscts, ctsonly, disable). Valid values: `rtscts`, `ctsonly`, `disable`.
        """
        return pulumi.get(self, "protection_mode")

    @protection_mode.setter
    def protection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protection_mode", value)

    @property
    @pulumi.getter(name="rtsThreshold")
    def rts_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum packet size for RTS transmissions, specifying the maximum size of a data packet before RTS/CTS (256 - 2346 bytes, default = 2346).
        """
        return pulumi.get(self, "rts_threshold")

    @rts_threshold.setter
    def rts_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rts_threshold", value)

    @property
    @pulumi.getter(name="samBssid")
    def sam_bssid(self) -> Optional[pulumi.Input[str]]:
        """
        BSSID for WiFi network.
        """
        return pulumi.get(self, "sam_bssid")

    @sam_bssid.setter
    def sam_bssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_bssid", value)

    @property
    @pulumi.getter(name="samCaptivePortal")
    def sam_captive_portal(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable Captive Portal Authentication (default = disable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "sam_captive_portal")

    @sam_captive_portal.setter
    def sam_captive_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_captive_portal", value)

    @property
    @pulumi.getter(name="samCwpFailureString")
    def sam_cwp_failure_string(self) -> Optional[pulumi.Input[str]]:
        """
        Failure identification on the page after an incorrect login.
        """
        return pulumi.get(self, "sam_cwp_failure_string")

    @sam_cwp_failure_string.setter
    def sam_cwp_failure_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_failure_string", value)

    @property
    @pulumi.getter(name="samCwpMatchString")
    def sam_cwp_match_string(self) -> Optional[pulumi.Input[str]]:
        """
        Identification string from the captive portal login form.
        """
        return pulumi.get(self, "sam_cwp_match_string")

    @sam_cwp_match_string.setter
    def sam_cwp_match_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_match_string", value)

    @property
    @pulumi.getter(name="samCwpPassword")
    def sam_cwp_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for captive portal authentication.
        """
        return pulumi.get(self, "sam_cwp_password")

    @sam_cwp_password.setter
    def sam_cwp_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_password", value)

    @property
    @pulumi.getter(name="samCwpSuccessString")
    def sam_cwp_success_string(self) -> Optional[pulumi.Input[str]]:
        """
        Success identification on the page after a successful login.
        """
        return pulumi.get(self, "sam_cwp_success_string")

    @sam_cwp_success_string.setter
    def sam_cwp_success_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_success_string", value)

    @property
    @pulumi.getter(name="samCwpTestUrl")
    def sam_cwp_test_url(self) -> Optional[pulumi.Input[str]]:
        """
        Website the client is trying to access.
        """
        return pulumi.get(self, "sam_cwp_test_url")

    @sam_cwp_test_url.setter
    def sam_cwp_test_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_test_url", value)

    @property
    @pulumi.getter(name="samCwpUsername")
    def sam_cwp_username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for captive portal authentication.
        """
        return pulumi.get(self, "sam_cwp_username")

    @sam_cwp_username.setter
    def sam_cwp_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_cwp_username", value)

    @property
    @pulumi.getter(name="samPassword")
    def sam_password(self) -> Optional[pulumi.Input[str]]:
        """
        Passphrase for WiFi network connection.
        """
        return pulumi.get(self, "sam_password")

    @sam_password.setter
    def sam_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_password", value)

    @property
    @pulumi.getter(name="samReportIntv")
    def sam_report_intv(self) -> Optional[pulumi.Input[int]]:
        """
        SAM report interval (sec), 0 for a one-time report.
        """
        return pulumi.get(self, "sam_report_intv")

    @sam_report_intv.setter
    def sam_report_intv(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sam_report_intv", value)

    @property
    @pulumi.getter(name="samSecurityType")
    def sam_security_type(self) -> Optional[pulumi.Input[str]]:
        """
        Select WiFi network security type (default = "wpa-personal"). Valid values: `open`, `wpa-personal`, `wpa-enterprise`.
        """
        return pulumi.get(self, "sam_security_type")

    @sam_security_type.setter
    def sam_security_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_security_type", value)

    @property
    @pulumi.getter(name="samServerFqdn")
    def sam_server_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        SAM test server domain name.
        """
        return pulumi.get(self, "sam_server_fqdn")

    @sam_server_fqdn.setter
    def sam_server_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_fqdn", value)

    @property
    @pulumi.getter(name="samServerIp")
    def sam_server_ip(self) -> Optional[pulumi.Input[str]]:
        """
        SAM test server IP address.
        """
        return pulumi.get(self, "sam_server_ip")

    @sam_server_ip.setter
    def sam_server_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_ip", value)

    @property
    @pulumi.getter(name="samServerType")
    def sam_server_type(self) -> Optional[pulumi.Input[str]]:
        """
        Select SAM server type (default = "IP"). Valid values: `ip`, `fqdn`.
        """
        return pulumi.get(self, "sam_server_type")

    @sam_server_type.setter
    def sam_server_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_server_type", value)

    @property
    @pulumi.getter(name="samSsid")
    def sam_ssid(self) -> Optional[pulumi.Input[str]]:
        """
        SSID for WiFi network.
        """
        return pulumi.get(self, "sam_ssid")

    @sam_ssid.setter
    def sam_ssid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_ssid", value)

    @property
    @pulumi.getter(name="samTest")
    def sam_test(self) -> Optional[pulumi.Input[str]]:
        """
        Select SAM test type (default = "PING"). Valid values: `ping`, `iperf`.
        """
        return pulumi.get(self, "sam_test")

    @sam_test.setter
    def sam_test(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_test", value)

    @property
    @pulumi.getter(name="samUsername")
    def sam_username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for WiFi network connection.
        """
        return pulumi.get(self, "sam_username")

    @sam_username.setter
    def sam_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sam_username", value)

    @property
    @pulumi.getter(name="shortGuardInterval")
    def short_guard_interval(self) -> Optional[pulumi.Input[str]]:
        """
        Use either the short guard interval (Short GI) of 400 ns or the long guard interval (Long GI) of 800 ns. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "short_guard_interval")

    @short_guard_interval.setter
    def short_guard_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "short_guard_interval", value)

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        """
        return pulumi.get(self, "spectrum_analysis")

    @spectrum_analysis.setter
    def spectrum_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrum_analysis", value)

    @property
    @pulumi.getter(name="transmitOptimize")
    def transmit_optimize(self) -> Optional[pulumi.Input[str]]:
        """
        Packet transmission optimization options including power saving, aggregation limiting, retry limiting, etc. All are enabled by default. Valid values: `disable`, `power-save`, `aggr-limit`, `retry-limit`, `send-bar`.
        """
        return pulumi.get(self, "transmit_optimize")

    @transmit_optimize.setter
    def transmit_optimize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transmit_optimize", value)

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        """
        return pulumi.get(self, "vap_all")

    @vap_all.setter
    def vap_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vap_all", value)

    @property
    @pulumi.getter
    def vaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio4VapArgs']]]]:
        """
        Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        """
        return pulumi.get(self, "vaps")

    @vaps.setter
    def vaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpProfileRadio4VapArgs']]]]):
        pulumi.set(self, "vaps", value)

    @property
    @pulumi.getter(name="widsProfile")
    def wids_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Wireless Intrusion Detection System (WIDS) profile name to assign to the radio.
        """
        return pulumi.get(self, "wids_profile")

    @wids_profile.setter
    def wids_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wids_profile", value)

    @property
    @pulumi.getter(name="zeroWaitDfs")
    def zero_wait_dfs(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable zero wait DFS on radio (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "zero_wait_dfs")

    @zero_wait_dfs.setter
    def zero_wait_dfs(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zero_wait_dfs", value)


@pulumi.input_type
class WirelessControllerWtpProfileRadio4ChannelArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] chan: Channel number.
        """
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        """
        Channel number.
        """
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WirelessControllerWtpProfileRadio4VapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual Access Point (VAP) name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Access Point (VAP) name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerWtpProfileSplitTunnelingAclArgs:
    def __init__(__self__, *,
                 dest_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] dest_ip: Destination IP and mask for the split-tunneling subnet.
        :param pulumi.Input[int] id: ID.
        """
        if dest_ip is not None:
            pulumi.set(__self__, "dest_ip", dest_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="destIp")
    def dest_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Destination IP and mask for the split-tunneling subnet.
        """
        return pulumi.get(self, "dest_ip")

    @dest_ip.setter
    def dest_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dest_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class WirelessControllerWtpRadio1Args:
    def __init__(__self__, *,
                 auto_power_high: Optional[pulumi.Input[int]] = None,
                 auto_power_level: Optional[pulumi.Input[str]] = None,
                 auto_power_low: Optional[pulumi.Input[int]] = None,
                 auto_power_target: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio1ChannelArgs']]]] = None,
                 drma_manual_mode: Optional[pulumi.Input[str]] = None,
                 override_analysis: Optional[pulumi.Input[str]] = None,
                 override_band: Optional[pulumi.Input[str]] = None,
                 override_channel: Optional[pulumi.Input[str]] = None,
                 override_txpower: Optional[pulumi.Input[str]] = None,
                 override_vaps: Optional[pulumi.Input[str]] = None,
                 power_level: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None,
                 power_value: Optional[pulumi.Input[int]] = None,
                 radio_id: Optional[pulumi.Input[int]] = None,
                 spectrum_analysis: Optional[pulumi.Input[str]] = None,
                 vap_all: Optional[pulumi.Input[str]] = None,
                 vaps: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio1VapArgs']]]] = None):
        """
        :param pulumi.Input[int] auto_power_high: The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_level: Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auto_power_low: The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_target: The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        :param pulumi.Input[str] band: WiFi band that Radio 4 operates on.
        :param pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio1ChannelArgs']]] channels: Selected list of wireless radio channels. The structure of `channel` block is documented below.
        :param pulumi.Input[str] drma_manual_mode: Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
        :param pulumi.Input[str] override_analysis: Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_band: Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_channel: Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_txpower: Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_vaps: Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] power_level: Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        :param pulumi.Input[str] power_mode: Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        :param pulumi.Input[int] power_value: Radio EIRP power in dBm (1 - 33, default = 27).
        :param pulumi.Input[int] radio_id: radio-id
        :param pulumi.Input[str] spectrum_analysis: Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        :param pulumi.Input[str] vap_all: Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        :param pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio1VapArgs']]] vaps: Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        """
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if drma_manual_mode is not None:
            pulumi.set(__self__, "drma_manual_mode", drma_manual_mode)
        if override_analysis is not None:
            pulumi.set(__self__, "override_analysis", override_analysis)
        if override_band is not None:
            pulumi.set(__self__, "override_band", override_band)
        if override_channel is not None:
            pulumi.set(__self__, "override_channel", override_channel)
        if override_txpower is not None:
            pulumi.set(__self__, "override_txpower", override_txpower)
        if override_vaps is not None:
            pulumi.set(__self__, "override_vaps", override_vaps)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if radio_id is not None:
            pulumi.set(__self__, "radio_id", radio_id)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[pulumi.Input[int]]:
        """
        The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_high")

    @auto_power_high.setter
    def auto_power_high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_high", value)

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_power_level")

    @auto_power_level.setter
    def auto_power_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_level", value)

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[pulumi.Input[int]]:
        """
        The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_low")

    @auto_power_low.setter
    def auto_power_low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_low", value)

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[pulumi.Input[str]]:
        """
        The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        """
        return pulumi.get(self, "auto_power_target")

    @auto_power_target.setter
    def auto_power_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_target", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi band that Radio 4 operates on.
        """
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio1ChannelArgs']]]]:
        """
        Selected list of wireless radio channels. The structure of `channel` block is documented below.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio1ChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter(name="drmaManualMode")
    def drma_manual_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
        """
        return pulumi.get(self, "drma_manual_mode")

    @drma_manual_mode.setter
    def drma_manual_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma_manual_mode", value)

    @property
    @pulumi.getter(name="overrideAnalysis")
    def override_analysis(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_analysis")

    @override_analysis.setter
    def override_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_analysis", value)

    @property
    @pulumi.getter(name="overrideBand")
    def override_band(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_band")

    @override_band.setter
    def override_band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_band", value)

    @property
    @pulumi.getter(name="overrideChannel")
    def override_channel(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_channel")

    @override_channel.setter
    def override_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_channel", value)

    @property
    @pulumi.getter(name="overrideTxpower")
    def override_txpower(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_txpower")

    @override_txpower.setter
    def override_txpower(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_txpower", value)

    @property
    @pulumi.getter(name="overrideVaps")
    def override_vaps(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_vaps")

    @override_vaps.setter
    def override_vaps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_vaps", value)

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[pulumi.Input[int]]:
        """
        Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        """
        return pulumi.get(self, "power_level")

    @power_level.setter
    def power_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_level", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        """
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[pulumi.Input[int]]:
        """
        Radio EIRP power in dBm (1 - 33, default = 27).
        """
        return pulumi.get(self, "power_value")

    @power_value.setter
    def power_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_value", value)

    @property
    @pulumi.getter(name="radioId")
    def radio_id(self) -> Optional[pulumi.Input[int]]:
        """
        radio-id
        """
        return pulumi.get(self, "radio_id")

    @radio_id.setter
    def radio_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radio_id", value)

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        """
        return pulumi.get(self, "spectrum_analysis")

    @spectrum_analysis.setter
    def spectrum_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrum_analysis", value)

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        """
        return pulumi.get(self, "vap_all")

    @vap_all.setter
    def vap_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vap_all", value)

    @property
    @pulumi.getter
    def vaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio1VapArgs']]]]:
        """
        Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        """
        return pulumi.get(self, "vaps")

    @vaps.setter
    def vaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio1VapArgs']]]]):
        pulumi.set(self, "vaps", value)


@pulumi.input_type
class WirelessControllerWtpRadio1ChannelArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] chan: Channel number.
        """
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        """
        Channel number.
        """
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WirelessControllerWtpRadio1VapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual Access Point (VAP) name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Access Point (VAP) name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerWtpRadio2Args:
    def __init__(__self__, *,
                 auto_power_high: Optional[pulumi.Input[int]] = None,
                 auto_power_level: Optional[pulumi.Input[str]] = None,
                 auto_power_low: Optional[pulumi.Input[int]] = None,
                 auto_power_target: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio2ChannelArgs']]]] = None,
                 drma_manual_mode: Optional[pulumi.Input[str]] = None,
                 override_analysis: Optional[pulumi.Input[str]] = None,
                 override_band: Optional[pulumi.Input[str]] = None,
                 override_channel: Optional[pulumi.Input[str]] = None,
                 override_txpower: Optional[pulumi.Input[str]] = None,
                 override_vaps: Optional[pulumi.Input[str]] = None,
                 power_level: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None,
                 power_value: Optional[pulumi.Input[int]] = None,
                 radio_id: Optional[pulumi.Input[int]] = None,
                 spectrum_analysis: Optional[pulumi.Input[str]] = None,
                 vap_all: Optional[pulumi.Input[str]] = None,
                 vaps: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio2VapArgs']]]] = None):
        """
        :param pulumi.Input[int] auto_power_high: The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_level: Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auto_power_low: The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_target: The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        :param pulumi.Input[str] band: WiFi band that Radio 4 operates on.
        :param pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio2ChannelArgs']]] channels: Selected list of wireless radio channels. The structure of `channel` block is documented below.
        :param pulumi.Input[str] drma_manual_mode: Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
        :param pulumi.Input[str] override_analysis: Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_band: Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_channel: Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_txpower: Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_vaps: Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] power_level: Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        :param pulumi.Input[str] power_mode: Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        :param pulumi.Input[int] power_value: Radio EIRP power in dBm (1 - 33, default = 27).
        :param pulumi.Input[int] radio_id: radio-id
        :param pulumi.Input[str] spectrum_analysis: Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        :param pulumi.Input[str] vap_all: Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        :param pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio2VapArgs']]] vaps: Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        """
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if drma_manual_mode is not None:
            pulumi.set(__self__, "drma_manual_mode", drma_manual_mode)
        if override_analysis is not None:
            pulumi.set(__self__, "override_analysis", override_analysis)
        if override_band is not None:
            pulumi.set(__self__, "override_band", override_band)
        if override_channel is not None:
            pulumi.set(__self__, "override_channel", override_channel)
        if override_txpower is not None:
            pulumi.set(__self__, "override_txpower", override_txpower)
        if override_vaps is not None:
            pulumi.set(__self__, "override_vaps", override_vaps)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if radio_id is not None:
            pulumi.set(__self__, "radio_id", radio_id)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[pulumi.Input[int]]:
        """
        The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_high")

    @auto_power_high.setter
    def auto_power_high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_high", value)

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_power_level")

    @auto_power_level.setter
    def auto_power_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_level", value)

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[pulumi.Input[int]]:
        """
        The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_low")

    @auto_power_low.setter
    def auto_power_low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_low", value)

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[pulumi.Input[str]]:
        """
        The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        """
        return pulumi.get(self, "auto_power_target")

    @auto_power_target.setter
    def auto_power_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_target", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi band that Radio 4 operates on.
        """
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio2ChannelArgs']]]]:
        """
        Selected list of wireless radio channels. The structure of `channel` block is documented below.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio2ChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter(name="drmaManualMode")
    def drma_manual_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
        """
        return pulumi.get(self, "drma_manual_mode")

    @drma_manual_mode.setter
    def drma_manual_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma_manual_mode", value)

    @property
    @pulumi.getter(name="overrideAnalysis")
    def override_analysis(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_analysis")

    @override_analysis.setter
    def override_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_analysis", value)

    @property
    @pulumi.getter(name="overrideBand")
    def override_band(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_band")

    @override_band.setter
    def override_band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_band", value)

    @property
    @pulumi.getter(name="overrideChannel")
    def override_channel(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_channel")

    @override_channel.setter
    def override_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_channel", value)

    @property
    @pulumi.getter(name="overrideTxpower")
    def override_txpower(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_txpower")

    @override_txpower.setter
    def override_txpower(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_txpower", value)

    @property
    @pulumi.getter(name="overrideVaps")
    def override_vaps(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_vaps")

    @override_vaps.setter
    def override_vaps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_vaps", value)

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[pulumi.Input[int]]:
        """
        Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        """
        return pulumi.get(self, "power_level")

    @power_level.setter
    def power_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_level", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        """
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[pulumi.Input[int]]:
        """
        Radio EIRP power in dBm (1 - 33, default = 27).
        """
        return pulumi.get(self, "power_value")

    @power_value.setter
    def power_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_value", value)

    @property
    @pulumi.getter(name="radioId")
    def radio_id(self) -> Optional[pulumi.Input[int]]:
        """
        radio-id
        """
        return pulumi.get(self, "radio_id")

    @radio_id.setter
    def radio_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "radio_id", value)

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        """
        return pulumi.get(self, "spectrum_analysis")

    @spectrum_analysis.setter
    def spectrum_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrum_analysis", value)

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        """
        return pulumi.get(self, "vap_all")

    @vap_all.setter
    def vap_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vap_all", value)

    @property
    @pulumi.getter
    def vaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio2VapArgs']]]]:
        """
        Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        """
        return pulumi.get(self, "vaps")

    @vaps.setter
    def vaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio2VapArgs']]]]):
        pulumi.set(self, "vaps", value)


@pulumi.input_type
class WirelessControllerWtpRadio2ChannelArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] chan: Channel number.
        """
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        """
        Channel number.
        """
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WirelessControllerWtpRadio2VapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual Access Point (VAP) name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Access Point (VAP) name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerWtpRadio3Args:
    def __init__(__self__, *,
                 auto_power_high: Optional[pulumi.Input[int]] = None,
                 auto_power_level: Optional[pulumi.Input[str]] = None,
                 auto_power_low: Optional[pulumi.Input[int]] = None,
                 auto_power_target: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio3ChannelArgs']]]] = None,
                 drma_manual_mode: Optional[pulumi.Input[str]] = None,
                 override_analysis: Optional[pulumi.Input[str]] = None,
                 override_band: Optional[pulumi.Input[str]] = None,
                 override_channel: Optional[pulumi.Input[str]] = None,
                 override_txpower: Optional[pulumi.Input[str]] = None,
                 override_vaps: Optional[pulumi.Input[str]] = None,
                 power_level: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None,
                 power_value: Optional[pulumi.Input[int]] = None,
                 spectrum_analysis: Optional[pulumi.Input[str]] = None,
                 vap_all: Optional[pulumi.Input[str]] = None,
                 vaps: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio3VapArgs']]]] = None):
        """
        :param pulumi.Input[int] auto_power_high: The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_level: Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auto_power_low: The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_target: The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        :param pulumi.Input[str] band: WiFi band that Radio 4 operates on.
        :param pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio3ChannelArgs']]] channels: Selected list of wireless radio channels. The structure of `channel` block is documented below.
        :param pulumi.Input[str] drma_manual_mode: Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
        :param pulumi.Input[str] override_analysis: Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_band: Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_channel: Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_txpower: Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_vaps: Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] power_level: Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        :param pulumi.Input[str] power_mode: Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        :param pulumi.Input[int] power_value: Radio EIRP power in dBm (1 - 33, default = 27).
        :param pulumi.Input[str] spectrum_analysis: Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        :param pulumi.Input[str] vap_all: Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        :param pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio3VapArgs']]] vaps: Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        """
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if drma_manual_mode is not None:
            pulumi.set(__self__, "drma_manual_mode", drma_manual_mode)
        if override_analysis is not None:
            pulumi.set(__self__, "override_analysis", override_analysis)
        if override_band is not None:
            pulumi.set(__self__, "override_band", override_band)
        if override_channel is not None:
            pulumi.set(__self__, "override_channel", override_channel)
        if override_txpower is not None:
            pulumi.set(__self__, "override_txpower", override_txpower)
        if override_vaps is not None:
            pulumi.set(__self__, "override_vaps", override_vaps)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[pulumi.Input[int]]:
        """
        The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_high")

    @auto_power_high.setter
    def auto_power_high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_high", value)

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_power_level")

    @auto_power_level.setter
    def auto_power_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_level", value)

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[pulumi.Input[int]]:
        """
        The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_low")

    @auto_power_low.setter
    def auto_power_low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_low", value)

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[pulumi.Input[str]]:
        """
        The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        """
        return pulumi.get(self, "auto_power_target")

    @auto_power_target.setter
    def auto_power_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_target", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi band that Radio 4 operates on.
        """
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio3ChannelArgs']]]]:
        """
        Selected list of wireless radio channels. The structure of `channel` block is documented below.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio3ChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter(name="drmaManualMode")
    def drma_manual_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
        """
        return pulumi.get(self, "drma_manual_mode")

    @drma_manual_mode.setter
    def drma_manual_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma_manual_mode", value)

    @property
    @pulumi.getter(name="overrideAnalysis")
    def override_analysis(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_analysis")

    @override_analysis.setter
    def override_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_analysis", value)

    @property
    @pulumi.getter(name="overrideBand")
    def override_band(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_band")

    @override_band.setter
    def override_band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_band", value)

    @property
    @pulumi.getter(name="overrideChannel")
    def override_channel(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_channel")

    @override_channel.setter
    def override_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_channel", value)

    @property
    @pulumi.getter(name="overrideTxpower")
    def override_txpower(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_txpower")

    @override_txpower.setter
    def override_txpower(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_txpower", value)

    @property
    @pulumi.getter(name="overrideVaps")
    def override_vaps(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_vaps")

    @override_vaps.setter
    def override_vaps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_vaps", value)

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[pulumi.Input[int]]:
        """
        Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        """
        return pulumi.get(self, "power_level")

    @power_level.setter
    def power_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_level", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        """
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[pulumi.Input[int]]:
        """
        Radio EIRP power in dBm (1 - 33, default = 27).
        """
        return pulumi.get(self, "power_value")

    @power_value.setter
    def power_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_value", value)

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        """
        return pulumi.get(self, "spectrum_analysis")

    @spectrum_analysis.setter
    def spectrum_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrum_analysis", value)

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        """
        return pulumi.get(self, "vap_all")

    @vap_all.setter
    def vap_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vap_all", value)

    @property
    @pulumi.getter
    def vaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio3VapArgs']]]]:
        """
        Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        """
        return pulumi.get(self, "vaps")

    @vaps.setter
    def vaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio3VapArgs']]]]):
        pulumi.set(self, "vaps", value)


@pulumi.input_type
class WirelessControllerWtpRadio3ChannelArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] chan: Channel number.
        """
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        """
        Channel number.
        """
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WirelessControllerWtpRadio3VapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual Access Point (VAP) name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Access Point (VAP) name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerWtpRadio4Args:
    def __init__(__self__, *,
                 auto_power_high: Optional[pulumi.Input[int]] = None,
                 auto_power_level: Optional[pulumi.Input[str]] = None,
                 auto_power_low: Optional[pulumi.Input[int]] = None,
                 auto_power_target: Optional[pulumi.Input[str]] = None,
                 band: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio4ChannelArgs']]]] = None,
                 drma_manual_mode: Optional[pulumi.Input[str]] = None,
                 override_analysis: Optional[pulumi.Input[str]] = None,
                 override_band: Optional[pulumi.Input[str]] = None,
                 override_channel: Optional[pulumi.Input[str]] = None,
                 override_txpower: Optional[pulumi.Input[str]] = None,
                 override_vaps: Optional[pulumi.Input[str]] = None,
                 power_level: Optional[pulumi.Input[int]] = None,
                 power_mode: Optional[pulumi.Input[str]] = None,
                 power_value: Optional[pulumi.Input[int]] = None,
                 spectrum_analysis: Optional[pulumi.Input[str]] = None,
                 vap_all: Optional[pulumi.Input[str]] = None,
                 vaps: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio4VapArgs']]]] = None):
        """
        :param pulumi.Input[int] auto_power_high: The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_level: Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        :param pulumi.Input[int] auto_power_low: The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        :param pulumi.Input[str] auto_power_target: The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        :param pulumi.Input[str] band: WiFi band that Radio 4 operates on.
        :param pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio4ChannelArgs']]] channels: Selected list of wireless radio channels. The structure of `channel` block is documented below.
        :param pulumi.Input[str] drma_manual_mode: Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
        :param pulumi.Input[str] override_analysis: Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_band: Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_channel: Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_txpower: Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] override_vaps: Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
        :param pulumi.Input[int] power_level: Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        :param pulumi.Input[str] power_mode: Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        :param pulumi.Input[int] power_value: Radio EIRP power in dBm (1 - 33, default = 27).
        :param pulumi.Input[str] spectrum_analysis: Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        :param pulumi.Input[str] vap_all: Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        :param pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio4VapArgs']]] vaps: Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        """
        if auto_power_high is not None:
            pulumi.set(__self__, "auto_power_high", auto_power_high)
        if auto_power_level is not None:
            pulumi.set(__self__, "auto_power_level", auto_power_level)
        if auto_power_low is not None:
            pulumi.set(__self__, "auto_power_low", auto_power_low)
        if auto_power_target is not None:
            pulumi.set(__self__, "auto_power_target", auto_power_target)
        if band is not None:
            pulumi.set(__self__, "band", band)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if drma_manual_mode is not None:
            pulumi.set(__self__, "drma_manual_mode", drma_manual_mode)
        if override_analysis is not None:
            pulumi.set(__self__, "override_analysis", override_analysis)
        if override_band is not None:
            pulumi.set(__self__, "override_band", override_band)
        if override_channel is not None:
            pulumi.set(__self__, "override_channel", override_channel)
        if override_txpower is not None:
            pulumi.set(__self__, "override_txpower", override_txpower)
        if override_vaps is not None:
            pulumi.set(__self__, "override_vaps", override_vaps)
        if power_level is not None:
            pulumi.set(__self__, "power_level", power_level)
        if power_mode is not None:
            pulumi.set(__self__, "power_mode", power_mode)
        if power_value is not None:
            pulumi.set(__self__, "power_value", power_value)
        if spectrum_analysis is not None:
            pulumi.set(__self__, "spectrum_analysis", spectrum_analysis)
        if vap_all is not None:
            pulumi.set(__self__, "vap_all", vap_all)
        if vaps is not None:
            pulumi.set(__self__, "vaps", vaps)

    @property
    @pulumi.getter(name="autoPowerHigh")
    def auto_power_high(self) -> Optional[pulumi.Input[int]]:
        """
        The upper bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_high")

    @auto_power_high.setter
    def auto_power_high(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_high", value)

    @property
    @pulumi.getter(name="autoPowerLevel")
    def auto_power_level(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable automatic power-level adjustment to prevent co-channel interference (default = enable). Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "auto_power_level")

    @auto_power_level.setter
    def auto_power_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_level", value)

    @property
    @pulumi.getter(name="autoPowerLow")
    def auto_power_low(self) -> Optional[pulumi.Input[int]]:
        """
        The lower bound of automatic transmit power adjustment in dBm (the actual range of transmit power depends on the AP platform type).
        """
        return pulumi.get(self, "auto_power_low")

    @auto_power_low.setter
    def auto_power_low(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_power_low", value)

    @property
    @pulumi.getter(name="autoPowerTarget")
    def auto_power_target(self) -> Optional[pulumi.Input[str]]:
        """
        The target of automatic transmit power adjustment in dBm. (-95 to -20, default = -70).
        """
        return pulumi.get(self, "auto_power_target")

    @auto_power_target.setter
    def auto_power_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_power_target", value)

    @property
    @pulumi.getter
    def band(self) -> Optional[pulumi.Input[str]]:
        """
        WiFi band that Radio 4 operates on.
        """
        return pulumi.get(self, "band")

    @band.setter
    def band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "band", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio4ChannelArgs']]]]:
        """
        Selected list of wireless radio channels. The structure of `channel` block is documented below.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio4ChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter(name="drmaManualMode")
    def drma_manual_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Radio mode to be used for DRMA manual mode (default = ncf). Valid values: `ap`, `monitor`, `ncf`, `ncf-peek`.
        """
        return pulumi.get(self, "drma_manual_mode")

    @drma_manual_mode.setter
    def drma_manual_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drma_manual_mode", value)

    @property
    @pulumi.getter(name="overrideAnalysis")
    def override_analysis(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the WTP profile spectrum analysis configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_analysis")

    @override_analysis.setter
    def override_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_analysis", value)

    @property
    @pulumi.getter(name="overrideBand")
    def override_band(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the WTP profile band setting. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_band")

    @override_band.setter
    def override_band(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_band", value)

    @property
    @pulumi.getter(name="overrideChannel")
    def override_channel(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override WTP profile channel settings. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_channel")

    @override_channel.setter
    def override_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_channel", value)

    @property
    @pulumi.getter(name="overrideTxpower")
    def override_txpower(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override the WTP profile power level configuration. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_txpower")

    @override_txpower.setter
    def override_txpower(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_txpower", value)

    @property
    @pulumi.getter(name="overrideVaps")
    def override_vaps(self) -> Optional[pulumi.Input[str]]:
        """
        Enable to override WTP profile Virtual Access Point (VAP) settings. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "override_vaps")

    @override_vaps.setter
    def override_vaps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_vaps", value)

    @property
    @pulumi.getter(name="powerLevel")
    def power_level(self) -> Optional[pulumi.Input[int]]:
        """
        Radio power level as a percentage of the maximum transmit power (0 - 100, default = 100).
        """
        return pulumi.get(self, "power_level")

    @power_level.setter
    def power_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_level", value)

    @property
    @pulumi.getter(name="powerMode")
    def power_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Set radio effective isotropic radiated power (EIRP) in dBm or by a percentage of the maximum EIRP (default = percentage). This power takes into account both radio transmit power and antenna gain. Higher power level settings may be constrained by local regulatory requirements and AP capabilities. Valid values: `dBm`, `percentage`.
        """
        return pulumi.get(self, "power_mode")

    @power_mode.setter
    def power_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_mode", value)

    @property
    @pulumi.getter(name="powerValue")
    def power_value(self) -> Optional[pulumi.Input[int]]:
        """
        Radio EIRP power in dBm (1 - 33, default = 27).
        """
        return pulumi.get(self, "power_value")

    @power_value.setter
    def power_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "power_value", value)

    @property
    @pulumi.getter(name="spectrumAnalysis")
    def spectrum_analysis(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable spectrum analysis to find interference that would negatively impact wireless performance.
        """
        return pulumi.get(self, "spectrum_analysis")

    @spectrum_analysis.setter
    def spectrum_analysis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spectrum_analysis", value)

    @property
    @pulumi.getter(name="vapAll")
    def vap_all(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable the automatic inheritance of all Virtual Access Points (VAPs) (default = enable).
        """
        return pulumi.get(self, "vap_all")

    @vap_all.setter
    def vap_all(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vap_all", value)

    @property
    @pulumi.getter
    def vaps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio4VapArgs']]]]:
        """
        Manually selected list of Virtual Access Points (VAPs). The structure of `vaps` block is documented below.
        """
        return pulumi.get(self, "vaps")

    @vaps.setter
    def vaps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WirelessControllerWtpRadio4VapArgs']]]]):
        pulumi.set(self, "vaps", value)


@pulumi.input_type
class WirelessControllerWtpRadio4ChannelArgs:
    def __init__(__self__, *,
                 chan: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] chan: Channel number.
        """
        if chan is not None:
            pulumi.set(__self__, "chan", chan)

    @property
    @pulumi.getter
    def chan(self) -> Optional[pulumi.Input[str]]:
        """
        Channel number.
        """
        return pulumi.get(self, "chan")

    @chan.setter
    def chan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chan", value)


@pulumi.input_type
class WirelessControllerWtpRadio4VapArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Virtual Access Point (VAP) name.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Access Point (VAP) name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WirelessControllerWtpSplitTunnelingAclArgs:
    def __init__(__self__, *,
                 dest_ip: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] dest_ip: Destination IP and mask for the split-tunneling subnet.
        :param pulumi.Input[int] id: ID.
        """
        if dest_ip is not None:
            pulumi.set(__self__, "dest_ip", dest_ip)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="destIp")
    def dest_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Destination IP and mask for the split-tunneling subnet.
        """
        return pulumi.get(self, "dest_ip")

    @dest_ip.setter
    def dest_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dest_ip", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


