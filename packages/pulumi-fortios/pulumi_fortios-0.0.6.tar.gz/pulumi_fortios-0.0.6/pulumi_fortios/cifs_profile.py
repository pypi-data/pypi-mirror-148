# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CifsProfileArgs', 'CifsProfile']

@pulumi.input_type
class CifsProfileArgs:
    def __init__(__self__, *,
                 domain_controller: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 file_filter: Optional[pulumi.Input['CifsProfileFileFilterArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 server_credential_type: Optional[pulumi.Input[str]] = None,
                 server_keytabs: Optional[pulumi.Input[Sequence[pulumi.Input['CifsProfileServerKeytabArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CifsProfile resource.
        :param pulumi.Input[str] domain_controller: Domain for which to decrypt CIFS traffic.
        :param pulumi.Input[str] dynamic_sort_subtable: true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
        :param pulumi.Input['CifsProfileFileFilterArgs'] file_filter: File filter. The structure of `file_filter` block is documented below.
        :param pulumi.Input[str] name: File type name.
        :param pulumi.Input[str] server_credential_type: CIFS server credential type. Valid values: `none`, `credential-replication`, `credential-keytab`.
        :param pulumi.Input[Sequence[pulumi.Input['CifsProfileServerKeytabArgs']]] server_keytabs: Server keytab. The structure of `server_keytab` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if domain_controller is not None:
            pulumi.set(__self__, "domain_controller", domain_controller)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if file_filter is not None:
            pulumi.set(__self__, "file_filter", file_filter)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if server_credential_type is not None:
            pulumi.set(__self__, "server_credential_type", server_credential_type)
        if server_keytabs is not None:
            pulumi.set(__self__, "server_keytabs", server_keytabs)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="domainController")
    def domain_controller(self) -> Optional[pulumi.Input[str]]:
        """
        Domain for which to decrypt CIFS traffic.
        """
        return pulumi.get(self, "domain_controller")

    @domain_controller.setter
    def domain_controller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_controller", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="fileFilter")
    def file_filter(self) -> Optional[pulumi.Input['CifsProfileFileFilterArgs']]:
        """
        File filter. The structure of `file_filter` block is documented below.
        """
        return pulumi.get(self, "file_filter")

    @file_filter.setter
    def file_filter(self, value: Optional[pulumi.Input['CifsProfileFileFilterArgs']]):
        pulumi.set(self, "file_filter", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        File type name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serverCredentialType")
    def server_credential_type(self) -> Optional[pulumi.Input[str]]:
        """
        CIFS server credential type. Valid values: `none`, `credential-replication`, `credential-keytab`.
        """
        return pulumi.get(self, "server_credential_type")

    @server_credential_type.setter
    def server_credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_credential_type", value)

    @property
    @pulumi.getter(name="serverKeytabs")
    def server_keytabs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CifsProfileServerKeytabArgs']]]]:
        """
        Server keytab. The structure of `server_keytab` block is documented below.
        """
        return pulumi.get(self, "server_keytabs")

    @server_keytabs.setter
    def server_keytabs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CifsProfileServerKeytabArgs']]]]):
        pulumi.set(self, "server_keytabs", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _CifsProfileState:
    def __init__(__self__, *,
                 domain_controller: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 file_filter: Optional[pulumi.Input['CifsProfileFileFilterArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 server_credential_type: Optional[pulumi.Input[str]] = None,
                 server_keytabs: Optional[pulumi.Input[Sequence[pulumi.Input['CifsProfileServerKeytabArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CifsProfile resources.
        :param pulumi.Input[str] domain_controller: Domain for which to decrypt CIFS traffic.
        :param pulumi.Input[str] dynamic_sort_subtable: true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
        :param pulumi.Input['CifsProfileFileFilterArgs'] file_filter: File filter. The structure of `file_filter` block is documented below.
        :param pulumi.Input[str] name: File type name.
        :param pulumi.Input[str] server_credential_type: CIFS server credential type. Valid values: `none`, `credential-replication`, `credential-keytab`.
        :param pulumi.Input[Sequence[pulumi.Input['CifsProfileServerKeytabArgs']]] server_keytabs: Server keytab. The structure of `server_keytab` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if domain_controller is not None:
            pulumi.set(__self__, "domain_controller", domain_controller)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if file_filter is not None:
            pulumi.set(__self__, "file_filter", file_filter)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if server_credential_type is not None:
            pulumi.set(__self__, "server_credential_type", server_credential_type)
        if server_keytabs is not None:
            pulumi.set(__self__, "server_keytabs", server_keytabs)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="domainController")
    def domain_controller(self) -> Optional[pulumi.Input[str]]:
        """
        Domain for which to decrypt CIFS traffic.
        """
        return pulumi.get(self, "domain_controller")

    @domain_controller.setter
    def domain_controller(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_controller", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="fileFilter")
    def file_filter(self) -> Optional[pulumi.Input['CifsProfileFileFilterArgs']]:
        """
        File filter. The structure of `file_filter` block is documented below.
        """
        return pulumi.get(self, "file_filter")

    @file_filter.setter
    def file_filter(self, value: Optional[pulumi.Input['CifsProfileFileFilterArgs']]):
        pulumi.set(self, "file_filter", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        File type name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serverCredentialType")
    def server_credential_type(self) -> Optional[pulumi.Input[str]]:
        """
        CIFS server credential type. Valid values: `none`, `credential-replication`, `credential-keytab`.
        """
        return pulumi.get(self, "server_credential_type")

    @server_credential_type.setter
    def server_credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_credential_type", value)

    @property
    @pulumi.getter(name="serverKeytabs")
    def server_keytabs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CifsProfileServerKeytabArgs']]]]:
        """
        Server keytab. The structure of `server_keytab` block is documented below.
        """
        return pulumi.get(self, "server_keytabs")

    @server_keytabs.setter
    def server_keytabs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CifsProfileServerKeytabArgs']]]]):
        pulumi.set(self, "server_keytabs", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class CifsProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain_controller: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 file_filter: Optional[pulumi.Input[pulumi.InputType['CifsProfileFileFilterArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 server_credential_type: Optional[pulumi.Input[str]] = None,
                 server_keytabs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CifsProfileServerKeytabArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure CIFS profile. Applies to FortiOS Version `6.2.4,6.2.6,6.4.0,6.4.1`.

        ## Import

        Cifs Profile can be imported using any of these accepted formats

        ```sh
         $ pulumi import fortios:index/cifsProfile:CifsProfile labelname {{name}}
        ```

         If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
         $ pulumi import fortios:index/cifsProfile:CifsProfile labelname {{name}}
        ```

         $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain_controller: Domain for which to decrypt CIFS traffic.
        :param pulumi.Input[str] dynamic_sort_subtable: true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
        :param pulumi.Input[pulumi.InputType['CifsProfileFileFilterArgs']] file_filter: File filter. The structure of `file_filter` block is documented below.
        :param pulumi.Input[str] name: File type name.
        :param pulumi.Input[str] server_credential_type: CIFS server credential type. Valid values: `none`, `credential-replication`, `credential-keytab`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CifsProfileServerKeytabArgs']]]] server_keytabs: Server keytab. The structure of `server_keytab` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CifsProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure CIFS profile. Applies to FortiOS Version `6.2.4,6.2.6,6.4.0,6.4.1`.

        ## Import

        Cifs Profile can be imported using any of these accepted formats

        ```sh
         $ pulumi import fortios:index/cifsProfile:CifsProfile labelname {{name}}
        ```

         If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
         $ pulumi import fortios:index/cifsProfile:CifsProfile labelname {{name}}
        ```

         $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param CifsProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CifsProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain_controller: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 file_filter: Optional[pulumi.Input[pulumi.InputType['CifsProfileFileFilterArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 server_credential_type: Optional[pulumi.Input[str]] = None,
                 server_keytabs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CifsProfileServerKeytabArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CifsProfileArgs.__new__(CifsProfileArgs)

            __props__.__dict__["domain_controller"] = domain_controller
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["file_filter"] = file_filter
            __props__.__dict__["name"] = name
            __props__.__dict__["server_credential_type"] = server_credential_type
            __props__.__dict__["server_keytabs"] = server_keytabs
            __props__.__dict__["vdomparam"] = vdomparam
        super(CifsProfile, __self__).__init__(
            'fortios:index/cifsProfile:CifsProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            domain_controller: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            file_filter: Optional[pulumi.Input[pulumi.InputType['CifsProfileFileFilterArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            server_credential_type: Optional[pulumi.Input[str]] = None,
            server_keytabs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CifsProfileServerKeytabArgs']]]]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'CifsProfile':
        """
        Get an existing CifsProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain_controller: Domain for which to decrypt CIFS traffic.
        :param pulumi.Input[str] dynamic_sort_subtable: true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
        :param pulumi.Input[pulumi.InputType['CifsProfileFileFilterArgs']] file_filter: File filter. The structure of `file_filter` block is documented below.
        :param pulumi.Input[str] name: File type name.
        :param pulumi.Input[str] server_credential_type: CIFS server credential type. Valid values: `none`, `credential-replication`, `credential-keytab`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CifsProfileServerKeytabArgs']]]] server_keytabs: Server keytab. The structure of `server_keytab` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CifsProfileState.__new__(_CifsProfileState)

        __props__.__dict__["domain_controller"] = domain_controller
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["file_filter"] = file_filter
        __props__.__dict__["name"] = name
        __props__.__dict__["server_credential_type"] = server_credential_type
        __props__.__dict__["server_keytabs"] = server_keytabs
        __props__.__dict__["vdomparam"] = vdomparam
        return CifsProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="domainController")
    def domain_controller(self) -> pulumi.Output[str]:
        """
        Domain for which to decrypt CIFS traffic.
        """
        return pulumi.get(self, "domain_controller")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="fileFilter")
    def file_filter(self) -> pulumi.Output[Optional['outputs.CifsProfileFileFilter']]:
        """
        File filter. The structure of `file_filter` block is documented below.
        """
        return pulumi.get(self, "file_filter")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        File type name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serverCredentialType")
    def server_credential_type(self) -> pulumi.Output[str]:
        """
        CIFS server credential type. Valid values: `none`, `credential-replication`, `credential-keytab`.
        """
        return pulumi.get(self, "server_credential_type")

    @property
    @pulumi.getter(name="serverKeytabs")
    def server_keytabs(self) -> pulumi.Output[Optional[Sequence['outputs.CifsProfileServerKeytab']]]:
        """
        Server keytab. The structure of `server_keytab` block is documented below.
        """
        return pulumi.get(self, "server_keytabs")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

