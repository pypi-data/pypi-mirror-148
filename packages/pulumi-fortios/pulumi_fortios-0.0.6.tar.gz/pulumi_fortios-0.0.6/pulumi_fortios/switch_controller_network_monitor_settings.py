# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SwitchControllerNetworkMonitorSettingsArgs', 'SwitchControllerNetworkMonitorSettings']

@pulumi.input_type
class SwitchControllerNetworkMonitorSettingsArgs:
    def __init__(__self__, *,
                 network_monitoring: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SwitchControllerNetworkMonitorSettings resource.
        :param pulumi.Input[str] network_monitoring: Enable/disable passive gathering of information by FortiSwitch units concerning other network devices. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if network_monitoring is not None:
            pulumi.set(__self__, "network_monitoring", network_monitoring)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="networkMonitoring")
    def network_monitoring(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable passive gathering of information by FortiSwitch units concerning other network devices. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "network_monitoring")

    @network_monitoring.setter
    def network_monitoring(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_monitoring", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _SwitchControllerNetworkMonitorSettingsState:
    def __init__(__self__, *,
                 network_monitoring: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SwitchControllerNetworkMonitorSettings resources.
        :param pulumi.Input[str] network_monitoring: Enable/disable passive gathering of information by FortiSwitch units concerning other network devices. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if network_monitoring is not None:
            pulumi.set(__self__, "network_monitoring", network_monitoring)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="networkMonitoring")
    def network_monitoring(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable passive gathering of information by FortiSwitch units concerning other network devices. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "network_monitoring")

    @network_monitoring.setter
    def network_monitoring(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_monitoring", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class SwitchControllerNetworkMonitorSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 network_monitoring: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure network monitor settings.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_fortios as fortios

        trname = fortios.SwitchControllerNetworkMonitorSettings("trname", network_monitoring="disable")
        ```

        ## Import

        SwitchController NetworkMonitorSettings can be imported using any of these accepted formats

        ```sh
         $ pulumi import fortios:index/switchControllerNetworkMonitorSettings:SwitchControllerNetworkMonitorSettings labelname SwitchControllerNetworkMonitorSettings
        ```

         If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
         $ pulumi import fortios:index/switchControllerNetworkMonitorSettings:SwitchControllerNetworkMonitorSettings labelname SwitchControllerNetworkMonitorSettings
        ```

         $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] network_monitoring: Enable/disable passive gathering of information by FortiSwitch units concerning other network devices. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SwitchControllerNetworkMonitorSettingsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure network monitor settings.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_fortios as fortios

        trname = fortios.SwitchControllerNetworkMonitorSettings("trname", network_monitoring="disable")
        ```

        ## Import

        SwitchController NetworkMonitorSettings can be imported using any of these accepted formats

        ```sh
         $ pulumi import fortios:index/switchControllerNetworkMonitorSettings:SwitchControllerNetworkMonitorSettings labelname SwitchControllerNetworkMonitorSettings
        ```

         If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
         $ pulumi import fortios:index/switchControllerNetworkMonitorSettings:SwitchControllerNetworkMonitorSettings labelname SwitchControllerNetworkMonitorSettings
        ```

         $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param SwitchControllerNetworkMonitorSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SwitchControllerNetworkMonitorSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 network_monitoring: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SwitchControllerNetworkMonitorSettingsArgs.__new__(SwitchControllerNetworkMonitorSettingsArgs)

            __props__.__dict__["network_monitoring"] = network_monitoring
            __props__.__dict__["vdomparam"] = vdomparam
        super(SwitchControllerNetworkMonitorSettings, __self__).__init__(
            'fortios:index/switchControllerNetworkMonitorSettings:SwitchControllerNetworkMonitorSettings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            network_monitoring: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'SwitchControllerNetworkMonitorSettings':
        """
        Get an existing SwitchControllerNetworkMonitorSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] network_monitoring: Enable/disable passive gathering of information by FortiSwitch units concerning other network devices. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SwitchControllerNetworkMonitorSettingsState.__new__(_SwitchControllerNetworkMonitorSettingsState)

        __props__.__dict__["network_monitoring"] = network_monitoring
        __props__.__dict__["vdomparam"] = vdomparam
        return SwitchControllerNetworkMonitorSettings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="networkMonitoring")
    def network_monitoring(self) -> pulumi.Output[str]:
        """
        Enable/disable passive gathering of information by FortiSwitch units concerning other network devices. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "network_monitoring")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

