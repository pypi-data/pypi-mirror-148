# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WafProfileArgs', 'WafProfile']

@pulumi.input_type
class WafProfileArgs:
    def __init__(__self__, *,
                 address_list: Optional[pulumi.Input['WafProfileAddressListArgs']] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 constraint: Optional[pulumi.Input['WafProfileConstraintArgs']] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 external: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input['WafProfileMethodArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 signature: Optional[pulumi.Input['WafProfileSignatureArgs']] = None,
                 url_accesses: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileUrlAccessArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WafProfile resource.
        :param pulumi.Input['WafProfileAddressListArgs'] address_list: Black address list and white address list. The structure of `address_list` block is documented below.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input['WafProfileConstraintArgs'] constraint: WAF HTTP protocol restrictions. The structure of `constraint` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
        :param pulumi.Input[str] extended_log: Enable/disable extended logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] external: Disable/Enable external HTTP Inspection. Valid values: `disable`, `enable`.
        :param pulumi.Input['WafProfileMethodArgs'] method: Enable/disable HTTP method check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Address name.
        :param pulumi.Input['WafProfileSignatureArgs'] signature: WAF signatures. The structure of `signature` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['WafProfileUrlAccessArgs']]] url_accesses: URL access list The structure of `url_access` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if address_list is not None:
            pulumi.set(__self__, "address_list", address_list)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if constraint is not None:
            pulumi.set(__self__, "constraint", constraint)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if extended_log is not None:
            pulumi.set(__self__, "extended_log", extended_log)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if signature is not None:
            pulumi.set(__self__, "signature", signature)
        if url_accesses is not None:
            pulumi.set(__self__, "url_accesses", url_accesses)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="addressList")
    def address_list(self) -> Optional[pulumi.Input['WafProfileAddressListArgs']]:
        """
        Black address list and white address list. The structure of `address_list` block is documented below.
        """
        return pulumi.get(self, "address_list")

    @address_list.setter
    def address_list(self, value: Optional[pulumi.Input['WafProfileAddressListArgs']]):
        pulumi.set(self, "address_list", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def constraint(self) -> Optional[pulumi.Input['WafProfileConstraintArgs']]:
        """
        WAF HTTP protocol restrictions. The structure of `constraint` block is documented below.
        """
        return pulumi.get(self, "constraint")

    @constraint.setter
    def constraint(self, value: Optional[pulumi.Input['WafProfileConstraintArgs']]):
        pulumi.set(self, "constraint", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable extended logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "extended_log")

    @extended_log.setter
    def extended_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_log", value)

    @property
    @pulumi.getter
    def external(self) -> Optional[pulumi.Input[str]]:
        """
        Disable/Enable external HTTP Inspection. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "external")

    @external.setter
    def external(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input['WafProfileMethodArgs']]:
        """
        Enable/disable HTTP method check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input['WafProfileMethodArgs']]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def signature(self) -> Optional[pulumi.Input['WafProfileSignatureArgs']]:
        """
        WAF signatures. The structure of `signature` block is documented below.
        """
        return pulumi.get(self, "signature")

    @signature.setter
    def signature(self, value: Optional[pulumi.Input['WafProfileSignatureArgs']]):
        pulumi.set(self, "signature", value)

    @property
    @pulumi.getter(name="urlAccesses")
    def url_accesses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileUrlAccessArgs']]]]:
        """
        URL access list The structure of `url_access` block is documented below.
        """
        return pulumi.get(self, "url_accesses")

    @url_accesses.setter
    def url_accesses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileUrlAccessArgs']]]]):
        pulumi.set(self, "url_accesses", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _WafProfileState:
    def __init__(__self__, *,
                 address_list: Optional[pulumi.Input['WafProfileAddressListArgs']] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 constraint: Optional[pulumi.Input['WafProfileConstraintArgs']] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 external: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input['WafProfileMethodArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 signature: Optional[pulumi.Input['WafProfileSignatureArgs']] = None,
                 url_accesses: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileUrlAccessArgs']]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WafProfile resources.
        :param pulumi.Input['WafProfileAddressListArgs'] address_list: Black address list and white address list. The structure of `address_list` block is documented below.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input['WafProfileConstraintArgs'] constraint: WAF HTTP protocol restrictions. The structure of `constraint` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
        :param pulumi.Input[str] extended_log: Enable/disable extended logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] external: Disable/Enable external HTTP Inspection. Valid values: `disable`, `enable`.
        :param pulumi.Input['WafProfileMethodArgs'] method: Enable/disable HTTP method check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Address name.
        :param pulumi.Input['WafProfileSignatureArgs'] signature: WAF signatures. The structure of `signature` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input['WafProfileUrlAccessArgs']]] url_accesses: URL access list The structure of `url_access` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if address_list is not None:
            pulumi.set(__self__, "address_list", address_list)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if constraint is not None:
            pulumi.set(__self__, "constraint", constraint)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if extended_log is not None:
            pulumi.set(__self__, "extended_log", extended_log)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if signature is not None:
            pulumi.set(__self__, "signature", signature)
        if url_accesses is not None:
            pulumi.set(__self__, "url_accesses", url_accesses)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="addressList")
    def address_list(self) -> Optional[pulumi.Input['WafProfileAddressListArgs']]:
        """
        Black address list and white address list. The structure of `address_list` block is documented below.
        """
        return pulumi.get(self, "address_list")

    @address_list.setter
    def address_list(self, value: Optional[pulumi.Input['WafProfileAddressListArgs']]):
        pulumi.set(self, "address_list", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def constraint(self) -> Optional[pulumi.Input['WafProfileConstraintArgs']]:
        """
        WAF HTTP protocol restrictions. The structure of `constraint` block is documented below.
        """
        return pulumi.get(self, "constraint")

    @constraint.setter
    def constraint(self, value: Optional[pulumi.Input['WafProfileConstraintArgs']]):
        pulumi.set(self, "constraint", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable extended logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "extended_log")

    @extended_log.setter
    def extended_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_log", value)

    @property
    @pulumi.getter
    def external(self) -> Optional[pulumi.Input[str]]:
        """
        Disable/Enable external HTTP Inspection. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "external")

    @external.setter
    def external(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input['WafProfileMethodArgs']]:
        """
        Enable/disable HTTP method check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input['WafProfileMethodArgs']]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def signature(self) -> Optional[pulumi.Input['WafProfileSignatureArgs']]:
        """
        WAF signatures. The structure of `signature` block is documented below.
        """
        return pulumi.get(self, "signature")

    @signature.setter
    def signature(self, value: Optional[pulumi.Input['WafProfileSignatureArgs']]):
        pulumi.set(self, "signature", value)

    @property
    @pulumi.getter(name="urlAccesses")
    def url_accesses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileUrlAccessArgs']]]]:
        """
        URL access list The structure of `url_access` block is documented below.
        """
        return pulumi.get(self, "url_accesses")

    @url_accesses.setter
    def url_accesses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WafProfileUrlAccessArgs']]]]):
        pulumi.set(self, "url_accesses", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class WafProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_list: Optional[pulumi.Input[pulumi.InputType['WafProfileAddressListArgs']]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 constraint: Optional[pulumi.Input[pulumi.InputType['WafProfileConstraintArgs']]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 external: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[pulumi.InputType['WafProfileMethodArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 signature: Optional[pulumi.Input[pulumi.InputType['WafProfileSignatureArgs']]] = None,
                 url_accesses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WafProfileUrlAccessArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Web application firewall configuration.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_fortios as fortios

        trname = fortios.WafProfile("trname",
            extended_log="disable",
            external="disable")
        ```

        ## Import

        Waf Profile can be imported using any of these accepted formats

        ```sh
         $ pulumi import fortios:index/wafProfile:WafProfile labelname {{name}}
        ```

         If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
         $ pulumi import fortios:index/wafProfile:WafProfile labelname {{name}}
        ```

         $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['WafProfileAddressListArgs']] address_list: Black address list and white address list. The structure of `address_list` block is documented below.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[pulumi.InputType['WafProfileConstraintArgs']] constraint: WAF HTTP protocol restrictions. The structure of `constraint` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
        :param pulumi.Input[str] extended_log: Enable/disable extended logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] external: Disable/Enable external HTTP Inspection. Valid values: `disable`, `enable`.
        :param pulumi.Input[pulumi.InputType['WafProfileMethodArgs']] method: Enable/disable HTTP method check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Address name.
        :param pulumi.Input[pulumi.InputType['WafProfileSignatureArgs']] signature: WAF signatures. The structure of `signature` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WafProfileUrlAccessArgs']]]] url_accesses: URL access list The structure of `url_access` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WafProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Web application firewall configuration.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_fortios as fortios

        trname = fortios.WafProfile("trname",
            extended_log="disable",
            external="disable")
        ```

        ## Import

        Waf Profile can be imported using any of these accepted formats

        ```sh
         $ pulumi import fortios:index/wafProfile:WafProfile labelname {{name}}
        ```

         If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
         $ pulumi import fortios:index/wafProfile:WafProfile labelname {{name}}
        ```

         $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param WafProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WafProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_list: Optional[pulumi.Input[pulumi.InputType['WafProfileAddressListArgs']]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 constraint: Optional[pulumi.Input[pulumi.InputType['WafProfileConstraintArgs']]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extended_log: Optional[pulumi.Input[str]] = None,
                 external: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[pulumi.InputType['WafProfileMethodArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 signature: Optional[pulumi.Input[pulumi.InputType['WafProfileSignatureArgs']]] = None,
                 url_accesses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WafProfileUrlAccessArgs']]]]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WafProfileArgs.__new__(WafProfileArgs)

            __props__.__dict__["address_list"] = address_list
            __props__.__dict__["comment"] = comment
            __props__.__dict__["constraint"] = constraint
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["extended_log"] = extended_log
            __props__.__dict__["external"] = external
            __props__.__dict__["method"] = method
            __props__.__dict__["name"] = name
            __props__.__dict__["signature"] = signature
            __props__.__dict__["url_accesses"] = url_accesses
            __props__.__dict__["vdomparam"] = vdomparam
        super(WafProfile, __self__).__init__(
            'fortios:index/wafProfile:WafProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address_list: Optional[pulumi.Input[pulumi.InputType['WafProfileAddressListArgs']]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            constraint: Optional[pulumi.Input[pulumi.InputType['WafProfileConstraintArgs']]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            extended_log: Optional[pulumi.Input[str]] = None,
            external: Optional[pulumi.Input[str]] = None,
            method: Optional[pulumi.Input[pulumi.InputType['WafProfileMethodArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            signature: Optional[pulumi.Input[pulumi.InputType['WafProfileSignatureArgs']]] = None,
            url_accesses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WafProfileUrlAccessArgs']]]]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'WafProfile':
        """
        Get an existing WafProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['WafProfileAddressListArgs']] address_list: Black address list and white address list. The structure of `address_list` block is documented below.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[pulumi.InputType['WafProfileConstraintArgs']] constraint: WAF HTTP protocol restrictions. The structure of `constraint` block is documented below.
        :param pulumi.Input[str] dynamic_sort_subtable: true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
        :param pulumi.Input[str] extended_log: Enable/disable extended logging. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] external: Disable/Enable external HTTP Inspection. Valid values: `disable`, `enable`.
        :param pulumi.Input[pulumi.InputType['WafProfileMethodArgs']] method: Enable/disable HTTP method check. Valid values: `enable`, `disable`.
        :param pulumi.Input[str] name: Address name.
        :param pulumi.Input[pulumi.InputType['WafProfileSignatureArgs']] signature: WAF signatures. The structure of `signature` block is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WafProfileUrlAccessArgs']]]] url_accesses: URL access list The structure of `url_access` block is documented below.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WafProfileState.__new__(_WafProfileState)

        __props__.__dict__["address_list"] = address_list
        __props__.__dict__["comment"] = comment
        __props__.__dict__["constraint"] = constraint
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["extended_log"] = extended_log
        __props__.__dict__["external"] = external
        __props__.__dict__["method"] = method
        __props__.__dict__["name"] = name
        __props__.__dict__["signature"] = signature
        __props__.__dict__["url_accesses"] = url_accesses
        __props__.__dict__["vdomparam"] = vdomparam
        return WafProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addressList")
    def address_list(self) -> pulumi.Output[Optional['outputs.WafProfileAddressList']]:
        """
        Black address list and white address list. The structure of `address_list` block is documented below.
        """
        return pulumi.get(self, "address_list")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def constraint(self) -> pulumi.Output[Optional['outputs.WafProfileConstraint']]:
        """
        WAF HTTP protocol restrictions. The structure of `constraint` block is documented below.
        """
        return pulumi.get(self, "constraint")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="extendedLog")
    def extended_log(self) -> pulumi.Output[str]:
        """
        Enable/disable extended logging. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "extended_log")

    @property
    @pulumi.getter
    def external(self) -> pulumi.Output[str]:
        """
        Disable/Enable external HTTP Inspection. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "external")

    @property
    @pulumi.getter
    def method(self) -> pulumi.Output[Optional['outputs.WafProfileMethod']]:
        """
        Enable/disable HTTP method check. Valid values: `enable`, `disable`.
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def signature(self) -> pulumi.Output[Optional['outputs.WafProfileSignature']]:
        """
        WAF signatures. The structure of `signature` block is documented below.
        """
        return pulumi.get(self, "signature")

    @property
    @pulumi.getter(name="urlAccesses")
    def url_accesses(self) -> pulumi.Output[Optional[Sequence['outputs.WafProfileUrlAccess']]]:
        """
        URL access list The structure of `url_access` block is documented below.
        """
        return pulumi.get(self, "url_accesses")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

