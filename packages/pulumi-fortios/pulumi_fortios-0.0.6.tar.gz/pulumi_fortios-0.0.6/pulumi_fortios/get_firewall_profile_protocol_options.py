# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetFirewallProfileProtocolOptionsResult',
    'AwaitableGetFirewallProfileProtocolOptionsResult',
    'get_firewall_profile_protocol_options',
    'get_firewall_profile_protocol_options_output',
]

@pulumi.output_type
class GetFirewallProfileProtocolOptionsResult:
    """
    A collection of values returned by GetFirewallProfileProtocolOptions.
    """
    def __init__(__self__, cifs=None, comment=None, dns=None, feature_set=None, ftp=None, http=None, id=None, imap=None, mail_signature=None, mapi=None, name=None, nntp=None, oversize_log=None, pop3=None, replacemsg_group=None, rpc_over_http=None, smtp=None, ssh=None, switching_protocols_log=None, vdomparam=None):
        if cifs and not isinstance(cifs, dict):
            raise TypeError("Expected argument 'cifs' to be a dict")
        pulumi.set(__self__, "cifs", cifs)
        if comment and not isinstance(comment, str):
            raise TypeError("Expected argument 'comment' to be a str")
        pulumi.set(__self__, "comment", comment)
        if dns and not isinstance(dns, dict):
            raise TypeError("Expected argument 'dns' to be a dict")
        pulumi.set(__self__, "dns", dns)
        if feature_set and not isinstance(feature_set, str):
            raise TypeError("Expected argument 'feature_set' to be a str")
        pulumi.set(__self__, "feature_set", feature_set)
        if ftp and not isinstance(ftp, dict):
            raise TypeError("Expected argument 'ftp' to be a dict")
        pulumi.set(__self__, "ftp", ftp)
        if http and not isinstance(http, dict):
            raise TypeError("Expected argument 'http' to be a dict")
        pulumi.set(__self__, "http", http)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if imap and not isinstance(imap, dict):
            raise TypeError("Expected argument 'imap' to be a dict")
        pulumi.set(__self__, "imap", imap)
        if mail_signature and not isinstance(mail_signature, dict):
            raise TypeError("Expected argument 'mail_signature' to be a dict")
        pulumi.set(__self__, "mail_signature", mail_signature)
        if mapi and not isinstance(mapi, dict):
            raise TypeError("Expected argument 'mapi' to be a dict")
        pulumi.set(__self__, "mapi", mapi)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nntp and not isinstance(nntp, dict):
            raise TypeError("Expected argument 'nntp' to be a dict")
        pulumi.set(__self__, "nntp", nntp)
        if oversize_log and not isinstance(oversize_log, str):
            raise TypeError("Expected argument 'oversize_log' to be a str")
        pulumi.set(__self__, "oversize_log", oversize_log)
        if pop3 and not isinstance(pop3, dict):
            raise TypeError("Expected argument 'pop3' to be a dict")
        pulumi.set(__self__, "pop3", pop3)
        if replacemsg_group and not isinstance(replacemsg_group, str):
            raise TypeError("Expected argument 'replacemsg_group' to be a str")
        pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if rpc_over_http and not isinstance(rpc_over_http, str):
            raise TypeError("Expected argument 'rpc_over_http' to be a str")
        pulumi.set(__self__, "rpc_over_http", rpc_over_http)
        if smtp and not isinstance(smtp, dict):
            raise TypeError("Expected argument 'smtp' to be a dict")
        pulumi.set(__self__, "smtp", smtp)
        if ssh and not isinstance(ssh, dict):
            raise TypeError("Expected argument 'ssh' to be a dict")
        pulumi.set(__self__, "ssh", ssh)
        if switching_protocols_log and not isinstance(switching_protocols_log, str):
            raise TypeError("Expected argument 'switching_protocols_log' to be a str")
        pulumi.set(__self__, "switching_protocols_log", switching_protocols_log)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def cifs(self) -> 'outputs.GetFirewallProfileProtocolOptionsCifsResult':
        """
        Configure CIFS protocol options. The structure of `cifs` block is documented below.
        """
        return pulumi.get(self, "cifs")

    @property
    @pulumi.getter
    def comment(self) -> str:
        """
        Optional comments.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def dns(self) -> 'outputs.GetFirewallProfileProtocolOptionsDnsResult':
        """
        Configure DNS protocol options. The structure of `dns` block is documented below.
        """
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter(name="featureSet")
    def feature_set(self) -> str:
        """
        Flow/proxy feature set.
        """
        return pulumi.get(self, "feature_set")

    @property
    @pulumi.getter
    def ftp(self) -> 'outputs.GetFirewallProfileProtocolOptionsFtpResult':
        """
        Configure FTP protocol options. The structure of `ftp` block is documented below.
        """
        return pulumi.get(self, "ftp")

    @property
    @pulumi.getter
    def http(self) -> 'outputs.GetFirewallProfileProtocolOptionsHttpResult':
        """
        Configure HTTP protocol options. The structure of `http` block is documented below.
        """
        return pulumi.get(self, "http")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def imap(self) -> 'outputs.GetFirewallProfileProtocolOptionsImapResult':
        """
        Configure IMAP protocol options. The structure of `imap` block is documented below.
        """
        return pulumi.get(self, "imap")

    @property
    @pulumi.getter(name="mailSignature")
    def mail_signature(self) -> 'outputs.GetFirewallProfileProtocolOptionsMailSignatureResult':
        """
        Configure Mail signature. The structure of `mail_signature` block is documented below.
        """
        return pulumi.get(self, "mail_signature")

    @property
    @pulumi.getter
    def mapi(self) -> 'outputs.GetFirewallProfileProtocolOptionsMapiResult':
        """
        Configure MAPI protocol options. The structure of `mapi` block is documented below.
        """
        return pulumi.get(self, "mapi")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nntp(self) -> 'outputs.GetFirewallProfileProtocolOptionsNntpResult':
        """
        Configure NNTP protocol options. The structure of `nntp` block is documented below.
        """
        return pulumi.get(self, "nntp")

    @property
    @pulumi.getter(name="oversizeLog")
    def oversize_log(self) -> str:
        """
        Enable/disable logging for antivirus oversize file blocking.
        """
        return pulumi.get(self, "oversize_log")

    @property
    @pulumi.getter
    def pop3(self) -> 'outputs.GetFirewallProfileProtocolOptionsPop3Result':
        """
        Configure POP3 protocol options. The structure of `pop3` block is documented below.
        """
        return pulumi.get(self, "pop3")

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> str:
        """
        Name of the replacement message group to be used
        """
        return pulumi.get(self, "replacemsg_group")

    @property
    @pulumi.getter(name="rpcOverHttp")
    def rpc_over_http(self) -> str:
        """
        Enable/disable inspection of RPC over HTTP.
        """
        return pulumi.get(self, "rpc_over_http")

    @property
    @pulumi.getter
    def smtp(self) -> 'outputs.GetFirewallProfileProtocolOptionsSmtpResult':
        """
        Configure SMTP protocol options. The structure of `smtp` block is documented below.
        """
        return pulumi.get(self, "smtp")

    @property
    @pulumi.getter
    def ssh(self) -> 'outputs.GetFirewallProfileProtocolOptionsSshResult':
        """
        Configure SFTP and SCP protocol options. The structure of `ssh` block is documented below.
        """
        return pulumi.get(self, "ssh")

    @property
    @pulumi.getter(name="switchingProtocolsLog")
    def switching_protocols_log(self) -> str:
        """
        Enable/disable logging for HTTP/HTTPS switching protocols.
        """
        return pulumi.get(self, "switching_protocols_log")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetFirewallProfileProtocolOptionsResult(GetFirewallProfileProtocolOptionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFirewallProfileProtocolOptionsResult(
            cifs=self.cifs,
            comment=self.comment,
            dns=self.dns,
            feature_set=self.feature_set,
            ftp=self.ftp,
            http=self.http,
            id=self.id,
            imap=self.imap,
            mail_signature=self.mail_signature,
            mapi=self.mapi,
            name=self.name,
            nntp=self.nntp,
            oversize_log=self.oversize_log,
            pop3=self.pop3,
            replacemsg_group=self.replacemsg_group,
            rpc_over_http=self.rpc_over_http,
            smtp=self.smtp,
            ssh=self.ssh,
            switching_protocols_log=self.switching_protocols_log,
            vdomparam=self.vdomparam)


def get_firewall_profile_protocol_options(name: Optional[str] = None,
                                          vdomparam: Optional[str] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFirewallProfileProtocolOptionsResult:
    """
    Use this data source to get information on an fortios firewall profileprotocoloptions


    :param str name: Specify the name of the desired firewall profileprotocoloptions.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['vdomparam'] = vdomparam
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('fortios:index/getFirewallProfileProtocolOptions:GetFirewallProfileProtocolOptions', __args__, opts=opts, typ=GetFirewallProfileProtocolOptionsResult).value

    return AwaitableGetFirewallProfileProtocolOptionsResult(
        cifs=__ret__.cifs,
        comment=__ret__.comment,
        dns=__ret__.dns,
        feature_set=__ret__.feature_set,
        ftp=__ret__.ftp,
        http=__ret__.http,
        id=__ret__.id,
        imap=__ret__.imap,
        mail_signature=__ret__.mail_signature,
        mapi=__ret__.mapi,
        name=__ret__.name,
        nntp=__ret__.nntp,
        oversize_log=__ret__.oversize_log,
        pop3=__ret__.pop3,
        replacemsg_group=__ret__.replacemsg_group,
        rpc_over_http=__ret__.rpc_over_http,
        smtp=__ret__.smtp,
        ssh=__ret__.ssh,
        switching_protocols_log=__ret__.switching_protocols_log,
        vdomparam=__ret__.vdomparam)


@_utilities.lift_output_func(get_firewall_profile_protocol_options)
def get_firewall_profile_protocol_options_output(name: Optional[pulumi.Input[str]] = None,
                                                 vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFirewallProfileProtocolOptionsResult]:
    """
    Use this data source to get information on an fortios firewall profileprotocoloptions


    :param str name: Specify the name of the desired firewall profileprotocoloptions.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...
