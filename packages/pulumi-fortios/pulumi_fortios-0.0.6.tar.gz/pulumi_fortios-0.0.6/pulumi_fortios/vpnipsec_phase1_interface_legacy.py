# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['VPNIPsecPhase1InterfaceLegacyArgs', 'VPNIPsecPhase1InterfaceLegacy']

@pulumi.input_type
class VPNIPsecPhase1InterfaceLegacyArgs:
    def __init__(__self__, *,
                 interface: pulumi.Input[str],
                 psksecret: pulumi.Input[str],
                 remote_gw: pulumi.Input[str],
                 type: pulumi.Input[str],
                 authmethod: Optional[pulumi.Input[str]] = None,
                 authmethod_remote: Optional[pulumi.Input[str]] = None,
                 certificates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 ipv4_split_exclude: Optional[pulumi.Input[str]] = None,
                 ipv4_split_include: Optional[pulumi.Input[str]] = None,
                 mode_cfg: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 peer: Optional[pulumi.Input[str]] = None,
                 peergrp: Optional[pulumi.Input[str]] = None,
                 peerid: Optional[pulumi.Input[str]] = None,
                 peertype: Optional[pulumi.Input[str]] = None,
                 proposal: Optional[pulumi.Input[str]] = None,
                 split_include_service: Optional[pulumi.Input[str]] = None,
                 wizard_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VPNIPsecPhase1InterfaceLegacy resource.
        :param pulumi.Input[str] interface: Local physical, aggregate, or VLAN outgoing interface.
        :param pulumi.Input[str] psksecret: Pre-shared secret for PSK authentication.
        :param pulumi.Input[str] remote_gw: IPv4 address of the remote gateway's external interface.
        :param pulumi.Input[str] type: Remote gateway type.
        :param pulumi.Input[str] authmethod: Authentication method.
        :param pulumi.Input[str] authmethod_remote: Authentication method (remote side).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] certificates: Names of signed personal certificates.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] ipv4_split_exclude: IPv4 subnets that should not be sent over the IPsec tunnel.
        :param pulumi.Input[str] ipv4_split_include: IPv4 split-include subnets.
        :param pulumi.Input[str] mode_cfg: Enable/disable configuration method.
        :param pulumi.Input[str] name: IPsec remote gateway name.
        :param pulumi.Input[str] peer: Accept this peer certificate.
        :param pulumi.Input[str] peergrp: Accept this peer certificate group.
        :param pulumi.Input[str] peerid: Accept this peer identity.
        :param pulumi.Input[str] peertype: Accept this peer type.
        :param pulumi.Input[str] proposal: Phase1 proposal.
        :param pulumi.Input[str] split_include_service: Split-include services.
        :param pulumi.Input[str] wizard_type: GUI VPN Wizard Type.
        """
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "psksecret", psksecret)
        pulumi.set(__self__, "remote_gw", remote_gw)
        pulumi.set(__self__, "type", type)
        if authmethod is not None:
            pulumi.set(__self__, "authmethod", authmethod)
        if authmethod_remote is not None:
            pulumi.set(__self__, "authmethod_remote", authmethod_remote)
        if certificates is not None:
            pulumi.set(__self__, "certificates", certificates)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if ipv4_split_exclude is not None:
            pulumi.set(__self__, "ipv4_split_exclude", ipv4_split_exclude)
        if ipv4_split_include is not None:
            pulumi.set(__self__, "ipv4_split_include", ipv4_split_include)
        if mode_cfg is not None:
            pulumi.set(__self__, "mode_cfg", mode_cfg)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peer is not None:
            pulumi.set(__self__, "peer", peer)
        if peergrp is not None:
            pulumi.set(__self__, "peergrp", peergrp)
        if peerid is not None:
            pulumi.set(__self__, "peerid", peerid)
        if peertype is not None:
            pulumi.set(__self__, "peertype", peertype)
        if proposal is not None:
            pulumi.set(__self__, "proposal", proposal)
        if split_include_service is not None:
            pulumi.set(__self__, "split_include_service", split_include_service)
        if wizard_type is not None:
            pulumi.set(__self__, "wizard_type", wizard_type)

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Input[str]:
        """
        Local physical, aggregate, or VLAN outgoing interface.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def psksecret(self) -> pulumi.Input[str]:
        """
        Pre-shared secret for PSK authentication.
        """
        return pulumi.get(self, "psksecret")

    @psksecret.setter
    def psksecret(self, value: pulumi.Input[str]):
        pulumi.set(self, "psksecret", value)

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> pulumi.Input[str]:
        """
        IPv4 address of the remote gateway's external interface.
        """
        return pulumi.get(self, "remote_gw")

    @remote_gw.setter
    def remote_gw(self, value: pulumi.Input[str]):
        pulumi.set(self, "remote_gw", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Remote gateway type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def authmethod(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication method.
        """
        return pulumi.get(self, "authmethod")

    @authmethod.setter
    def authmethod(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authmethod", value)

    @property
    @pulumi.getter(name="authmethodRemote")
    def authmethod_remote(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication method (remote side).
        """
        return pulumi.get(self, "authmethod_remote")

    @authmethod_remote.setter
    def authmethod_remote(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authmethod_remote", value)

    @property
    @pulumi.getter
    def certificates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Names of signed personal certificates.
        """
        return pulumi.get(self, "certificates")

    @certificates.setter
    def certificates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "certificates", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="ipv4SplitExclude")
    def ipv4_split_exclude(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 subnets that should not be sent over the IPsec tunnel.
        """
        return pulumi.get(self, "ipv4_split_exclude")

    @ipv4_split_exclude.setter
    def ipv4_split_exclude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_split_exclude", value)

    @property
    @pulumi.getter(name="ipv4SplitInclude")
    def ipv4_split_include(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 split-include subnets.
        """
        return pulumi.get(self, "ipv4_split_include")

    @ipv4_split_include.setter
    def ipv4_split_include(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_split_include", value)

    @property
    @pulumi.getter(name="modeCfg")
    def mode_cfg(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable configuration method.
        """
        return pulumi.get(self, "mode_cfg")

    @mode_cfg.setter
    def mode_cfg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode_cfg", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IPsec remote gateway name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def peer(self) -> Optional[pulumi.Input[str]]:
        """
        Accept this peer certificate.
        """
        return pulumi.get(self, "peer")

    @peer.setter
    def peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer", value)

    @property
    @pulumi.getter
    def peergrp(self) -> Optional[pulumi.Input[str]]:
        """
        Accept this peer certificate group.
        """
        return pulumi.get(self, "peergrp")

    @peergrp.setter
    def peergrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peergrp", value)

    @property
    @pulumi.getter
    def peerid(self) -> Optional[pulumi.Input[str]]:
        """
        Accept this peer identity.
        """
        return pulumi.get(self, "peerid")

    @peerid.setter
    def peerid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peerid", value)

    @property
    @pulumi.getter
    def peertype(self) -> Optional[pulumi.Input[str]]:
        """
        Accept this peer type.
        """
        return pulumi.get(self, "peertype")

    @peertype.setter
    def peertype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peertype", value)

    @property
    @pulumi.getter
    def proposal(self) -> Optional[pulumi.Input[str]]:
        """
        Phase1 proposal.
        """
        return pulumi.get(self, "proposal")

    @proposal.setter
    def proposal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proposal", value)

    @property
    @pulumi.getter(name="splitIncludeService")
    def split_include_service(self) -> Optional[pulumi.Input[str]]:
        """
        Split-include services.
        """
        return pulumi.get(self, "split_include_service")

    @split_include_service.setter
    def split_include_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_include_service", value)

    @property
    @pulumi.getter(name="wizardType")
    def wizard_type(self) -> Optional[pulumi.Input[str]]:
        """
        GUI VPN Wizard Type.
        """
        return pulumi.get(self, "wizard_type")

    @wizard_type.setter
    def wizard_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wizard_type", value)


@pulumi.input_type
class _VPNIPsecPhase1InterfaceLegacyState:
    def __init__(__self__, *,
                 authmethod: Optional[pulumi.Input[str]] = None,
                 authmethod_remote: Optional[pulumi.Input[str]] = None,
                 certificates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ipv4_split_exclude: Optional[pulumi.Input[str]] = None,
                 ipv4_split_include: Optional[pulumi.Input[str]] = None,
                 mode_cfg: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 peer: Optional[pulumi.Input[str]] = None,
                 peergrp: Optional[pulumi.Input[str]] = None,
                 peerid: Optional[pulumi.Input[str]] = None,
                 peertype: Optional[pulumi.Input[str]] = None,
                 proposal: Optional[pulumi.Input[str]] = None,
                 psksecret: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 split_include_service: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 wizard_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VPNIPsecPhase1InterfaceLegacy resources.
        :param pulumi.Input[str] authmethod: Authentication method.
        :param pulumi.Input[str] authmethod_remote: Authentication method (remote side).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] certificates: Names of signed personal certificates.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] interface: Local physical, aggregate, or VLAN outgoing interface.
        :param pulumi.Input[str] ipv4_split_exclude: IPv4 subnets that should not be sent over the IPsec tunnel.
        :param pulumi.Input[str] ipv4_split_include: IPv4 split-include subnets.
        :param pulumi.Input[str] mode_cfg: Enable/disable configuration method.
        :param pulumi.Input[str] name: IPsec remote gateway name.
        :param pulumi.Input[str] peer: Accept this peer certificate.
        :param pulumi.Input[str] peergrp: Accept this peer certificate group.
        :param pulumi.Input[str] peerid: Accept this peer identity.
        :param pulumi.Input[str] peertype: Accept this peer type.
        :param pulumi.Input[str] proposal: Phase1 proposal.
        :param pulumi.Input[str] psksecret: Pre-shared secret for PSK authentication.
        :param pulumi.Input[str] remote_gw: IPv4 address of the remote gateway's external interface.
        :param pulumi.Input[str] split_include_service: Split-include services.
        :param pulumi.Input[str] type: Remote gateway type.
        :param pulumi.Input[str] wizard_type: GUI VPN Wizard Type.
        """
        if authmethod is not None:
            pulumi.set(__self__, "authmethod", authmethod)
        if authmethod_remote is not None:
            pulumi.set(__self__, "authmethod_remote", authmethod_remote)
        if certificates is not None:
            pulumi.set(__self__, "certificates", certificates)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if ipv4_split_exclude is not None:
            pulumi.set(__self__, "ipv4_split_exclude", ipv4_split_exclude)
        if ipv4_split_include is not None:
            pulumi.set(__self__, "ipv4_split_include", ipv4_split_include)
        if mode_cfg is not None:
            pulumi.set(__self__, "mode_cfg", mode_cfg)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peer is not None:
            pulumi.set(__self__, "peer", peer)
        if peergrp is not None:
            pulumi.set(__self__, "peergrp", peergrp)
        if peerid is not None:
            pulumi.set(__self__, "peerid", peerid)
        if peertype is not None:
            pulumi.set(__self__, "peertype", peertype)
        if proposal is not None:
            pulumi.set(__self__, "proposal", proposal)
        if psksecret is not None:
            pulumi.set(__self__, "psksecret", psksecret)
        if remote_gw is not None:
            pulumi.set(__self__, "remote_gw", remote_gw)
        if split_include_service is not None:
            pulumi.set(__self__, "split_include_service", split_include_service)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if wizard_type is not None:
            pulumi.set(__self__, "wizard_type", wizard_type)

    @property
    @pulumi.getter
    def authmethod(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication method.
        """
        return pulumi.get(self, "authmethod")

    @authmethod.setter
    def authmethod(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authmethod", value)

    @property
    @pulumi.getter(name="authmethodRemote")
    def authmethod_remote(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication method (remote side).
        """
        return pulumi.get(self, "authmethod_remote")

    @authmethod_remote.setter
    def authmethod_remote(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authmethod_remote", value)

    @property
    @pulumi.getter
    def certificates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Names of signed personal certificates.
        """
        return pulumi.get(self, "certificates")

    @certificates.setter
    def certificates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "certificates", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        Local physical, aggregate, or VLAN outgoing interface.
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="ipv4SplitExclude")
    def ipv4_split_exclude(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 subnets that should not be sent over the IPsec tunnel.
        """
        return pulumi.get(self, "ipv4_split_exclude")

    @ipv4_split_exclude.setter
    def ipv4_split_exclude(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_split_exclude", value)

    @property
    @pulumi.getter(name="ipv4SplitInclude")
    def ipv4_split_include(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 split-include subnets.
        """
        return pulumi.get(self, "ipv4_split_include")

    @ipv4_split_include.setter
    def ipv4_split_include(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_split_include", value)

    @property
    @pulumi.getter(name="modeCfg")
    def mode_cfg(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable configuration method.
        """
        return pulumi.get(self, "mode_cfg")

    @mode_cfg.setter
    def mode_cfg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode_cfg", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        IPsec remote gateway name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def peer(self) -> Optional[pulumi.Input[str]]:
        """
        Accept this peer certificate.
        """
        return pulumi.get(self, "peer")

    @peer.setter
    def peer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer", value)

    @property
    @pulumi.getter
    def peergrp(self) -> Optional[pulumi.Input[str]]:
        """
        Accept this peer certificate group.
        """
        return pulumi.get(self, "peergrp")

    @peergrp.setter
    def peergrp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peergrp", value)

    @property
    @pulumi.getter
    def peerid(self) -> Optional[pulumi.Input[str]]:
        """
        Accept this peer identity.
        """
        return pulumi.get(self, "peerid")

    @peerid.setter
    def peerid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peerid", value)

    @property
    @pulumi.getter
    def peertype(self) -> Optional[pulumi.Input[str]]:
        """
        Accept this peer type.
        """
        return pulumi.get(self, "peertype")

    @peertype.setter
    def peertype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peertype", value)

    @property
    @pulumi.getter
    def proposal(self) -> Optional[pulumi.Input[str]]:
        """
        Phase1 proposal.
        """
        return pulumi.get(self, "proposal")

    @proposal.setter
    def proposal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proposal", value)

    @property
    @pulumi.getter
    def psksecret(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-shared secret for PSK authentication.
        """
        return pulumi.get(self, "psksecret")

    @psksecret.setter
    def psksecret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "psksecret", value)

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address of the remote gateway's external interface.
        """
        return pulumi.get(self, "remote_gw")

    @remote_gw.setter
    def remote_gw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_gw", value)

    @property
    @pulumi.getter(name="splitIncludeService")
    def split_include_service(self) -> Optional[pulumi.Input[str]]:
        """
        Split-include services.
        """
        return pulumi.get(self, "split_include_service")

    @split_include_service.setter
    def split_include_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_include_service", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Remote gateway type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="wizardType")
    def wizard_type(self) -> Optional[pulumi.Input[str]]:
        """
        GUI VPN Wizard Type.
        """
        return pulumi.get(self, "wizard_type")

    @wizard_type.setter
    def wizard_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wizard_type", value)


class VPNIPsecPhase1InterfaceLegacy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authmethod: Optional[pulumi.Input[str]] = None,
                 authmethod_remote: Optional[pulumi.Input[str]] = None,
                 certificates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ipv4_split_exclude: Optional[pulumi.Input[str]] = None,
                 ipv4_split_include: Optional[pulumi.Input[str]] = None,
                 mode_cfg: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 peer: Optional[pulumi.Input[str]] = None,
                 peergrp: Optional[pulumi.Input[str]] = None,
                 peerid: Optional[pulumi.Input[str]] = None,
                 peertype: Optional[pulumi.Input[str]] = None,
                 proposal: Optional[pulumi.Input[str]] = None,
                 psksecret: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 split_include_service: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 wizard_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to use phase1-interface to define a phase 1 definition for a route-based (interface mode) IPsec VPN tunnel that generates authentication and encryption keys automatically.

        !> **Warning:** The resource will be deprecated and replaced by new resource `VpnIpsecPhase1Interface`, we recommend that you use the new resource.

        ## Example Usage

        VPNIPsecPhase1InterfaceLegacy needs to be set with fortios_vpn_ipsec_phase2interface. See section fortios_vpn_ipsec_phase2interface.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] authmethod: Authentication method.
        :param pulumi.Input[str] authmethod_remote: Authentication method (remote side).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] certificates: Names of signed personal certificates.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] interface: Local physical, aggregate, or VLAN outgoing interface.
        :param pulumi.Input[str] ipv4_split_exclude: IPv4 subnets that should not be sent over the IPsec tunnel.
        :param pulumi.Input[str] ipv4_split_include: IPv4 split-include subnets.
        :param pulumi.Input[str] mode_cfg: Enable/disable configuration method.
        :param pulumi.Input[str] name: IPsec remote gateway name.
        :param pulumi.Input[str] peer: Accept this peer certificate.
        :param pulumi.Input[str] peergrp: Accept this peer certificate group.
        :param pulumi.Input[str] peerid: Accept this peer identity.
        :param pulumi.Input[str] peertype: Accept this peer type.
        :param pulumi.Input[str] proposal: Phase1 proposal.
        :param pulumi.Input[str] psksecret: Pre-shared secret for PSK authentication.
        :param pulumi.Input[str] remote_gw: IPv4 address of the remote gateway's external interface.
        :param pulumi.Input[str] split_include_service: Split-include services.
        :param pulumi.Input[str] type: Remote gateway type.
        :param pulumi.Input[str] wizard_type: GUI VPN Wizard Type.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VPNIPsecPhase1InterfaceLegacyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to use phase1-interface to define a phase 1 definition for a route-based (interface mode) IPsec VPN tunnel that generates authentication and encryption keys automatically.

        !> **Warning:** The resource will be deprecated and replaced by new resource `VpnIpsecPhase1Interface`, we recommend that you use the new resource.

        ## Example Usage

        VPNIPsecPhase1InterfaceLegacy needs to be set with fortios_vpn_ipsec_phase2interface. See section fortios_vpn_ipsec_phase2interface.

        :param str resource_name: The name of the resource.
        :param VPNIPsecPhase1InterfaceLegacyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VPNIPsecPhase1InterfaceLegacyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authmethod: Optional[pulumi.Input[str]] = None,
                 authmethod_remote: Optional[pulumi.Input[str]] = None,
                 certificates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 ipv4_split_exclude: Optional[pulumi.Input[str]] = None,
                 ipv4_split_include: Optional[pulumi.Input[str]] = None,
                 mode_cfg: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 peer: Optional[pulumi.Input[str]] = None,
                 peergrp: Optional[pulumi.Input[str]] = None,
                 peerid: Optional[pulumi.Input[str]] = None,
                 peertype: Optional[pulumi.Input[str]] = None,
                 proposal: Optional[pulumi.Input[str]] = None,
                 psksecret: Optional[pulumi.Input[str]] = None,
                 remote_gw: Optional[pulumi.Input[str]] = None,
                 split_include_service: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 wizard_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VPNIPsecPhase1InterfaceLegacyArgs.__new__(VPNIPsecPhase1InterfaceLegacyArgs)

            __props__.__dict__["authmethod"] = authmethod
            __props__.__dict__["authmethod_remote"] = authmethod_remote
            __props__.__dict__["certificates"] = certificates
            __props__.__dict__["comments"] = comments
            if interface is None and not opts.urn:
                raise TypeError("Missing required property 'interface'")
            __props__.__dict__["interface"] = interface
            __props__.__dict__["ipv4_split_exclude"] = ipv4_split_exclude
            __props__.__dict__["ipv4_split_include"] = ipv4_split_include
            __props__.__dict__["mode_cfg"] = mode_cfg
            __props__.__dict__["name"] = name
            __props__.__dict__["peer"] = peer
            __props__.__dict__["peergrp"] = peergrp
            __props__.__dict__["peerid"] = peerid
            __props__.__dict__["peertype"] = peertype
            __props__.__dict__["proposal"] = proposal
            if psksecret is None and not opts.urn:
                raise TypeError("Missing required property 'psksecret'")
            __props__.__dict__["psksecret"] = psksecret
            if remote_gw is None and not opts.urn:
                raise TypeError("Missing required property 'remote_gw'")
            __props__.__dict__["remote_gw"] = remote_gw
            __props__.__dict__["split_include_service"] = split_include_service
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["wizard_type"] = wizard_type
        super(VPNIPsecPhase1InterfaceLegacy, __self__).__init__(
            'fortios:index/vPNIPsecPhase1InterfaceLegacy:VPNIPsecPhase1InterfaceLegacy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authmethod: Optional[pulumi.Input[str]] = None,
            authmethod_remote: Optional[pulumi.Input[str]] = None,
            certificates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            ipv4_split_exclude: Optional[pulumi.Input[str]] = None,
            ipv4_split_include: Optional[pulumi.Input[str]] = None,
            mode_cfg: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            peer: Optional[pulumi.Input[str]] = None,
            peergrp: Optional[pulumi.Input[str]] = None,
            peerid: Optional[pulumi.Input[str]] = None,
            peertype: Optional[pulumi.Input[str]] = None,
            proposal: Optional[pulumi.Input[str]] = None,
            psksecret: Optional[pulumi.Input[str]] = None,
            remote_gw: Optional[pulumi.Input[str]] = None,
            split_include_service: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            wizard_type: Optional[pulumi.Input[str]] = None) -> 'VPNIPsecPhase1InterfaceLegacy':
        """
        Get an existing VPNIPsecPhase1InterfaceLegacy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] authmethod: Authentication method.
        :param pulumi.Input[str] authmethod_remote: Authentication method (remote side).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] certificates: Names of signed personal certificates.
        :param pulumi.Input[str] comments: Comment.
        :param pulumi.Input[str] interface: Local physical, aggregate, or VLAN outgoing interface.
        :param pulumi.Input[str] ipv4_split_exclude: IPv4 subnets that should not be sent over the IPsec tunnel.
        :param pulumi.Input[str] ipv4_split_include: IPv4 split-include subnets.
        :param pulumi.Input[str] mode_cfg: Enable/disable configuration method.
        :param pulumi.Input[str] name: IPsec remote gateway name.
        :param pulumi.Input[str] peer: Accept this peer certificate.
        :param pulumi.Input[str] peergrp: Accept this peer certificate group.
        :param pulumi.Input[str] peerid: Accept this peer identity.
        :param pulumi.Input[str] peertype: Accept this peer type.
        :param pulumi.Input[str] proposal: Phase1 proposal.
        :param pulumi.Input[str] psksecret: Pre-shared secret for PSK authentication.
        :param pulumi.Input[str] remote_gw: IPv4 address of the remote gateway's external interface.
        :param pulumi.Input[str] split_include_service: Split-include services.
        :param pulumi.Input[str] type: Remote gateway type.
        :param pulumi.Input[str] wizard_type: GUI VPN Wizard Type.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VPNIPsecPhase1InterfaceLegacyState.__new__(_VPNIPsecPhase1InterfaceLegacyState)

        __props__.__dict__["authmethod"] = authmethod
        __props__.__dict__["authmethod_remote"] = authmethod_remote
        __props__.__dict__["certificates"] = certificates
        __props__.__dict__["comments"] = comments
        __props__.__dict__["interface"] = interface
        __props__.__dict__["ipv4_split_exclude"] = ipv4_split_exclude
        __props__.__dict__["ipv4_split_include"] = ipv4_split_include
        __props__.__dict__["mode_cfg"] = mode_cfg
        __props__.__dict__["name"] = name
        __props__.__dict__["peer"] = peer
        __props__.__dict__["peergrp"] = peergrp
        __props__.__dict__["peerid"] = peerid
        __props__.__dict__["peertype"] = peertype
        __props__.__dict__["proposal"] = proposal
        __props__.__dict__["psksecret"] = psksecret
        __props__.__dict__["remote_gw"] = remote_gw
        __props__.__dict__["split_include_service"] = split_include_service
        __props__.__dict__["type"] = type
        __props__.__dict__["wizard_type"] = wizard_type
        return VPNIPsecPhase1InterfaceLegacy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def authmethod(self) -> pulumi.Output[str]:
        """
        Authentication method.
        """
        return pulumi.get(self, "authmethod")

    @property
    @pulumi.getter(name="authmethodRemote")
    def authmethod_remote(self) -> pulumi.Output[str]:
        """
        Authentication method (remote side).
        """
        return pulumi.get(self, "authmethod_remote")

    @property
    @pulumi.getter
    def certificates(self) -> pulumi.Output[Sequence[str]]:
        """
        Names of signed personal certificates.
        """
        return pulumi.get(self, "certificates")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[str]:
        """
        Local physical, aggregate, or VLAN outgoing interface.
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="ipv4SplitExclude")
    def ipv4_split_exclude(self) -> pulumi.Output[str]:
        """
        IPv4 subnets that should not be sent over the IPsec tunnel.
        """
        return pulumi.get(self, "ipv4_split_exclude")

    @property
    @pulumi.getter(name="ipv4SplitInclude")
    def ipv4_split_include(self) -> pulumi.Output[str]:
        """
        IPv4 split-include subnets.
        """
        return pulumi.get(self, "ipv4_split_include")

    @property
    @pulumi.getter(name="modeCfg")
    def mode_cfg(self) -> pulumi.Output[str]:
        """
        Enable/disable configuration method.
        """
        return pulumi.get(self, "mode_cfg")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        IPsec remote gateway name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def peer(self) -> pulumi.Output[str]:
        """
        Accept this peer certificate.
        """
        return pulumi.get(self, "peer")

    @property
    @pulumi.getter
    def peergrp(self) -> pulumi.Output[str]:
        """
        Accept this peer certificate group.
        """
        return pulumi.get(self, "peergrp")

    @property
    @pulumi.getter
    def peerid(self) -> pulumi.Output[str]:
        """
        Accept this peer identity.
        """
        return pulumi.get(self, "peerid")

    @property
    @pulumi.getter
    def peertype(self) -> pulumi.Output[str]:
        """
        Accept this peer type.
        """
        return pulumi.get(self, "peertype")

    @property
    @pulumi.getter
    def proposal(self) -> pulumi.Output[str]:
        """
        Phase1 proposal.
        """
        return pulumi.get(self, "proposal")

    @property
    @pulumi.getter
    def psksecret(self) -> pulumi.Output[str]:
        """
        Pre-shared secret for PSK authentication.
        """
        return pulumi.get(self, "psksecret")

    @property
    @pulumi.getter(name="remoteGw")
    def remote_gw(self) -> pulumi.Output[str]:
        """
        IPv4 address of the remote gateway's external interface.
        """
        return pulumi.get(self, "remote_gw")

    @property
    @pulumi.getter(name="splitIncludeService")
    def split_include_service(self) -> pulumi.Output[str]:
        """
        Split-include services.
        """
        return pulumi.get(self, "split_include_service")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Remote gateway type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="wizardType")
    def wizard_type(self) -> pulumi.Output[str]:
        """
        GUI VPN Wizard Type.
        """
        return pulumi.get(self, "wizard_type")

