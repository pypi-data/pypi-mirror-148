# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IcapProfileArgs', 'IcapProfile']

@pulumi.input_type
class IcapProfileArgs:
    def __init__(__self__, *,
                 chunk_encap: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extension_feature: Optional[pulumi.Input[str]] = None,
                 icap_block_log: Optional[pulumi.Input[str]] = None,
                 icap_headers: Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileIcapHeaderArgs']]]] = None,
                 methods: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 preview: Optional[pulumi.Input[str]] = None,
                 preview_data_length: Optional[pulumi.Input[int]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 request: Optional[pulumi.Input[str]] = None,
                 request_failure: Optional[pulumi.Input[str]] = None,
                 request_path: Optional[pulumi.Input[str]] = None,
                 request_server: Optional[pulumi.Input[str]] = None,
                 respmod_default_action: Optional[pulumi.Input[str]] = None,
                 respmod_forward_rules: Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleArgs']]]] = None,
                 response: Optional[pulumi.Input[str]] = None,
                 response_failure: Optional[pulumi.Input[str]] = None,
                 response_path: Optional[pulumi.Input[str]] = None,
                 response_req_hdr: Optional[pulumi.Input[str]] = None,
                 response_server: Optional[pulumi.Input[str]] = None,
                 scan_progress_interval: Optional[pulumi.Input[int]] = None,
                 streaming_content_bypass: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a IcapProfile resource.
        :param pulumi.Input[str] chunk_encap: Enable/disable chunked encapsulation (default = disable). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dynamic_sort_subtable: true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
        :param pulumi.Input[str] extension_feature: Enable/disable ICAP extension features. Valid values: `scan-progress`.
        :param pulumi.Input[str] icap_block_log: Enable/disable UTM log when infection found (default = disable). Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['IcapProfileIcapHeaderArgs']]] icap_headers: Configure ICAP forwarded request headers. The structure of `icap_headers` block is documented below.
        :param pulumi.Input[str] methods: The allowed HTTP methods that will be sent to ICAP server for further processing. Valid values: `delete`, `get`, `head`, `options`, `post`, `put`, `trace`, `other`.
        :param pulumi.Input[str] name: Address name.
        :param pulumi.Input[str] preview: Enable/disable preview of data to ICAP server. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] preview_data_length: Preview data length to be sent to ICAP server.
        :param pulumi.Input[str] replacemsg_group: Replacement message group.
        :param pulumi.Input[str] request: Enable/disable whether an HTTP request is passed to an ICAP server. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] request_failure: Action to take if the ICAP server cannot be contacted when processing an HTTP request. Valid values: `error`, `bypass`.
        :param pulumi.Input[str] request_path: Path component of the ICAP URI that identifies the HTTP request processing service.
        :param pulumi.Input[str] request_server: ICAP server to use for an HTTP request.
        :param pulumi.Input[str] respmod_default_action: Default action to ICAP response modification (respmod) processing. Valid values: `forward`, `bypass`.
        :param pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleArgs']]] respmod_forward_rules: ICAP response mode forward rules. The structure of `respmod_forward_rules` block is documented below.
        :param pulumi.Input[str] response: Enable/disable whether an HTTP response is passed to an ICAP server. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] response_failure: Action to take if the ICAP server cannot be contacted when processing an HTTP response. Valid values: `error`, `bypass`.
        :param pulumi.Input[str] response_path: Path component of the ICAP URI that identifies the HTTP response processing service.
        :param pulumi.Input[str] response_req_hdr: Enable/disable addition of req-hdr for ICAP response modification (respmod) processing. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] response_server: ICAP server to use for an HTTP response.
        :param pulumi.Input[int] scan_progress_interval: Scan progress interval value.
        :param pulumi.Input[str] streaming_content_bypass: Enable/disable bypassing of ICAP server for streaming content. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if chunk_encap is not None:
            pulumi.set(__self__, "chunk_encap", chunk_encap)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if extension_feature is not None:
            pulumi.set(__self__, "extension_feature", extension_feature)
        if icap_block_log is not None:
            pulumi.set(__self__, "icap_block_log", icap_block_log)
        if icap_headers is not None:
            pulumi.set(__self__, "icap_headers", icap_headers)
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if preview is not None:
            pulumi.set(__self__, "preview", preview)
        if preview_data_length is not None:
            pulumi.set(__self__, "preview_data_length", preview_data_length)
        if replacemsg_group is not None:
            pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if request_failure is not None:
            pulumi.set(__self__, "request_failure", request_failure)
        if request_path is not None:
            pulumi.set(__self__, "request_path", request_path)
        if request_server is not None:
            pulumi.set(__self__, "request_server", request_server)
        if respmod_default_action is not None:
            pulumi.set(__self__, "respmod_default_action", respmod_default_action)
        if respmod_forward_rules is not None:
            pulumi.set(__self__, "respmod_forward_rules", respmod_forward_rules)
        if response is not None:
            pulumi.set(__self__, "response", response)
        if response_failure is not None:
            pulumi.set(__self__, "response_failure", response_failure)
        if response_path is not None:
            pulumi.set(__self__, "response_path", response_path)
        if response_req_hdr is not None:
            pulumi.set(__self__, "response_req_hdr", response_req_hdr)
        if response_server is not None:
            pulumi.set(__self__, "response_server", response_server)
        if scan_progress_interval is not None:
            pulumi.set(__self__, "scan_progress_interval", scan_progress_interval)
        if streaming_content_bypass is not None:
            pulumi.set(__self__, "streaming_content_bypass", streaming_content_bypass)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="chunkEncap")
    def chunk_encap(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable chunked encapsulation (default = disable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "chunk_encap")

    @chunk_encap.setter
    def chunk_encap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chunk_encap", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="extensionFeature")
    def extension_feature(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ICAP extension features. Valid values: `scan-progress`.
        """
        return pulumi.get(self, "extension_feature")

    @extension_feature.setter
    def extension_feature(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extension_feature", value)

    @property
    @pulumi.getter(name="icapBlockLog")
    def icap_block_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable UTM log when infection found (default = disable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "icap_block_log")

    @icap_block_log.setter
    def icap_block_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icap_block_log", value)

    @property
    @pulumi.getter(name="icapHeaders")
    def icap_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileIcapHeaderArgs']]]]:
        """
        Configure ICAP forwarded request headers. The structure of `icap_headers` block is documented below.
        """
        return pulumi.get(self, "icap_headers")

    @icap_headers.setter
    def icap_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileIcapHeaderArgs']]]]):
        pulumi.set(self, "icap_headers", value)

    @property
    @pulumi.getter
    def methods(self) -> Optional[pulumi.Input[str]]:
        """
        The allowed HTTP methods that will be sent to ICAP server for further processing. Valid values: `delete`, `get`, `head`, `options`, `post`, `put`, `trace`, `other`.
        """
        return pulumi.get(self, "methods")

    @methods.setter
    def methods(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "methods", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def preview(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable preview of data to ICAP server. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "preview")

    @preview.setter
    def preview(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preview", value)

    @property
    @pulumi.getter(name="previewDataLength")
    def preview_data_length(self) -> Optional[pulumi.Input[int]]:
        """
        Preview data length to be sent to ICAP server.
        """
        return pulumi.get(self, "preview_data_length")

    @preview_data_length.setter
    def preview_data_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preview_data_length", value)

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> Optional[pulumi.Input[str]]:
        """
        Replacement message group.
        """
        return pulumi.get(self, "replacemsg_group")

    @replacemsg_group.setter
    def replacemsg_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_group", value)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable whether an HTTP request is passed to an ICAP server. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter(name="requestFailure")
    def request_failure(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take if the ICAP server cannot be contacted when processing an HTTP request. Valid values: `error`, `bypass`.
        """
        return pulumi.get(self, "request_failure")

    @request_failure.setter
    def request_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_failure", value)

    @property
    @pulumi.getter(name="requestPath")
    def request_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path component of the ICAP URI that identifies the HTTP request processing service.
        """
        return pulumi.get(self, "request_path")

    @request_path.setter
    def request_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_path", value)

    @property
    @pulumi.getter(name="requestServer")
    def request_server(self) -> Optional[pulumi.Input[str]]:
        """
        ICAP server to use for an HTTP request.
        """
        return pulumi.get(self, "request_server")

    @request_server.setter
    def request_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_server", value)

    @property
    @pulumi.getter(name="respmodDefaultAction")
    def respmod_default_action(self) -> Optional[pulumi.Input[str]]:
        """
        Default action to ICAP response modification (respmod) processing. Valid values: `forward`, `bypass`.
        """
        return pulumi.get(self, "respmod_default_action")

    @respmod_default_action.setter
    def respmod_default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "respmod_default_action", value)

    @property
    @pulumi.getter(name="respmodForwardRules")
    def respmod_forward_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleArgs']]]]:
        """
        ICAP response mode forward rules. The structure of `respmod_forward_rules` block is documented below.
        """
        return pulumi.get(self, "respmod_forward_rules")

    @respmod_forward_rules.setter
    def respmod_forward_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleArgs']]]]):
        pulumi.set(self, "respmod_forward_rules", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable whether an HTTP response is passed to an ICAP server. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response", value)

    @property
    @pulumi.getter(name="responseFailure")
    def response_failure(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take if the ICAP server cannot be contacted when processing an HTTP response. Valid values: `error`, `bypass`.
        """
        return pulumi.get(self, "response_failure")

    @response_failure.setter
    def response_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_failure", value)

    @property
    @pulumi.getter(name="responsePath")
    def response_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path component of the ICAP URI that identifies the HTTP response processing service.
        """
        return pulumi.get(self, "response_path")

    @response_path.setter
    def response_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_path", value)

    @property
    @pulumi.getter(name="responseReqHdr")
    def response_req_hdr(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable addition of req-hdr for ICAP response modification (respmod) processing. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "response_req_hdr")

    @response_req_hdr.setter
    def response_req_hdr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_req_hdr", value)

    @property
    @pulumi.getter(name="responseServer")
    def response_server(self) -> Optional[pulumi.Input[str]]:
        """
        ICAP server to use for an HTTP response.
        """
        return pulumi.get(self, "response_server")

    @response_server.setter
    def response_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_server", value)

    @property
    @pulumi.getter(name="scanProgressInterval")
    def scan_progress_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Scan progress interval value.
        """
        return pulumi.get(self, "scan_progress_interval")

    @scan_progress_interval.setter
    def scan_progress_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scan_progress_interval", value)

    @property
    @pulumi.getter(name="streamingContentBypass")
    def streaming_content_bypass(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable bypassing of ICAP server for streaming content. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "streaming_content_bypass")

    @streaming_content_bypass.setter
    def streaming_content_bypass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "streaming_content_bypass", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


@pulumi.input_type
class _IcapProfileState:
    def __init__(__self__, *,
                 chunk_encap: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extension_feature: Optional[pulumi.Input[str]] = None,
                 icap_block_log: Optional[pulumi.Input[str]] = None,
                 icap_headers: Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileIcapHeaderArgs']]]] = None,
                 methods: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 preview: Optional[pulumi.Input[str]] = None,
                 preview_data_length: Optional[pulumi.Input[int]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 request: Optional[pulumi.Input[str]] = None,
                 request_failure: Optional[pulumi.Input[str]] = None,
                 request_path: Optional[pulumi.Input[str]] = None,
                 request_server: Optional[pulumi.Input[str]] = None,
                 respmod_default_action: Optional[pulumi.Input[str]] = None,
                 respmod_forward_rules: Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleArgs']]]] = None,
                 response: Optional[pulumi.Input[str]] = None,
                 response_failure: Optional[pulumi.Input[str]] = None,
                 response_path: Optional[pulumi.Input[str]] = None,
                 response_req_hdr: Optional[pulumi.Input[str]] = None,
                 response_server: Optional[pulumi.Input[str]] = None,
                 scan_progress_interval: Optional[pulumi.Input[int]] = None,
                 streaming_content_bypass: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering IcapProfile resources.
        :param pulumi.Input[str] chunk_encap: Enable/disable chunked encapsulation (default = disable). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dynamic_sort_subtable: true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
        :param pulumi.Input[str] extension_feature: Enable/disable ICAP extension features. Valid values: `scan-progress`.
        :param pulumi.Input[str] icap_block_log: Enable/disable UTM log when infection found (default = disable). Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input['IcapProfileIcapHeaderArgs']]] icap_headers: Configure ICAP forwarded request headers. The structure of `icap_headers` block is documented below.
        :param pulumi.Input[str] methods: The allowed HTTP methods that will be sent to ICAP server for further processing. Valid values: `delete`, `get`, `head`, `options`, `post`, `put`, `trace`, `other`.
        :param pulumi.Input[str] name: Address name.
        :param pulumi.Input[str] preview: Enable/disable preview of data to ICAP server. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] preview_data_length: Preview data length to be sent to ICAP server.
        :param pulumi.Input[str] replacemsg_group: Replacement message group.
        :param pulumi.Input[str] request: Enable/disable whether an HTTP request is passed to an ICAP server. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] request_failure: Action to take if the ICAP server cannot be contacted when processing an HTTP request. Valid values: `error`, `bypass`.
        :param pulumi.Input[str] request_path: Path component of the ICAP URI that identifies the HTTP request processing service.
        :param pulumi.Input[str] request_server: ICAP server to use for an HTTP request.
        :param pulumi.Input[str] respmod_default_action: Default action to ICAP response modification (respmod) processing. Valid values: `forward`, `bypass`.
        :param pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleArgs']]] respmod_forward_rules: ICAP response mode forward rules. The structure of `respmod_forward_rules` block is documented below.
        :param pulumi.Input[str] response: Enable/disable whether an HTTP response is passed to an ICAP server. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] response_failure: Action to take if the ICAP server cannot be contacted when processing an HTTP response. Valid values: `error`, `bypass`.
        :param pulumi.Input[str] response_path: Path component of the ICAP URI that identifies the HTTP response processing service.
        :param pulumi.Input[str] response_req_hdr: Enable/disable addition of req-hdr for ICAP response modification (respmod) processing. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] response_server: ICAP server to use for an HTTP response.
        :param pulumi.Input[int] scan_progress_interval: Scan progress interval value.
        :param pulumi.Input[str] streaming_content_bypass: Enable/disable bypassing of ICAP server for streaming content. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        if chunk_encap is not None:
            pulumi.set(__self__, "chunk_encap", chunk_encap)
        if dynamic_sort_subtable is not None:
            pulumi.set(__self__, "dynamic_sort_subtable", dynamic_sort_subtable)
        if extension_feature is not None:
            pulumi.set(__self__, "extension_feature", extension_feature)
        if icap_block_log is not None:
            pulumi.set(__self__, "icap_block_log", icap_block_log)
        if icap_headers is not None:
            pulumi.set(__self__, "icap_headers", icap_headers)
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if preview is not None:
            pulumi.set(__self__, "preview", preview)
        if preview_data_length is not None:
            pulumi.set(__self__, "preview_data_length", preview_data_length)
        if replacemsg_group is not None:
            pulumi.set(__self__, "replacemsg_group", replacemsg_group)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if request_failure is not None:
            pulumi.set(__self__, "request_failure", request_failure)
        if request_path is not None:
            pulumi.set(__self__, "request_path", request_path)
        if request_server is not None:
            pulumi.set(__self__, "request_server", request_server)
        if respmod_default_action is not None:
            pulumi.set(__self__, "respmod_default_action", respmod_default_action)
        if respmod_forward_rules is not None:
            pulumi.set(__self__, "respmod_forward_rules", respmod_forward_rules)
        if response is not None:
            pulumi.set(__self__, "response", response)
        if response_failure is not None:
            pulumi.set(__self__, "response_failure", response_failure)
        if response_path is not None:
            pulumi.set(__self__, "response_path", response_path)
        if response_req_hdr is not None:
            pulumi.set(__self__, "response_req_hdr", response_req_hdr)
        if response_server is not None:
            pulumi.set(__self__, "response_server", response_server)
        if scan_progress_interval is not None:
            pulumi.set(__self__, "scan_progress_interval", scan_progress_interval)
        if streaming_content_bypass is not None:
            pulumi.set(__self__, "streaming_content_bypass", streaming_content_bypass)
        if vdomparam is not None:
            pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter(name="chunkEncap")
    def chunk_encap(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable chunked encapsulation (default = disable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "chunk_encap")

    @chunk_encap.setter
    def chunk_encap(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chunk_encap", value)

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> Optional[pulumi.Input[str]]:
        """
        true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @dynamic_sort_subtable.setter
    def dynamic_sort_subtable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_sort_subtable", value)

    @property
    @pulumi.getter(name="extensionFeature")
    def extension_feature(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable ICAP extension features. Valid values: `scan-progress`.
        """
        return pulumi.get(self, "extension_feature")

    @extension_feature.setter
    def extension_feature(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extension_feature", value)

    @property
    @pulumi.getter(name="icapBlockLog")
    def icap_block_log(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable UTM log when infection found (default = disable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "icap_block_log")

    @icap_block_log.setter
    def icap_block_log(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icap_block_log", value)

    @property
    @pulumi.getter(name="icapHeaders")
    def icap_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileIcapHeaderArgs']]]]:
        """
        Configure ICAP forwarded request headers. The structure of `icap_headers` block is documented below.
        """
        return pulumi.get(self, "icap_headers")

    @icap_headers.setter
    def icap_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileIcapHeaderArgs']]]]):
        pulumi.set(self, "icap_headers", value)

    @property
    @pulumi.getter
    def methods(self) -> Optional[pulumi.Input[str]]:
        """
        The allowed HTTP methods that will be sent to ICAP server for further processing. Valid values: `delete`, `get`, `head`, `options`, `post`, `put`, `trace`, `other`.
        """
        return pulumi.get(self, "methods")

    @methods.setter
    def methods(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "methods", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def preview(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable preview of data to ICAP server. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "preview")

    @preview.setter
    def preview(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preview", value)

    @property
    @pulumi.getter(name="previewDataLength")
    def preview_data_length(self) -> Optional[pulumi.Input[int]]:
        """
        Preview data length to be sent to ICAP server.
        """
        return pulumi.get(self, "preview_data_length")

    @preview_data_length.setter
    def preview_data_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "preview_data_length", value)

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> Optional[pulumi.Input[str]]:
        """
        Replacement message group.
        """
        return pulumi.get(self, "replacemsg_group")

    @replacemsg_group.setter
    def replacemsg_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacemsg_group", value)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable whether an HTTP request is passed to an ICAP server. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter(name="requestFailure")
    def request_failure(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take if the ICAP server cannot be contacted when processing an HTTP request. Valid values: `error`, `bypass`.
        """
        return pulumi.get(self, "request_failure")

    @request_failure.setter
    def request_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_failure", value)

    @property
    @pulumi.getter(name="requestPath")
    def request_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path component of the ICAP URI that identifies the HTTP request processing service.
        """
        return pulumi.get(self, "request_path")

    @request_path.setter
    def request_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_path", value)

    @property
    @pulumi.getter(name="requestServer")
    def request_server(self) -> Optional[pulumi.Input[str]]:
        """
        ICAP server to use for an HTTP request.
        """
        return pulumi.get(self, "request_server")

    @request_server.setter
    def request_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_server", value)

    @property
    @pulumi.getter(name="respmodDefaultAction")
    def respmod_default_action(self) -> Optional[pulumi.Input[str]]:
        """
        Default action to ICAP response modification (respmod) processing. Valid values: `forward`, `bypass`.
        """
        return pulumi.get(self, "respmod_default_action")

    @respmod_default_action.setter
    def respmod_default_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "respmod_default_action", value)

    @property
    @pulumi.getter(name="respmodForwardRules")
    def respmod_forward_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleArgs']]]]:
        """
        ICAP response mode forward rules. The structure of `respmod_forward_rules` block is documented below.
        """
        return pulumi.get(self, "respmod_forward_rules")

    @respmod_forward_rules.setter
    def respmod_forward_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IcapProfileRespmodForwardRuleArgs']]]]):
        pulumi.set(self, "respmod_forward_rules", value)

    @property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable whether an HTTP response is passed to an ICAP server. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response", value)

    @property
    @pulumi.getter(name="responseFailure")
    def response_failure(self) -> Optional[pulumi.Input[str]]:
        """
        Action to take if the ICAP server cannot be contacted when processing an HTTP response. Valid values: `error`, `bypass`.
        """
        return pulumi.get(self, "response_failure")

    @response_failure.setter
    def response_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_failure", value)

    @property
    @pulumi.getter(name="responsePath")
    def response_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path component of the ICAP URI that identifies the HTTP response processing service.
        """
        return pulumi.get(self, "response_path")

    @response_path.setter
    def response_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_path", value)

    @property
    @pulumi.getter(name="responseReqHdr")
    def response_req_hdr(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable addition of req-hdr for ICAP response modification (respmod) processing. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "response_req_hdr")

    @response_req_hdr.setter
    def response_req_hdr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_req_hdr", value)

    @property
    @pulumi.getter(name="responseServer")
    def response_server(self) -> Optional[pulumi.Input[str]]:
        """
        ICAP server to use for an HTTP response.
        """
        return pulumi.get(self, "response_server")

    @response_server.setter
    def response_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_server", value)

    @property
    @pulumi.getter(name="scanProgressInterval")
    def scan_progress_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Scan progress interval value.
        """
        return pulumi.get(self, "scan_progress_interval")

    @scan_progress_interval.setter
    def scan_progress_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scan_progress_interval", value)

    @property
    @pulumi.getter(name="streamingContentBypass")
    def streaming_content_bypass(self) -> Optional[pulumi.Input[str]]:
        """
        Enable/disable bypassing of ICAP server for streaming content. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "streaming_content_bypass")

    @streaming_content_bypass.setter
    def streaming_content_bypass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "streaming_content_bypass", value)

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

    @vdomparam.setter
    def vdomparam(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vdomparam", value)


class IcapProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 chunk_encap: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extension_feature: Optional[pulumi.Input[str]] = None,
                 icap_block_log: Optional[pulumi.Input[str]] = None,
                 icap_headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IcapProfileIcapHeaderArgs']]]]] = None,
                 methods: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 preview: Optional[pulumi.Input[str]] = None,
                 preview_data_length: Optional[pulumi.Input[int]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 request: Optional[pulumi.Input[str]] = None,
                 request_failure: Optional[pulumi.Input[str]] = None,
                 request_path: Optional[pulumi.Input[str]] = None,
                 request_server: Optional[pulumi.Input[str]] = None,
                 respmod_default_action: Optional[pulumi.Input[str]] = None,
                 respmod_forward_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IcapProfileRespmodForwardRuleArgs']]]]] = None,
                 response: Optional[pulumi.Input[str]] = None,
                 response_failure: Optional[pulumi.Input[str]] = None,
                 response_path: Optional[pulumi.Input[str]] = None,
                 response_req_hdr: Optional[pulumi.Input[str]] = None,
                 response_server: Optional[pulumi.Input[str]] = None,
                 scan_progress_interval: Optional[pulumi.Input[int]] = None,
                 streaming_content_bypass: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Configure ICAP profiles.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_fortios as fortios

        trname = fortios.IcapProfile("trname",
            icap_headers=[fortios.IcapProfileIcapHeaderArgs(
                base64_encoding="disable",
                content="$user",
                name="X-Authenticated-User",
            )],
            methods="delete get head options post put trace other",
            request="disable",
            request_failure="error",
            response="disable",
            response_failure="error",
            response_req_hdr="disable",
            streaming_content_bypass="disable")
        ```

        ## Import

        Icap Profile can be imported using any of these accepted formats

        ```sh
         $ pulumi import fortios:index/icapProfile:IcapProfile labelname {{name}}
        ```

         If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
         $ pulumi import fortios:index/icapProfile:IcapProfile labelname {{name}}
        ```

         $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] chunk_encap: Enable/disable chunked encapsulation (default = disable). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dynamic_sort_subtable: true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
        :param pulumi.Input[str] extension_feature: Enable/disable ICAP extension features. Valid values: `scan-progress`.
        :param pulumi.Input[str] icap_block_log: Enable/disable UTM log when infection found (default = disable). Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IcapProfileIcapHeaderArgs']]]] icap_headers: Configure ICAP forwarded request headers. The structure of `icap_headers` block is documented below.
        :param pulumi.Input[str] methods: The allowed HTTP methods that will be sent to ICAP server for further processing. Valid values: `delete`, `get`, `head`, `options`, `post`, `put`, `trace`, `other`.
        :param pulumi.Input[str] name: Address name.
        :param pulumi.Input[str] preview: Enable/disable preview of data to ICAP server. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] preview_data_length: Preview data length to be sent to ICAP server.
        :param pulumi.Input[str] replacemsg_group: Replacement message group.
        :param pulumi.Input[str] request: Enable/disable whether an HTTP request is passed to an ICAP server. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] request_failure: Action to take if the ICAP server cannot be contacted when processing an HTTP request. Valid values: `error`, `bypass`.
        :param pulumi.Input[str] request_path: Path component of the ICAP URI that identifies the HTTP request processing service.
        :param pulumi.Input[str] request_server: ICAP server to use for an HTTP request.
        :param pulumi.Input[str] respmod_default_action: Default action to ICAP response modification (respmod) processing. Valid values: `forward`, `bypass`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IcapProfileRespmodForwardRuleArgs']]]] respmod_forward_rules: ICAP response mode forward rules. The structure of `respmod_forward_rules` block is documented below.
        :param pulumi.Input[str] response: Enable/disable whether an HTTP response is passed to an ICAP server. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] response_failure: Action to take if the ICAP server cannot be contacted when processing an HTTP response. Valid values: `error`, `bypass`.
        :param pulumi.Input[str] response_path: Path component of the ICAP URI that identifies the HTTP response processing service.
        :param pulumi.Input[str] response_req_hdr: Enable/disable addition of req-hdr for ICAP response modification (respmod) processing. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] response_server: ICAP server to use for an HTTP response.
        :param pulumi.Input[int] scan_progress_interval: Scan progress interval value.
        :param pulumi.Input[str] streaming_content_bypass: Enable/disable bypassing of ICAP server for streaming content. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[IcapProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Configure ICAP profiles.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_fortios as fortios

        trname = fortios.IcapProfile("trname",
            icap_headers=[fortios.IcapProfileIcapHeaderArgs(
                base64_encoding="disable",
                content="$user",
                name="X-Authenticated-User",
            )],
            methods="delete get head options post put trace other",
            request="disable",
            request_failure="error",
            response="disable",
            response_failure="error",
            response_req_hdr="disable",
            streaming_content_bypass="disable")
        ```

        ## Import

        Icap Profile can be imported using any of these accepted formats

        ```sh
         $ pulumi import fortios:index/icapProfile:IcapProfile labelname {{name}}
        ```

         If you do not want to import arguments of block$ export "FORTIOS_IMPORT_TABLE"="false"

        ```sh
         $ pulumi import fortios:index/icapProfile:IcapProfile labelname {{name}}
        ```

         $ unset "FORTIOS_IMPORT_TABLE"

        :param str resource_name: The name of the resource.
        :param IcapProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IcapProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 chunk_encap: Optional[pulumi.Input[str]] = None,
                 dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
                 extension_feature: Optional[pulumi.Input[str]] = None,
                 icap_block_log: Optional[pulumi.Input[str]] = None,
                 icap_headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IcapProfileIcapHeaderArgs']]]]] = None,
                 methods: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 preview: Optional[pulumi.Input[str]] = None,
                 preview_data_length: Optional[pulumi.Input[int]] = None,
                 replacemsg_group: Optional[pulumi.Input[str]] = None,
                 request: Optional[pulumi.Input[str]] = None,
                 request_failure: Optional[pulumi.Input[str]] = None,
                 request_path: Optional[pulumi.Input[str]] = None,
                 request_server: Optional[pulumi.Input[str]] = None,
                 respmod_default_action: Optional[pulumi.Input[str]] = None,
                 respmod_forward_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IcapProfileRespmodForwardRuleArgs']]]]] = None,
                 response: Optional[pulumi.Input[str]] = None,
                 response_failure: Optional[pulumi.Input[str]] = None,
                 response_path: Optional[pulumi.Input[str]] = None,
                 response_req_hdr: Optional[pulumi.Input[str]] = None,
                 response_server: Optional[pulumi.Input[str]] = None,
                 scan_progress_interval: Optional[pulumi.Input[int]] = None,
                 streaming_content_bypass: Optional[pulumi.Input[str]] = None,
                 vdomparam: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IcapProfileArgs.__new__(IcapProfileArgs)

            __props__.__dict__["chunk_encap"] = chunk_encap
            __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
            __props__.__dict__["extension_feature"] = extension_feature
            __props__.__dict__["icap_block_log"] = icap_block_log
            __props__.__dict__["icap_headers"] = icap_headers
            __props__.__dict__["methods"] = methods
            __props__.__dict__["name"] = name
            __props__.__dict__["preview"] = preview
            __props__.__dict__["preview_data_length"] = preview_data_length
            __props__.__dict__["replacemsg_group"] = replacemsg_group
            __props__.__dict__["request"] = request
            __props__.__dict__["request_failure"] = request_failure
            __props__.__dict__["request_path"] = request_path
            __props__.__dict__["request_server"] = request_server
            __props__.__dict__["respmod_default_action"] = respmod_default_action
            __props__.__dict__["respmod_forward_rules"] = respmod_forward_rules
            __props__.__dict__["response"] = response
            __props__.__dict__["response_failure"] = response_failure
            __props__.__dict__["response_path"] = response_path
            __props__.__dict__["response_req_hdr"] = response_req_hdr
            __props__.__dict__["response_server"] = response_server
            __props__.__dict__["scan_progress_interval"] = scan_progress_interval
            __props__.__dict__["streaming_content_bypass"] = streaming_content_bypass
            __props__.__dict__["vdomparam"] = vdomparam
        super(IcapProfile, __self__).__init__(
            'fortios:index/icapProfile:IcapProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            chunk_encap: Optional[pulumi.Input[str]] = None,
            dynamic_sort_subtable: Optional[pulumi.Input[str]] = None,
            extension_feature: Optional[pulumi.Input[str]] = None,
            icap_block_log: Optional[pulumi.Input[str]] = None,
            icap_headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IcapProfileIcapHeaderArgs']]]]] = None,
            methods: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            preview: Optional[pulumi.Input[str]] = None,
            preview_data_length: Optional[pulumi.Input[int]] = None,
            replacemsg_group: Optional[pulumi.Input[str]] = None,
            request: Optional[pulumi.Input[str]] = None,
            request_failure: Optional[pulumi.Input[str]] = None,
            request_path: Optional[pulumi.Input[str]] = None,
            request_server: Optional[pulumi.Input[str]] = None,
            respmod_default_action: Optional[pulumi.Input[str]] = None,
            respmod_forward_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IcapProfileRespmodForwardRuleArgs']]]]] = None,
            response: Optional[pulumi.Input[str]] = None,
            response_failure: Optional[pulumi.Input[str]] = None,
            response_path: Optional[pulumi.Input[str]] = None,
            response_req_hdr: Optional[pulumi.Input[str]] = None,
            response_server: Optional[pulumi.Input[str]] = None,
            scan_progress_interval: Optional[pulumi.Input[int]] = None,
            streaming_content_bypass: Optional[pulumi.Input[str]] = None,
            vdomparam: Optional[pulumi.Input[str]] = None) -> 'IcapProfile':
        """
        Get an existing IcapProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] chunk_encap: Enable/disable chunked encapsulation (default = disable). Valid values: `disable`, `enable`.
        :param pulumi.Input[str] dynamic_sort_subtable: true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
        :param pulumi.Input[str] extension_feature: Enable/disable ICAP extension features. Valid values: `scan-progress`.
        :param pulumi.Input[str] icap_block_log: Enable/disable UTM log when infection found (default = disable). Valid values: `disable`, `enable`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IcapProfileIcapHeaderArgs']]]] icap_headers: Configure ICAP forwarded request headers. The structure of `icap_headers` block is documented below.
        :param pulumi.Input[str] methods: The allowed HTTP methods that will be sent to ICAP server for further processing. Valid values: `delete`, `get`, `head`, `options`, `post`, `put`, `trace`, `other`.
        :param pulumi.Input[str] name: Address name.
        :param pulumi.Input[str] preview: Enable/disable preview of data to ICAP server. Valid values: `disable`, `enable`.
        :param pulumi.Input[int] preview_data_length: Preview data length to be sent to ICAP server.
        :param pulumi.Input[str] replacemsg_group: Replacement message group.
        :param pulumi.Input[str] request: Enable/disable whether an HTTP request is passed to an ICAP server. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] request_failure: Action to take if the ICAP server cannot be contacted when processing an HTTP request. Valid values: `error`, `bypass`.
        :param pulumi.Input[str] request_path: Path component of the ICAP URI that identifies the HTTP request processing service.
        :param pulumi.Input[str] request_server: ICAP server to use for an HTTP request.
        :param pulumi.Input[str] respmod_default_action: Default action to ICAP response modification (respmod) processing. Valid values: `forward`, `bypass`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IcapProfileRespmodForwardRuleArgs']]]] respmod_forward_rules: ICAP response mode forward rules. The structure of `respmod_forward_rules` block is documented below.
        :param pulumi.Input[str] response: Enable/disable whether an HTTP response is passed to an ICAP server. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] response_failure: Action to take if the ICAP server cannot be contacted when processing an HTTP response. Valid values: `error`, `bypass`.
        :param pulumi.Input[str] response_path: Path component of the ICAP URI that identifies the HTTP response processing service.
        :param pulumi.Input[str] response_req_hdr: Enable/disable addition of req-hdr for ICAP response modification (respmod) processing. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] response_server: ICAP server to use for an HTTP response.
        :param pulumi.Input[int] scan_progress_interval: Scan progress interval value.
        :param pulumi.Input[str] streaming_content_bypass: Enable/disable bypassing of ICAP server for streaming content. Valid values: `disable`, `enable`.
        :param pulumi.Input[str] vdomparam: Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IcapProfileState.__new__(_IcapProfileState)

        __props__.__dict__["chunk_encap"] = chunk_encap
        __props__.__dict__["dynamic_sort_subtable"] = dynamic_sort_subtable
        __props__.__dict__["extension_feature"] = extension_feature
        __props__.__dict__["icap_block_log"] = icap_block_log
        __props__.__dict__["icap_headers"] = icap_headers
        __props__.__dict__["methods"] = methods
        __props__.__dict__["name"] = name
        __props__.__dict__["preview"] = preview
        __props__.__dict__["preview_data_length"] = preview_data_length
        __props__.__dict__["replacemsg_group"] = replacemsg_group
        __props__.__dict__["request"] = request
        __props__.__dict__["request_failure"] = request_failure
        __props__.__dict__["request_path"] = request_path
        __props__.__dict__["request_server"] = request_server
        __props__.__dict__["respmod_default_action"] = respmod_default_action
        __props__.__dict__["respmod_forward_rules"] = respmod_forward_rules
        __props__.__dict__["response"] = response
        __props__.__dict__["response_failure"] = response_failure
        __props__.__dict__["response_path"] = response_path
        __props__.__dict__["response_req_hdr"] = response_req_hdr
        __props__.__dict__["response_server"] = response_server
        __props__.__dict__["scan_progress_interval"] = scan_progress_interval
        __props__.__dict__["streaming_content_bypass"] = streaming_content_bypass
        __props__.__dict__["vdomparam"] = vdomparam
        return IcapProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="chunkEncap")
    def chunk_encap(self) -> pulumi.Output[str]:
        """
        Enable/disable chunked encapsulation (default = disable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "chunk_encap")

    @property
    @pulumi.getter(name="dynamicSortSubtable")
    def dynamic_sort_subtable(self) -> pulumi.Output[Optional[str]]:
        """
        true or false, set this parameter to true when using dynamic for_each + toset to configure and sort sub-tables, please do not set this parameter when configuring static sub-tables.
        """
        return pulumi.get(self, "dynamic_sort_subtable")

    @property
    @pulumi.getter(name="extensionFeature")
    def extension_feature(self) -> pulumi.Output[str]:
        """
        Enable/disable ICAP extension features. Valid values: `scan-progress`.
        """
        return pulumi.get(self, "extension_feature")

    @property
    @pulumi.getter(name="icapBlockLog")
    def icap_block_log(self) -> pulumi.Output[str]:
        """
        Enable/disable UTM log when infection found (default = disable). Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "icap_block_log")

    @property
    @pulumi.getter(name="icapHeaders")
    def icap_headers(self) -> pulumi.Output[Optional[Sequence['outputs.IcapProfileIcapHeader']]]:
        """
        Configure ICAP forwarded request headers. The structure of `icap_headers` block is documented below.
        """
        return pulumi.get(self, "icap_headers")

    @property
    @pulumi.getter
    def methods(self) -> pulumi.Output[str]:
        """
        The allowed HTTP methods that will be sent to ICAP server for further processing. Valid values: `delete`, `get`, `head`, `options`, `post`, `put`, `trace`, `other`.
        """
        return pulumi.get(self, "methods")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Address name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def preview(self) -> pulumi.Output[str]:
        """
        Enable/disable preview of data to ICAP server. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "preview")

    @property
    @pulumi.getter(name="previewDataLength")
    def preview_data_length(self) -> pulumi.Output[int]:
        """
        Preview data length to be sent to ICAP server.
        """
        return pulumi.get(self, "preview_data_length")

    @property
    @pulumi.getter(name="replacemsgGroup")
    def replacemsg_group(self) -> pulumi.Output[str]:
        """
        Replacement message group.
        """
        return pulumi.get(self, "replacemsg_group")

    @property
    @pulumi.getter
    def request(self) -> pulumi.Output[str]:
        """
        Enable/disable whether an HTTP request is passed to an ICAP server. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "request")

    @property
    @pulumi.getter(name="requestFailure")
    def request_failure(self) -> pulumi.Output[str]:
        """
        Action to take if the ICAP server cannot be contacted when processing an HTTP request. Valid values: `error`, `bypass`.
        """
        return pulumi.get(self, "request_failure")

    @property
    @pulumi.getter(name="requestPath")
    def request_path(self) -> pulumi.Output[str]:
        """
        Path component of the ICAP URI that identifies the HTTP request processing service.
        """
        return pulumi.get(self, "request_path")

    @property
    @pulumi.getter(name="requestServer")
    def request_server(self) -> pulumi.Output[str]:
        """
        ICAP server to use for an HTTP request.
        """
        return pulumi.get(self, "request_server")

    @property
    @pulumi.getter(name="respmodDefaultAction")
    def respmod_default_action(self) -> pulumi.Output[str]:
        """
        Default action to ICAP response modification (respmod) processing. Valid values: `forward`, `bypass`.
        """
        return pulumi.get(self, "respmod_default_action")

    @property
    @pulumi.getter(name="respmodForwardRules")
    def respmod_forward_rules(self) -> pulumi.Output[Optional[Sequence['outputs.IcapProfileRespmodForwardRule']]]:
        """
        ICAP response mode forward rules. The structure of `respmod_forward_rules` block is documented below.
        """
        return pulumi.get(self, "respmod_forward_rules")

    @property
    @pulumi.getter
    def response(self) -> pulumi.Output[str]:
        """
        Enable/disable whether an HTTP response is passed to an ICAP server. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "response")

    @property
    @pulumi.getter(name="responseFailure")
    def response_failure(self) -> pulumi.Output[str]:
        """
        Action to take if the ICAP server cannot be contacted when processing an HTTP response. Valid values: `error`, `bypass`.
        """
        return pulumi.get(self, "response_failure")

    @property
    @pulumi.getter(name="responsePath")
    def response_path(self) -> pulumi.Output[str]:
        """
        Path component of the ICAP URI that identifies the HTTP response processing service.
        """
        return pulumi.get(self, "response_path")

    @property
    @pulumi.getter(name="responseReqHdr")
    def response_req_hdr(self) -> pulumi.Output[str]:
        """
        Enable/disable addition of req-hdr for ICAP response modification (respmod) processing. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "response_req_hdr")

    @property
    @pulumi.getter(name="responseServer")
    def response_server(self) -> pulumi.Output[str]:
        """
        ICAP server to use for an HTTP response.
        """
        return pulumi.get(self, "response_server")

    @property
    @pulumi.getter(name="scanProgressInterval")
    def scan_progress_interval(self) -> pulumi.Output[int]:
        """
        Scan progress interval value.
        """
        return pulumi.get(self, "scan_progress_interval")

    @property
    @pulumi.getter(name="streamingContentBypass")
    def streaming_content_bypass(self) -> pulumi.Output[str]:
        """
        Enable/disable bypassing of ICAP server for streaming content. Valid values: `disable`, `enable`.
        """
        return pulumi.get(self, "streaming_content_bypass")

    @property
    @pulumi.getter
    def vdomparam(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the vdom to which the resource will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
        """
        return pulumi.get(self, "vdomparam")

