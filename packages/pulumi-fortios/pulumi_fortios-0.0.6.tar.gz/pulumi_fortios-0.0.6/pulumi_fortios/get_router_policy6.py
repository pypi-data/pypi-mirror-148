# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetRouterPolicy6Result',
    'AwaitableGetRouterPolicy6Result',
    'get_router_policy6',
    'get_router_policy6_output',
]

@pulumi.output_type
class GetRouterPolicy6Result:
    """
    A collection of values returned by GetRouterPolicy6.
    """
    def __init__(__self__, comments=None, dst=None, end_port=None, gateway=None, id=None, input_device=None, output_device=None, protocol=None, seq_num=None, src=None, start_port=None, status=None, tos=None, tos_mask=None, vdomparam=None):
        if comments and not isinstance(comments, str):
            raise TypeError("Expected argument 'comments' to be a str")
        pulumi.set(__self__, "comments", comments)
        if dst and not isinstance(dst, str):
            raise TypeError("Expected argument 'dst' to be a str")
        pulumi.set(__self__, "dst", dst)
        if end_port and not isinstance(end_port, int):
            raise TypeError("Expected argument 'end_port' to be a int")
        pulumi.set(__self__, "end_port", end_port)
        if gateway and not isinstance(gateway, str):
            raise TypeError("Expected argument 'gateway' to be a str")
        pulumi.set(__self__, "gateway", gateway)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if input_device and not isinstance(input_device, str):
            raise TypeError("Expected argument 'input_device' to be a str")
        pulumi.set(__self__, "input_device", input_device)
        if output_device and not isinstance(output_device, str):
            raise TypeError("Expected argument 'output_device' to be a str")
        pulumi.set(__self__, "output_device", output_device)
        if protocol and not isinstance(protocol, int):
            raise TypeError("Expected argument 'protocol' to be a int")
        pulumi.set(__self__, "protocol", protocol)
        if seq_num and not isinstance(seq_num, int):
            raise TypeError("Expected argument 'seq_num' to be a int")
        pulumi.set(__self__, "seq_num", seq_num)
        if src and not isinstance(src, str):
            raise TypeError("Expected argument 'src' to be a str")
        pulumi.set(__self__, "src", src)
        if start_port and not isinstance(start_port, int):
            raise TypeError("Expected argument 'start_port' to be a int")
        pulumi.set(__self__, "start_port", start_port)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tos and not isinstance(tos, str):
            raise TypeError("Expected argument 'tos' to be a str")
        pulumi.set(__self__, "tos", tos)
        if tos_mask and not isinstance(tos_mask, str):
            raise TypeError("Expected argument 'tos_mask' to be a str")
        pulumi.set(__self__, "tos_mask", tos_mask)
        if vdomparam and not isinstance(vdomparam, str):
            raise TypeError("Expected argument 'vdomparam' to be a str")
        pulumi.set(__self__, "vdomparam", vdomparam)

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        Optional comments.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def dst(self) -> str:
        """
        Destination IPv6 prefix.
        """
        return pulumi.get(self, "dst")

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        """
        End destination port number (1 - 65535).
        """
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter
    def gateway(self) -> str:
        """
        IPv6 address of the gateway.
        """
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inputDevice")
    def input_device(self) -> str:
        """
        Incoming interface name.
        """
        return pulumi.get(self, "input_device")

    @property
    @pulumi.getter(name="outputDevice")
    def output_device(self) -> str:
        """
        Outgoing interface name.
        """
        return pulumi.get(self, "output_device")

    @property
    @pulumi.getter
    def protocol(self) -> int:
        """
        Protocol number (0 - 255).
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="seqNum")
    def seq_num(self) -> int:
        """
        Sequence number.
        """
        return pulumi.get(self, "seq_num")

    @property
    @pulumi.getter
    def src(self) -> str:
        """
        Source IPv6 prefix.
        """
        return pulumi.get(self, "src")

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> int:
        """
        Start destination port number (1 - 65535).
        """
        return pulumi.get(self, "start_port")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Enable/disable this policy route.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tos(self) -> str:
        """
        Type of service bit pattern.
        """
        return pulumi.get(self, "tos")

    @property
    @pulumi.getter(name="tosMask")
    def tos_mask(self) -> str:
        """
        Type of service evaluated bits.
        """
        return pulumi.get(self, "tos_mask")

    @property
    @pulumi.getter
    def vdomparam(self) -> Optional[str]:
        return pulumi.get(self, "vdomparam")


class AwaitableGetRouterPolicy6Result(GetRouterPolicy6Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRouterPolicy6Result(
            comments=self.comments,
            dst=self.dst,
            end_port=self.end_port,
            gateway=self.gateway,
            id=self.id,
            input_device=self.input_device,
            output_device=self.output_device,
            protocol=self.protocol,
            seq_num=self.seq_num,
            src=self.src,
            start_port=self.start_port,
            status=self.status,
            tos=self.tos,
            tos_mask=self.tos_mask,
            vdomparam=self.vdomparam)


def get_router_policy6(seq_num: Optional[int] = None,
                       vdomparam: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRouterPolicy6Result:
    """
    Use this data source to get information on an fortios router policy6


    :param int seq_num: Specify the seq_num of the desired router policy6.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    __args__ = dict()
    __args__['seqNum'] = seq_num
    __args__['vdomparam'] = vdomparam
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('fortios:index/getRouterPolicy6:GetRouterPolicy6', __args__, opts=opts, typ=GetRouterPolicy6Result).value

    return AwaitableGetRouterPolicy6Result(
        comments=__ret__.comments,
        dst=__ret__.dst,
        end_port=__ret__.end_port,
        gateway=__ret__.gateway,
        id=__ret__.id,
        input_device=__ret__.input_device,
        output_device=__ret__.output_device,
        protocol=__ret__.protocol,
        seq_num=__ret__.seq_num,
        src=__ret__.src,
        start_port=__ret__.start_port,
        status=__ret__.status,
        tos=__ret__.tos,
        tos_mask=__ret__.tos_mask,
        vdomparam=__ret__.vdomparam)


@_utilities.lift_output_func(get_router_policy6)
def get_router_policy6_output(seq_num: Optional[pulumi.Input[int]] = None,
                              vdomparam: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRouterPolicy6Result]:
    """
    Use this data source to get information on an fortios router policy6


    :param int seq_num: Specify the seq_num of the desired router policy6.
    :param str vdomparam: Specifies the vdom to which the data source will be applied when the FortiGate unit is running in VDOM mode. Only one vdom can be specified. If you want to inherit the vdom configuration of the provider, please do not set this parameter.
    """
    ...
