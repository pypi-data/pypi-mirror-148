{"version":3,"sources":["pages/RunDetail/NotesTab/NotesTab.tsx","pages/RunDetail/hooks/useNotesResizePanel.tsx","pages/RunDetail/NotesTab/index.ts","components/ConfirmModal/ConfirmModal.tsx"],"names":["NotesTab","runHash","React","useState","openModal","setOpenModal","useModel","notesModel","isLoading","noteData","notifyData","editorRef","useRef","wrapperRef","leftPanelRef","rightPanelRef","resizeElemRef","frameRef","handleResize","document","addEventListener","startResize","endResize","event","current","style","userSelect","background","cursor","containerWidth","getBoundingClientRect","width","pageX","left","window","cancelAnimationFrame","removeEventListener","useEffect","querySelector","editorInst","mdEditor","el","preview","useNotesResizePanel","initialize","analytics","ANALYTICS_EVENT_KEYS","runDetails","tabs","notes","tabView","destroy","setMarkdown","id","content","onNoteDelete","useCallback","handleCloseModal","handleOpenModal","ref","className","classNames","previewStyle","initialEditType","height","Tooltip","title","color","size","onClick","withOnlyIcon","disabled","name","variant","onNoteUpdate","getMarkdown","onNoteCreate","ConfirmModal","open","onCancel","onSubmit","text","icon","statusType","confirmBtnText","Spinner","length","NotificationContainer","handleClose","onNoteNotificationDelete","data","displayName","memo","props","onClose","aria-labelledby","aria-describedby","PaperProps","elevation","tint","component","weight","description","children","cancelBtnText","autoFocus","defaultProps"],"mappings":"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","file":"static/js/33.js?version=ec35ff805a148a70e0f1","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\nimport { Editor } from '@toast-ui/react-editor';\nimport { Tooltip } from '@material-ui/core';\n\nimport { Button, Icon } from 'components/kit';\nimport NotificationContainer from 'components/NotificationContainer/NotificationContainer';\nimport ConfirmModal from 'components/ConfirmModal/ConfirmModal';\nimport Spinner from 'components/kit/Spinner';\n\nimport { ANALYTICS_EVENT_KEYS } from 'config/analytics/analyticsKeysMap';\n\nimport useModel from 'hooks/model/useModel';\n\nimport * as analytics from 'services/analytics';\nimport notesModel from 'services/models/notes/notesModel';\n\nimport { INoteReqBody } from 'types/services/models/notes/notes';\n\nimport useNotesResizePanel from '../hooks/useNotesResizePanel';\n\nimport { INotesTabProps } from './types';\n\nimport '@toast-ui/editor/dist/toastui-editor.css';\nimport './NotesTab.scss';\n\nfunction NotesTab({ runHash }: INotesTabProps) {\n  const [openModal, setOpenModal] = React.useState(false);\n  const { isLoading, noteData, notifyData } = useModel(notesModel)!;\n  const editorRef = React.useRef<Editor | any>(null);\n  const wrapperRef = React.useRef<any>();\n  useNotesResizePanel(wrapperRef, editorRef);\n\n  React.useEffect(() => {\n    notesModel.initialize(runHash);\n    analytics.pageView(ANALYTICS_EVENT_KEYS.runDetails.tabs.notes.tabView);\n    return () => {\n      notesModel.destroy();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  React.useEffect(() => {\n    editorRef.current.editorInst.setMarkdown(\n      noteData?.id ? noteData?.content : '',\n    );\n  }, [noteData]);\n\n  // CRUD handlers\n  function onNoteSave() {\n    if (noteData?.id) {\n      onNoteUpdate();\n    } else {\n      notesModel.onNoteCreate(runHash, {\n        content: editorRef.current.editorInst.getMarkdown(),\n      } as INoteReqBody);\n    }\n  }\n\n  const onNoteDelete = React.useCallback(() => {\n    handleCloseModal();\n    notesModel.onNoteDelete(runHash);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  function onNoteUpdate(): void {\n    notesModel.onNoteUpdate(runHash, {\n      content: editorRef.current.editorInst.getMarkdown(),\n    } as INoteReqBody);\n  }\n\n  // Confirm modal handlers\n  const handleOpenModal: () => void = React.useCallback(() => {\n    setOpenModal(true);\n  }, []);\n\n  const handleCloseModal: () => void = React.useCallback(() => {\n    setOpenModal(false);\n  }, []);\n\n  return (\n    <section ref={wrapperRef} className='NotesTab'>\n      <div\n        className={classNames('NotesTab__Editor', {\n          isLoading,\n        })}\n      >\n        <Editor\n          previewStyle='vertical'\n          initialEditType='markdown'\n          height='calc(100vh - 146px)'\n          ref={editorRef}\n        />\n        <div className='NotesTab__Editor__actionBtns'>\n          <Tooltip title='Delete Note'>\n            <div>\n              <Button\n                color='secondary'\n                size='small'\n                onClick={handleOpenModal}\n                withOnlyIcon\n                disabled={!noteData?.id}\n              >\n                <Icon name='delete' />\n              </Button>\n            </div>\n          </Tooltip>\n\n          <Tooltip title={`${noteData?.id ? 'Update' : 'Save'} Note`}>\n            <div>\n              <Button variant='contained' size='small' onClick={onNoteSave}>\n                {noteData?.id ? 'Update' : 'Save'}\n              </Button>\n            </div>\n          </Tooltip>\n        </div>\n        <ConfirmModal\n          open={openModal}\n          onCancel={handleCloseModal}\n          onSubmit={onNoteDelete}\n          text='Are you sure you want to delete this Note?'\n          icon={<Icon name='delete' />}\n          title='Please Confirm'\n          statusType='error'\n          confirmBtnText='Delete'\n        />\n        {isLoading && <Spinner />}\n      </div>\n      {notifyData!.length > 0 && (\n        <NotificationContainer\n          handleClose={notesModel.onNoteNotificationDelete}\n          data={notifyData!}\n        />\n      )}\n    </section>\n  );\n}\n\nNotesTab.displayName = 'NotesTab';\n\nexport default React.memo(NotesTab);\n","import React from 'react';\n\nexport default function useNotesResizePanel(wrapperRef: any, editorRef: any) {\n  const leftPanelRef = React.useRef<any>();\n  const rightPanelRef = React.useRef<any>();\n  const resizeElemRef = React.useRef<any>();\n  const frameRef = React.useRef<number>();\n\n  React.useEffect(() => {\n    if (editorRef.current) {\n      resizeElemRef.current = wrapperRef.current.querySelector(\n        '.toastui-editor-md-splitter',\n      );\n      leftPanelRef.current = editorRef.current.editorInst.mdEditor.el;\n      rightPanelRef.current = editorRef.current.editorInst.preview.el;\n      resizeElemRef.current.addEventListener('mousedown', handleResize);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editorRef.current]);\n\n  function handleResize() {\n    document.addEventListener('mousemove', startResize);\n    document.addEventListener('mouseup', endResize);\n  }\n\n  function startResize(event: any): void {\n    wrapperRef.current.style.userSelect = 'none';\n    resizeElemRef.current.style.background = '#89b9f2';\n    wrapperRef.current.style.cursor = 'col-resize';\n\n    if (leftPanelRef.current && rightPanelRef.current && wrapperRef.current) {\n      const containerWidth: number =\n        wrapperRef.current.getBoundingClientRect().width;\n      const width: number =\n        event.pageX - wrapperRef.current.getBoundingClientRect().left;\n      leftPanelRef.current.style.width = `${width}px`;\n      rightPanelRef.current.style.width = `${containerWidth - width}px`;\n    }\n  }\n\n  function endResize(): void {\n    if (frameRef.current) {\n      window.cancelAnimationFrame(frameRef.current);\n    }\n    if (wrapperRef?.current && resizeElemRef?.current) {\n      wrapperRef.current.style.userSelect = 'unset';\n      wrapperRef.current.style.cursor = 'unset';\n      resizeElemRef.current.style.background = '#e8f1fc';\n      document.removeEventListener('mousemove', startResize);\n    }\n  }\n}\n","import NotesTab from './NotesTab';\n\nexport default NotesTab;\n","import React from 'react';\n\nimport { Dialog } from '@material-ui/core';\n\nimport { Button, Text, Icon } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { IConfirmModalProps } from 'types/components/ConfirmModal/ConfirmModal';\n\nimport './ConfirmModal.scss';\n\nfunction ConfirmModal(\n  props: IConfirmModalProps,\n): React.FunctionComponentElement<React.ReactNode> {\n  return (\n    <ErrorBoundary>\n      <Dialog\n        open={props.open}\n        onClose={props.onCancel}\n        aria-labelledby='dialog-title'\n        aria-describedby='dialog-description'\n        PaperProps={{\n          elevation: 10,\n        }}\n        className={`ConfirmModal ConfirmModal__${props.statusType}`}\n      >\n        <div className='ConfirmModal__Body'>\n          <Button\n            size='small'\n            className='ConfirmModal__Close__Icon'\n            color='secondary'\n            withOnlyIcon\n            onClick={props.onCancel}\n          >\n            <Icon name='close' />\n          </Button>\n\n          <div className='ConfirmModal__Title__Container'>\n            <div className='ConfirmModal__Icon'>{props.icon}</div>\n            {props.title && (\n              <Text size={16} tint={100} component='h4' weight={600}>\n                {props.title}\n              </Text>\n            )}\n          </div>\n\n          <div>\n            {props.description && (\n              <Text\n                className='ConfirmModal__description'\n                weight={400}\n                component='p'\n                id='dialog-description'\n              >\n                {props.description}\n              </Text>\n            )}\n\n            <div>\n              {props.text && (\n                <Text\n                  className='ConfirmModal__text'\n                  weight={400}\n                  component='p'\n                  size={14}\n                  id='dialog-description'\n                >\n                  {props.text || ''}\n                </Text>\n              )}\n              {props.children && props.children}\n            </div>\n          </div>\n        </div>\n\n        <div className='ConfirmModal__Footer'>\n          <Button\n            onClick={props.onCancel}\n            className='ConfirmModal__CancelButton'\n          >\n            {props.cancelBtnText}\n          </Button>\n          <Button\n            onClick={props.onSubmit}\n            color='primary'\n            variant='contained'\n            className='ConfirmModal__ConfirmButton'\n            autoFocus\n          >\n            {props.confirmBtnText}\n          </Button>\n        </div>\n      </Dialog>\n    </ErrorBoundary>\n  );\n}\n\nConfirmModal.defaultProps = {\n  confirmBtnText: 'Confirm',\n  cancelBtnText: 'Cancel',\n  statusType: 'info',\n};\n\nConfirmModal.displayName = 'ConfirmModal';\n\nexport default React.memo<IConfirmModalProps>(ConfirmModal);\n"],"sourceRoot":""}