# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['awsipinventory']

package_data = \
{'': ['*'], 'awsipinventory': ['templates/*']}

install_requires = \
['Jinja2>=3.1.1,<4.0.0',
 'PyYAML>=6.0,<7.0',
 'boto3>=1.22.0,<2.0.0',
 'tabulate>=0.8.9,<0.9.0']

entry_points = \
{'console_scripts': ['awsipinventory = awsipinventory:cli']}

setup_kwargs = {
    'name': 'awsipinventory',
    'version': '0.6.2',
    'description': '',
    'long_description': '\n# AWS IP inventory\n\nTool to generate an inventory of all IP addresses in use in an account, one or multiple VPC, or one or multiple subnet.\n\nFeatures:\n\n* Detects the object type that uses the interface (EC2, RDS, etc.); not always possible because this guess is done using some magic from the interface description.\n* Filter by region, VPC and/or subnet\n* Guess a friendly name of the object (EC2 Name tag, for example)\n* Gets project and environment tags\n* Multiple output formats\n* Links to AWS web console for services/objects\n\nOutput formats:\n\n* Console table\n* HTML\n* JSON\n* YAML\n* CSV\n\nSupported services:\n\n* [x] EC2 instances\n* [x] ElastiCache (partially)\n* [x] ELB/ALB (ELBv2)\n* [x] RDS\n* [x] ECS tasks\n* [x] NAT Gateways\n* [x] EFS mount targets\n* [x] Directories\n* [x] Workspaces\n* [x] Lambda\n* [x] CodeBuild (only service, not object)\n* [x] API Gateway VPC link\n* [x] VPC endpoints\n* [x] Route53 Resolver\n* [x] Transit Gateway\n* [x] RDS Proxy\n\nInternally, the script gets the list of [network interfaces](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.describe_network_interfaces),\nand tries to guess to what service and object the interface is attached to; this is not always possible, because there is no a direct property\nto know it, and this must be guessed using regexs and string comparison using the interface description or the requester property.\n\nKeep in mind that some network interfaces are ephemeral, i.e. they live only for a short period of time, like the ones used in Lambda,\nECS tasks, etc. Others have a longer life, like the ones used in "static" EC2 instances.\n\n## Installation\n\nUsing [pipx](https://github.com/pypa/pipx):\n\n```bash\npipx install awsipinventory\n```\n\nCloning the repository, using [Poetry](https://python-poetry.org/):\n\n```bash\ngit clone https://github.com/okelet/awsipinventory\ncd awsipinventory\npoetry install\n```\n\n## Usage\n\nRemember to add `~/.local/bin` to your path if not already done:\n\n```bash\nexport PATH=${PATH}:${HOME}/.local/bin\n```\n\n```text\nusage: awsipinventory [-h] [-l {DEBUG,INFO,WARNING,ERROR,CRITICAL}]\n                      [-f {none,table,html,json,yaml,yml,csv}] [-o OUTPUT]\n                      [--regions [REGIONS [REGIONS ...]]]\n                      [--vpcs [VPCS [VPCS ...]]]\n                      [--subnets [SUBNETS [SUBNETS ...]]]\n                      [--columns [COLUMNS [COLUMNS ...]]]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -l {DEBUG,INFO,WARNING,ERROR,CRITICAL}, --log-level {DEBUG,INFO,WARNING,ERROR,CRITICAL}\n                        Set the logging level\n  -f {none,table,html,json,yaml,yml,csv}, --format {none,table,html,json,yaml,yml,csv}\n                        Output format\n  -o OUTPUT, --output OUTPUT\n                        Output file; defaults to standard output\n  --regions [REGIONS [REGIONS ...]]\n                        Use "all" to get data from all enabled regions\n  --vpcs [VPCS [VPCS ...]]\n                        Restrict results to specific VPCs (must exist in the\n                        account and regions)\n  --subnets [SUBNETS [SUBNETS ...]]\n                        Restrict results to specific subnets (must exist in\n                        the account, VPCs and regions)\n```\n\nRunning from an standard Linux:\n\n```bash\nawsipinventory --format html --output /tmp/inventory.html && firefox /tmp/inventory.html\n```\n\nRunning from WSL:\n\n```bash\nln -s /mnt/c/Program\\ Files/Mozilla\\ Firefox/firefox.exe ~/.local/bin/firefox\nawsipinventory --format html --output /tmp/inventory.html && firefox $(wslpath -w /tmp/inventory.html)\n```\n\nFrom local development environment or cloned repository:\n\n```bash\npoetry run python -m awsipinventory\n```\n\n## Output examples\n\nConsole table:\n\n```text\n+-----------------------+----------+--------------------------+--------------------+--------------------+-------------------+-------------+--------------------------------------+------------------------------+---------+-------------+\n|                VPC ID | VPC name |                Subnet ID |        Subnet name | Private IP address | Public IP address |    Type     |                  ID                  |             Name             | Project | Environment |\n+-----------------------+----------+--------------------------+--------------------+--------------------+-------------------+-------------+--------------------------------------+------------------------------+---------+-------------+\n| vpc-xxxxxxxx          | xxx      | subnet-xxxxxxxx          | xxxxxxxxx          |    10.xxx.x.xxx    |   52.xx.xxx.xxx   |     ec2     |              i-xxxxxxxx              |       xxxxxxxxxxxxxxx        |  xxxxx  |     PRO     |\n| vpc-xxxxxxxx          | xxx      | subnet-xxxxxxxx          | xxxxxxxxx          |    10.xxx.x.xxx    |   52.0.xxx.xxx    |     ec2     |              i-xxxxxxxx              |       xxxxxxxxxxxxxxx        |  xxxxx  |     DEV     |\n| vpc-xxxxxxxx          | xxx      | subnet-xxxxxxxx          | xxxxxxxxx          |    10.xxx.x.xx     |  54.xxx.xxx.xxx   |  workspace  |             ws-xxxxxxxxx             |           xxxxxxx            |         |             |\n| vpc-xxxxxxxx          | xxx      | subnet-xxxxxxxx          | xxxxxxxxx          |    10.xxx.x.xxx    |  34.xxx.xxx.xxx   |  workspace  |             ws-xxxxxxxxx             |            xxxxxx            |         |             |\n| vpc-xxxxxxxx          | xxx      | subnet-xxxxxxxx          | xxxxxxxxx          |    10.xxx.x.xxx    |                   |  directory  |             d-xxxxxxxxxx             |            xxxxx             |         |             |\n| vpc-xxxxxxxx          | xxx      | subnet-xxxxxxxx          | xxxxxxxxx          |    10.xxx.x.xxx    |                   |     rds     |           xxxxxxxxxxxxxxx            |                              |   xxx   |   PRE/DEV   |\n| vpc-xxxxxxxx          | xxx      | subnet-xxxxxxxx          | xxxxxxxxx          |    10.xxx.x.xxx    |                   |  directory  |             d-xxxxxxxxxx             |            xxxxx             |         |             |\n| vpc-xxxxxxxx          | xxx      | subnet-xxxxxxxx          | xxxxxxxxx          |    10.xxx.x.xx     |   23.xx.xxx.xxx   | nat_gateway |        nat-xxxxxxxxxxxxxxx           |            xxxxx             |         |             |\n| vpc-xxxxxxxx          | xxx      | subnet-xxxxxxxx          | xxxxxxxxx          |    10.xxx.x.xxx    |                   |     rds     |           xxxxxxxxxxxxxxx            |                              |         |             |\n| vpc-xxxxxxxx          | xxx      | subnet-xxxxxxxx          | xxxxxxxxx          |    10.xxx.x.xxx    |                   |     rds     |           xxxxxxxxxxxxxxx            |                              |   xxx   |     PRO     |\n| vpc-xxxxxxxx          | xxx      | subnet-xxxxxxxx          | xxxxxxxxx          |    10.xxx.x.xxx    |                   |     dms     |                                      |                              |         |             |\n```\n\nJSON:\n\n```json\n[\n    {\n        "region": "us-east-1",\n        "interface_id": "eni-xxxxxxxxxxxxxxxxx",\n        "interface_type": "interface",\n        "interface_description": "Primary network interface",\n        "interface_requested_id": null,\n        "interface_status": "in-use",\n        "vpc_id": "vpc-xxxxxxxx",\n        "vpc_name": "xxx",\n        "vpc_link": "https://console.aws.amazon.com/vpc/home?region=us-east-1#vpcs:VpcId=vpc-xxxxxxxx;sort=VpcId",\n        "subnet_id": "subnet-xxxxxxxx",\n        "subnet_name": "XXXXXX",\n        "subnet_link": "https://console.aws.amazon.com/vpc/home?region=us-east-1#subnets:SubnetId=subnet-xxxxxxxx;sort=SubnetId",\n        "private_ip_address": "10.xxx.x.xx",\n        "public_ip_address": "52.xx.xxx.xx",\n        "object_type": "ec2",\n        "object_id": "i-xxxxxxxxxxxxxxxxx",\n        "object_name": "XXXXXXX",\n        "object_tag_project": null,\n        "object_tag_environment": "PRO",\n        "object_description": null,\n        "object_console_url": "https://console.aws.amazon.com/ec2/v2/home?region=us-east-1#Instances:search=i-xxxxxxxxxxxxxxxxx;sort=instanceId",\n        "object_service_url": "https://console.aws.amazon.com/ec2/v2/home?region=us-east-1#Instances:"\n    }\n]\n```\n\nHTML:\n\n![img.png](output_html.png)\n\n## Testing package deployment\n\nSet credential environment variables manually, or using another tool, like [AWSume](https://github.com/trek10inc/awsume); then test the application\nusing Docker directly:\n\n```bash\ndocker build -t awsipinventory:latest .\nawsume xxx\ndocker run -it --rm -e AWS_DEFAULT_REGION -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_SESSION_TOKEN awsipinventory:latest --log-level debug -f json\n```\n\nOr using `docker-compose`:\n\n```bash\nawsume xxx\ndocker-compose up --build --force-recreate\ndocker-compose rm -fs\n```\n',
    'author': 'Juan A. S.',
    'author_email': 'okelet@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/okelet/awsipinventory',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.10,<4.0',
}


setup(**setup_kwargs)
