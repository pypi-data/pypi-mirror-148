# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import nnext.main_pb2 as main__pb2


class NNextStub(object):
    """The nnext service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateIndex = channel.unary_unary(
                '/nnext.NNext/CreateIndex',
                request_serializer=main__pb2.Index.SerializeToString,
                response_deserializer=main__pb2.Index.FromString,
                )
        self.ListIndices = channel.unary_unary(
                '/nnext.NNext/ListIndices',
                request_serializer=main__pb2.ListIndicesRequest.SerializeToString,
                response_deserializer=main__pb2.ListIndicesResponse.FromString,
                )
        self.DropIndex = channel.unary_unary(
                '/nnext.NNext/DropIndex',
                request_serializer=main__pb2.Index.SerializeToString,
                response_deserializer=main__pb2.Index.FromString,
                )
        self.GetIndex = channel.unary_unary(
                '/nnext.NNext/GetIndex',
                request_serializer=main__pb2.Index.SerializeToString,
                response_deserializer=main__pb2.Index.FromString,
                )
        self.VectorAdd = channel.unary_unary(
                '/nnext.NNext/VectorAdd',
                request_serializer=main__pb2.VectorAddRequest.SerializeToString,
                response_deserializer=main__pb2.VectorAddResponse.FromString,
                )
        self.VectorGet = channel.unary_unary(
                '/nnext.NNext/VectorGet',
                request_serializer=main__pb2.VectorGetRequest.SerializeToString,
                response_deserializer=main__pb2.VectorGetResponse.FromString,
                )
        self.VectorSearch = channel.unary_unary(
                '/nnext.NNext/VectorSearch',
                request_serializer=main__pb2.VectorSearchRequest.SerializeToString,
                response_deserializer=main__pb2.VectorSearchResponse.FromString,
                )
        self.VectorDelete = channel.unary_unary(
                '/nnext.NNext/VectorDelete',
                request_serializer=main__pb2.VectorDeleteRequest.SerializeToString,
                response_deserializer=main__pb2.VectorDeleteResponse.FromString,
                )
        self.VectorClear = channel.unary_unary(
                '/nnext.NNext/VectorClear',
                request_serializer=main__pb2.VectorClearRequest.SerializeToString,
                response_deserializer=main__pb2.VectorClearResponse.FromString,
                )


class NNextServicer(object):
    """The nnext service definition.
    """

    def CreateIndex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListIndices(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropIndex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIndex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VectorAdd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VectorGet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VectorSearch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VectorDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VectorClear(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NNextServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateIndex,
                    request_deserializer=main__pb2.Index.FromString,
                    response_serializer=main__pb2.Index.SerializeToString,
            ),
            'ListIndices': grpc.unary_unary_rpc_method_handler(
                    servicer.ListIndices,
                    request_deserializer=main__pb2.ListIndicesRequest.FromString,
                    response_serializer=main__pb2.ListIndicesResponse.SerializeToString,
            ),
            'DropIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.DropIndex,
                    request_deserializer=main__pb2.Index.FromString,
                    response_serializer=main__pb2.Index.SerializeToString,
            ),
            'GetIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIndex,
                    request_deserializer=main__pb2.Index.FromString,
                    response_serializer=main__pb2.Index.SerializeToString,
            ),
            'VectorAdd': grpc.unary_unary_rpc_method_handler(
                    servicer.VectorAdd,
                    request_deserializer=main__pb2.VectorAddRequest.FromString,
                    response_serializer=main__pb2.VectorAddResponse.SerializeToString,
            ),
            'VectorGet': grpc.unary_unary_rpc_method_handler(
                    servicer.VectorGet,
                    request_deserializer=main__pb2.VectorGetRequest.FromString,
                    response_serializer=main__pb2.VectorGetResponse.SerializeToString,
            ),
            'VectorSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.VectorSearch,
                    request_deserializer=main__pb2.VectorSearchRequest.FromString,
                    response_serializer=main__pb2.VectorSearchResponse.SerializeToString,
            ),
            'VectorDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.VectorDelete,
                    request_deserializer=main__pb2.VectorDeleteRequest.FromString,
                    response_serializer=main__pb2.VectorDeleteResponse.SerializeToString,
            ),
            'VectorClear': grpc.unary_unary_rpc_method_handler(
                    servicer.VectorClear,
                    request_deserializer=main__pb2.VectorClearRequest.FromString,
                    response_serializer=main__pb2.VectorClearResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nnext.NNext', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NNext(object):
    """The nnext service definition.
    """

    @staticmethod
    def CreateIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nnext.NNext/CreateIndex',
            main__pb2.Index.SerializeToString,
            main__pb2.Index.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListIndices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nnext.NNext/ListIndices',
            main__pb2.ListIndicesRequest.SerializeToString,
            main__pb2.ListIndicesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DropIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nnext.NNext/DropIndex',
            main__pb2.Index.SerializeToString,
            main__pb2.Index.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nnext.NNext/GetIndex',
            main__pb2.Index.SerializeToString,
            main__pb2.Index.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VectorAdd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nnext.NNext/VectorAdd',
            main__pb2.VectorAddRequest.SerializeToString,
            main__pb2.VectorAddResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VectorGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nnext.NNext/VectorGet',
            main__pb2.VectorGetRequest.SerializeToString,
            main__pb2.VectorGetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VectorSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nnext.NNext/VectorSearch',
            main__pb2.VectorSearchRequest.SerializeToString,
            main__pb2.VectorSearchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VectorDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nnext.NNext/VectorDelete',
            main__pb2.VectorDeleteRequest.SerializeToString,
            main__pb2.VectorDeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VectorClear(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nnext.NNext/VectorClear',
            main__pb2.VectorClearRequest.SerializeToString,
            main__pb2.VectorClearResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
