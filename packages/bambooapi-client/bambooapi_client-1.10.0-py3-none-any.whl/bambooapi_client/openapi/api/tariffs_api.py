"""
    Bamboo Flexibility API

     This API provides access to flexibility assets managed by Bamboo Energy: - Create and list flexibility sites & assets - Obtain activations for specific assets - Post and get measurements for specific assets   # noqa: E501

    The version of the OpenAPI document: 1.10.0
    Contact: development@bambooenergy.tech
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from bambooapi_client.openapi.api_client import ApiClient, Endpoint as _Endpoint
from bambooapi_client.openapi.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from bambooapi_client.openapi.model.http400_bad_request import HTTP400BadRequest
from bambooapi_client.openapi.model.http401_unauthorized import HTTP401Unauthorized
from bambooapi_client.openapi.model.http403_forbidden import HTTP403Forbidden
from bambooapi_client.openapi.model.http404_not_found import HTTP404NotFound
from bambooapi_client.openapi.model.http_validation_error import HTTPValidationError
from bambooapi_client.openapi.model.monthly_tariff_create import MonthlyTariffCreate
from bambooapi_client.openapi.model.monthly_tariff_update import MonthlyTariffUpdate
from bambooapi_client.openapi.model.tariff_list_item import TariffListItem
from bambooapi_client.openapi.model.tariff_period_item import TariffPeriodItem


class TariffsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_tariff_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/tariffs',
                'operation_id': 'create_tariff',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'monthly_tariff_create',
                ],
                'required': [
                    'monthly_tariff_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'monthly_tariff_create':
                        (MonthlyTariffCreate,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'monthly_tariff_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_tariff_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/tariffs/{tariff_id}',
                'operation_id': 'delete_tariff',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'tariff_id',
                ],
                'required': [
                    'tariff_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'tariff_id',
                ]
            },
            root_map={
                'validations': {
                    ('tariff_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1000,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tariff_id':
                        (int,),
                },
                'attribute_map': {
                    'tariff_id': 'tariff_id',
                },
                'location_map': {
                    'tariff_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_tariffs_endpoint = _Endpoint(
            settings={
                'response_type': ([TariffListItem],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/tariffs',
                'operation_id': 'list_tariffs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_tariff_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/tariffs/{tariff_id}',
                'operation_id': 'read_tariff',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'tariff_id',
                ],
                'required': [
                    'tariff_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'tariff_id',
                ]
            },
            root_map={
                'validations': {
                    ('tariff_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1000,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tariff_id':
                        (int,),
                },
                'attribute_map': {
                    'tariff_id': 'tariff_id',
                },
                'location_map': {
                    'tariff_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_tariff_schedule_endpoint = _Endpoint(
            settings={
                'response_type': ([TariffPeriodItem],),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/tariffs/{tariff_id}/schedule',
                'operation_id': 'read_tariff_schedule',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'tariff_id',
                    'start_time',
                    'end_time',
                ],
                'required': [
                    'tariff_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tariff_id':
                        (int,),
                    'start_time':
                        (datetime,),
                    'end_time':
                        (datetime,),
                },
                'attribute_map': {
                    'tariff_id': 'tariff_id',
                    'start_time': 'start_time',
                    'end_time': 'end_time',
                },
                'location_map': {
                    'tariff_id': 'path',
                    'start_time': 'query',
                    'end_time': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_tariff_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'BearerAuth'
                ],
                'endpoint_path': '/tariffs/{tariff_id}',
                'operation_id': 'update_tariff',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'tariff_id',
                    'monthly_tariff_update',
                ],
                'required': [
                    'tariff_id',
                    'monthly_tariff_update',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'tariff_id',
                ]
            },
            root_map={
                'validations': {
                    ('tariff_id',): {

                        'inclusive_maximum': 9999,
                        'inclusive_minimum': 1000,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tariff_id':
                        (int,),
                    'monthly_tariff_update':
                        (MonthlyTariffUpdate,),
                },
                'attribute_map': {
                    'tariff_id': 'tariff_id',
                },
                'location_map': {
                    'tariff_id': 'path',
                    'monthly_tariff_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def create_tariff(
        self,
        monthly_tariff_create,
        **kwargs
    ):
        """Create a Tariff  # noqa: E501

        Create a Tariff with all the information.  - **tariff_name**: each tariff must have a unique name - **commercial_name**: For example '6A', '3A'. - **type**: Either 'monthly' or 'seasonal'. - **country_code**: Country code in ISO 3166-1 alpha-2 format. For Spain   use ISO 3166-2:ES. - **periods**: A json object with the periods that will appear in   'timetable'. - **timetable**: A json object with keys being months ('january',   'february', etc.) for 'monthly' tariffs, or keys being 'summer' and   'winter' for 'seasonal' tariffs. In both tariffs, an additional key   'weekend_holiday' must be provided. For each key, an array of 24   period names (strings) is required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_tariff(monthly_tariff_create, async_req=True)
        >>> result = thread.get()

        Args:
            monthly_tariff_create (MonthlyTariffCreate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['monthly_tariff_create'] = \
            monthly_tariff_create
        return self.create_tariff_endpoint.call_with_http_info(**kwargs)

    def delete_tariff(
        self,
        tariff_id,
        **kwargs
    ):
        """Delete an existing Tariff  # noqa: E501

        Delete a Tariff.  **WARNING!: Tariff deletion is PERMANENT!** (no way to recover deleted tariff)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_tariff(tariff_id, async_req=True)
        >>> result = thread.get()

        Args:
            tariff_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['tariff_id'] = \
            tariff_id
        return self.delete_tariff_endpoint.call_with_http_info(**kwargs)

    def list_tariffs(
        self,
        **kwargs
    ):
        """List all tariffs  # noqa: E501

        List all Tariffs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_tariffs(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [TariffListItem]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_tariffs_endpoint.call_with_http_info(**kwargs)

    def read_tariff(
        self,
        tariff_id,
        **kwargs
    ):
        """Info about a specific Tariff  # noqa: E501

        Info about a specific Tariff.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_tariff(tariff_id, async_req=True)
        >>> result = thread.get()

        Args:
            tariff_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['tariff_id'] = \
            tariff_id
        return self.read_tariff_endpoint.call_with_http_info(**kwargs)

    def read_tariff_schedule(
        self,
        tariff_id,
        **kwargs
    ):
        """Return expected tariff schedule between two dates  # noqa: E501

        Return tariff schedule within the given dates.  - **Timestamps are ordered from oldest to newest** - **Data is returned with the same sign convention as when pushed** (not transformation applied)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_tariff_schedule(tariff_id, async_req=True)
        >>> result = thread.get()

        Args:
            tariff_id (int):

        Keyword Args:
            start_time (datetime): Either a timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\". [optional]
            end_time (datetime): Either a timestamp in RFC3339 format, in UTC timezone (\"YYYY-MM-DDT00:00:00Z\"). Make sure to specify the timezone either with \"Z\" or \"+00:00\". [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [TariffPeriodItem]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['tariff_id'] = \
            tariff_id
        return self.read_tariff_schedule_endpoint.call_with_http_info(**kwargs)

    def update_tariff(
        self,
        tariff_id,
        monthly_tariff_update,
        **kwargs
    ):
        """Update an existing Tariff  # noqa: E501

        Update information about a Tariff.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_tariff(tariff_id, monthly_tariff_update, async_req=True)
        >>> result = thread.get()

        Args:
            tariff_id (int):
            monthly_tariff_update (MonthlyTariffUpdate):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['tariff_id'] = \
            tariff_id
        kwargs['monthly_tariff_update'] = \
            monthly_tariff_update
        return self.update_tariff_endpoint.call_with_http_info(**kwargs)

