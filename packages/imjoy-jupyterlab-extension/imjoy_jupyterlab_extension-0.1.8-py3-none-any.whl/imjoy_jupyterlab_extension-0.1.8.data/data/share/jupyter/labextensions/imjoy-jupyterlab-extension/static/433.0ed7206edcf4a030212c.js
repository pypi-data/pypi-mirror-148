"use strict";(self.webpackChunkimjoy_jupyterlab_extension=self.webpackChunkimjoy_jupyterlab_extension||[]).push([[433],{433:(e,n,t)=>{t.r(n),t.d(n,{default:()=>u});var o=t(703),s=t(967),i=t(579),r=t(369),a=t(825),l=t(387),c=t(584),d=t(129);class p extends class{constructor(e){this._event_handlers={},this._once_handlers={},this._debug=e}emit(){throw new Error("emit is not implemented")}on(e,n){this._event_handlers[e]||(this._event_handlers[e]=[]),this._event_handlers[e].push(n)}once(e,n){n.___event_run_once=!0,this.on(e,n)}off(e,n){if(e||n){if(e&&!n)this._event_handlers[e]&&(this._event_handlers[e]=[]);else if(this._event_handlers[e]){const t=this._event_handlers[e].indexOf(n);t>=0&&this._event_handlers[e].splice(t,1)}}else this._event_handlers={}}_fire(e,n){if(this._event_handlers[e]){let t=this._event_handlers[e].length;for(;t--;){const o=this._event_handlers[e][t];try{o(n)}catch(e){console.error(e)}finally{o.___event_run_once&&this._event_handlers[e].splice(t,1)}}}else this._debug&&console.warn("unhandled event",e,n)}}{constructor(e){super(e&&e.debug);const n=e.kernel.createComm("imjoy_rpc");n.open({}),n.onMsg=e=>{const{data:n}=e.content,t=n.__buffer_paths__||[];delete n.__buffer_paths__,function(e,n,t){t=t.map((e=>e instanceof DataView?e.buffer:e instanceof ArrayBuffer?e:e.buffer));for(let o=0;o<n.length;o++){const s=n[o];let i=e;for(let e=0;e<s.length-1;e++)i=i[s[e]];i[s[s.length-1]]=t[o]}}(n,t,e.buffers||[]),"log"===n.type||"info"===n.type?console.log(n.message):"error"===n.type?console.error(n.message):(n.peer_id&&(this._peer_id=n.peer_id),this._fire(n.type,n))},this.comm=n}connect(){}disconnect(){}emit(e){e.peer_id=this._peer_id;const n=function(e){const n=[],t=[];return{state:function e(o,s){var i,r;if("object"==typeof(i=o)&&i&&i.toJSON&&(o=o.toJSON()),Array.isArray(o)){let i=!1;for(let r=0;r<o.length;r++){const a=o[r];if(a)if(a instanceof ArrayBuffer||ArrayBuffer.isView(a))i||(o=o.slice(),i=!0),n.push(ArrayBuffer.isView(a)?a.buffer:a),t.push(s.concat([r])),o[r]=null;else{const n=e(a,s.concat([r]));n!==a&&(i||(o=o.slice(),i=!0),o[r]=n)}}}else if((r=o)&&"object"==typeof r&&r.constructor===Object)for(const i of Object.keys(o)){let r=!1;if(Object.prototype.hasOwnProperty.call(o,i)){const a=o[i];if(a)if(a instanceof ArrayBuffer||ArrayBuffer.isView(a))r||(o={...o},r=!0),n.push(ArrayBuffer.isView(a)?a.buffer:a),t.push(s.concat([i])),delete o[i];else{const n=e(a,s.concat([i]));n!==a&&(r||(o={...o},r=!0),o[i]=n)}}}return o}(e,[]),buffers:n,buffer_paths:t}}(e);n.state.__buffer_paths__=n.buffer_paths,this.comm.send(n.state,{},{},n.buffers)}}async function _(e){if("pyodide"===(await e.info).implementation){const n=`\nimport os\nimport ipykernel\nimport micropip\nimport sys\n\nawait micropip.install([ "imjoy-rpc"])\nimport imjoy_rpc\n\nif 'imjoy' not in sys.modules:\n    sys.modules['imjoy'] = sys.modules['imjoy_rpc']\n\nif 'IMJOY_RPC_CONNECTION' not in os.environ:\n    os.environ['IMJOY_RPC_CONNECTION'] = 'jupyter'\n\nclass Connect():\n    def __init__(self, kernel_id):\n        self.kernel_id = kernel_id\n\n    def get_connection_file(self):\n        return f"kernel-{self.kernel_id}.json"\n\nif not hasattr(ipykernel, 'connect'):\n    ipykernel.connect = Connect("${e.id}")\n`,t=e.requestExecute({code:n});await t.done,console.log("Pyodide kernel patch applied")}}class f{constructor(e){this.baseUrl=e;const n=window.self!==window.top;this.notebookHandlerPromise=new Promise(((e,n)=>{this.resolveNotebookHandler=e,this.rejectNotebookHandler=n}));const t=document.createElement("div");let i;t.id="window-container",document.body.appendChild(t),(0,o.loadImJoyBasicApp)({process_url_query:!0,show_window_title:!1,show_progress_bar:!0,show_empty_window:!0,menu_style:{position:"absolute",right:0,top:"2px"},window_style:{width:"100%",height:"100%"},main_container:null,menu_container:null,expose_api:!1,imjoy_api:{async createWindow(e,n,t){if(!document.getElementById(n.window_id)&&!n.dialog&&document.getElementById(e.id)){const t=document.createElement("div");t.id=n.window_id,t.classList.add("imjoy-inline-window"),document.getElementById(e.id).appendChild(t)}return await i.pm.createWindow(e,n,t)}}}).then((async e=>{console.log("ImJoy Basic App loaded!"),i=e.imjoy;const t={};if(n){const e=new c.ContentsManager;(await(0,s.setupRPC)({name:"ImJoy"})).export({setup(){},async saveContent(n,t){await e.save(n,t)},async openUrl(n,t){t&&(n=-1===n.indexOf("?")?n+"?token="+e.serverSettings.token:n+"&token="+e.serverSettings.token),window.location.href=n}})}async function o(e){if(!t[e])return void console.warn("Kernel is not ready: "+e);const n=t[e].kernel;await n.ready;const o=await i.pm.connectPlugin(new p({kernel:n}));t[e].plugin=o}async function r(n){if(t[n])try{const o=t[n].plugin;if(o&&o.api.run){let n={};o.config.ui&&o.config.ui.indexOf("{")>-1&&(n=await e.imjoy.pm.imjoy_api.showDialog(o,o.config)),await o.api.run({config:n,data:{}})}}catch(n){console.error(n),e.showMessage(`Failed to load the plugin, error: ${n}`)}else console.warn("Kernel is not ready: "+n)}window.connectPlugin=async e=>{e?(await o(e),await r(e)):console.warn("Please upgrade imjoy-rpc(>=0.3.35) by running `pip install -U imjoy-rpc`")},window._connectPlugin=async e=>{await o(e)},window._runPluginOnly=async e=>{await r(e)},this.resolveNotebookHandler((async(e,n,o)=>{const{kernel:s}=e.session;e.kernelChanged.connect((()=>{_(s)}),e),await _(s),t[s._id]={kernel:s},o.firstChild.innerHTML='<img src="https://imjoy.io/static/img/imjoy-logo-black.svg" style="height: 17px;">',o.firstChild.onclick=()=>{r(s._id)}}))})).catch((e=>{console.error(e),this.rejectNotebookHandler(e)}))}createNew(e,n){const t=new a.ToolbarButton({tooltip:"ImJoy JupyterLab Extension (version: 0.1.8)"});return e.toolbar.insertItem(0,"Run ImJoy Plugin",t),n.sessionContext.ready.then((async()=>{(await this.notebookHandlerPromise)(n.sessionContext,e.node,t.node)})),new d.DisposableDelegate((()=>{t.dispose()}))}}const u={id:"imjoy-jupyterlab-extension",requires:[i.IFileBrowserFactory,r.ITranslator],autoStart:!0,activate:async function(e,n,t){const o=t.load("jupyterlab"),{defaultBrowser:s}=n,i=e.serviceManager.settings.serverSettings.baseUrl;e.docRegistry.addWidgetExtension("Notebook",new f(i)),console.log("JupyterLab extension imjoy-jupyterlab-extension is activated!");const r=new URL(window.location);e.started.then((()=>{(async function(e,n,t,o){const s=new URLSearchParams(e),i=s.getAll("load");let r=null;for(let e of i){let n,s="";try{const t=await fetch(e);n=await t.blob(),s=t.headers.get("Content-Type")??""}catch(n){return n.response&&200!==n.response.status&&(n.message=o.__("Could not open URL: %1",e)),(0,a.showErrorMessage)(o.__("Cannot fetch"),n)}try{const o=l.PathExt.basename(e).split("?")[0],i=new File([n],o,{type:s}),a=await t.model.upload(i);r=a.path,console.log("File uploaded: "+a.path)}catch(e){return(0,a.showErrorMessage)(o._p("showErrorMessage","Upload Error"),e)}}let c=s.get("open");"1"===c&&(c=r),c&&n.commands.execute("docmanager:open",{path:c})})(window.location.search,e,s,o).finally((()=>{window.history.pushState(null,"",r)}))}))}}}}]);